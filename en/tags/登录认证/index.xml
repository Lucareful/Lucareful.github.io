<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>登录认证 on Luenci</title>
    <link>https://luenci.com/en/tags/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</link>
    <description>Recent content in 登录认证 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于登录认证这件事</title>
      <link>https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E7%99%BB%E5%BD%95%E8%AE%A4%E7%9C%9F%E8%BF%99%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E7%99%BB%E5%BD%95%E8%AE%A4%E7%9C%9F%E8%BF%99%E4%BB%B6%E4%BA%8B/</guid>
      <description>&lt;h1 id=&#34;聊聊登录认证这件事&#34;&gt;聊聊登录认证这件事&lt;/h1&gt;
&lt;p&gt;这里介绍的是减少登录页面的编写的方法，比如一个公司中有A，B, C 三个系统，对于用户来说希望是我只需要登录（认证）一次就可以访问A，B，C三个系统，而不是进到A系统在A中登录（认证）一次，进到B系统又要在B中登录（认证）一次，进到C系统还要在C中登录（认证）一次，这样一方面会有重复的编码（A，B，C系统的登录页面逻辑），另一方面对用户来说也是非常不友好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请区别于对系统中的资源的权限校验&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;关于ldap&#34;&gt;关于LDAP&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;轻量级目录访问协议 (LDAP) 是一种使应用程序可以快速查询用户信息的协议。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;什么是目录服务&#34;&gt;&lt;strong&gt;“什么是目录服务？&lt;/strong&gt;”&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，支持过滤功能。&lt;/li&gt;
&lt;li&gt;是动态的，灵活的，易扩展的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如：人员组织管理，电话簿，地址簿。&lt;/p&gt;
&lt;h3 id=&#34;ldap介绍&#34;&gt;LDAP介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP（Light Directory Access Portocol），它是基于 X.500 标准的轻量级目录访问协议。&lt;/li&gt;
&lt;li&gt;目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。&lt;/li&gt;
&lt;li&gt;目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LDAP目录服务是由目录数据库和一套访问协议组成的系统。&lt;/p&gt;
&lt;h3 id=&#34;ldap-登录流程&#34;&gt;LDAP 登录流程&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://gitee.com/luenci/RepoImg/raw/master/img/202203131307287.png&#34; alt=&#34;image-20220313130546204&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="聊聊登录认证这件事">聊聊登录认证这件事</h1>
<p>这里介绍的是减少登录页面的编写的方法，比如一个公司中有A，B, C 三个系统，对于用户来说希望是我只需要登录（认证）一次就可以访问A，B，C三个系统，而不是进到A系统在A中登录（认证）一次，进到B系统又要在B中登录（认证）一次，进到C系统还要在C中登录（认证）一次，这样一方面会有重复的编码（A，B，C系统的登录页面逻辑），另一方面对用户来说也是非常不友好。</p>
<p><strong>请区别于对系统中的资源的权限校验</strong></p>
<h2 id="关于ldap">关于LDAP</h2>
<blockquote>
<p>轻量级目录访问协议 (LDAP) 是一种使应用程序可以快速查询用户信息的协议。</p></blockquote>
<h3 id="什么是目录服务"><strong>“什么是目录服务？</strong>”</h3>
<ul>
<li>目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，支持过滤功能。</li>
<li>是动态的，灵活的，易扩展的。</li>
</ul>
<p>如：人员组织管理，电话簿，地址簿。</p>
<h3 id="ldap介绍">LDAP介绍</h3>
<ul>
<li>LDAP（Light Directory Access Portocol），它是基于 X.500 标准的轻量级目录访问协议。</li>
<li>目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。</li>
<li>目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。</li>
</ul>
<p>LDAP目录服务是由目录数据库和一套访问协议组成的系统。</p>
<h3 id="ldap-登录流程">LDAP 登录流程</h3>
<p><img loading="lazy" src="https://gitee.com/luenci/RepoImg/raw/master/img/202203131307287.png" alt="image-20220313130546204"  />
</p>
<h2 id="单点登录singlesign-onsso">单点登录(SingleSign-On，<em>SSO</em>)</h2>
<blockquote>
<p>单点登录 (SSO) 是一种身份验证方法，可让用户仅使用一组凭据即可安全地对多个应用程序和网站进行身份验证</p></blockquote>
<p>SSO的想法就是将<strong>身份提供者（Identity provider，IDP）</strong>，**服务提供者（Service provider，SP）**彻底分离，用户用IDP提供的身份就可以在Web世界畅通无阻。</p>
<p>这里面最让人头疼的其实是安全问题。如何保证用户的身份在逻辑上不能被冒充，才是最难的题目。数据加密，**数字签名（Digital Signature）**等各种密码学知识刚好解决了这个问题。</p>
<p>在2001年由OASIS组织安全服务技术委员会(Security Services Technical Committee)推出了**SAML（安全主张标记语言，Security Assertion Markup Language），**就是提出了对SSO实现的整体技术和安全规范。</p>
<p>SAML是以XML为基础，不用JSON的原因，大概是因为JSON一直在1999年才发明，2004年以后才流行起来逐渐取代了XML。在这之前，XML一直是作为网络通讯的标准格式。</p>
<p>在SAML协议中，实际上也包含了可以发送账号属性等登陆外的扩展部分。SAML协议实际内容很多，就不一一介绍，这里只围绕单点登录来说明。</p>
<p>SAML协议里，约定了参与SSO的三方：浏览器，身份提供者（IDP），服务提供者（SP），以及这三方相互的通讯次序，加密方法，传输数据格式。</p>
<p><img loading="lazy" src="https://gitee.com/luenci/RepoImg/raw/master/img/202203131308877.png" alt="image-20220313130627731"  />
</p>
<h2 id="ldap-和-sso-对比">LDAP 和 SSO 对比</h2>
<ul>
<li>LDAP协议里只负责用户身份的认证，不包含授权过程。在SAML协议中，不仅包含身份认证，还包含是否允许用户访问当前网站内容的授权部分。</li>
<li>LDAP服务与应用之间是毫无条件的充分信任，LDAP几乎是作为应用的远程数据库一般的存在。而在SAML中，SP与IDP不仅需要在事前互相信任（互换签名公钥与IP地址），还要在认证过程中防止他人伪造而进行数据校验。因为SAML定义的SP与IDP是在互联网上相互独立的站点。</li>
<li>同时能注意到SAML协议非常依赖浏览器重定向功能，而LDAP协议都是应用与LDAP服务间的直接通讯。
<ul>
<li>浏览器重定向，其实就是指当前你访问的页面主动跳转到另外一个网站的网页上去，在跳转的过程中可以给这次访问网页的请求上附加上一些数据用来完成数据传输。</li>
</ul>
</li>
</ul>
<h2 id="openid诞生">OpenID诞生</h2>
<p>一个叫布莱德的程序员在1999年的时候，开发了一个类似博客一样的社区网站。运营的还不错，有了好几百万用户。你看，互联网公司，几百万用户，感觉可以开始做自己的SSO登录了。可这次布莱德不想做一个跟巨头们一样的东西，毕竟就算做出来估计也打不过。那要不要尝试去中心化的路子？</p>
<h3 id="中心化">中心化</h3>
<p>去中心化这个概念随着比特币流行而火爆了起来，其实去中心化这个概念很早就有了。</p>
<ul>
<li>中心化的意思就是用户在使用某项服务时，所有的访问请求都需要向同一个主体的服务器地址发送。比如每个微信用户的客户端，都是在跟腾讯公司的服务端交流，A发送给B一条消息，都是A先发送给腾讯服务端，再由腾讯服务端转发给B。A是不能通过其它公司或个人的服务端发送给B消息的。</li>
</ul>
<p>类似这样，所有用户都围着中间一个服务端，就管这种叫中心化的服务。</p>
<h3 id="去中心化">去中心化</h3>
<ul>
<li>就是并没有固定的一个服务商提供服务，任何人只要他愿意的话，都可以作为服务端来给用户服务，用户也可以自由的切换服务端。这种方式显然是不符合已经拥有大量用户的互联网公司的利益，但却迎合了用户和中小企业抱团取暖的需求。</li>
</ul>
<p>于是布莱德在2005开始了一个叫OpenID的项目开发，这个项目在软件社区中得到了响应，越来越多的人参与进来，之后越来越多的人开始使用。OpenID的目的就是建立一个统一的SSO的方式，而不用在意IDP服务的提供方。用户完全可以自己启动一个IDP的服务，或者选择一个用户信任的IDP服务提供方，在这个IDP服务上完成注册。那么只要SP站点能使用OpenID的方式，用户就可以完成登录了。</p>
<h2 id="openid登录流程">OpenID登录流程</h2>
<p><img loading="lazy" src="https://gitee.com/luenci/RepoImg/raw/master/img/202203131307694.png" alt="image-20220313130724620"  />
</p>
<h1 id="常见的两种登录框架">常见的两种登录框架</h1>
<blockquote>
<p>OAuth 2.0 定义了一个协议，即规定了token 的传输方式，JWT 定义了一种token 格式</p></blockquote>
<h2 id="cascentral-authentication-service">CAS（Central Authentication Service）</h2>
<p><strong>CAS框架</strong>：CAS（Central Authentication Service，即：统一认证服务）是实现SSO单点登录的框架。</p>
<p><img loading="lazy" src="https://gitee.com/luenci/RepoImg/raw/master/img/202203131412131.webp" alt="img"  />
</p>
<h2 id="oauth-20"><strong>OAuth 2.0</strong></h2>
<blockquote>
<p>OAuth2是当前授权的行业标准，其重点在于为Web应用程序、桌面应用程序、移动设备以及室内设备的授权流程提供简单的客户端开发方式。它为第三方应用提供对HTTP服务的有限访问，既可以是资源拥有者通过授权允许第三方应用获取HTTP服务，也可以是第三方以自己的名义获取访问权限。</p></blockquote>
<h3 id="角色"><strong>角色</strong></h3>
<p>OAuth2 中主要分为了4种角色</p>
<ul>
<li>resource owner 资源所有者，是能够对受保护的资源授予访问权限的实体，可以是一个用户，这时会被称为end-user。</li>
<li>resource server 资源服务器，持有受保护的资源，允许持有访问令牌(access token)的请求访问受保护资源。</li>
<li>client 客户端，持有资源所有者的授权，代表资源所有者对受保护资源进行访问。</li>
<li>authorization server 授权服务器，对资源所有者的授权进行认证，成功后向客户端发送访问令牌。</li>
</ul>
<p><strong>协议流程</strong></p>
<p>首先看一张来自官方提供的流程图：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span> +--------+                               +---------------+
</span></span><span style="display:flex;"><span> |        |--(1)- Authorization Request -&gt;|   Resource    |
</span></span><span style="display:flex;"><span> |        |                               |     Owner     |
</span></span><span style="display:flex;"><span> |        |&lt;-(2)-- Authorization Grant ---|               |
</span></span><span style="display:flex;"><span> |        |                               +---------------+
</span></span><span style="display:flex;"><span> |        |
</span></span><span style="display:flex;"><span> |        |                               +---------------+
</span></span><span style="display:flex;"><span> |        |--(3)-- Authorization Grant --&gt;| Authorization |
</span></span><span style="display:flex;"><span> | Client |                               |     Server    |
</span></span><span style="display:flex;"><span> |        |&lt;-(4)----- Access Token -------|               |
</span></span><span style="display:flex;"><span> |        |                               +---------------+
</span></span><span style="display:flex;"><span> |        |
</span></span><span style="display:flex;"><span> |        |                               +---------------+
</span></span><span style="display:flex;"><span> |        |--(5)----- Access Token ------&gt;|    Resource   |
</span></span><span style="display:flex;"><span> |        |                               |     Server    |
</span></span><span style="display:flex;"><span> |        |&lt;-(6)--- Protected Resource ---|               |
</span></span><span style="display:flex;"><span> +--------+                               +---------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>这是一张关于 OAuth2 角色的抽象交互流程图，主要包含以下的6个步骤：</p>
<ol>
<li>客户端请求资源所有者的授权；</li>
<li>资源所有者同意授权，返回授权许可(Authorization Grant)，这代表了资源所有者的授权凭证；</li>
<li>客户端携带授权许可要求授权服务器进行认证，请求访问令牌；</li>
<li>授权服务器对客户端进行身份验证，并认证授权许可，如果有效，返回访问令牌；</li>
<li>客户端携带访问许可向资源服务器请求受保护资源的访问；</li>
<li>资源服务器验证访问令牌，如果有效，接受访问请求，返回受保护资源。 <strong>客户端授权类型</strong></li>
</ol>
<h1 id="参考文章">参考文章</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/105674989">https://zhuanlan.zhihu.com/p/105674989</a></li>
<li><a href="https://www.jianshu.com/p/6ba65cc8e399">https://www.jianshu.com/p/6ba65cc8e399</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html">https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html</a></li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>

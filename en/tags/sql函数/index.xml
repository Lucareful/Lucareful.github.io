<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SQL函数 on Luenci</title>
    <link>https://luenci.com/en/tags/sql%E5%87%BD%E6%95%B0/</link>
    <description>Recent content in SQL函数 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/sql%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL数据库函数</title>
      <link>https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;mysql数据库函数&#34;&gt;MySQL数据库函数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;MySQL函数是数据库提供的内置函数，可以帮助用户更加方便地处理表中的数据。MySQL的内置函数，不但可以在SELECT查询语句中使用，同样可以在INSERT、UPDATE、DELETE等语句中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1数学函数&#34;&gt;&lt;strong&gt;1.数学函数：&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MySQL中内置的数学函数见下表：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="mysql数据库函数">MySQL数据库函数</h1>
<ul>
<li>MySQL函数是数据库提供的内置函数，可以帮助用户更加方便地处理表中的数据。MySQL的内置函数，不但可以在SELECT查询语句中使用，同样可以在INSERT、UPDATE、DELETE等语句中使用。</li>
</ul>
<h2 id="1数学函数"><strong>1.数学函数：</strong></h2>
<p>MySQL中内置的数学函数见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>ABS(x)</td>
          <td>返回x的绝对值</td>
      </tr>
      <tr>
          <td>CEIL9x),CEILIN(x)</td>
          <td>返回不小于x的最小整数值</td>
      </tr>
      <tr>
          <td>FLOOR(x)</td>
          <td>返回不大于x的最大整数值</td>
      </tr>
      <tr>
          <td>RAND()</td>
          <td>返回0~1的随机数</td>
      </tr>
      <tr>
          <td>RAND(x)</td>
          <td>返回0~1的随机数，x值相同时返回的随机数相同</td>
      </tr>
      <tr>
          <td>SIGN(x)</td>
          <td>返回参数作为-1、0、1的符号，该符号取决于x值的负、零、正</td>
      </tr>
      <tr>
          <td>PI()</td>
          <td>返回圆周率的值，默认是7位，内部使用完全双精度值</td>
      </tr>
      <tr>
          <td>TRUNCATE(x,y)</td>
          <td>返回数值x保留到小数点y位的值</td>
      </tr>
      <tr>
          <td>ROUND(x)</td>
          <td>返回离x最近的整数</td>
      </tr>
      <tr>
          <td>ROUND(x,y)</td>
          <td>保留x小数点后y位的值，但截断时要进行四舍五入</td>
      </tr>
      <tr>
          <td>POW(x,y),POWER(x,y)</td>
          <td>返回x的y乘方的结果值</td>
      </tr>
      <tr>
          <td>SQRT(x)</td>
          <td>返回非负数x的二次方根</td>
      </tr>
      <tr>
          <td>EXP(x)</td>
          <td>返回e的x乘方后的值（自然对数的底）</td>
      </tr>
      <tr>
          <td>MOD(x,y)</td>
          <td>返回x除以y后的余数</td>
      </tr>
      <tr>
          <td>LOG(x)</td>
          <td>返回x的基数为2的对数</td>
      </tr>
      <tr>
          <td>LOG10(x)</td>
          <td>返回x的基数为10的对数</td>
      </tr>
      <tr>
          <td>RADIANS(x)</td>
          <td>将角度转换为弧度</td>
      </tr>
      <tr>
          <td>DEGREES(x)</td>
          <td>将弧度转化为角度</td>
      </tr>
      <tr>
          <td>SIN(x)</td>
          <td>返回x的正弦，其中x使用弧度</td>
      </tr>
      <tr>
          <td>ASIN(x,y)</td>
          <td>返回x的反正弦，若x不在-1到1范围内则返回NULL</td>
      </tr>
      <tr>
          <td>COS(x)</td>
          <td>返回x的余弦，其中x为弧度</td>
      </tr>
      <tr>
          <td>ACOS(x,y)</td>
          <td>返回x的反余弦，若x不在-1到1范围内则返回NULL</td>
      </tr>
      <tr>
          <td>TAN(x,y)</td>
          <td>返回x的正切，其中x为弧度</td>
      </tr>
      <tr>
          <td>ATAN(x),ATAN2(x)</td>
          <td>返回x的反正切，y确定结果所在象限</td>
      </tr>
      <tr>
          <td>COT(x,y)</td>
          <td>返回x的余切</td>
      </tr>
  </tbody>
</table>
<h2 id="2字符串函数"><strong>2.字符串函数：</strong></h2>
<p>字符串函数是MySQL中最常用的的一类函数，主要用于处理表中的字符串。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CHAR_LENGTH(s)</td>
          <td>返回字符串s的字符数</td>
      </tr>
      <tr>
          <td>LENGTH(s)</td>
          <td>返回字符串的字节长度，一个多字节字符算作多字节</td>
      </tr>
      <tr>
          <td>CONCAT(s)</td>
          <td>返回结果为连接参数产生的字符串。为了避免将数字参数转化为二进制字符串使用SELECT CONCAT(CAST(int_col AS CHAR),char_col)</td>
      </tr>
      <tr>
          <td>CONCAT_WS(x,s1,s2,&hellip;)</td>
          <td>同CONCAT()函数，但每个字符串都要加上x</td>
      </tr>
      <tr>
          <td>INSERT(s1,x,len,s2)</td>
          <td>将字符串s2替换为s1的x位置开始长度为len的字符串</td>
      </tr>
      <tr>
          <td>UPPER(s),UCASE(s)</td>
          <td>将字符串s的所有字母都变成大写字母</td>
      </tr>
      <tr>
          <td>LOWER(s),LCASE(s)</td>
          <td>将字符串s的所有字母都变成小写字母</td>
      </tr>
      <tr>
          <td>LEFT(s,n)</td>
          <td>返回从字符串s开始的最左边n个字符</td>
      </tr>
      <tr>
          <td>RIGHT(s,n)</td>
          <td>返回从字符串s开始的最右边n个字符</td>
      </tr>
      <tr>
          <td>LPAD(s1,len,s2)</td>
          <td>返回字符串s1，其左边由字符串s2填补到len字符长度</td>
      </tr>
      <tr>
          <td>RPAD(s1,len,s2)</td>
          <td>返回字符串s1，其右边被字符串s2填补至len字符长度</td>
      </tr>
      <tr>
          <td>LTRIM(s)</td>
          <td>返回字符串s，其引导空格字符被删除</td>
      </tr>
      <tr>
          <td>RTRIM(s)</td>
          <td>返回字符串s，结尾空格字符被删去</td>
      </tr>
      <tr>
          <td>TRIM(s)</td>
          <td>去掉字符串s开始和结尾处的空格</td>
      </tr>
      <tr>
          <td>TRIM(s1 FROM s)</td>
          <td>去掉字符串s中开始处和结尾处的字符串s1</td>
      </tr>
      <tr>
          <td>REPEAT(s,n)</td>
          <td>将字符串s重复n次</td>
      </tr>
      <tr>
          <td>SPACE(n)</td>
          <td>返回n个空格</td>
      </tr>
      <tr>
          <td>REPLACE(s,s1,s2)</td>
          <td>用字符串s2替代字符串s中的字符串s1</td>
      </tr>
      <tr>
          <td>STRCMP(s1,s2)</td>
          <td>比较字符串s1和s2</td>
      </tr>
      <tr>
          <td>SUBSTRING(s,n,len)</td>
          <td>获取从字符串s第n个位置开始长度为len的字符串</td>
      </tr>
      <tr>
          <td>MID(s,n,len)</td>
          <td>同SUBSTRING()</td>
      </tr>
      <tr>
          <td>LOCATE(s1,s) POSITION(s1 IN s)</td>
          <td>从字符串s中获取s1的开始位置</td>
      </tr>
      <tr>
          <td>INSTR(s,s1)</td>
          <td>从字符串s中获取s1的开始位置</td>
      </tr>
      <tr>
          <td>REVERSE(s)</td>
          <td>将字符串s的顺序反过来</td>
      </tr>
      <tr>
          <td>ELT(n,s1,s2)</td>
          <td>返回第n个字符串</td>
      </tr>
      <tr>
          <td>EXPORT_SET(bits,on,off[, separator[,number_of_bits]])</td>
          <td>返回一个字符串，生成规则为：针对bits的二进制格式，如果位为1则返回一个on值，如果为0则返回一个off值。每个字符串用separator分隔，默认逗号；number_of_bits指定bits的可用位数，默认64位。示例 selectEXPORT_SET(182,&lsquo;Y&rsquo;,&lsquo;N&rsquo;,&rsquo;@&rsquo;,6);</td>
      </tr>
      <tr>
          <td>FIELD(s,s1,s2)</td>
          <td>返回第一个与字符串s匹配的字符串的位置</td>
      </tr>
      <tr>
          <td>FIND_IN_SET(s,s2)</td>
          <td>返回在字符串s2中与s1匹配的字符串的位置</td>
      </tr>
      <tr>
          <td>MAKE_SET(x,s1,s2,&hellip;)</td>
          <td>按x的二进制数从s1,s2,&hellip;,sn中选取字符串</td>
      </tr>
  </tbody>
</table>
<!-- more -->
<h2 id="3日期和时间函数"><strong>3.日期和时间函数：</strong></h2>
<p>日期和时间函数主要用于对表中的日期和时间数据的处理。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CURDATE(),CURRENT_DATE()</td>
          <td>返回当前日期</td>
      </tr>
      <tr>
          <td>CURTIME(),CURRENT_TIME()</td>
          <td>返回当前时间</td>
      </tr>
      <tr>
          <td>NOW(),CURRENT_TIMESTAMP(), LOCALTIME(),SYSDATE(),LOCALTIMESTAMP()</td>
          <td>返回当前日期时间</td>
      </tr>
      <tr>
          <td>UNIX_TIMESTAMP()</td>
          <td>以UNIX时间戳的形式返回当前时间</td>
      </tr>
      <tr>
          <td>UNIX_TIMESTAMP(d)</td>
          <td>将时间d以UNIX时间戳的形式返回</td>
      </tr>
      <tr>
          <td>FROM_UNIXTIME(d)</td>
          <td>把UNIX时间戳的时间转换为普通格式的时间</td>
      </tr>
      <tr>
          <td>UTC_DATE()</td>
          <td>返回UTC（Universal Coordinated Time，国际协调时间）日期</td>
      </tr>
      <tr>
          <td>UTC_TIME()</td>
          <td>返回UTC时间</td>
      </tr>
      <tr>
          <td>MONTH(d)</td>
          <td>返回日期d中的月份值，范围1~12</td>
      </tr>
      <tr>
          <td>MONTHNAME(d)</td>
          <td>返回日期d中的月份名称，如January</td>
      </tr>
      <tr>
          <td>DAYNAME(d)</td>
          <td>返回日期d是星期几，如Monday</td>
      </tr>
      <tr>
          <td>DAYOFWEEK(d)</td>
          <td>返回日期d是星期几，范围1~7，1表示星期日</td>
      </tr>
      <tr>
          <td>WEEKDAY(d)</td>
          <td>返回日期d是星期几，范围0~6，0表示星期一</td>
      </tr>
      <tr>
          <td>WEEK(d)</td>
          <td>计算日期d是本年的第几个星期，范围0~53</td>
      </tr>
      <tr>
          <td>WEEKOFYEAR(d)</td>
          <td>计算日期d是本年的第几个星期，范围1~54</td>
      </tr>
      <tr>
          <td>DAYOFYEAR(d)</td>
          <td>计算日期d是本年的第几天</td>
      </tr>
      <tr>
          <td>DAYOFMONTH(d)</td>
          <td>计算日期d是本月的第几天</td>
      </tr>
      <tr>
          <td>YEAR(d)</td>
          <td>返回日期d中的年份值</td>
      </tr>
      <tr>
          <td>QUARTER(d)</td>
          <td>返回日期d是第几季度，范围1~4</td>
      </tr>
      <tr>
          <td>HOUR(t)</td>
          <td>返回时间t中的小时数</td>
      </tr>
      <tr>
          <td>MINUTE(t)</td>
          <td>返回时间t中的分钟数</td>
      </tr>
      <tr>
          <td>SECOND(t)</td>
          <td>返回时间t中的秒数</td>
      </tr>
      <tr>
          <td>EXTRACT(type FROM d)</td>
          <td>从日期d中获取指定值，type指定返回的值，如YERR HOUR等</td>
      </tr>
      <tr>
          <td>TIME_TO_SEC(t)</td>
          <td>将时间t转换为秒</td>
      </tr>
      <tr>
          <td>SEC_TO_TIME(t)</td>
          <td>将以秒为单位的时间s转换为时分秒的格式</td>
      </tr>
      <tr>
          <td>TO_DAYS(d)</td>
          <td>计算日期d~0000年1月1日的天数</td>
      </tr>
      <tr>
          <td>FROM_DAYS(d)</td>
          <td>计算从0000年1月1日开始n天后的日期</td>
      </tr>
      <tr>
          <td>DATEDIFF(d1,d2)</td>
          <td>计算日期d1~d2之间间隔的天数</td>
      </tr>
      <tr>
          <td>ADDDATE(d,n)</td>
          <td>计算起始日期d加上n天的日期</td>
      </tr>
      <tr>
          <td>ADDDATE(d,INTERVAL expr type)</td>
          <td>计算起始日期d加上一个时段后的日期</td>
      </tr>
      <tr>
          <td>DATE_ADD(d,INTERVAL expr type)</td>
          <td>同ADDDATE(d,INTERVAL expr type)</td>
      </tr>
      <tr>
          <td>SUBDATE(d,n)</td>
          <td>计算起始日期d减去n天后的日期</td>
      </tr>
      <tr>
          <td>SUBDATE(d,INTERVAL expr type)</td>
          <td>计算起始日期d减去一个时段后的日期</td>
      </tr>
      <tr>
          <td>ADDTIME(t,n)</td>
          <td>计算起始时间t加上n秒的时间</td>
      </tr>
      <tr>
          <td>SUBTIME(t,n)</td>
          <td>计算起始时间t减去n秒的时间</td>
      </tr>
      <tr>
          <td>DATE_FROMAT(d,f)</td>
          <td>按照表达式f的要求显示日期d</td>
      </tr>
      <tr>
          <td>TIME_FROMAT(t,f)</td>
          <td>按照表达式f的要求显示时间t</td>
      </tr>
      <tr>
          <td>GET_FORMAT(type,s)</td>
          <td>根据字符串s获取type类型数据的显示格式</td>
      </tr>
  </tbody>
</table>
<h2 id="4条件判断函数"><strong>4.条件判断函数：</strong></h2>
<p>条件函数用来在SQL语句中进行条件判断，根据不同的条件执行不同的SQL语句。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>IF(expr,v1,v2)</td>
          <td>如果表达式expr成立，则执行v1；否则执行v2</td>
      </tr>
      <tr>
          <td>IFNULL(v1,v2)</td>
          <td>如果v1不为空，则显示v1的值；否则显示v2的值</td>
      </tr>
      <tr>
          <td>CASE WHEN expr1 THEN v1 [WHEN expr2 THEN v2&hellip;][ELSE vn] END</td>
          <td>case表示函数开始，end表示函数结束。如果表达式expr1成立，则返回v1的值；如果表达式expr2成立，则返回v2的值。依次类推，最后遇到else时，返回vn的值。</td>
      </tr>
      <tr>
          <td>CASE expr WHEN e1 THEN v1 [WHEN e2 THEN v2&hellip;][ELSE vn] END</td>
          <td>case表示函数开始，end表示函数结束。如果表达式expr取值为e1，则返回v1的值；如果表达式expr取值为e2，则返回v2的值。依次类推，最后遇到else，返回vn的值。</td>
      </tr>
  </tbody>
</table>
<p>示例：select id,grade, CASE WHEN grade&gt;1000000 THEN &lsquo;Very Good&rsquo; WHEN grade&lt;1000000 and grade&gt;=100000 THEN &lsquo;Popularly&rsquo; ELSE &lsquo;Not Good&rsquo; END level from tb_bccd;</p>
<h2 id="5系统信息函数"><strong>5.系统信息函数：</strong></h2>
<p>系统信息函数用来查询MySQL数据库的系统信息。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
          <th>示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>VERSION()</td>
          <td>获取数据库的版本号</td>
          <td>select VERSION();</td>
      </tr>
      <tr>
          <td>CONNECTION_ID()</td>
          <td>获取数据库的连接数</td>
          <td>select CONNECT_ID();</td>
      </tr>
      <tr>
          <td>DATABASE(),SCHEMA()</td>
          <td>获取当前数据库名</td>
          <td>select DATABASE();</td>
      </tr>
      <tr>
          <td>USER(),SYSTEM_USER(),SESSION_USER()</td>
          <td>获取当前用户</td>
          <td>select USER();</td>
      </tr>
      <tr>
          <td>CURRENT_USER()</td>
          <td>获取当前用户</td>
          <td>select CURRENT-USER();</td>
      </tr>
      <tr>
          <td>CHARSET(str)</td>
          <td>获取字符串str的字符集</td>
          <td>select CHARSET(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>COLLATION(str)</td>
          <td>获取字符串str的字符排列方式</td>
          <td>select COLLATION(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>LAST_INSERT_ID()</td>
          <td>获取最近生成的AUTO_INCREMENT值</td>
          <td>select LAST_INSERT_ID();</td>
      </tr>
  </tbody>
</table>
<h2 id="6加密函数"><strong>6.加密函数：</strong></h2>
<p>数据库中有些敏感信息不希望被其他人看到，就可以用加密的方法使这些数据看似乱码。</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
          <th>示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>PASSWORD(str)</td>
          <td>对字符串str加密，不可逆加密</td>
          <td>select PASSWORD(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>MD5(str)</td>
          <td>对字符串str进行加密，用于普通数据</td>
          <td>select MD5(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>ENCODE(str,pswd_str)</td>
          <td>使用字符串pswd_str来加密字符串str，结果是二进制数，用BLOB类型保存</td>
          <td>select ENCODE(&lsquo;mrsoft&rsquo;,&lsquo;mr&rsquo;);</td>
      </tr>
      <tr>
          <td>DECODE(crypt_str,pswd_str)</td>
          <td>使用字符串pswd_str来解密字符串crypt_str，对ENCODE()解码</td>
          <td>select DECODE (ENCODE(&lsquo;mrsoft&rsquo;,&lsquo;mr&rsquo;),&lsquo;mr&rsquo;);</td>
      </tr>
  </tbody>
</table>
<h2 id="7统计函数"><strong>7.统计函数：</strong></h2>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Avg(字段名)</td>
          <td>获取指定列的平均值</td>
      </tr>
      <tr>
          <td>Count(字段名)</td>
          <td>如指定一个记录，会统计该字段中非空记录数，如前面使用DISTINCT，则会统计不同值的记录，相同的值当作一条记录。</td>
      </tr>
      <tr>
          <td>Min(字段名)</td>
          <td>获取指定字段的最小值</td>
      </tr>
      <tr>
          <td>Max(字段名)</td>
          <td>获取指定字段的最大值</td>
      </tr>
      <tr>
          <td>Std(字段名)</td>
          <td>指定字段的标准背离值</td>
      </tr>
      <tr>
          <td>Stdtev(字段名)</td>
          <td>与Std相同</td>
      </tr>
      <tr>
          <td>Sum(字段名)</td>
          <td>指定字段所有记录的总和</td>
      </tr>
  </tbody>
</table>
<h2 id="8其他函数"><strong>8.其他函数：</strong></h2>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>FORMAT(x,n)</td>
          <td>将数字x进行格式化，保留到小数点后n位，四舍五入</td>
      </tr>
      <tr>
          <td>ASCII(x)</td>
          <td>返回字符串s的第一个字符的ASCII码</td>
      </tr>
      <tr>
          <td>BIN(x)</td>
          <td>返回x的二进制编码</td>
      </tr>
      <tr>
          <td>HEX(x)</td>
          <td>返回x的十六进制编码</td>
      </tr>
      <tr>
          <td>OCT(x)</td>
          <td>返回x的八进制编码</td>
      </tr>
      <tr>
          <td>CONV(x,f1,f2)</td>
          <td>将x从f1进制数变成f2进制数</td>
      </tr>
      <tr>
          <td>INET_ATON(IP)</td>
          <td>将IP地址转换为数字表示</td>
      </tr>
      <tr>
          <td>INET_NTOA(N)</td>
          <td>将数字n转换成IP形式</td>
      </tr>
      <tr>
          <td>GET_LOCT(name,time)</td>
          <td>定义一个名称为name持续时长为time秒的锁。锁定成功返回1；如此尝试超时返回0；遇到错误返回NULL。</td>
      </tr>
      <tr>
          <td>RELEASE_LOCK(name)</td>
          <td>解除名称为name的锁。解锁成功返回1，尝试超时返回0，失败返回NULL。</td>
      </tr>
      <tr>
          <td>IF_FREE_LOCK(name)</td>
          <td>判断是否使用名为name的锁，成功返回0，否则返回1。</td>
      </tr>
      <tr>
          <td>BENCHMARK(count,expr)</td>
          <td>将表达式expr重复执行count次，然后返回执行时间</td>
      </tr>
      <tr>
          <td>CONVERT(s USING cs)</td>
          <td>将字符串s的字符集变成cs</td>
      </tr>
      <tr>
          <td>CAST(x AS type), CONVERT(x,type)</td>
          <td>将x变成type类型。这两个函数只对BINARY、CHAR、DATE、DATETIME、TIME、SIGNED INTEGER、UNSIGNED INTEGER类型起作用。只是改变了输出值的数据类型，并没有改变表中字段的类型。</td>
      </tr>
  </tbody>
</table>
]]></content:encoded>
    </item>
  </channel>
</rss>

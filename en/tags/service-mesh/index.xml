<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Service Mesh on Luenci</title>
    <link>https://luenci.com/en/tags/service-mesh/</link>
    <description>Recent content in Service Mesh on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/service-mesh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service Mesh 介绍</title>
      <link>https://luenci.com/en/posts/servicemesh%E6%B5%85%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/servicemesh%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;service-mesh-介绍&#34;&gt;Service Mesh 介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Service Mesh 是微服务时代的 TCP/IP 协议&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​    &lt;strong&gt;一种控制应用程序的不同部分如何相互共享数据的方法&lt;/strong&gt;。与其他用于管理此通信的系统不同，服务网格是内置于应用中的专用基础结构层。这个可见的基础结构层可以记录应用的不同部分的交互程度（或交互程度），因此随着应用的增长，优化通信和避免停机变得更加容易。														&amp;ndash; redhat&lt;/p&gt;
&lt;p&gt;​    Buoyant的CEO William Morgan，也就是Service Mesh这个词的发明人，对Service Mesh的定义：&lt;/p&gt;
&lt;p&gt;​    服务网格是一个&lt;strong&gt;基础设施层&lt;/strong&gt;，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证&lt;strong&gt;请求在这些拓扑中可靠地穿梭&lt;/strong&gt;。在实际应用当中，服务网格通常是由一系列轻量级的&lt;strong&gt;网络代理&lt;/strong&gt;组成的，&lt;strong&gt;它们与应用程序部署在一起，但对应用程序透明。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;演化进程&#34;&gt;演化进程&lt;/h2&gt;
&lt;h3 id=&#34;时代0&#34;&gt;时代0&lt;/h3&gt;
&lt;p&gt;开发人员想象中，不同服务间通信的方式，抽象表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-2a182cea5ab0f7d625776a9446cd596b_1440w.jpg&#34; alt=&#34;img&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;时代1原始通信时代&#34;&gt;时代1：原始通信时代&lt;/h3&gt;
&lt;p&gt;​     然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在TCP协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，&lt;strong&gt;因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-1443e6bebd93d5e6bb1c18197676d29b_1440w.jpg&#34; alt=&#34;img&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="service-mesh-介绍">Service Mesh 介绍</h1>
<blockquote>
<p>Service Mesh 是微服务时代的 TCP/IP 协议</p></blockquote>
<p>​    <strong>一种控制应用程序的不同部分如何相互共享数据的方法</strong>。与其他用于管理此通信的系统不同，服务网格是内置于应用中的专用基础结构层。这个可见的基础结构层可以记录应用的不同部分的交互程度（或交互程度），因此随着应用的增长，优化通信和避免停机变得更加容易。														&ndash; redhat</p>
<p>​    Buoyant的CEO William Morgan，也就是Service Mesh这个词的发明人，对Service Mesh的定义：</p>
<p>​    服务网格是一个<strong>基础设施层</strong>，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证<strong>请求在这些拓扑中可靠地穿梭</strong>。在实际应用当中，服务网格通常是由一系列轻量级的<strong>网络代理</strong>组成的，<strong>它们与应用程序部署在一起，但对应用程序透明。</strong></p>
<h2 id="演化进程">演化进程</h2>
<h3 id="时代0">时代0</h3>
<p>开发人员想象中，不同服务间通信的方式，抽象表示如下：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-2a182cea5ab0f7d625776a9446cd596b_1440w.jpg" alt="img"  />
</p>
<h3 id="时代1原始通信时代">时代1：原始通信时代</h3>
<p>​     然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在TCP协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，<strong>因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。</strong></p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-1443e6bebd93d5e6bb1c18197676d29b_1440w.jpg" alt="img"  />
</p>
<h3 id="时代2tcp时代">时代2：<code>TCP</code>时代</h3>
<p>​    为了避免每个服务都需要自己实现一套相似的网络传输处理逻辑，TCP协议出现了，它解决了网络传输中通用的流量控制问题，将技术栈下移，从服务的实现中抽离出来，成为操作系统网络层的一部分。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-9e6c4c6b4229b947b4efdf63de86f695_1440w.jpg" alt="img"  />
</p>
<h3 id="时代3第一代微服务">时代3：第一代微服务</h3>
<p>​    在TCP出现之后，机器之间的网络通信不再是一个难题，以<code>GFS/BigTable/MapReduce</code>为代表的分布式系统得以蓬勃发展。这时，分布式系统特有的通信语义又出现了，如熔断策略、负载均衡、服务发现、认证和授权、quota限制、trace和监控等等，于是服务根据业务需求来实现一部分所需的通信语义。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-b31cc447637c71b887ac80c0bfa680d4_1440w.jpg" alt="img"  />
</p>
<h3 id="时代4第二代微服务">时代4：第二代微服务</h3>
<p>​    为了避免每个服务都需要自己实现一套分布式系统通信的语义功能，随着技术的发展，一些面向微服务架构的开发框架出现了，如<code>Twitter</code>的<a href="https://link.zhihu.com/?target=https%3A//finagle.github.io/">Finagle</a>、<code>Facebook</code>的<a href="https://link.zhihu.com/?target=https%3A//code.facebook.com/posts/1503205539947302">Proxygen</a>以及<code>Spring Cloud</code>等等，这些框架实现了分布式系统通信需要的各种通用语义功能：如负载均衡和服务发现等，因此<strong>一定程度上屏蔽了这些通信细节，使得开发人员使用较少的框架代码就能开发出健壮的分布式系统。</strong></p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-9382bf9facb290eceed01d998ac2ef44_1440w.jpg" alt="img"  />
</p>
<h3 id="时代5第一代service-mesh">时代5：第一代Service Mesh</h3>
<blockquote>
<p>代表项目：<code>Linkerd</code> 和 <code>Envoy </code>为代表</p></blockquote>
<p>第二代微服务模式看似完美，但开发人员很快又发现，它也存在一些本质问题：</p>
<ul>
<li>其一，虽然框架本身屏蔽了分布式系统通信的一些通用功能实现细节，但<strong>开发者却要花更多精力去掌握和管理复杂的框架本身</strong>，在实际应用中，去追踪和解决框架出现的问题也绝非易事；</li>
<li>其二，<strong>开发框架通常只支持一种或几种特定的语言</strong>，回过头来看文章最开始对微服务的定义，一个重要的特性就是语言无关，但那些没有框架支持的语言编写的服务，很难融入面向微服务的架构体系，想因地制宜的用多种语言实现架构体系中的不同模块也很难做到；</li>
<li>其三，框架以lib库的形式和服务联编，复杂项目依赖时的库版本兼容问题非常棘手，同时，框架库的升级也无法对服务透明，<strong>服务会因为和业务无关的lib库升级而被迫升级</strong>；</li>
</ul>
<p>​    因此以<code>Linkerd</code>，<code>Envoy</code>，<code>NginxMesh</code>为代表的代理模式（边车模式）应运而生，这就是第一代<code>Service Mesh</code>，<strong>它将分布式服务的通信抽象为单独一层，在这一层中实现负载均衡、服务发现、认证授权、监控追踪、流量控制等分布式系统所需要的功能</strong>，作为一个和服务对等的代理服务，和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求，这样上边所说的三个问题也迎刃而解。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-e5660d35a311467c3323f10ebf2fb9a5_1440w.jpg" alt="img"  />
</p>
<p>如果我们从一个全局视角来看，就会得到如下部署图：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-8a9cc161a34d97f36ead06d0abc5b1fb_1440w.jpg" alt="img"  />
</p>
<p>如果我们暂时略去服务，只看Service Mesh的单机组件组成的网络：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-ee0bde35f9ec79bf38feda98550b8f71_1440w.jpg" alt="img"  />
</p>
<p>相信现在，大家已经理解何所谓<code>Service Mesh</code>，也就是服务网格了。它看起来确实就像是一个由若干服务代理所组成的错综复杂的网格。</p>
<h3 id="时代6第二代service-mesh">时代6：第二代Service Mesh</h3>
<blockquote>
<p>代表项目： <a href="https://istio.io/">Istio</a> 和 <a href="https://conduit.io/">Conduit</a></p></blockquote>
<p>​    第一代<code>Service Mesh</code>由<strong>一系列独立运行的单机代理服务构成</strong>，为了提供统一的上层运维入口，演化出了集中式的控制面板，<strong>所有的单机代理组件通过和控制面板交互进行网络拓扑策略的更新和单机数据的汇报</strong>。这就是以<code>Istio</code>为代表的第二代<code>Service Mesh</code>。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-546ed82e25d83a2cb404b0a3f526f9c6_1440w.jpg" alt="img"  />
</p>
<p>只看单机代理组件(数据面板)和控制面板的Service Mesh全局部署视图如下：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-8686840abd3de29e5cb6e8dcfa78182f_1440w.jpg" alt="img"  />
</p>
<h1 id="小结">小结</h1>
<p>Service Mesh具有如下优点：</p>
<ul>
<li>屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑；</li>
<li>真正的语言无关，服务可以用任何语言编写，只需和Service Mesh通信即可；</li>
<li>对应用透明，Service Mesh组件可以单独升级；</li>
</ul>
<p>当然，Service Mesh目前也面临一些挑战：</p>
<ul>
<li>Service Mesh组件以代理模式计算并转发请求，一定程度上会降低通信系统性能，并增加系统资源开销；</li>
<li>Service Mesh组件接管了网络流量，因此服务的整体稳定性依赖于Service Mesh，同时额外引入的大量Service Mesh服务实例的运维和管理也是一个挑战；</li>
</ul>
<p>​    历史总是惊人的相似。为了解决端到端的字节码通信问题，TCP协议诞生，让多机通信变得简单可靠；微服务时代，Service Mesh应运而生，屏蔽了分布式系统的诸多复杂性，让开发者可以回归业务，聚焦真正的价值。</p>
<h1 id="参考链接">参考链接</h1>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/61901608">什么是 Service Mesh - 知乎 (zhihu.com)</a></p>
</li>
<li>
<p><a href="https://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh (philcalcado.com)</a></p>
</li>
<li>
<p><a href="https://www.redhat.com/en/weightics/microservices/what-is-a-service-mesh">What&rsquo;s a service mesh? (redhat.com)</a></p>
</li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>

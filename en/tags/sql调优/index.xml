<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SQL调优 on Luenci</title>
    <link>https://luenci.com/en/tags/sql%E8%B0%83%E4%BC%98/</link>
    <description>Recent content in SQL调优 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/sql%E8%B0%83%E4%BC%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL性能调优</title>
      <link>https://luenci.com/en/posts/sql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/sql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;原文链接：https://blog.csdn.net/u010520146/article/details/81161762&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;一创建索引&#34;&gt;一.创建索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1.要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引&lt;/li&gt;
&lt;li&gt;2.1在经常需要进行检索的字段上创建索引，比如要按照表字段&lt;code&gt;username&lt;/code&gt;进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。&lt;/li&gt;
&lt;li&gt;2.2创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。&lt;/li&gt;
&lt;li&gt;2.3一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二避免在索引上使用计算&#34;&gt;二.避免在索引上使用计算&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数
属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。&lt;/li&gt;
&lt;li&gt;效率低：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt; select * from user where salary*22 &amp;gt; 11000 (salary是索引列)&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em><strong>原文链接：https://blog.csdn.net/u010520146/article/details/81161762</strong></em></p>
<h1 id="一创建索引">一.创建索引</h1>
<ul>
<li>1.要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引</li>
<li>2.1在经常需要进行检索的字段上创建索引，比如要按照表字段<code>username</code>进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。</li>
<li>2.2创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。</li>
<li>2.3一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。</li>
</ul>
<h1 id="二避免在索引上使用计算">二.避免在索引上使用计算</h1>
<ul>
<li>在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数
属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。</li>
<li>效率低：</li>
</ul>
<p><code> select * from user where salary*22 &gt; 11000 (salary是索引列)</code></p>
<ul>
<li>效率高：</li>
</ul>
<p><code>select * from user where salary &gt; 11000/22 (salary是索引列)</code></p>
<h1 id="三使用预编译查询">三.使用预编译查询</h1>
<ul>
<li>程序中通常是根据用户的输入来动态执行SQL，这时应该尽量使用参数化SQL,这样不仅可以避免SQL注入漏洞
攻击，最重要数据库会对这些参数化SQL进行预编译，这样第一次执行的时候DBMS会为这个SQL语句进行查询优化并且执行预编译，这样以后再执行这个SQL的时候就直接使用预编译的结果，这样可以大大提高执行的速度。</li>
</ul>
<h1 id="四调整where字句中的连接顺序">四.调整Where字句中的连接顺序</h1>
<ul>
<li>DBMS一般采用自下而上的顺序解析where字句，根据这个原理表连接最好写在其他where条件之前，那些可以过滤掉最大数量记录。</li>
</ul>
<!-- more -->
<h1 id="五尽量将多条sql语句压缩到一句sql中">五.尽量将多条SQL语句压缩到一句SQL中</h1>
<ul>
<li>每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程
是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行。</li>
</ul>
<h1 id="六用where子句替换having字句">六.用where子句替换HAVING字句</h1>
<ul>
<li>避免使用<code>HAVING</code>字句，因为<code>HAVING</code>只会在检索出所有记录之后才对结果集进行过滤，而<code>where</code>则是在聚合前
刷选记录，如果能通过<code>where</code>字句限制记录的数目，那就能减少这方面的开销。<code>HAVING</code>中的条件一般用于聚合函数
的过滤，除此之外，应该将条件写在<code>where</code>字句中。</li>
</ul>
<h1 id="七使用表的别名">七.使用表的别名</h1>
<ul>
<li>当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减
少哪些友列名歧义引起的语法错误。</li>
</ul>
<h1 id="八用union-all替换union">八.用union all替换union</h1>
<ul>
<li>当SQL语句需要<code>union</code>两个查询结果集合时，即使检索结果中不会有重复的记录，如果使用<code>union</code>这两个结果集同样会尝试进行合并，然后在输出最终结果前进行排序，因此如果可以判断检索结果中不会有重复的记录时候，应该用union all，这样效率就会因此得到提高。</li>
</ul>
<h1 id="九考虑使用临时表暂存中间结果">九.考虑使用“临时表”暂存中间结果</h1>
<ul>
<li>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是，临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在<code>tempdb</code>中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。但是也得避免频繁创建和删除临时表，以减少系统表资源的消耗。</li>
</ul>
<h1 id="十只在必要的情况下才使用事务begin-translation">十.只在必要的情况下才使用事务begin translation</h1>
<ul>
<li>SQL Server中一句SQL语句默认就是一个事务，在该语句执行完成后也是默认<code>commit</code>的。其实，这就是<code>begin tran</code>的一个最小化的形式，好比在每句语句开头隐含了一个<code>begin tran</code>，结束时隐含了一个commit。</li>
<li>有些情况下，我们需要显式声明<code>begin tran</code>，比如做“插、删、改”操作需要同时修改几个表，要求要么几个表都修改成功，要么都不成功。<code>begin tran</code> 可以起到这样的作用，它可以把若干SQL语句套在一起执行，最后再一起<code>commit</code>。 好处是保证了数据的一致性，但任何事情都不是完美无缺的。<code>Begin tran</code>付出的代价是在提交之前，所有SQL语句锁住的资源都不能释放，直到<code>commit</code>掉。
可见，如果<code>Begin tran</code>套住的SQL语句太多，那数据库的性能就糟糕了。在该大事务提交之前，必然会阻塞别的语句，造成<code>block</code>很多。</li>
<li><code>Begin tran</code>使用的原则是，在保证数据一致性的前提下，<code>begin tran </code>套住的SQL语句越少越好！有些情况下可以采用触发器同步数据，不一定要用<code>begin tran</code>。</li>
</ul>
<h1 id="十一尽量避免使用游标">十一.尽量避免使用游标</h1>
<ul>
<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</li>
</ul>
<h1 id="十二用varcharnvarchar-代替-charnchar">十二.用<code>varchar</code>/<code>nvarchar </code>代替 <code>char</code>/<code>nchar</code></h1>
<ul>
<li>尽可能的使用 <code>varchar/nvarchar </code>代替<code> char/nchar</code> ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>
<li>不要以为 <code>NULL </code>不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是<code>varchar</code>这样的变长字段， <code>null </code>不占用空间。</li>
</ul>
<h1 id="十三查询select语句优化">十三.查询select语句优化</h1>
<ul>
<li>1.任何地方都不要使用 <code>select * from T </code>，用具体的字段列表代替“*”，不要返回用不到的任何字段</li>
<li>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，
如：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#6e7681"> </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#6e7681"> </span><span style="color:#ff7b72">is</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">null</span><span style="color:#6e7681">           
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以在num上设置默认值0，确保表中num列没有null值，
然后这样查询：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">0</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">10</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">or</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">20</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以这样查询：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">10</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">   </span><span style="color:#ff7b72">union</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">all</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">20</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>4.不能前置百分</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>name<span style="color:#6e7681"> </span><span style="color:#ff7b72">like</span><span style="color:#6e7681"> </span><span style="color:#f85149">‘</span><span style="color:#ff7b72;font-weight:bold">%</span>abc<span style="color:#ff7b72;font-weight:bold">%</span><span style="color:#f85149">’</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>若要提高效率，可以考虑全文检索。</p>
<p>select id from t where num in(1,2,3)</p>
</li>
<li>
<p>对于连续的数值，能用 between 就不要用 in 了：</p>
<p>select id from t where num between 1 and 3
6.如果查询的两个表大小相当，那么用in和exists差别不大。
in：
例如：表A（小表），表B（大表）</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">in</span><span style="color:#6e7681"> </span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B)<span style="color:#6e7681"> 			</span><span style="color:#f85149">效率低，用到了</span>A表上cc列的索引<span style="color:#f85149">；</span><span style="color:#6e7681">     
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">exists</span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#ff7b72;font-weight:bold">=</span>A.cc)<span style="color:#6e7681">   </span><span style="color:#f85149">效率高，用到了</span>B表上cc列的索引<span style="color:#f85149">。</span><span style="color:#6e7681">   
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>相反的</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">in</span><span style="color:#6e7681"> </span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A)<span style="color:#6e7681">  			</span><span style="color:#f85149">效率高，用到了</span>B表上cc列的索引<span style="color:#f85149">；</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">exists</span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#ff7b72;font-weight:bold">=</span>B.cc)<span style="color:#6e7681">  </span><span style="color:#f85149">效率低，用到了</span>A表上cc列的索引<span style="color:#f85149">。</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="十四更新update语句优化">十四.更新Update语句优化</h1>
<ul>
<li>1.如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志</li>
</ul>
<h1 id="十五-删除delete语句优化语句">十五. 删除Delete语句优化语句</h1>
<p>1.最高效的删除重复记录方法 ( 因为使用了ROWID)例子：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">DELETE</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">FROM</span><span style="color:#6e7681"> </span>EMP<span style="color:#6e7681"> </span>E<span style="color:#6e7681"> </span><span style="color:#ff7b72">WHERE</span><span style="color:#6e7681"> </span>E.ROWID<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span>(<span style="color:#ff7b72">SELECT</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">MIN</span>(X.ROWID)<span style="color:#6e7681"> </span><span style="color:#ff7b72">FROM</span><span style="color:#6e7681"> </span>EMP<span style="color:#6e7681"> </span>X<span style="color:#6e7681"> </span><span style="color:#ff7b72">WHERE</span><span style="color:#6e7681"> </span>X.EMP_NO<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>E.EMP_NO);<span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="十六插入insert语句优化">十六.插入Insert语句优化</h1>
<ul>
<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量<code>log</code>，以提高速度；如果数据量不大，为了缓和系统表的资源，应先<code>create table</code>，然后<code>insert</code>。</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>

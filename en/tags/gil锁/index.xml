<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GIL锁 on Luenci</title>
    <link>https://luenci.com/en/tags/gil%E9%94%81/</link>
    <description>Recent content in GIL锁 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/gil%E9%94%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python解释器的GIL锁</title>
      <link>https://luenci.com/en/posts/gil%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/gil%E9%94%81/</guid>
      <description>&lt;h2 id=&#34;gll锁定义&#34;&gt;GlL锁定义&lt;/h2&gt;
&lt;p&gt;Gll锁：Global Interpreter Lock，又称：全局解释器锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何Python线程执行前，必须先获得GlL锁，然后，每执行100条字节码，解释器就自动释放GL锁，让别的线程有机会执行。这个GlL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="gll锁定义">GlL锁定义</h2>
<p>Gll锁：Global Interpreter Lock，又称：全局解释器锁</p>
<blockquote>
<p>任何Python线程执行前，必须先获得GlL锁，然后，每执行100条字节码，解释器就自动释放GL锁，让别的线程有机会执行。这个GlL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p></blockquote>
<h2 id="gll不是python特性">GlL不是Python特性</h2>
<p>GlL是Pythn解释器（Cpython）时引入的概念，在JPython、PyPy中没有GlL。GIL并不是Python的语言缺陷。是解释器层级的锁，跟Python语言特性无关</p>
<blockquote>
<p>言外之意，就是全局解释器就是为了锁定整个解释器内部的全局资源，每个线程想要运行首先获取GlL，而GlL本身又是一把互斥锁，造成所有线程只能一个一个one-by-one-并发-交替的执行。</p></blockquote>
<h2 id="gll存在的原因">GlL存在的原因</h2>
<ul>
<li>
<p>早期计算机都是单核设计</p>
</li>
<li>
<p>CPython在执行多线程的时候并不是线程安全的，所以为了程序的稳定性，加一把全局解释锁，能够确保任何时候都只有一个Python线程执行</p>
</li>
</ul>
<blockquote>
<p>GlL产生的背景在CPython解释内部运行多个线程的时候，每个线程都需要解释器内部申请相应的全局资源，由于C语言本身比较底层造成CPython在管理所有全局资源的时候并不能应对所有线程同时的资源请求，因此为了防止资源竞争而发生错误，对所有线程申请全局资源增加了限制-全局解释器锁。</p></blockquote>
<!-- more -->
<h2 id="gll锁什么时候释放">GlL锁什么时候释放？</h2>
<ul>
<li>在当前线程执行超时后会自动释放</li>
<li>在当前线程执行阻塞操作时会自动释放</li>
<li>当前执行完成时</li>
</ul>
<p>Guido对GIL锁的看法：https://www.artima.com/forums/flat.jsp?forum=106&amp;thread=214235</p>
<h2 id="关于gil面试题">关于GIL面试题</h2>
<ul>
<li>
<p>描述Python GL的概意，以及它对python多线程的影响？编写一个多线程抓取网页的程序，并阐明多线程抓取程序是否可比单线程性能有提升，并解释原因。</p>
</li>
<li>
<p>Python语言和GlL没有半毛钱关系。仅仅是由于历史原因在Cpython虚拟机（解释器），难以移除GlL。</p>
</li>
<li>
<p>GlIL：全局解释器锁。每个线程在执行的过程都需要先获取GlL，保证同一时刻只有一个线程可以执行代码。</p>
</li>
<li>
<p>线程释放GL锁的情况：</p>
<ul>
<li>在IO操作等可能会引起阻塞的system call之前，可以暂时释放GIL，但在执行完毕后，必须重新获取GlL</li>
<li>Python 3.x使用计时器（执行时间达到阔值后，当前线程释放GlL）或Python 2.x，tickets计数达到100</li>
</ul>
</li>
<li>
<p>Python使用多进程是可以利用多核的CPU资源的。</p>
</li>
<li>
<p>多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁</p>
</li>
</ul>
<blockquote>
<p>严重问题：既然CPython解释存在GL是否意味每个线程在全局变量就不用加Lock互斥锁了呢？这是一个严重错误的想法，为什么用户操作全局数据还需要加Lock，因为GlL的释放时机我们无法控制-操作非常可能并没有完成，而不像Lock那样我们用完才释放（操作完整）</p></blockquote>
<p>举例</p>
<blockquote>
<p>线程1取出全局变量g_number==0一直加到20000，但是还没有来得及将20000写入g_number中，就超时了自动释放GIL 而线程2取出g_number==19999加到39999由于超时自动释放GlL此时线程2获取到GIL继续着未完成的事业将20000写入g_number….这就是之前的多线程案例没有加互斥锁的情况晨终结果是140w东右的盾因</p></blockquote>
<h2 id="gil锁解决方案">GIL锁解决方案</h2>
<h3 id="解决方案一不推荐">解决方案一（不推荐）：</h3>
<ul>
<li>我们换一个解释器执行程序就行了（jython：用JAVA写的python解释器）</li>
</ul>
<h3 id="解决方案二推荐">解决方案二（推荐）</h3>
<ul>
<li>使用多进程替换多线程multiprocessing是一个多进程模块，开多个进程，每个进程都带一个GlL，就相当于多线程来用了。</li>
</ul>
<h3 id="解决方案三推荐">解决方案三（推荐）</h3>
<ul>
<li>使用python语言的特性：胶水.
我们让子线程部分用c来写，就ok。（实质上也相当于那部分代码绕过了cython解释器）第一步，编写C语言文件：
测试代码，C语言写的死循环，文件名为test2.c：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ff7b72">void</span> <span style="color:#d2a8ff;font-weight:bold">Loop</span>(){
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">while</span>(<span style="color:#a5d6ff">1</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们把将其编译成.so文件（share object）需要执行如下命令(Linux下)：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>gcc test.c -shared -o libtets.so
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>-shared：将其编译成so文件</p>
<p>-o：表示output，用来输出的文件名</p>
<p>库文件是以lib开头</p>
<p>编译过后，在当前的文件夹下就会生成一个.so文件</p></blockquote>
<p>第二步，编写python文件04-04_GIL锁解决方案.py：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">ctypes</span> <span style="color:#ff7b72">import</span> <span style="color:#ff7b72">threading</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">#加载动态库</span>
</span></span><span style="display:flex;"><span>my_lib<span style="color:#ff7b72;font-weight:bold">=</span>ctypes<span style="color:#f85149">，</span>cdll<span style="color:#ff7b72;font-weight:bold">.</span>LoadLibrary<span style="color:#f85149">（</span><span style="color:#a5d6ff">&#34;./libtest2.so&#34;</span><span style="color:#f85149">）</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">#创建子线程</span>
</span></span><span style="display:flex;"><span>t<span style="color:#ff7b72;font-weight:bold">=</span>threading<span style="color:#ff7b72;font-weight:bold">.</span>Thread<span style="color:#f85149">（</span>target<span style="color:#ff7b72;font-weight:bold">=</span>my_lib<span style="color:#ff7b72;font-weight:bold">.</span>Loop<span style="color:#f85149">）</span>
</span></span><span style="display:flex;"><span>t<span style="color:#ff7b72;font-weight:bold">.</span>start<span style="color:#f85149">（）</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">#主线程</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">while</span> <span style="color:#79c0ff">True</span><span style="color:#f85149">：</span><span style="color:#ff7b72">pass</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>第三步，执行pvthon文件就可避开Cpython解释器的GIL锁</p>
<h3 id="总结">总结</h3>
<ul>
<li>GIL锁称为：“全局解释器锁“，是CPytrton解释器中的锁机制，也是历史遗留问题</li>
<li>要提升多线程执行效率，解决方案：
<ul>
<li>更换解释器</li>
<li>改为进程替换多线程</li>
<li>子线程使用C语言实现（绕过GL锁）</li>
</ul>
</li>
<li>必须要知道的是：
<ul>
<li>CPU密集型不太适合多线程</li>
<li>I/O密集型适合多线程（Gil锁会释放）</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>

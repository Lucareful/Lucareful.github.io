<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux知识 on Luenci</title>
    <link>https://luenci.com/en/tags/linux%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in Linux知识 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/linux%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux学习（一）</title>
      <link>https://luenci.com/en/posts/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;linux操作系统&#34;&gt;Linux操作系统&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;一切皆文件&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统启动流程&#34;&gt;系统启动流程&lt;/h2&gt;
&lt;p&gt;引导图&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502160423268.png&#34; alt=&#34;引导图&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最初始阶段
当我们打开计算机电源，计算机会自动从主板的&lt;code&gt;BlOS&lt;/code&gt;（Basic Input/output System）读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件（硬盘，网络接口，键盘，串口，并口）。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一步，计算机将从你所选择的存储设备中读取起始的512 bytes（比如光盘一开是的512 bytes，如果我们从光盘启动的话）。这&lt;code&gt;512bytes&lt;/code&gt;叫做主引导记录&lt;code&gt;MBR&lt;/code&gt;（master boot record）。&lt;code&gt;MBR&lt;/code&gt;会告诉电脑从该设备的某一个分区（partition）来装载引导加载程序（boot loader）。&lt;code&gt;Boot loader&lt;/code&gt;储存有操作系统（OS）的相关信息，比如操作系统名称，操作系统内核（kernel）所在位置等。常用的&lt;code&gt;boot loader&lt;/code&gt;有&lt;code&gt;GRUB&lt;/code&gt;和&lt;code&gt;LILO&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随后，&lt;code&gt;boot loade&lt;/code&gt;r会帮助我们加载&lt;code&gt;kernel&lt;/code&gt;。&lt;code&gt;kernel&lt;/code&gt;实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过&lt;code&gt;kernel&lt;/code&gt;传达给硬件。&lt;code&gt;Windows&lt;/code&gt;和&lt;code&gt;Linux&lt;/code&gt;各自有自己&lt;code&gt;kernel&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;狭义的操作系统就是指&lt;code&gt;kernel&lt;/code&gt;，广义的操作系统包括&lt;code&gt;kernel&lt;/code&gt;以及&lt;code&gt;kernel&lt;/code&gt;之上的各种应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（Linus Torvalds与其说是Linux之父，不如说是&lt;code&gt;Linux kernel&lt;/code&gt;之父。他依然负责&lt;code&gt;Linux kernel&lt;/code&gt;的开发和维护。至于&lt;code&gt;Ubuntu&lt;/code&gt;，&lt;code&gt;Red Hat&lt;/code&gt;，它们都是基于相同的&lt;code&gt;kernel&lt;/code&gt;之上，囊括了不同的应用和界面构成的一个更加完整的操作系统版本。）实际上，我们可以在多个分区安装&lt;code&gt;boot loader&lt;/code&gt;，每个&lt;code&gt;boot loader&lt;/code&gt;对应不同的操作系统，在读取&lt;code&gt;MBR&lt;/code&gt;的时候选择我们想要启动的boot loader。这就是多操作系统的原理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小结：&lt;code&gt;BlOS -&amp;gt; MBR -&amp;gt; boot loader -&amp;gt; kernel&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kernel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们加载的是Linux kernel，Linux kernel开始工作。kernel会首先预留自己运行所需的内存空间，然后通过驱动程序（driver）检测计算机硬件。这样，操作系统就可以知道自己有哪些硬件可用。随后，kernel会启动一个init进程。它是Linux系统中的1号进程（Linux系统没有0号进程）。到此，kernel就完成了在计算机启动阶段的工作，交接给init来管理。&lt;/li&gt;
&lt;li&gt;小结：&lt;code&gt;kernel -&amp;gt; init process &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;init process&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（根据boot loader的选项，Linux此时可以进入单用户模式（single user mode））。在此模式下，初始脚本还没有开始执行，我们可以检测并修复计算机可能存在的错误）随后，init会运行一系列的初始脚本（startup scripts），这些脚本是Linux中常见的shell scripts。这些脚本执行如下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置计算机名称，时区，检测文件系统，挂载硬盘，清空临时文件，设置网络等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当这些初始脚本，操作系统已经完全准备好了，只是，还没有人可以登录！！！init会给出登录（login）对话框，或者是图形化的登录界面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入用户名（比如说luenci）和密码，DONE！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在此后的过程中，你将以用户（user）luenci的身份操作电脑。此外，根据你创建用户时的设定，Linux还会将你归到某个组（group）中，比如可以是stupid组，或者是luenci组。所以你将是用户luenci，同时是luenci组的组员。（注意，组luenci和用户luenci只是重名而已，就好想你可以叫Dell，同时还是Dell公司的老板一样。你完全也可以是用户luenci，同时为stupid组的组员）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启动级别&#34;&gt;启动级别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;7种运行级别&lt;/p&gt;
&lt;p&gt;运行级别（&lt;code&gt;Runlevel&lt;/code&gt;）指的是Unix或者Linux等类Unix操作系统的运行模式，不同的运行模式下系统的功能也有所有不同。Linux 系统下通常分为&lt;code&gt;7&lt;/code&gt;种运行级别，分别是从&lt;code&gt;0&lt;/code&gt;到&lt;code&gt;6&lt;/code&gt;。各级别介绍如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&amp;ndash;停机模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这种模式下，系统处于停机状态，系统默认运行级别不能设为&lt;code&gt;0&lt;/code&gt;，否则将不能正常启动。这个运行级别主要用于关闭任务，在&lt;code&gt;/etc/rc0.d&lt;/code&gt;目录下的各个连接命令都是此级别的命令，在关闭系统时，这些命令将被逐个执行。它 们会杀掉所有进程、关闭虚拟内存和交换文件、卸载文件系统和交换分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;&amp;ndash; 单用户模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这种运行模下，系统处于单用户工作状态，登录用户具有root权限，文件系统被加载但是网络却没有被加载，因此也无法远程登陆。这个运行级别，只允一个用户从本地计算机上登录，&lt;code&gt;/etc/rc1.d&lt;/code&gt;目录下的所有文件与此运行级别相关连，这个运行级别一般用于系统管理与维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;2&lt;/code&gt; - -多用户模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以通过网络进行登录，但没有&lt;code&gt;NFS&lt;/code&gt;（Network File System），即网络文件统。&lt;code&gt;/etc/rc2.d&lt;/code&gt;目录下所有文件与此级别相连。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;3&lt;/code&gt; - -完全多用户模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户可以通过网络进行登录，且有&lt;code&gt;NFS&lt;/code&gt;，用户登陆后会进入控制台命令行模式。这也是缺省的运行模式，在这种运行级别下所有网络服务程序会一起运行。&lt;code&gt;/etc/rc2.d&lt;/code&gt;录下的文件与此级别相连&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;4&lt;/code&gt; - -自定义模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一种系统未使用的保留模式，&lt;code&gt;/etc/rc4.d&lt;/code&gt;目录与此级别相连。这一级别是用户自定义的运行级别，用户可以根自己的需要进行一些自定义设置。如果想要运行这一级别的话，必须在&lt;code&gt;rc3.d&lt;/code&gt;目录下放入连接文件，就像其他&lt;code&gt;rc*.d&lt;/code&gt;目录下的文件，并指明是启动还是终止进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5&lt;/code&gt; - -图形化模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Linux 下运行&lt;code&gt;X Window&lt;/code&gt;就是使用这一运行级别，用户登录后将进入图形化的GUI界面。在这一级别下除了DNS的&lt;code&gt;named&lt;/code&gt;与级别&lt;code&gt;3&lt;/code&gt;不同，其余的都相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt; &amp;ndash; 重启模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统正常关闭并重启，默认运行级别不能设为&lt;code&gt;5&lt;/code&gt;，否则系统将不能正常启动。&lt;code&gt;/etc/rc6.d&lt;/code&gt;目录与此级别相连。在这一运行级别下，不会关闭电源，&lt;code&gt;/etc/rc6.d&lt;/code&gt;目录下的连接与&lt;code&gt;rc0.d&lt;/code&gt;目录下的连接基本相同；不同之处在于，虽然它们都执行&lt;code&gt;halt&lt;/code&gt;（关闭）命令，但是给&lt;code&gt;halt&lt;/code&gt;传递的参数不同，所级别&lt;code&gt;6&lt;/code&gt;会重新启动系统而&lt;code&gt;0&lt;/code&gt;会关闭系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<h1 id="linux操作系统">Linux操作系统</h1>
<ul>
<li>&ldquo;一切皆文件&rdquo;</li>
</ul>
<h2 id="系统启动流程">系统启动流程</h2>
<p>引导图</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502160423268.png" alt="引导图"  />
</p>
<ul>
<li>
<p>最初始阶段
当我们打开计算机电源，计算机会自动从主板的<code>BlOS</code>（Basic Input/output System）读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件（硬盘，网络接口，键盘，串口，并口）。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。</p>
</li>
<li>
<p>下一步，计算机将从你所选择的存储设备中读取起始的512 bytes（比如光盘一开是的512 bytes，如果我们从光盘启动的话）。这<code>512bytes</code>叫做主引导记录<code>MBR</code>（master boot record）。<code>MBR</code>会告诉电脑从该设备的某一个分区（partition）来装载引导加载程序（boot loader）。<code>Boot loader</code>储存有操作系统（OS）的相关信息，比如操作系统名称，操作系统内核（kernel）所在位置等。常用的<code>boot loader</code>有<code>GRUB</code>和<code>LILO</code>。</p>
</li>
<li>
<p>随后，<code>boot loade</code>r会帮助我们加载<code>kernel</code>。<code>kernel</code>实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过<code>kernel</code>传达给硬件。<code>Windows</code>和<code>Linux</code>各自有自己<code>kernel</code>。</p>
</li>
<li>
<p>狭义的操作系统就是指<code>kernel</code>，广义的操作系统包括<code>kernel</code>以及<code>kernel</code>之上的各种应用。</p>
</li>
<li>
<p>（Linus Torvalds与其说是Linux之父，不如说是<code>Linux kernel</code>之父。他依然负责<code>Linux kernel</code>的开发和维护。至于<code>Ubuntu</code>，<code>Red Hat</code>，它们都是基于相同的<code>kernel</code>之上，囊括了不同的应用和界面构成的一个更加完整的操作系统版本。）实际上，我们可以在多个分区安装<code>boot loader</code>，每个<code>boot loader</code>对应不同的操作系统，在读取<code>MBR</code>的时候选择我们想要启动的boot loader。这就是多操作系统的原理。</p>
</li>
<li>
<p>小结：<code>BlOS -&gt; MBR -&gt; boot loader -&gt; kernel</code></p>
</li>
<li>
<p>kernel</p>
<ul>
<li>如果我们加载的是Linux kernel，Linux kernel开始工作。kernel会首先预留自己运行所需的内存空间，然后通过驱动程序（driver）检测计算机硬件。这样，操作系统就可以知道自己有哪些硬件可用。随后，kernel会启动一个init进程。它是Linux系统中的1号进程（Linux系统没有0号进程）。到此，kernel就完成了在计算机启动阶段的工作，交接给init来管理。</li>
<li>小结：<code>kernel -&gt; init process </code></li>
</ul>
</li>
<li>
<p><code>init process</code></p>
<p>（根据boot loader的选项，Linux此时可以进入单用户模式（single user mode））。在此模式下，初始脚本还没有开始执行，我们可以检测并修复计算机可能存在的错误）随后，init会运行一系列的初始脚本（startup scripts），这些脚本是Linux中常见的shell scripts。这些脚本执行如下功能：</p>
<ul>
<li>设置计算机名称，时区，检测文件系统，挂载硬盘，清空临时文件，设置网络等</li>
</ul>
<p>当这些初始脚本，操作系统已经完全准备好了，只是，还没有人可以登录！！！init会给出登录（login）对话框，或者是图形化的登录界面。</p>
</li>
<li>
<p>输入用户名（比如说luenci）和密码，DONE！</p>
</li>
<li>
<p>在此后的过程中，你将以用户（user）luenci的身份操作电脑。此外，根据你创建用户时的设定，Linux还会将你归到某个组（group）中，比如可以是stupid组，或者是luenci组。所以你将是用户luenci，同时是luenci组的组员。（注意，组luenci和用户luenci只是重名而已，就好想你可以叫Dell，同时还是Dell公司的老板一样。你完全也可以是用户luenci，同时为stupid组的组员）</p>
</li>
</ul>
<h3 id="启动级别">启动级别</h3>
<ul>
<li>
<p>7种运行级别</p>
<p>运行级别（<code>Runlevel</code>）指的是Unix或者Linux等类Unix操作系统的运行模式，不同的运行模式下系统的功能也有所有不同。Linux 系统下通常分为<code>7</code>种运行级别，分别是从<code>0</code>到<code>6</code>。各级别介绍如下：</p>
</li>
<li>
<p><code>0</code>&ndash;停机模式</p>
<ul>
<li>在这种模式下，系统处于停机状态，系统默认运行级别不能设为<code>0</code>，否则将不能正常启动。这个运行级别主要用于关闭任务，在<code>/etc/rc0.d</code>目录下的各个连接命令都是此级别的命令，在关闭系统时，这些命令将被逐个执行。它 们会杀掉所有进程、关闭虚拟内存和交换文件、卸载文件系统和交换分区。</li>
</ul>
</li>
<li>
<p><code>1</code>&ndash; 单用户模式。</p>
<ul>
<li>在这种运行模下，系统处于单用户工作状态，登录用户具有root权限，文件系统被加载但是网络却没有被加载，因此也无法远程登陆。这个运行级别，只允一个用户从本地计算机上登录，<code>/etc/rc1.d</code>目录下的所有文件与此运行级别相关连，这个运行级别一般用于系统管理与维护。</li>
</ul>
</li>
<li>
<p><code>2</code> - -多用户模式。</p>
<ul>
<li>用户可以通过网络进行登录，但没有<code>NFS</code>（Network File System），即网络文件统。<code>/etc/rc2.d</code>目录下所有文件与此级别相连。</li>
</ul>
</li>
<li>
<p><code>3</code> - -完全多用户模式。</p>
</li>
<li>
<p>用户可以通过网络进行登录，且有<code>NFS</code>，用户登陆后会进入控制台命令行模式。这也是缺省的运行模式，在这种运行级别下所有网络服务程序会一起运行。<code>/etc/rc2.d</code>录下的文件与此级别相连</p>
</li>
<li>
<p><code>4</code> - -自定义模式。</p>
<ul>
<li>这是一种系统未使用的保留模式，<code>/etc/rc4.d</code>目录与此级别相连。这一级别是用户自定义的运行级别，用户可以根自己的需要进行一些自定义设置。如果想要运行这一级别的话，必须在<code>rc3.d</code>目录下放入连接文件，就像其他<code>rc*.d</code>目录下的文件，并指明是启动还是终止进程。</li>
</ul>
</li>
<li>
<p><code>5</code> - -图形化模式。</p>
<ul>
<li>在 Linux 下运行<code>X Window</code>就是使用这一运行级别，用户登录后将进入图形化的GUI界面。在这一级别下除了DNS的<code>named</code>与级别<code>3</code>不同，其余的都相同。</li>
</ul>
</li>
<li>
<p><code>6</code> &ndash; 重启模式。</p>
<ul>
<li>系统正常关闭并重启，默认运行级别不能设为<code>5</code>，否则系统将不能正常启动。<code>/etc/rc6.d</code>目录与此级别相连。在这一运行级别下，不会关闭电源，<code>/etc/rc6.d</code>目录下的连接与<code>rc0.d</code>目录下的连接基本相同；不同之处在于，虽然它们都执行<code>halt</code>（关闭）命令，但是给<code>halt</code>传递的参数不同，所级别<code>6</code>会重新启动系统而<code>0</code>会关闭系统。</li>
</ul>
</li>
</ul>
<h3 id="grub加密">GRUB加密</h3>
<ul>
<li><code>GRUB</code>程序和<code>grub.conf</code>文件</li>
<li>1）掌握GRUB的定义：<code>GRUB</code>是<code>Grand Unified Boot loader</code>（多重操作系统启动管理器）的缩写。
心</li>
<li>2）掌握grub的配置文件为：<code>grub.conf</code>设置<code>grub Md5</code>加密命令<code>grub-md5-crypt </code>
<ul>
<li><code>Password=明文</code>或<code>password-md5密文</code>（编辑grub配置文件的密码）</li>
</ul>
</li>
<li>Title red hat 标题
<ul>
<li><code>Password=明文或password--md5密文</code>（加载内核系统引导必须的密码）</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502155136848.png" alt="grub配置"  />
</p>
<h3 id="bios加密">BIOS加密</h3>
<ul>
<li>设置BIOS密码来防止更改GRU配置文件</li>
<li>但是这种方法可将主板电池扣下，主板自动还原，密码也失效了</li>
</ul>
<p><em><code>没有绝对的安全，要不停的学习</code></em></p>
<h2 id="目录结构">目录结构</h2>
<ul>
<li>在Linux或UNIX操作系统中，所有的文件和目录都被组织成一个以根节点开始的倒置的<em><strong>树状结构</strong></em>。</li>
</ul>
<h3 id="顶层根目录的表示">顶层根目录的表示</h3>
<ul>
<li>使用<code>'/'</code>来表示根目录</li>
</ul>
<h3 id="文件系统中的特殊目录">文件系统中的特殊目录</h3>
<ul>
<li><code>.</code>表示当前目录，即用户所在的工作目录</li>
<li><code>..</code>表示父目录，即当前目录的上一层目录</li>
<li><code>~</code>代表当前用户的家目录（home）</li>
</ul>
<!-- more -->
<h3 id="一些重要目录">一些重要目录</h3>
<ol>
<li><code>bin</code>目录：用来存放常用的可执行文件</li>
<li><code>sbin</code>目录：用来存放系统的可执行文件</li>
<li><code>home</code>家目录：用来存放用户自己的文件或目录，其中，超级用户<code>root</code>的家目普通用户的家目录被存放在<code>/home</code>目录下，并使用用户名作为最后一级目的名称，如<code>luenci</code>用户的家目录为<code>/home/luenci</code></li>
<li><code>dev</code>目录：设备文件目录</li>
<li><code>etc</code>目录：配置文件目录</li>
<li>挂载点（目录）：通常可移除式硬件会被挂载在<code>/media</code>或<code>/mnt</code>目录之下</li>
</ol>
<h2 id="用户群组权限管理">用户，群组，权限管理</h2>
<ul>
<li><code>/etc/passed</code>文件中存放用户的信息</li>
<li>分别对应的是：<code>用户名：密码：user_id：group_id：描述名：家目录（home）：登录后执行的命令</code></li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200501204906550.png" alt="1"  />
</p>
<ul>
<li>如果执行的登录命令为：<code>/bin/bash</code>则可以登录</li>
<li>如果执行的登录命令为：<code>/sbin/nologin</code>则不可以登录</li>
<li><code>user_id</code>: 500以前id号为系统占用的</li>
</ul>
<h3 id="useradd命令的常用选项">useradd命令的常用选项</h3>
<ul>
<li><code>-u</code>：指定用户的UID</li>
<li><code>-g</code>：指定用户所属的群组</li>
<li><code>-d</code>：指定用户的家目录</li>
<li><code>-c</code>：指定用户的备注信息</li>
<li><code>-s</code>：指定用户所用的shell</li>
<li><code>-r</code>: 删除用户</li>
</ul>
<h2 id="文件的权限管理">文件的权限管理</h2>
<ul>
<li>权限信息(用户权限(u);组权限(g);其他用户权限(0))；硬链接数；用户；用户组；文件大小；文件创建日期</li>
<li>r-&gt;4</li>
<li>w-&gt;2</li>
<li>x-&gt;1</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200501215623758.png" alt="2"  />
</p>
<ul>
<li>
<p><code>-</code>开头代表一个文件类型</p>
</li>
<li>
<p><code>d</code>开头代表一个目录类型</p>
</li>
<li>
<p><code>l</code>开头代表一个软链接</p>
</li>
<li>
<p><code>b（block）</code>开头代表设备文件</p>
</li>
<li>
<p><code>p</code>开头有代表管道文件</p>
</li>
</ul>
<h3 id="对于可执行文件的运行">对于可执行文件的运行</h3>
<ul>
<li><code>sh 可执行文件名</code></li>
<li><code>bash 可执行文件名</code></li>
<li><code>./可执行文件名</code></li>
<li><code>. 可执行文件名</code></li>
</ul>
<h2 id="目录的权限管理">目录的权限管理</h2>
<ul>
<li><code>ll -d 目录</code>查看目录的权限</li>
<li><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502123137125.png" alt="3"  />
</li>
</ul>
<h2 id="更改文件的用户和组">更改文件的用户和组</h2>
<ul>
<li><code>chown  用户.组别  文件名</code></li>
<li><code>chown -R</code>递归修改用户和组</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502123543551.png" alt="4"  />
</p>
<h2 id="文件合并">文件合并</h2>
<ul>
<li>
<p><code>wc -l 文件名</code>统计文件行数</p>
</li>
<li>
<p><code>&gt;</code>以覆盖的方式写入内容</p>
</li>
<li>
<p><code>&gt;&gt;</code>以追加的方式写入内容</p>
</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502132024461.png" alt=""  />
</p>
<h2 id="解压和压缩命令">解压和压缩命令</h2>
<p>1、.<code>tar </code></p>
<p>解包：<code>tar xvf FileName.tar</code>
打包：<code>tar cvf FileName.tar DirName</code>
（注：tar是打包，不是压缩！）</p>
<p>2、<code>.gz</code></p>
<p>解压1：<code>gunzip FileName.gz</code>
解压2：<code>gzip -d FileName.gz</code>
压缩：<code>gzip FileName</code></p>
<p>3、<code>.tar.gz</code> 和<code> .tgz</code></p>
<p>解压：<code>tar zxvf FileName.tar.gz</code>
压缩：<code>tar zcvf FileName.tar.gz DirName</code></p>
<p>4、<code>.bz2</code></p>
<p>解压1：<code>bzip2 -d FileName.bz2</code>
解压2：<code>bunzip2 FileName.bz2</code>
压缩：<code> bzip2 -z FileName</code></p>
<p>5、<code>.tar.bz2</code></p>
<p>解压：<code>tar jxvf FileName.tar.bz2</code>
压缩：<code>tar jcvf FileName.tar.bz2 DirName</code></p>
<p>6、<code>.bz</code></p>
<p>解压1：<code>bzip2 -d FileName.bz</code>
解压2：<code>bunzip2 FileName.bz</code></p>
<p>7、<code>.tar.bz</code></p>
<p>解压：<code>tar jxvf FileName.tar.bz</code></p>
<p>8、.Z</p>
<p>解压：<code>uncompress FileName.Z</code>
压缩：<code>compress FileName</code></p>
<p>9、<code>.tar.Z</code></p>
<p>解压：<code>tar Zxvf FileName.tar.Z</code>
压缩：<code>tar Zcvf FileName.tar.Z DirName</code></p>
<p>10、<code>.zip</code></p>
<p>解压：<code>unzip FileName.zip</code>
压缩：<code>zip FileName.zip DirName</code></p>
<p>11、<code>.rar</code></p>
<p>解压：<code>rar x FileName.rar</code>
压缩：<code>rar a FileName.rar DirName</code></p>
<p>12、<code>.lha</code></p>
<p>解压：<code>lha -e FileName.lha</code>
压缩：<code>lha -a FileName.lha FileName</code></p>
<p>13、<code>.rpm</code></p>
<p>解包：<code>rpm2cpio FileName.rpm | cpio -div</code></p>
<h2 id="vim一些常见指令">vim一些常见指令</h2>
<ul>
<li>
<p>快速在屏幕中移动光标的位置的命令</p>
<ul>
<li><code>H</code>光标移动到这个屏幕的最上方那一行的第一个字符</li>
<li><code>M</code>无标移动到这个屏幕的中央那一行的第一个字符</li>
<li><code>L</code>无标移动到这个屏幕的最下那一行的第一个字符</li>
</ul>
</li>
<li>
<p><code>G</code>移动到文件的最后一行</p>
</li>
<li>
<p><code>gg</code>移动到文件的第一行</p>
</li>
<li>
<p><code>ctrl+ r</code>恢复上一次操作</p>
</li>
<li>
<p><code>u</code>撤销上一个操作</p>
</li>
<li>
<p><code>ctrl+a</code>跳到文件的首部</p>
</li>
<li>
<p><code>ctrl+e</code>跳到文件的尾部</p>
</li>
<li>
<p><code>yy</code>复制</p>
</li>
<li>
<p><code>p</code>粘贴到行尾</p>
</li>
<li>
<p><code>P</code>站贴到行头</p>
</li>
</ul>
<h2 id="weight命令">weight命令</h2>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502170646416.png" alt=""  />
</p>
<h3 id="第一行">第一行</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: center">字符</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">weight - 10:03:19</td>
          <td style="text-align: center">当前系统时间</td>
      </tr>
      <tr>
          <td style="text-align: center">up 137 days , 10:40</td>
          <td style="text-align: center">系统已运行时间</td>
      </tr>
      <tr>
          <td style="text-align: center">2 user</td>
          <td style="text-align: center">在线用户</td>
      </tr>
      <tr>
          <td style="text-align: center">load average: 0.00, 0.01, 0.05</td>
          <td style="text-align: center">系统负载。三个数值分别为  1分钟、5分钟、15分钟前到现在的平均值。</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>2 user，包含系统用户。</p></blockquote>
<hr>
<h3 id="第二行">第二行</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: center">字符</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">Tasks : 92 total</td>
          <td style="text-align: center">总进程数</td>
      </tr>
      <tr>
          <td style="text-align: center">2 running</td>
          <td style="text-align: center">正在运行的进程数</td>
      </tr>
      <tr>
          <td style="text-align: center">90 sleeping</td>
          <td style="text-align: center">正在睡眠的进程数</td>
      </tr>
      <tr>
          <td style="text-align: center">0 sweightped</td>
          <td style="text-align: center">停止的进程数</td>
      </tr>
      <tr>
          <td style="text-align: center">0 zombie</td>
          <td style="text-align: center">僵尸进程数</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>僵尸进程:一个子进程在其父进程没有调用wait()或waitpid()的情况下退出。这个子进程就是僵尸进程。如果其父进程还存在而一直不调用wait，则该僵尸进程将无法回收，等到其父进程退出后该进程将被init回收。</p></blockquote>
<hr>
<h3 id="第三行">第三行</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: center">字符</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">%Cpu(s): 0.3 us</td>
          <td style="text-align: center">cpu占用率(%)，用户进程占用cpu百分率</td>
      </tr>
      <tr>
          <td style="text-align: center">0.3 sy</td>
          <td style="text-align: center">系统占用cpu百分率</td>
      </tr>
      <tr>
          <td style="text-align: center">0.0 ni</td>
          <td style="text-align: center">用户进程空间内改变过优先级的进程占用CPU百分比</td>
      </tr>
      <tr>
          <td style="text-align: center">99.3 id</td>
          <td style="text-align: center">cpu空闲率</td>
      </tr>
      <tr>
          <td style="text-align: center">0.0 wa</td>
          <td style="text-align: center">等待IO的CPU时间百分比</td>
      </tr>
      <tr>
          <td style="text-align: center">0.0 hi</td>
          <td style="text-align: center">硬中断（Hardware IRQ）占用CPU的百分比</td>
      </tr>
      <tr>
          <td style="text-align: center">0.0 si</td>
          <td style="text-align: center">软中断（Software Interrupts）占用CPU的百分比</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>cpu的使用情况</p></blockquote>
<hr>
<h3 id="第四行">第四行</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: center">字符</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">KiB Mem : 1016916 total</td>
          <td style="text-align: center">内存总量（我这里是1G）</td>
      </tr>
      <tr>
          <td style="text-align: center">82280 free</td>
          <td style="text-align: center">内存空闲量</td>
      </tr>
      <tr>
          <td style="text-align: center">233848 used</td>
          <td style="text-align: center">内存使用量</td>
      </tr>
      <tr>
          <td style="text-align: center">700788 buff/cache</td>
          <td style="text-align: center">缓存的内存量</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>内存使用率</p></blockquote>
<hr>
<h3 id="第五行">第五行</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: center">字符</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">KiB Swap: 0 total</td>
          <td style="text-align: center">交换区总量</td>
      </tr>
      <tr>
          <td style="text-align: center">0 free</td>
          <td style="text-align: center">交换区空闲量</td>
      </tr>
      <tr>
          <td style="text-align: center">0 used</td>
          <td style="text-align: center">交换区使用量</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>swap分区</p></blockquote>
<hr>
<h3 id="第六行">第六行</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: center">字符</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">PID</td>
          <td style="text-align: center">进程号</td>
      </tr>
      <tr>
          <td style="text-align: center">USER</td>
          <td style="text-align: center">进程创建者</td>
      </tr>
      <tr>
          <td style="text-align: center">PR</td>
          <td style="text-align: center">进程优先级</td>
      </tr>
      <tr>
          <td style="text-align: center">NI</td>
          <td style="text-align: center">nice值。越小优先级越高，最小-20，最大20（用户设置最大19）</td>
      </tr>
      <tr>
          <td style="text-align: center">VIRT</td>
          <td style="text-align: center">进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td>
      </tr>
      <tr>
          <td style="text-align: center">RES</td>
          <td style="text-align: center">进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td>
      </tr>
      <tr>
          <td style="text-align: center">SHR</td>
          <td style="text-align: center">共享内存大小，单位kb</td>
      </tr>
      <tr>
          <td style="text-align: center">S</td>
          <td style="text-align: center">进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</td>
      </tr>
      <tr>
          <td style="text-align: center">%CPU</td>
          <td style="text-align: center">进程占用cpu百分比</td>
      </tr>
      <tr>
          <td style="text-align: center">%MEM</td>
          <td style="text-align: center">进程占用内存百分比</td>
      </tr>
      <tr>
          <td style="text-align: center">TIME+</td>
          <td style="text-align: center">进程运行时间</td>
      </tr>
      <tr>
          <td style="text-align: center">COMMAND</td>
          <td style="text-align: center">进程名称</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>PR 越低优先级 越高，PRI(new)=PRI(old)+nice
PR中的rt为实时进程优先级即rt_priority，prio=MAX_RT_PRIO - 1- p-&gt;rt_priority
MAX_RT_PRIO = 99，prio大小决定最终优先级。这样意味着rt_priority值越大，优先级越高而内核提供的修改优先级的函数，是修改rt_priority的值，所以越大，优先级越高。
例：改变优先级：进入weight后按“r”–&gt;输入进程PID–&gt;输入nice值</p></blockquote>
<h3 id="weight命令在进入weight后使用">weight命令（在进入weight后使用）</h3>
<blockquote>
<p>P：以占据CPU百分比排序
M：以占据内存百分比排序
T：以累积占用CPU时间排序
q：退出命令：按q键退出weight查看页面
s：修改刷新时间间隔。按下s键，然后按下数字，即可修改刷新时间间隔为你输入的数字，单位为秒。例如：按下s键，在按数字1键，即可实现每秒刷新一次
k：终止指定的进程。按下k键&ndash;&gt;再输入要杀死的进程的pid&ndash;&gt;按enter键&ndash;&gt;(选择信号类型，以数字标示，默认15为杀死)本步可省略按enter键（常用为-9）</p></blockquote>
<h2 id="free命令">free命令</h2>
<ul>
<li><code>free</code></li>
<li><code>free -m</code></li>
<li><code>free -h</code></li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502171251931.png" alt=""  />
</p>]]></content:encoded>
    </item>
    <item>
      <title>Linux学习（二）</title>
      <link>https://luenci.com/en/posts/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;linux操作系统二&#34;&gt;Linux操作系统（二）&lt;/h1&gt;
&lt;h2 id=&#34;进程命令&#34;&gt;进程命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt;  显示所有进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux | grep &#39;&#39;&lt;/code&gt; 筛选出相关进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204505096.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kill  pid&lt;/code&gt; 杀死相关的pid进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill - 9 pid&lt;/code&gt; 强制杀死进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204832777.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jobs&lt;/code&gt;查看进程的工作号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fg %工作号&lt;/code&gt;后台程序调到前台运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;硬盘分区&#34;&gt;硬盘分区&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fdisk -l /dev/磁盘名&lt;/code&gt;查看对应磁盘名的详细信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502212407780.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="linux操作系统二">Linux操作系统（二）</h1>
<h2 id="进程命令">进程命令</h2>
<ul>
<li><code>ps aux</code>  显示所有进程</li>
<li><code>ps aux | grep ''</code> 筛选出相关进程</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204505096.png" alt=""  />
</p>
<ul>
<li><code>kill  pid</code> 杀死相关的pid进程</li>
<li><code>kill - 9 pid</code> 强制杀死进程</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204832777.png" alt=""  />
</p>
<ul>
<li><code>jobs</code>查看进程的工作号</li>
<li><code>fg %工作号</code>后台程序调到前台运行</li>
</ul>
<h2 id="硬盘分区">硬盘分区</h2>
<ul>
<li><code>fdisk -l /dev/磁盘名</code>查看对应磁盘名的详细信息</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502212407780.png" alt=""  />
</p>
<h2 id="文件系统">文件系统</h2>
<ul>
<li>
<p>磁盘分区完毕后还需要进行格式化（format），之后操作系统才能够使用这个文件系统。 为什么需要进行“格式化”呢？这是因为每种操作系统所设置的文件属性/权限并不相同， 为了存放这些文件所需的数据，因此就需要将分区进行格式化，以成为操作系统能够利用的“文件系统格式（filesystem）”。</p>
</li>
<li>
<p>由此我们也能够知道，每种操作系统能够使用的文件系统并不相同。 举例来说，windows 98 以前的微软操作系统主要利用的文件系统是 FAT （或 FAT16），windows 2000 以后的版本有所谓的 NTFS 文件系统，至于 Linux 的正统文件系统则为 Ext2 （Linux second extended file system, ext2fs）这一个。此外，在默认的情况下，windows 操作系统是不会认识 Linux 的 Ext2 的。</p>
</li>
<li>
<p>传统的磁盘与文件系统之应用中，一个分区就是只能够被格式化成为一个文件系统，所以我们可以说一个 filesystem 就是一个 partition。但是由于新技术的利用，例如我们常听到的LVM与软件磁盘阵列（software raid）， 这些技术可以将一个分区格式化为多个文件系统（例如LVM），也能够将多个分区合成一个文件系统（LVM, RAID）！ 所以说，目前我们在格式化时已经不再说成针对 partition 来格式化了， 通常我们可以称呼一个可被挂载的数据为一个文件系统而不是一个分区喔！</p>
</li>
<li>
<p>那么文件系统是如何运行的呢？这与操作系统的文件数据有关。较新的操作系统的文件数据除了文件实际内容外， 通常含有非常多的属性，例如 Linux 操作系统的文件权限（rwx）与文件属性（拥有者、群组、时间参数等）。 文件系统通常会将这两部份的数据分别存放在不同的区块，权限与属性放置到 inode 中，至于实际数据则放置到 data block 区块中。 另外，还有一个超级区块 （<code>superblock</code>） 会记录整个文件系统的整体信息，包括 inode 与 block 的总量、使用量、剩余量等。</p>
</li>
</ul>
<p>每个 inode 与 block 都有编号，至于这三个数据的意义可以简略说明如下：</p>
<ul>
<li><code>superblock</code>：记录此 filesystem 的整体信息，包括inode/block的总量、使用量、剩余量， 以及文件系统的格式与相关信息等；</li>
<li>inode：记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的 block 号码；</li>
<li>block：实际记录文件的内容，若文件太大时，会占用多个 block 。</li>
</ul>
<p>由于每个 inode 与 block 都有编号，而每个文件都会占用一个 inode ，inode 内则有文件数据放置的 block 号码。 因此，我们可以知道的是，如果能够找到文件的 inode 的话，那么自然就会知道这个文件所放置数据的 block 号码， 当然也就能够读出该文件的实际数据了。这是个比较有效率的作法，因为如此一来我们的磁盘就能够在短时间内读取出全部的数据， 读写的性能比较好啰。</p>
<p>我们将 inode 与 block 区块用图解来说明一下，如下图所示，文件系统先格式化出 inode 与 block 的区块，假设某一个文件的属性与权限数据是放置到 inode 4 号（下图较小方格内），而这个 inode 记录了文件数据的实际放置点为 2, 7, 13, 15 这四个 block 号码，此时我们的操作系统就能够据此来排列磁盘的读取顺序，可以一口气将四个 block 内容读出来！ 那么数据的读取就如同下图中的箭头所指定的模样了。</p>
<p><img loading="lazy" src="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/img/filesystem-1.jpg" alt="inode/block 数据存取示意图"  />
图7.1.1、inode/block 数据存取示意图</p>
<p>这种数据存取的方法我们称为索引式文件系统（indexed allocation）。那有没有其他的惯用文件系统可以比较一下啊？ 有的，那就是我们惯用的U盘（闪存），U盘使用的文件系统一般为 FAT 格式。FAT 这种格式的文件系统并没有 inode 存在，所以 FAT 没有办法将这个文件的所有 block 在一开始就读取出来。每个 block 号码都记录在前一个 block 当中， 他的读取方式有点像下面这样：</p>
<p><img loading="lazy" src="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/img/filesystem-2.jpg" alt="FAT文件系统数据存取示意图"  />
图7.1.2、FAT文件系统数据存取示意图</p>
<p>​	上图中我们假设文件的数据依序写入1-&gt;7-&gt;4-&gt;15号这四个 block 号码中， 但这个文件系统没有办法一口气就知道四个 block 的号码，他得要一个一个的将 block 读出后，才会知道下一个 block 在何处。 如果同一个文件数据写入的 block 分散的太过厉害时，则我们的磁头将无法在磁盘转一圈就读到所有的数据， 因此磁盘就会多转好几圈才能完整的读取到这个文件的内容！</p>
<p>常常会听到所谓的“磁盘重组”吧？ 需要磁盘重组的原因就是文件写入的 block 太过于离散了，此时文件读取的性能将会变的很差所致。 这个时候可以通过磁盘重组将同一个文件所属的 blocks 汇整在一起，这样数据的读取会比较容易啊！ 想当然尔，FAT 的文件系统需要三不五时的磁盘重组一下，那么 Ext2 是否需要磁盘重整呢？</p>
<p>由于 Ext2 是索引式文件系统，基本上不太需要常常进行磁盘重组的。但是如果文件系统使用太久， 常常删除/编辑/新增文件时，那么还是可能会造成文件数据太过于离散的问题，此时或许会需要进行重整一下的。 不过，老实说，鸟哥倒是没有在 Linux 操作系统上面进行过 Ext2/Ext3 文件系统的磁盘重组.</p>
<ul>
<li>每个 <code>filesystem</code> 都有独立的<code>inode / block / superblock</code>等信息，这个文件系统要能够链接到目录树才能被我们使用。 将文件系统与目录树结合的动作我们称为“挂载”。</li>
<li>重点是：挂载点一定是目录，该目录为进入该文件系统的入口。 因此并不是你有任何文件系统都能使用，必须要“挂载”到目录树的某个目录后，才能够使用该文件系统的。</li>
</ul>
<h3 id="关于硬盘空间满">关于硬盘空间满</h3>
<ul>
<li>
<p>1.指硬盘存储空间满</p>
</li>
<li>
<p>2.<code>inode</code>节点数满了</p>
<ul>
<li>查看<code>inode</code>命令<code>ll -i 文件名</code></li>
<li><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200503212834594.png" alt=""  />
</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200503212215228.png" alt=""  />
</p>
<h2 id="硬链接和软链接">硬链接和软链接</h2>
<p>软链接</p>
<ul>
<li><code>ln -s 源路径 目标路径</code>
<ul>
<li>类似windows操作系统的快捷方式</li>
<li>删除链接文件，源文件不影响</li>
<li>删除源文件，链接文件失效</li>
<li>修改源文件/链接文件，内容都变</li>
<li>软链接可以跨分区</li>
</ul>
</li>
</ul>
<p>硬链接</p>
<ul>
<li>
<p><code>ln 源路径 目标路径</code></p>
<ul>
<li>删除链接文件，源文件无影响</li>
<li>删除源文件，链接文件无影响</li>
<li>修改源文件/链接文件，内容都变</li>
<li>硬链接不可以跨分区</li>
</ul>
</li>
</ul>
<h2 id="软件包管理">软件包管理</h2>
<ul>
<li><code>rpm</code>:readhat package manage</li>
<li><code>rpm -ivh 软件包名</code> 安装
<ul>
<li><code>rpm -qa</code>查看安装的软件包</li>
<li><code>rpm -e 软件包名</code>卸载软件包</li>
</ul>
</li>
<li><code>.tar.gz</code>这种软件包需要编译安装
<ul>
<li>1.解压 <code>tar xvf 压缩包名</code></li>
<li>运行<code>configure</code>指定参数，例如：<code>--prefix:安装路径</code></li>
<li>2.编译（<code>gcc glibc</code>） <code>make</code>   <code>make install</code></li>
</ul>
</li>
</ul>
<h2 id="yum软件包管理centos">yum软件包管理（Centos）</h2>
<ul>
<li>
<p><code>yum install 软件包名</code></p>
</li>
<li>
<p>本地的yum仓库路径<code>/etc/yum.repos.d/</code></p>
</li>
<li>
<p>指定yum仓库的加载顺序</p>
<ul>
<li>安装完yum-priorities插件后需要设置<code>/etc/yum.repos.d/ </code>目录下的<code>.repo</code>相关文件（如<code>CentOS-Base.repo</code>），在这些文件中插入顺序指令：priority=N （N为1到99的正整数，数值越小越优先）</li>
<li>一般配置<code>[base], [addons], [updates], [extras] </code>的<code>priority=1，[CentOSplus], [contrib] 的priority=2，</code>其他第三的软件源为：<code>priority=N</code> （推荐N&gt;10）
以<code>CentOS-Base.repo </code>为例：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-D" data-lang="D"></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>[base]
name=CentOS-$releasever - Base
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os
baseurl=http://ftp.sjtu.edu.cn/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5
priority=1</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程序堆栈 on Luenci</title>
    <link>https://luenci.com/en/tags/%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88/</link>
    <description>Recent content in 程序堆栈 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解堆、栈、CPU密集型 和 I/O 密集型任务</title>
      <link>https://luenci.com/en/posts/%E5%85%B3%E4%BA%8E%E5%A0%86%E6%A0%88cpu%E5%AF%86%E9%9B%86%E5%9E%8B-%E5%92%8C-io-%E5%AF%86%E9%9B%86%E5%9E%8B%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E5%85%B3%E4%BA%8E%E5%A0%86%E6%A0%88cpu%E5%AF%86%E9%9B%86%E5%9E%8B-%E5%92%8C-io-%E5%AF%86%E9%9B%86%E5%9E%8B%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;关于堆栈cpu密集型-和-io-密集型知识&#34;&gt;关于堆、栈、CPU密集型 和 I/O 密集型知识&lt;/h1&gt;
&lt;h2 id=&#34;程序中的内存分配方式cc&#34;&gt;程序中的内存分配方式（c/c++）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1、栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其
操作方式类似于数据结构中的栈。&lt;/li&gt;
&lt;li&gt;2、堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回
收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链。&lt;/li&gt;
&lt;li&gt;3、全局区（静态区）（static）：全局变量和静态变量的存储是放在一块的，初始化的
全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另
一块区域。 - 程序结束后由系统释放。&lt;/li&gt;
&lt;li&gt;4、文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放&lt;/li&gt;
&lt;li&gt;5、程序代码区：存放函数体的二进制代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python的堆栈解析&#34;&gt;python的堆栈解析&lt;/h2&gt;
&lt;p&gt;因为是动态语言**，python中的所有变量内容都存在堆（heap）中**，而&lt;strong&gt;变量名只是堆中内容的引用，存放在栈（stack）中&lt;/strong&gt;，便于用户去间接操作堆中的数据。&lt;/p&gt;
&lt;p&gt;堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式，主要有如下几种区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）管理方式不同。栈由操作系统自动分配释放，无需我们手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏；&lt;/li&gt;
&lt;li&gt;（2）空间大小不同。每个进程拥有的栈的大小要远远小于堆的大小。理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小 64bits 的 Windows 默认 1MB，64bits 的 Linux 默认 10MB；&lt;/li&gt;
&lt;li&gt;（3）生长方向不同。堆的生长方向向上，内存地址由低到高；栈的生长方向向下，内存地址由高到低。&lt;/li&gt;
&lt;li&gt;（4）分配方式不同。堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。动态分配由&lt;code&gt;malloc&lt;/code&gt;函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。&lt;/li&gt;
&lt;li&gt;（5）分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。&lt;/li&gt;
&lt;li&gt;（6）存放内容不同。栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等。&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<h1 id="关于堆栈cpu密集型-和-io-密集型知识">关于堆、栈、CPU密集型 和 I/O 密集型知识</h1>
<h2 id="程序中的内存分配方式cc">程序中的内存分配方式（c/c++）</h2>
<ul>
<li>1、栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其
操作方式类似于数据结构中的栈。</li>
<li>2、堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回
收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链。</li>
<li>3、全局区（静态区）（static）：全局变量和静态变量的存储是放在一块的，初始化的
全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另
一块区域。 - 程序结束后由系统释放。</li>
<li>4、文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放</li>
<li>5、程序代码区：存放函数体的二进制代码。</li>
</ul>
<h2 id="python的堆栈解析">python的堆栈解析</h2>
<p>因为是动态语言**，python中的所有变量内容都存在堆（heap）中**，而<strong>变量名只是堆中内容的引用，存放在栈（stack）中</strong>，便于用户去间接操作堆中的数据。</p>
<p>堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式，主要有如下几种区别：</p>
<ul>
<li>（1）管理方式不同。栈由操作系统自动分配释放，无需我们手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏；</li>
<li>（2）空间大小不同。每个进程拥有的栈的大小要远远小于堆的大小。理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小 64bits 的 Windows 默认 1MB，64bits 的 Linux 默认 10MB；</li>
<li>（3）生长方向不同。堆的生长方向向上，内存地址由低到高；栈的生长方向向下，内存地址由高到低。</li>
<li>（4）分配方式不同。堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。动态分配由<code>malloc</code>函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。</li>
<li>（5）分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。</li>
<li>（6）存放内容不同。栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等。</li>
</ul>
<h2 id="函数入栈和出栈">函数入栈和出栈</h2>
<ul>
<li>
<p>当主函数调用另外一个函数的时候，要对当前函数执行断点进行保存，需要使用栈来实现，首先入栈的是主函数下一条语句的地址，即扩展指针寄存器的内容（EIP），然后是当前栈帧的底部地址，即扩展基址指针寄存器内容（EBP），再然后是被调函数的实参等。一般情况下是按照从右向左的顺序入栈，之后是被调函数的局部变量，注意静态变量是存放在数据段或者BSS段，是不入栈的。</p>
</li>
<li>
<p>出栈的顺序正好相反，最终栈顶指向主函数下一条语句的地址，主程序又从该地址开始执行。堆，一般情况堆顶使用一个字节的空间来存放堆的大小，而堆中具体存放内容是由程序员来填充的。</p>
<p>从以上可以看到，堆和栈相比，由于大量<code>malloc()/free()</code>或<code>new/delete</code>的使用，容易造成大量的内存碎片，并且可能引发用户态和核心态的切换，效率较低。</p>
</li>
</ul>
<h3 id="小结">小结</h3>
<ul>
<li>栈相比于堆，在程序中应用较为广泛，最常见的是函数的调用过程由栈来实现，函数返回地址、EBP、实参和局部变量都采用栈的方式存放。虽然栈有众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，主要还是用堆。</li>
</ul>
<p>无论是堆还是栈，在内存使用时都要防止非法越界，越界导致的非法内存访问可能会摧毁程序的堆、栈数据，轻则导致程序运行处于不确定状态，获取不到预期结果，重则导致程序异常崩溃，这些都是我们编程时与内存打交道时应该注意的问题。</p>
<h1 id="cpu-密集型-和i--o-密集型">CPU 密集型 和I / O 密集型</h1>
<h2 id="cpu密集型cpu-bound"><strong>CPU密集型（CPU-bound）</strong></h2>
<ul>
<li>CPU密集型也叫计算密集型，指的是<strong>系统的硬盘、内存性能相对CPU要好很多</strong>，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，<strong>I/O在很短的时间就可以完成</strong>，而CPU还有许多运算要处理，CPU Loading很高。</li>
<li>在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。</li>
</ul>
<p>CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。</p>
<h2 id="io密集型io-bound"><strong>IO密集型（I/O bound）</strong></h2>
<ul>
<li>I/O密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，<strong>大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作</strong>，此时CPU Loading并不高。</li>
<li>I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。</li>
</ul>
<h2 id="cpu密集型-vs-io密集型"><strong>CPU密集型 vs IO密集型</strong></h2>
<p>我们可以把任务分为计算密集型和IO密集型。</p>
<p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p>
<ul>
<li>
<p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p>
<p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p>
</li>
<li>
<p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p>
</li>
</ul>
<blockquote>
<p><strong>总之，计算密集型程序适合C语言多线程，I/O密集型适合脚本语言开发的多线程。</strong></p></blockquote>]]></content:encoded>
    </item>
  </channel>
</rss>

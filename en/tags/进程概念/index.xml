<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>进程概念 on Luenci</title>
    <link>https://luenci.com/en/tags/%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5/</link>
    <description>Recent content in 进程概念 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python的进程概念</title>
      <link>https://luenci.com/en/posts/%E5%A4%9A%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E5%A4%9A%E8%BF%9B%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;进程&#34;&gt;进程&lt;/h1&gt;
&lt;h2 id=&#34;进程概念&#34;&gt;进程概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程（Process）是资源分配的最小单位，是线程的容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序是固定不变的，而进程会根据运行需要，让操作系统动态分配各种资源的CPU的时间片轮转，在不同的时间段切换执行不同的进程，但是切换进程是比较耗时的；就引来了轻量级进程，也就是所谓的线程，一个进程中包括多个线程（代码流，其实也就是进程中同时跑的多个方法体）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序：例&lt;code&gt;xxx.py&lt;/code&gt;这是程序，是一个静态的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程：一个程序运行起来后，代码+用到的资源称之为进程，它是操作系统分配资源的基本单元。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程状态&#34;&gt;进程状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就绪态：运行的条件都已经满足，正在等在cpu执行&lt;/li&gt;
&lt;li&gt;执行态：cpu正在执行其功能&lt;/li&gt;
&lt;li&gt;等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程的创建---multiprocessing&#34;&gt;进程的创建 - multiprocessing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;·创建子进程跟创建线程十分类似，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start0方法后动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process语法结构如下：
&lt;code&gt;Process([group [，target[，name，[args[，kwargs]]]）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;target：如果传递了函数的引用，这个子进程就执行这里（函数）的代码&lt;/li&gt;
&lt;li&gt;args：给target指定的函数传递的参数，以元组的方式传递&lt;/li&gt;
&lt;li&gt;kwargs：给target指定的函数传递命名参数&lt;/li&gt;
&lt;li&gt;name：给进程设定一个名字，可以不设定&lt;/li&gt;
&lt;li&gt;group：指定进程组，大多数情况下用不到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process创建的实例对象的常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start()：后动子进程实例（创建子进程）&lt;/li&gt;
&lt;li&gt;is_alive：判断进程子进程是否还在活着&lt;/li&gt;
&lt;li&gt;join([timeout]）：是否等待子进程执行结束，或等待多少秒o&lt;/li&gt;
&lt;li&gt;terminate：不管任务是否完成，立即终止子进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process创建的实例对象的常用属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name：当前进程的别名，默认为Process-N，N为从1开始递增的整数&lt;/li&gt;
&lt;li&gt;pid：当前进程的pid（进程号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;linux&lt;/code&gt;系统可使用&lt;code&gt;kill&lt;/code&gt;命令结束进程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<h1 id="进程">进程</h1>
<h2 id="进程概念">进程概念</h2>
<ul>
<li>
<p>进程（Process）是资源分配的最小单位，是线程的容器。</p>
</li>
<li>
<p>程序是固定不变的，而进程会根据运行需要，让操作系统动态分配各种资源的CPU的时间片轮转，在不同的时间段切换执行不同的进程，但是切换进程是比较耗时的；就引来了轻量级进程，也就是所谓的线程，一个进程中包括多个线程（代码流，其实也就是进程中同时跑的多个方法体）</p>
</li>
<li>
<p>程序：例<code>xxx.py</code>这是程序，是一个静态的</p>
</li>
<li>
<p>进程：一个程序运行起来后，代码+用到的资源称之为进程，它是操作系统分配资源的基本单元。</p>
</li>
</ul>
<h2 id="进程状态">进程状态</h2>
<ul>
<li>
<p>工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态</p>
</li>
<li>
<p>进程状态</p>
<ul>
<li>就绪态：运行的条件都已经满足，正在等在cpu执行</li>
<li>执行态：cpu正在执行其功能</li>
<li>等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态</li>
</ul>
</li>
</ul>
<h2 id="进程的创建---multiprocessing">进程的创建 - multiprocessing</h2>
<ul>
<li>
<p>multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情。</p>
</li>
<li>
<p>·创建子进程跟创建线程十分类似，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start0方法后动</p>
</li>
<li>
<p>Process语法结构如下：
<code>Process([group [，target[，name，[args[，kwargs]]]）</code></p>
<ul>
<li>target：如果传递了函数的引用，这个子进程就执行这里（函数）的代码</li>
<li>args：给target指定的函数传递的参数，以元组的方式传递</li>
<li>kwargs：给target指定的函数传递命名参数</li>
<li>name：给进程设定一个名字，可以不设定</li>
<li>group：指定进程组，大多数情况下用不到</li>
</ul>
</li>
<li>
<p>Process创建的实例对象的常用方法：</p>
<ul>
<li>start()：后动子进程实例（创建子进程）</li>
<li>is_alive：判断进程子进程是否还在活着</li>
<li>join([timeout]）：是否等待子进程执行结束，或等待多少秒o</li>
<li>terminate：不管任务是否完成，立即终止子进程</li>
</ul>
</li>
<li>
<p>Process创建的实例对象的常用属性：</p>
<ul>
<li>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数</li>
<li>pid：当前进程的pid（进程号）</li>
</ul>
</li>
<li>
<p><code>linux</code>系统可使用<code>kill</code>命令结束进程</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">multiprocessing</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">os</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">time</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">work1</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">in</span> range(<span style="color:#a5d6ff">10</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#8b949e;font-style:italic"># 获取进程的父id</span>
</span></span><span style="display:flex;"><span>        print(<span style="color:#a5d6ff">&#34;正在运行work1  第</span><span style="color:#a5d6ff">{}</span><span style="color:#a5d6ff">次..进程id</span><span style="color:#a5d6ff">{}</span><span style="color:#a5d6ff">，父进程id</span><span style="color:#a5d6ff">{}</span><span style="color:#a5d6ff">&#34;</span><span style="color:#ff7b72;font-weight:bold">.</span>format(i, os<span style="color:#ff7b72;font-weight:bold">.</span>getpid(), os<span style="color:#ff7b72;font-weight:bold">.</span>getppid()))
</span></span><span style="display:flex;"><span>        time<span style="color:#ff7b72;font-weight:bold">.</span>sleep(<span style="color:#a5d6ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 获取主进程名称</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;主进程名称&#34;</span>, multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>current_process())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 获取进程的编号</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 1.获取进程id multiprocessing.current_process().pid</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;主进程编号&#34;</span>, multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>current_process()<span style="color:#ff7b72;font-weight:bold">.</span>pid)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 2. 模块os</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># print(os.getpid())</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    process_obj <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Process(target<span style="color:#ff7b72;font-weight:bold">=</span>work1, name<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#34;进程一&#34;</span>)
</span></span><span style="display:flex;"><span>    process_obj<span style="color:#ff7b72;font-weight:bold">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;XXXX&#34;</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>out:
</span></span><span style="display:flex;"><span>    主进程名称 <span style="color:#ff7b72;font-weight:bold">&lt;</span>_MainProcess(MainProcess, started)<span style="color:#ff7b72;font-weight:bold">&gt;</span>
</span></span><span style="display:flex;"><span>    主进程编号 <span style="color:#a5d6ff">31776</span>
</span></span><span style="display:flex;"><span>    XXXX
</span></span><span style="display:flex;"><span>    正在运行work1  第0次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第1次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第2次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第3次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第4次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第5次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第6次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第7次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第8次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span><span style="display:flex;"><span>    正在运行work1  第9次<span style="color:#ff7b72;font-weight:bold">..</span>进程id43088<span style="color:#f85149">，</span>父进程id31776
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="进程参数全局变量">进程参数，全局变量</h2>
<ul>
<li>进程间不能共享全局变量</li>
<li>子进程在运行时候，会将主进程的内容<code>复制</code>到自己进程中，修改只限自己进程有效。不影响其他进程和主进程</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">multiprocessing</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 定义全局变量</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">time</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g_num <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">work1</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">global</span> g_num
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">in</span> range(<span style="color:#a5d6ff">10</span>):
</span></span><span style="display:flex;"><span>        g_num <span style="color:#ff7b72;font-weight:bold">+=</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;work1---------&#34;</span>, g_num)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">work2</span>():
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;work1---------&#34;</span>, g_num)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    p1 <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Process(target<span style="color:#ff7b72;font-weight:bold">=</span>work1)
</span></span><span style="display:flex;"><span>    p2 <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Process(target<span style="color:#ff7b72;font-weight:bold">=</span>work2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    p1<span style="color:#ff7b72;font-weight:bold">.</span>start()
</span></span><span style="display:flex;"><span>    p2<span style="color:#ff7b72;font-weight:bold">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    time<span style="color:#ff7b72;font-weight:bold">.</span>sleep(<span style="color:#a5d6ff">3</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;---------main-----------&#34;</span>, g_num)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>out:
</span></span><span style="display:flex;"><span>    work1<span style="color:#ff7b72;font-weight:bold">---------</span> <span style="color:#a5d6ff">20</span>
</span></span><span style="display:flex;"><span>    work1<span style="color:#ff7b72;font-weight:bold">---------</span> <span style="color:#a5d6ff">10</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72;font-weight:bold">---------</span>main<span style="color:#ff7b72;font-weight:bold">-----------</span> <span style="color:#a5d6ff">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="守护进程">守护进程</h2>
<ul>
<li><code>p1.daemon=True</code>设置子进程<code>p1</code>守护主进程，当主进程结束的时候，子进程也随之结束</li>
<li><code>p1.terminate（）</code>终止进程执行，并非是守护进程</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">multiprocessing</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">time</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">work1</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">in</span> range(<span style="color:#a5d6ff">10</span>):
</span></span><span style="display:flex;"><span>        print(<span style="color:#a5d6ff">&#34;正在运行work1...</span><span style="color:#a5d6ff">{}</span><span style="color:#a5d6ff">&#34;</span><span style="color:#ff7b72;font-weight:bold">.</span>format(time<span style="color:#ff7b72;font-weight:bold">.</span>ctime()))
</span></span><span style="display:flex;"><span>        time<span style="color:#ff7b72;font-weight:bold">.</span>sleep(<span style="color:#a5d6ff">0.5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    process_obj <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Process(target<span style="color:#ff7b72;font-weight:bold">=</span>work1)
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 开启守护</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># process_obj.daemon = True</span>
</span></span><span style="display:flex;"><span>    process_obj<span style="color:#ff7b72;font-weight:bold">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#a5d6ff">&#34;我睡两秒就结束&#34;</span>, time<span style="color:#ff7b72;font-weight:bold">.</span>ctime())
</span></span><span style="display:flex;"><span>    time<span style="color:#ff7b72;font-weight:bold">.</span>sleep(<span style="color:#a5d6ff">2</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 终止进程</span>
</span></span><span style="display:flex;"><span>    process_obj<span style="color:#ff7b72;font-weight:bold">.</span>terminate()
</span></span><span style="display:flex;"><span>    exit()
</span></span><span style="display:flex;"><span>out:
</span></span><span style="display:flex;"><span>    我睡两秒就结束   Thu Nov <span style="color:#a5d6ff">14</span> <span style="color:#a5d6ff">16</span>:<span style="color:#a5d6ff">04</span>:<span style="color:#a5d6ff">29</span> <span style="color:#a5d6ff">2019</span>
</span></span><span style="display:flex;"><span>    正在运行work1<span style="color:#ff7b72;font-weight:bold">...</span>Thu Nov <span style="color:#a5d6ff">14</span> <span style="color:#a5d6ff">16</span>:<span style="color:#a5d6ff">04</span>:<span style="color:#a5d6ff">29</span> <span style="color:#a5d6ff">2019</span>
</span></span><span style="display:flex;"><span>    正在运行work1<span style="color:#ff7b72;font-weight:bold">...</span>Thu Nov <span style="color:#a5d6ff">14</span> <span style="color:#a5d6ff">16</span>:<span style="color:#a5d6ff">04</span>:<span style="color:#a5d6ff">30</span> <span style="color:#a5d6ff">2019</span>
</span></span><span style="display:flex;"><span>    正在运行work1<span style="color:#ff7b72;font-weight:bold">...</span>Thu Nov <span style="color:#a5d6ff">14</span> <span style="color:#a5d6ff">16</span>:<span style="color:#a5d6ff">04</span>:<span style="color:#a5d6ff">30</span> <span style="color:#a5d6ff">2019</span>
</span></span><span style="display:flex;"><span>    正在运行work1<span style="color:#ff7b72;font-weight:bold">...</span>Thu Nov <span style="color:#a5d6ff">14</span> <span style="color:#a5d6ff">16</span>:<span style="color:#a5d6ff">04</span>:<span style="color:#a5d6ff">31</span> <span style="color:#a5d6ff">2019</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="进程线程对比">进程线程对比</h1>
<ul>
<li>功能
<ul>
<li>进程，能够完成多任务，比如在一台电脑上能够同时运行多个<code>QQ</code></li>
<li>线程，能够完成多任务，比如一个<code>QQ</code>中的多个聊天窗口</li>
</ul>
</li>
<li>使用区别
<ul>
<li><code>进程是系统进行资源分配和调度的一个独立单位</code>。</li>
<li><code>线程是进程的一介实体，是CPU调度和分派的基本单位</code>，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li>
<li>一个程序至少有一个进程，一个进程至少有一个线程.</li>
<li>线程的划分尺度小于进程（资源比进程少），使得多线程程序的并发性高。</li>
<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率</li>
</ul>
</li>
<li>线程不能独立运行，必须依赖于线程</li>
</ul>
<table>
  <thead>
      <tr>
          <th>对比维度</th>
          <th>多进程</th>
          <th>多线程</th>
          <th>总结</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>数据共享，同步</td>
          <td>数据共享复杂，需要用<code>IPC</code>；数据是分开因为共享进程数据，数据共享简单</td>
          <td>因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂</td>
          <td>各有千秋</td>
      </tr>
      <tr>
          <td>内存、CPU</td>
          <td>占用内存多，切换复杂，CPU利用率低</td>
          <td>占用内存少，切换简单，PU利用率高CPU</td>
          <td>线程占优</td>
      </tr>
      <tr>
          <td>创建销毁、切换</td>
          <td>创建销毁、切换复杂，速度慢</td>
          <td>创建销毁、切换简单，速度很快</td>
          <td>线程占优</td>
      </tr>
      <tr>
          <td>编程，调试</td>
          <td>编程简单，调试简单</td>
          <td>编程复杂，调试复杂</td>
          <td>进程占优</td>
      </tr>
      <tr>
          <td>可靠性</td>
          <td>进程间不会互相影响</td>
          <td>一个线程挂掉将导致整个进程挂掉</td>
          <td>进程占优</td>
      </tr>
      <tr>
          <td>分布式</td>
          <td>适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单</td>
          <td>应用于多核分布式</td>
          <td>进程占优</td>
      </tr>
  </tbody>
</table>
<h2 id="进程线程取舍">进程线程取舍</h2>
<ul>
<li>需要频繁创建销毁的先使用线程；（如：Web服务器）</li>
<li>线程的切换速度快，所以在需要大量计算，切换频繁时用线程（如图像处理、算法处理）</li>
<li>因为对CPU系统的效率使用上线程更占优，所以可能要发展到多机分布的用进程，多核分布用线程；</li>
<li>需要更稳定安全时，适合选择进程；需要速度时，选择线程更好。</li>
<li>都满足需求的情况下，用你最熟悉、最拿手的方式
需要提醒的是：虽然有这么多的选择原则，但实际应用中基本上都是“进程+线程”的结合方式</li>
<li>在Python的原始解释器CPython中存在着GlL（Global Interpreter Lock，全局解释器锁），因此在解释执行python代码时，会产生互斥锁来限制线程对共享资源的访问，直到解释器遇到I/O操作或者操作次数达到一定数目时才会释放GlL。造成了即使在多核CPU中，多线程也只是做着分时切换而已</li>
</ul>
<h1 id="消息队列">消息队列</h1>
<ul>
<li>可以使用multiprocessing模块的Queue实现多进程之间的数据传递</li>
<li>Queue本身是一个消息列队程序</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">multiprocessing</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 创建队列(指定长度)</span>
</span></span><span style="display:flex;"><span>queue <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Queue(<span style="color:#a5d6ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 向队列中放值</span>
</span></span><span style="display:flex;"><span>queue<span style="color:#ff7b72;font-weight:bold">.</span>put(<span style="color:#a5d6ff">&#34;Luenci&#34;</span>)
</span></span><span style="display:flex;"><span>queue<span style="color:#ff7b72;font-weight:bold">.</span>put(<span style="color:#a5d6ff">1</span>)
</span></span><span style="display:flex;"><span>queue<span style="color:#ff7b72;font-weight:bold">.</span>put([<span style="color:#a5d6ff">5</span>, <span style="color:#a5d6ff">2</span>])
</span></span><span style="display:flex;"><span>queue<span style="color:#ff7b72;font-weight:bold">.</span>put((<span style="color:#a5d6ff">9</span>, <span style="color:#a5d6ff">8</span>, <span style="color:#a5d6ff">7</span>))
</span></span><span style="display:flex;"><span>queue<span style="color:#ff7b72;font-weight:bold">.</span>put({<span style="color:#a5d6ff">&#34;a&#34;</span>: <span style="color:#a5d6ff">6</span>, <span style="color:#a5d6ff">&#34;b&#34;</span>: <span style="color:#a5d6ff">8</span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 判断队列是否全满</span>
</span></span><span style="display:flex;"><span>isfull <span style="color:#ff7b72;font-weight:bold">=</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>full()
</span></span><span style="display:flex;"><span>print(<span style="color:#a5d6ff">&#34;队列为全满：&#34;</span>, isfull)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 长度为5，放入第6个数据后，队列就进行入了阻塞状态，默认会等待以列先取出值再放入新的值</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># queue.put(22)</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 不等待的放入</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># queue.put_nowait(11)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 向队列中取值</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 当队列为空的时候，再取值的时候，程序会进行阻塞状态，等待队列中有值再取</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>value <span style="color:#ff7b72;font-weight:bold">=</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>get()
</span></span><span style="display:flex;"><span>print(value)
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 当队列为空的时候，再取值的时候，程序会直接报错</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># value = queue.get_nowait()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 队列元素个数</span>
</span></span><span style="display:flex;"><span>num <span style="color:#ff7b72;font-weight:bold">=</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>qsize()
</span></span><span style="display:flex;"><span>print(num)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 判断队列是否为空</span>
</span></span><span style="display:flex;"><span>empty <span style="color:#ff7b72;font-weight:bold">=</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>empty()
</span></span><span style="display:flex;"><span>print(<span style="color:#a5d6ff">&#34;队列为空？：&#34;</span>, empty)
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="进程池">进程池</h1>
<ul>
<li>进程池概述</li>
<li>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</li>
</ul>
<p><img loading="lazy" src="https://i.postimg.cc/wMY848xp/image-20191114203943978.png" alt="image-20191114203943978"  />
</p>
<ul>
<li>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会用之前的进程来执行新的任务。</li>
</ul>
<h2 id="进程池实现方式">进程池实现方式</h2>
<ul>
<li>同步方式：<code>pool.apply()</code></li>
<li>异步方式<code>pool.apply_async（copy_work）</code></li>
</ul>
<h2 id="核心方法">核心方法</h2>
<ul>
<li><code>multiprocessing.Pool</code>常用函数解析：
<ul>
<li>apply（）：&ndash;进程池中进程以同步方式执行任务</li>
</ul>
</li>
</ul>
<p><img loading="lazy" src="https://i.postimg.cc/SR4Q2zMC/image-20191114204338304.png" alt="image-20191114204338304"  />
</p>
<ul>
<li><code>apply_async（func[，args[，kwds]]）</code>：&ndash;使用非阻塞方式调用<code>func</code>（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），<code>args</code>为传递给<code>func</code>的参数列表，<code>kwds</code>为传递给<code>func</code>的关键字参数列表</li>
</ul>
<p><img loading="lazy" src="https://i.postimg.cc/vTGgRKXJ/image-20191114204556059.png" alt="image-20191114204556059"  />
</p>
<h1 id="进程池中的进程通信">进程池中的进程通信</h1>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">64
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">65
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">66
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">67
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">multiprocessing</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> <span style="color:#ff7b72">time</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">write_queue</span>(queue):
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">in</span> range(<span style="color:#a5d6ff">10</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">if</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>full():
</span></span><span style="display:flex;"><span>            print(<span style="color:#a5d6ff">&#34;队列已满&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#ff7b72">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">else</span>:
</span></span><span style="display:flex;"><span>            queue<span style="color:#ff7b72;font-weight:bold">.</span>put(i)
</span></span><span style="display:flex;"><span>            print(<span style="color:#a5d6ff">&#34;成功添加：&#34;</span>, i)
</span></span><span style="display:flex;"><span>            time<span style="color:#ff7b72;font-weight:bold">.</span>sleep(<span style="color:#a5d6ff">0.5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">read_queue</span>(queue):
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">while</span> <span style="color:#79c0ff">True</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">if</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>qsize() <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#a5d6ff">&#34;队列已空&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#ff7b72">break</span>
</span></span><span style="display:flex;"><span>        value <span style="color:#ff7b72;font-weight:bold">=</span> queue<span style="color:#ff7b72;font-weight:bold">.</span>get()
</span></span><span style="display:flex;"><span>        print(<span style="color:#a5d6ff">&#34;已经读取&#34;</span>, value)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 创建进程池</span>
</span></span><span style="display:flex;"><span>    pool <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Pool(<span style="color:#a5d6ff">3</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 创建进程池中的队列</span>
</span></span><span style="display:flex;"><span>    queue <span style="color:#ff7b72;font-weight:bold">=</span> multiprocessing<span style="color:#ff7b72;font-weight:bold">.</span>Manager()<span style="color:#ff7b72;font-weight:bold">.</span>Queue(<span style="color:#a5d6ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 同步的方式执行</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># pool.apply(write_queue, args=(queue,))</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># pool.apply(read_queue, args=(queue,))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 异步的方式执行</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># apply_async（）返回值ApplyResult对象，该对象有一个wait（）的方法</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#ff7b72;font-weight:bold">=</span> pool<span style="color:#ff7b72;font-weight:bold">.</span>apply_async(write_queue, args<span style="color:#ff7b72;font-weight:bold">=</span>(queue,))
</span></span><span style="display:flex;"><span>    result<span style="color:#ff7b72;font-weight:bold">.</span>wait()
</span></span><span style="display:flex;"><span>    pool<span style="color:#ff7b72;font-weight:bold">.</span>apply_async(read_queue, args<span style="color:#ff7b72;font-weight:bold">=</span>(queue,))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 不再接收新的任务</span>
</span></span><span style="display:flex;"><span>    pool<span style="color:#ff7b72;font-weight:bold">.</span>close()
</span></span><span style="display:flex;"><span>    pool<span style="color:#ff7b72;font-weight:bold">.</span>join()
</span></span><span style="display:flex;"><span>out:
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">0</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">2</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">3</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">4</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">5</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">6</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">7</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">8</span>
</span></span><span style="display:flex;"><span>    成功添加<span style="color:#f85149">：</span> <span style="color:#a5d6ff">9</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">0</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">2</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">3</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">4</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">5</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">6</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">7</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">8</span>
</span></span><span style="display:flex;"><span>    已经读取 <span style="color:#a5d6ff">9</span>
</span></span><span style="display:flex;"><span>    队列已空
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>

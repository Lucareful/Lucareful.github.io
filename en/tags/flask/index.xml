<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Flask on Luenci</title>
    <link>https://luenci.com/en/tags/flask/</link>
    <description>Recent content in Flask on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flask框架学习</title>
      <link>https://luenci.com/en/posts/flask%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/flask%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;基本概念&#34;&gt;基本概念&lt;/h1&gt;
&lt;h2 id=&#34;1静态资源&#34;&gt;1.静态资源&lt;/h2&gt;
&lt;p&gt;​	一旦准备好资源，不在需要经常变化的资源.由于该资源不需要经常变化，所以可以提前准备.比如&lt;code&gt;png/jpg/css/js&lt;/code&gt;等文件&lt;/p&gt;
&lt;h2 id=&#34;2动态资源&#34;&gt;2.动态资源&lt;/h2&gt;
&lt;p&gt;​	和静态资源相反，这种资源会经常变化.比如，我们要编写一个电商网站，我们无法预测用户在浏览商品时选择什么样的条件。
根据用户选择条件不同，我们给用户提供可供选择的商品就不同.这种资源无法提前准备。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="基本概念">基本概念</h1>
<h2 id="1静态资源">1.静态资源</h2>
<p>​	一旦准备好资源，不在需要经常变化的资源.由于该资源不需要经常变化，所以可以提前准备.比如<code>png/jpg/css/js</code>等文件</p>
<h2 id="2动态资源">2.动态资源</h2>
<p>​	和静态资源相反，这种资源会经常变化.比如，我们要编写一个电商网站，我们无法预测用户在浏览商品时选择什么样的条件。
根据用户选择条件不同，我们给用户提供可供选择的商品就不同.这种资源无法提前准备。</p>
<h2 id="3模板文件">3.模板文件</h2>
<p>​	在用户搜索各种商品的时候，大家是否发现虽然大家的条件不同，但是显示商品的网页中除了那些商品信息整个网页的结构/布局几乎是一模一样的.
​	而模板文件就是网页中通用的结构构成的一个页面.这个页面中不含有任何用户需要查看的数据，当用户查询数据的时候会将最终的结果放到模板中形成用户真正需要的页面。
​	这就好比，生活中一个毛坯房可以装饰上不同的风格.我们把模板文件转化为用户真正看到的网页的过程就称为模板替换.</p>
<h1 id="通信规范">通信规范</h1>
<p>服务器和浏览器之间通信使用HTTP协议
同理，框架和web服务器之间进行通信也需要一个协议为了简单明了，一个简单的协议（例子）：</p>
<ul>
<li>1、web服务器在接收到浏览器的动态套源请求的时候会将请求报文请求切割拆分为键值对放到一个字典中</li>
<li>2、web服务器调用框架提供的方法执行框架的功能并且传给框架一个字典</li>
<li>3、框架通过字典取出用户请求根据请求产生处理状态/响应头信息/响应体</li>
<li>4、框架通过返回值将处理状态/响应头信息/响应体给服务器，完成一次动态资源请求的过程</li>
</ul>
<h1 id="flask程序运行过程">Flask程序运行过程</h1>
<ul>
<li>
<p>1.当客户端想要获取资源时，一般会通过浏览器发起HTTP请求。</p>
</li>
<li>
<p>2.此时，<code>Web</code>服务器会把来自客户端的所有请求都交给Flask程序实例</p>
</li>
<li>
<p>3.程序实例使用<code>Werkzeug</code>来做路由分发（<code>URL</code>请求和视图函数之间的对应关系）。</p>
</li>
<li>
<p>4.根据每个<code>URL</code>请求，找到具体的视图函数并进行调用。</p>
<ul>
<li>在<code>Flask</code>程序中，路由的实现一般是通过程序实例的装饰器实现。</li>
</ul>
</li>
<li>
<p>5.<code>Flask</code>调用视图函数后，可以返回两种内容：</p>
<ul>
<li>字符串内容：将视图函数的返回值作为响应的内容，返回给客户端（浏览器）</li>
<li><code>HTML</code>模版内容：获取到数据后，把数据传入<code>HTML</code>模板文件中，板引擎负责渲染<code>HTTP</code>响应数据，然后返回响应数据给客户端（浏览器）</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">from</span> <span style="color:#ff7b72">flask</span> <span style="color:#ff7b72">import</span> Flask, render_template
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 创建flask应用实例</span>
</span></span><span style="display:flex;"><span>app <span style="color:#ff7b72;font-weight:bold">=</span> Flask(__name__)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 定义路由及是视图函数（装饰器路由）</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 路由默认只支持GET请求方式，如需要支持别的请求需要添加</span>
</span></span><span style="display:flex;"><span><span style="color:#d2a8ff;font-weight:bold">@app.route</span>(<span style="color:#a5d6ff">&#39;/&#39;</span>, methods<span style="color:#ff7b72;font-weight:bold">=</span>[<span style="color:#a5d6ff">&#39;GET&#39;</span>, <span style="color:#a5d6ff">&#34;POST&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">index</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># return &#34;Hello Flask&#34;z</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> render_template(<span style="color:#a5d6ff">&#34;index.html&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;__main__&#39;</span>
</span></span><span style="display:flex;"><span>    app<span style="color:#ff7b72;font-weight:bold">.</span>run()
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="路由传参">路由传参</h1>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 使用一个视图函数 来显示不同用户的订单信息</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># &lt;&gt;路由定义的参数，&lt;&gt;内需要起个名字</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># int：限定参数类型为int类型，其他的不解析</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">#   -大致原理是将参数强转为int，如果成功，则可以进行路由匹配</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">#   -如果参数无法转换成功，就无法匹配该路由</span>
</span></span><span style="display:flex;"><span><span style="color:#d2a8ff;font-weight:bold">@app.route</span>(<span style="color:#a5d6ff">&#39;/orders/&lt;int:order_id&gt;&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">get_order_id</span>(order_id):
</span></span><span style="display:flex;"><span>    print(type(order_id))
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> <span style="color:#a5d6ff">&#39;order_id </span><span style="color:#a5d6ff">%s</span><span style="color:#a5d6ff">&#39;</span> <span style="color:#ff7b72;font-weight:bold">%</span> order_id
</span></span></code></pre></td></tr></table>
</div>
</div>  <!-- more -->
<h1 id="jinja2模板引擎"><code>Jinja2</code>模板引擎</h1>
<h2 id="模板">模板</h2>
<pre><code>在前面的示例中，视图函数的主要作用是生成请求的响应，这是最简单的请求。实际上，视图函数有两个作用：处理业务逻辑和返回响应内容。在大型应用中，把业务逻辑和表现内容放在一起，会增加代码的复杂度和维护成本。本节学到的模板，它的作用即是承担视图函数的另一个作用，即返回响应内容。
</code></pre>
<ul>
<li>
<p>模板其实是一个包含响应文本的文件，其中用占位符（变量）表示动态部分，告诉模板引擎其具体的值需要从使用的数据中获取</p>
</li>
<li>
<p>使用真实值替换变量，再返回最终得到的字符串，这个过程称为“渲染”</p>
</li>
<li>
<p><code>Flask</code>是使用<code>Jinja2</code>这个模板引擎来渲染模板</p>
</li>
</ul>
<p>使用模板的好处：</p>
<ul>
<li>
<p>视图函数只负责业务逻辑和数据处理（业务逻辑方面）</p>
</li>
<li>
<p>而模板则取到视图函数的数据结果进行展示（视图展示方面）</p>
</li>
<li>
<p>代码结构清晰，耦合度低</p>
</li>
</ul>
<h2 id="jinjia2"><code>JinJia2</code></h2>
<p>两个概念：</p>
<ul>
<li>
<p><code>Jinja2</code>：是Python下一个被广泛应用的模板引擎，是由Python实现的模板语言，他的设计思想来源于<code>Django</code>的模板引擎，并扩展了其语法和一系列强大的功能，其是<code>Flask</code>内置的模板语言。</p>
</li>
<li>
<p>模板语言：是一种被设计来自动生成文档的简单文本格式，在模板语言中，一般都会把一些变量传给模板，替换模板的特定位置上预先定义好的占位变量名。</p>
</li>
</ul>
<p>渲染模版函数</p>
<ul>
<li>
<p><code>Flask</code>提供的<code>render_template </code>函数封装了该模板引擎</p>
</li>
<li>
<p><code>render_template</code>函数的第一个参数是模板的文件名，后面的参数都是键值对，表示模板中变量对应的真实值。</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#d2a8ff;font-weight:bold">@app.route</span>(<span style="color:#a5d6ff">&#39;/&#39;</span>, methods<span style="color:#ff7b72;font-weight:bold">=</span>[<span style="color:#a5d6ff">&#39;GET&#39;</span>, <span style="color:#a5d6ff">&#34;POST&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">index</span>():
</span></span><span style="display:flex;"><span>    name <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#39;Luenci&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> render_template(<span style="color:#a5d6ff">&#34;index.html&#34;</span>, name<span style="color:#ff7b72;font-weight:bold">=</span>name)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用方法">使用方法</h2>
<h3 id="变量代码块">变量代码块</h3>
<ul>
<li>用<img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427161314597.png" alt=""  />
来表示变量名， 这种<img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427161314597.png" alt=""  />
语法叫做变量代码块</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427160426403.png" alt="image-20200427160426403"  />
)</p>
<ul>
<li>字典和列表的使用</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427154043162.png" alt="image-20200427154043162"  />
</p>
<h3 id="控制代码块">控制代码块</h3>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427160633257.png" alt="img"  />
</p>
<h2 id="过滤器">过滤器</h2>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427160813513.png" alt="imgs"  />
</p>
<h1 id="web表单">Web表单</h1>
<ul>
<li>web表单是web应用程序的基本功能。</li>
<li>它是HTML页面中负责数据采集的部件。表单有三个部分组成：表单标签、表单域、表单按钮。表单允许用户输入数据，负责HTML页面数据采集，通过表单将用户输入的数据提交给服务器。</li>
<li>在Flask中，为了处理web表单，我们一般使用<code>Flask-WTF</code>扩展，它封装了<code>WTForms</code>，并且它有验证表单数据的功能</li>
</ul>
<div class="htmledit_views" id="content_views">
                                            <div class="table-box"><table><thead><tr><th>字段对象</th>
			<th>说明</th>
		</tr></thead><tbody><tr><td>StringField</td>
			<td>文本字段</td>
		</tr><tr><td>TextAreaField</td>
			<td>多行文本字段</td>
		</tr><tr><td>PasswordField</td>
			<td>密码文本字段</td>
		</tr><tr><td>HiddenField</td>
			<td>隐藏文件字段</td>
		</tr><tr><td>DateField</td>
			<td>文本字段，值为 datetime.date 文本格式</td>
		</tr><tr><td>DateTimeField</td>
			<td>文本字段，值为 datetime.datetime 文本格式</td>
		</tr><tr><td>IntegerField</td>
			<td>文本字段，值为整数</td>
		</tr><tr><td>DecimalField</td>
			<td>文本字段，值为decimal.Decimal</td>
		</tr><tr><td>FloatField</td>
			<td>文本字段，值为浮点数</td>
		</tr><tr><td>BooleanField</td>
			<td>复选框，值为True 和 False</td>
		</tr><tr><td>RadioField</td>
			<td>一组单选框</td>
		</tr><tr><td>SelectField</td>
			<td>下拉列表</td>
		</tr><tr><td>SelectMutipleField</td>
			<td>下拉列表，可选择多个值</td>
		</tr><tr><td>FileField</td>
			<td>文件上传字段</td>
		</tr><tr><td>SubmitField</td>
			<td>表单提交按钮</td>
		</tr><tr><td>FormField</td>
			<td>把表单作为字段嵌入另一个表单</td>
		</tr><tr><td>FieldList</td>
			<td>一组指定类型的字段</td>
		</tr></tbody></table></div><h2 id="wtforms常用验证函数"><a name="t0"></a>WTForms常用验证函数</h2>
<div class="table-box"><table><thead><tr><th>验证函数</th>
			<th>说明</th>
		</tr></thead><tbody><tr><td>DataRequired</td>
			<td>确保字段中有数据</td>
		</tr><tr><td>EqualTo</td>
			<td>比较两个字段的值，常用于比较两次密码输入</td>
		</tr><tr><td>Length</td>
			<td>验证输入的字符串长度</td>
		</tr><tr><td>NumberRange</td>
			<td>验证输入的值在数字范围内</td>
		</tr><tr><td>URL</td>
			<td>验证URL</td>
		</tr><tr><td>AnyOf</td>
			<td>验证输入值在可选列表中</td>
		</tr><tr><td>NoneOf</td>
			<td>验证输入值不在可选列表中</td>
		</tr></tbody></table>
<ul>
<li>
<p>使用 <code>Flask-WTF </code>需要配置参数 <code>SECRET_KEY</code></p>
</li>
<li>
<p>CSRF_ENABLED是为了CSRF（跨站请求伪造）保护。 <code>SECRET_KEY</code>用来生成加密令牌，当<code>CSRF</code>激活的时候，该设置会根据设置的密匙生成加密令牌。</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 设置密匙</span>
</span></span><span style="display:flex;"><span>app<span style="color:#ff7b72;font-weight:bold">.</span>secret_key <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">&#39;luenci&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#d2a8ff;font-weight:bold">@app.route</span>(<span style="color:#a5d6ff">&#39;/login.html&#39;</span>, methods<span style="color:#ff7b72;font-weight:bold">=</span>[<span style="color:#a5d6ff">&#39;GET&#39;</span>, <span style="color:#a5d6ff">&#39;POST&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">login</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">if</span> request<span style="color:#ff7b72;font-weight:bold">.</span>method <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#34;POST&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#8b949e;font-style:italic"># 获取表单的数据</span>
</span></span><span style="display:flex;"><span>        username <span style="color:#ff7b72;font-weight:bold">=</span> request<span style="color:#ff7b72;font-weight:bold">.</span>form<span style="color:#ff7b72;font-weight:bold">.</span>get(<span style="color:#a5d6ff">&#39;username&#39;</span>)
</span></span><span style="display:flex;"><span>        password <span style="color:#ff7b72;font-weight:bold">=</span> request<span style="color:#ff7b72;font-weight:bold">.</span>form<span style="color:#ff7b72;font-weight:bold">.</span>get(<span style="color:#a5d6ff">&#39;password&#39;</span>)
</span></span><span style="display:flex;"><span>        print(username, password)
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">if</span> username <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;&#39;</span>:
</span></span><span style="display:flex;"><span>            flash(<span style="color:#a5d6ff">&#39;请填写邮箱&#39;</span>)	
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">elif</span> password <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;&#39;</span>:
</span></span><span style="display:flex;"><span>            flash(<span style="color:#a5d6ff">&#39;请设置密码&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#ff7b72">return</span> <span style="color:#a5d6ff">&#39;sucess&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> render_template(<span style="color:#a5d6ff">&#34;login_demo.html&#34;</span>)
</span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427161032568.png" alt=""  />
</p>
<h2 id="flask-wtf实现表单"><code>Flask-WTF</code>实现表单</h2>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">from</span> <span style="color:#ff7b72">flask_wtf</span> <span style="color:#ff7b72">import</span> FlaskForm
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 导入文本字段，密码字段，和提交按钮</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">from</span> <span style="color:#ff7b72">wtforms</span> <span style="color:#ff7b72">import</span> StringField, PasswordField, SubmitField
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"># 创建表单类</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">class</span> <span style="color:#f0883e;font-weight:bold">LoginFrom</span>(FlaskForm):
</span></span><span style="display:flex;"><span>    username <span style="color:#ff7b72;font-weight:bold">=</span> StringField(<span style="color:#a5d6ff">&#34;用户名&#34;</span>)
</span></span><span style="display:flex;"><span>    password1 <span style="color:#ff7b72;font-weight:bold">=</span> PasswordField(<span style="color:#a5d6ff">&#34;密码&#34;</span>)
</span></span><span style="display:flex;"><span>    password2 <span style="color:#ff7b72;font-weight:bold">=</span> PasswordField(<span style="color:#a5d6ff">&#34;确认密码&#34;</span>)
</span></span><span style="display:flex;"><span>    submit <span style="color:#ff7b72;font-weight:bold">=</span> SubmitField(<span style="color:#a5d6ff">&#34;提交&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#d2a8ff;font-weight:bold">@app.route</span>(<span style="color:#a5d6ff">&#39;/form&#39;</span>, methods<span style="color:#ff7b72;font-weight:bold">=</span>[<span style="color:#a5d6ff">&#34;GET&#34;</span>, <span style="color:#a5d6ff">&#34;POST&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">form_demo</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 创建表单实例</span>
</span></span><span style="display:flex;"><span>    form_login <span style="color:#ff7b72;font-weight:bold">=</span> LoginFrom()
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> render_template(<span style="color:#a5d6ff">&#34;login_demo.html&#34;</span>, form<span style="color:#ff7b72;font-weight:bold">=</span>form_login)
</span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200427161047472.png" alt=""  />
</p>
]]></content:encoded>
    </item>
  </channel>
</rss>

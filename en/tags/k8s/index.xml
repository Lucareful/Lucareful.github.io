<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>K8s on Luenci</title>
    <link>https://luenci.com/en/tags/k8s/</link>
    <description>Recent content in K8s on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s 核心组件介绍</title>
      <link>https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%80/</link>
      <pubDate>Sat, 08 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;etcd-储存核心实现&#34;&gt;Etcd 储存核心实现&lt;/h1&gt;
&lt;p&gt;​	Eted 集群是分布式KV存储集群，提供了可靠的强一致性服务发现。Etcd 集群存储 Kubernetes 系统的集群状态和元数据，其中包括所有 Kubemetes 资源对象信息、 资源对象状态、集群节点信息等。Kubernetes 将所有数据存储至 Etcd 集群前缀为 /registry 的目录下。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="etcd-储存核心实现">Etcd 储存核心实现</h1>
<p>​	Eted 集群是分布式KV存储集群，提供了可靠的强一致性服务发现。Etcd 集群存储 Kubernetes 系统的集群状态和元数据，其中包括所有 Kubemetes 资源对象信息、 资源对象状态、集群节点信息等。Kubernetes 将所有数据存储至 Etcd 集群前缀为 /registry 的目录下。</p>
<h2 id="etcd-存储架构设计">Etcd 存储架构设计</h2>
<p>​	Kuberetes 系统对Etcd 存储进行了大量封装，其架构是分层的，而每一层的封 装设计又拥有高度的可扩展性。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230628110238016.png" alt="image-20230628110238016"  />
</p>
<h3 id="1-reststorage">1. RESTStorage</h3>
<p>​	实现了RESTful 风格的对外资源存储服务的 API 接口。</p>
<h3 id="2-registrystore">2. RegistryStore</h3>
<p>​	实现了资源存储的通用操作，例如，在存储资源对象之前执行某个函数( 即BeforeFunc ) ，在存储资源对象之后执行某个函数 (即 After Func ) 。</p>
<h3 id="3-storageintertace">3. Storage.Intertace</h3>
<p>​	通用存储接口，该接口定义了资源的操作方法 (即 Create 、Delete 、Watch 、WatchList.Get、GetToList 、List、GuaranteedUpdate、Count 、Versioner 等方法)。</p>
<h3 id="4-cacherstorage">4. CacherStorage</h3>
<p>​	带有缓存功能的资源存储对象，它是 Storage.Interface 通用存储接又的实现。 CacherStorage 缓存层的设计有利于 Eted 集群中的数据能够获得快速的响应，并与 Etcd 集群数据保持一致。</p>
<h3 id="5-underlyingstorage">5. UnderlyingStorage</h3>
<p>​	底层存储，也被称为 BackendStorage (后端存储)，是真正与 Etcd 集群交互的资源存储对象，CacherStorage 相当 UnderlyingStorage 的缓存层。UnderlyingStorage 同样也是 Storage.Interface 通用存储接又的实现。</p>
<!-- more -->
<h1 id="kube-apiserver-架构设计详解">Kube-apiserver 架构设计详解</h1>
<p>kube-apiserver 组件负责将 Kubernetes 的 “资源组、资源版本、资源” 以 RESTful 风格的形式对外暴露并提供服务。该组件Kubernetes 系统集群中所有组件沟通的桥梁, 例如在创建Pod 资源对象时，所有组件都需要与kube-apiserver组件进行交互。下图是pod资源对象创建流程。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230629164834345.png" alt="image-20230629164834345"  />
</p>
<p>​	kube-apiserver 为丰富周边工具和库生态系统，提供了三种HTTP Server 服务，用于将庞大的kube-apiserver 组件功能进行解耦，这了种HTTPServer 分别是 APIExtensionsServer、KubeAPIServer 、AggregatorServer。不同服务的应用场景不同， 提供的资源也不同，但它们都可以通过 kubectl 工具或接又进行资源管理。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230628144222804.png" alt="image-20230628144222804"  />
</p>
<ul>
<li>APIExtensionsServer: API 扩展服务(扩展器)。该服务提供了CRD (CustomResourceDefinitions )自定义资源服务，开发者可通过CRD 对Kubernetes资源进行扩展，例如，通过 crd-example 扩展 Kubernetes 资源。 该服务通过 CustomResourceDefinitions 对象进管理， 并通过 extensionsapiserver.Scheme 资源注册表管理CRD相关资源。</li>
<li>Aggregatorserver: API 聚合服务(聚合器)。该服务提供了AA (APIAggregator )聚合服务，开发者可通过AA对Kubernetes聚合服务进 行扩展，例如，metrics-server是Kubernetes 系统集群的核心监控数据的聚 合器，它是AggregatorServer 服务的扩展实现。API 聚合服务通过 APIAggregator 对象进行管理，并通过 aggregatorscheme.Scheme 资源注册表管理AA 相关资源</li>
<li>KubeAPIServer: API 核心服务。该服务提供了 Kubernetes 内置核心资源服务， 不允许开发者随意更改相关资源，例如，Pod、Service 等内置核心资源会由 Kubernetes 官方维护。API 核心服务通过Master 对象进行管理，并通过 legacyscheme. Scheme 资源注册表管理Master 相关资源。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>k8s核心数据结构（2）</title>
      <link>https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/</guid>
      <description>&lt;h1 id=&#34;k8s-核心数据结构2&#34;&gt;K8s 核心数据结构（2）&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;参考书籍：《Kubernetes源码剖析-郑旭东著》&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;kubernetes-内置资源概览&#34;&gt;Kubernetes 内置资源概览&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;资源组&lt;/th&gt;
          &lt;th&gt;资源种类&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;apiextensions.k8s.io&lt;/td&gt;
          &lt;td&gt;CustomResourceDefinition&lt;/td&gt;
          &lt;td&gt;自定义资源类型 ， 由 APIExtensions Server 负责管理该资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;apiregistration.k8s.io&lt;/td&gt;
          &lt;td&gt;APIService&lt;/td&gt;
          &lt;td&gt;聚合资源类型，由 AggregatorServer 负责管理该资源类&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;admissionregistration.k8s.io&lt;/td&gt;
          &lt;td&gt;MutatingWebhookConfiguration&lt;/td&gt;
          &lt;td&gt;变更准入控制器资源类型( Webhook)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ValidatingWebhookConfiguration&lt;/td&gt;
          &lt;td&gt;验证准入控制器资源类型 ( Webhook)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;apps&lt;/td&gt;
          &lt;td&gt;ControllerRevision&lt;/td&gt;
          &lt;td&gt;记录资源对象所有的历史版本的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;DaemonSet&lt;/td&gt;
          &lt;td&gt;在 Pod 资源对象的基础上提供守护进程的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Deployment&lt;/td&gt;
          &lt;td&gt;在 Pod资源对象的基础上提供支持无状态服务的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ReplicaSet&lt;/td&gt;
          &lt;td&gt;在 Pod 资源对象的基础上提供一组 Pod 副本的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;StatefulSet&lt;/td&gt;
          &lt;td&gt;在 Pod资源对象的基础上提供支持有状态服务的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;auditregistration.k8s.io&lt;/td&gt;
          &lt;td&gt;AuditSink&lt;/td&gt;
          &lt;td&gt;审计资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;authentication.k8s.io&lt;/td&gt;
          &lt;td&gt;TokenReview&lt;/td&gt;
          &lt;td&gt;认证资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;authorization.k8s.io&lt;/td&gt;
          &lt;td&gt;LocalSubjectAccessReview&lt;/td&gt;
          &lt;td&gt;授权检查用户是否可以在指定的命名空间中执行操作&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;SelfSubjectAccessReview&lt;/td&gt;
          &lt;td&gt;授权检查用户是否可以执行操作(若不指定 spec.namespace，则在所有的命名空间中执行操作）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;SelfSubjectRulesReview&lt;/td&gt;
          &lt;td&gt;授权枚举用户可以在指定的命名空间中执行一组操作&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;SubjectAccessReview&lt;/td&gt;
          &lt;td&gt;授 权检查用户是否可以执行操作&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;autoscaling&lt;/td&gt;
          &lt;td&gt;HorizontalPodAutoscaler&lt;/td&gt;
          &lt;td&gt;在 Pod 资源对象的基础上提供水平自动伸缩资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;batch&lt;/td&gt;
          &lt;td&gt;Job&lt;/td&gt;
          &lt;td&gt;提供一次性任务的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;CronJob&lt;/td&gt;
          &lt;td&gt;提供定时任务的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;certificates.k8s.io&lt;/td&gt;
          &lt;td&gt;CertificateSigningRequest&lt;/td&gt;
          &lt;td&gt;提供证书管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;coordination.k8s.io&lt;/td&gt;
          &lt;td&gt;Leases&lt;/td&gt;
          &lt;td&gt;提供领导者选举机制的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;core&lt;/td&gt;
          &lt;td&gt;ComponentStatus&lt;/td&gt;
          &lt;td&gt;该资源类型已被奔用，其用于提供获取 Kuberetes 组件运行状况的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ConfigMap&lt;/td&gt;
          &lt;td&gt;提供容器内应用程序配置管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Endpoints&lt;/td&gt;
          &lt;td&gt;提供将外部服务器映射为内部服务的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Event&lt;/td&gt;
          &lt;td&gt;提供 Kubernetes 集群事件管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;LimitRange&lt;/td&gt;
          &lt;td&gt;为命名空间中的每种资源对象设置资源(硬件资源)使 用限制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Namespace&lt;/td&gt;
          &lt;td&gt;提供资源对象所在的命名空间的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Node&lt;/td&gt;
          &lt;td&gt;提供 Kubernetes 集群中管理工作节点的资源类型。每个节点都有一个唯一标识符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;PersistentVolume&lt;/td&gt;
          &lt;td&gt;提供 PV 存储的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;PersistentVolumeClaim&lt;/td&gt;
          &lt;td&gt;提供 PVC 存储的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Pod&lt;/td&gt;
          &lt;td&gt;提供容器集合管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;PodTemplate&lt;/td&gt;
          &lt;td&gt;提供用于描述预定义 Pod 资源对象副本数模板的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ReplicationController&lt;/td&gt;
          &lt;td&gt;在 Pod资源对象的基础上提供副本数保持不变的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ResourceQuota&lt;/td&gt;
          &lt;td&gt;提供每个命名空间配额限制的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Secret&lt;/td&gt;
          &lt;td&gt;提供存储密码 、Token 、密钥等敏感数据的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Service&lt;/td&gt;
          &lt;td&gt;提供负载均衡器为 Pod 资源对象的代理服务的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ServiceAccount&lt;/td&gt;
          &lt;td&gt;提供 ServiceAccount 认证的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;events.k8s.io&lt;/td&gt;
          &lt;td&gt;Event&lt;/td&gt;
          &lt;td&gt;提供Kuberetes集群事件管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;networking.k8s.io&lt;/td&gt;
          &lt;td&gt;RuntimeClass&lt;/td&gt;
          &lt;td&gt;提供容器运行时功能的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Ingress&lt;/td&gt;
          &lt;td&gt;提供 从Kubernetes 集群外部访问集群内部服务管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;node.k8s.io&lt;/td&gt;
          &lt;td&gt;RuntimeClass&lt;/td&gt;
          &lt;td&gt;提供容器运行时功能的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;policy&lt;/td&gt;
          &lt;td&gt;Evictions&lt;/td&gt;
          &lt;td&gt;在 Pod 资源对象的基础上提供驱逐策略的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;PodDisruptionBudget&lt;/td&gt;
          &lt;td&gt;提供限制同时中断 Pod 的数量 ，以保证集群的高可用性&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;PodSecurityPolicy&lt;/td&gt;
          &lt;td&gt;提供控制 Pod 资源安全相关策略的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;rbac.authorization.k8s.io&lt;/td&gt;
          &lt;td&gt;ClusterRole&lt;/td&gt;
          &lt;td&gt;提供 RBAC 集群角色的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;ClusterRoleBinding&lt;/td&gt;
          &lt;td&gt;提供 RBAC 集群角色鄉定的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Role&lt;/td&gt;
          &lt;td&gt;提供 RBAC 角色的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;RoleBinding&lt;/td&gt;
          &lt;td&gt;提供 RBAC 角色绑定的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;scheduling.k8s.io&lt;/td&gt;
          &lt;td&gt;PriorityClass&lt;/td&gt;
          &lt;td&gt;提供 Pod 资源对象优先级管理的资源类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;settings.k8s.10&lt;/td&gt;
          &lt;td&gt;PodPreset&lt;/td&gt;
          &lt;td&gt;在创建 Pod 资源对象时，可以将特定信息注入 Pod 资源对象中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;storage.k8s.io&lt;/td&gt;
          &lt;td&gt;StorageClass&lt;/td&gt;
          &lt;td&gt;提供动态设置PV存储参数的资源类&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;VolumeAttachment&lt;/td&gt;
          &lt;td&gt;供触发 CSI ControllerPublish 和 ControllerUnpublish 操作的资源类型&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</description>
      <content:encoded><![CDATA[<h1 id="k8s-核心数据结构2">K8s 核心数据结构（2）</h1>
<blockquote>
<p>参考书籍：《Kubernetes源码剖析-郑旭东著》</p></blockquote>
<h2 id="kubernetes-内置资源概览">Kubernetes 内置资源概览</h2>
<table>
  <thead>
      <tr>
          <th>资源组</th>
          <th>资源种类</th>
          <th>说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>apiextensions.k8s.io</td>
          <td>CustomResourceDefinition</td>
          <td>自定义资源类型 ， 由 APIExtensions Server 负责管理该资源类型</td>
      </tr>
      <tr>
          <td>apiregistration.k8s.io</td>
          <td>APIService</td>
          <td>聚合资源类型，由 AggregatorServer 负责管理该资源类</td>
      </tr>
      <tr>
          <td>admissionregistration.k8s.io</td>
          <td>MutatingWebhookConfiguration</td>
          <td>变更准入控制器资源类型( Webhook)</td>
      </tr>
      <tr>
          <td></td>
          <td>ValidatingWebhookConfiguration</td>
          <td>验证准入控制器资源类型 ( Webhook)</td>
      </tr>
      <tr>
          <td>apps</td>
          <td>ControllerRevision</td>
          <td>记录资源对象所有的历史版本的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>DaemonSet</td>
          <td>在 Pod 资源对象的基础上提供守护进程的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Deployment</td>
          <td>在 Pod资源对象的基础上提供支持无状态服务的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>ReplicaSet</td>
          <td>在 Pod 资源对象的基础上提供一组 Pod 副本的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>StatefulSet</td>
          <td>在 Pod资源对象的基础上提供支持有状态服务的资源类型</td>
      </tr>
      <tr>
          <td>auditregistration.k8s.io</td>
          <td>AuditSink</td>
          <td>审计资源类型</td>
      </tr>
      <tr>
          <td>authentication.k8s.io</td>
          <td>TokenReview</td>
          <td>认证资源类型</td>
      </tr>
      <tr>
          <td>authorization.k8s.io</td>
          <td>LocalSubjectAccessReview</td>
          <td>授权检查用户是否可以在指定的命名空间中执行操作</td>
      </tr>
      <tr>
          <td></td>
          <td>SelfSubjectAccessReview</td>
          <td>授权检查用户是否可以执行操作(若不指定 spec.namespace，则在所有的命名空间中执行操作）</td>
      </tr>
      <tr>
          <td></td>
          <td>SelfSubjectRulesReview</td>
          <td>授权枚举用户可以在指定的命名空间中执行一组操作</td>
      </tr>
      <tr>
          <td></td>
          <td>SubjectAccessReview</td>
          <td>授 权检查用户是否可以执行操作</td>
      </tr>
      <tr>
          <td>autoscaling</td>
          <td>HorizontalPodAutoscaler</td>
          <td>在 Pod 资源对象的基础上提供水平自动伸缩资源类型</td>
      </tr>
      <tr>
          <td>batch</td>
          <td>Job</td>
          <td>提供一次性任务的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>CronJob</td>
          <td>提供定时任务的资源类型</td>
      </tr>
      <tr>
          <td>certificates.k8s.io</td>
          <td>CertificateSigningRequest</td>
          <td>提供证书管理的资源类型</td>
      </tr>
      <tr>
          <td>coordination.k8s.io</td>
          <td>Leases</td>
          <td>提供领导者选举机制的资源类型</td>
      </tr>
      <tr>
          <td>core</td>
          <td>ComponentStatus</td>
          <td>该资源类型已被奔用，其用于提供获取 Kuberetes 组件运行状况的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>ConfigMap</td>
          <td>提供容器内应用程序配置管理的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Endpoints</td>
          <td>提供将外部服务器映射为内部服务的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Event</td>
          <td>提供 Kubernetes 集群事件管理的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>LimitRange</td>
          <td>为命名空间中的每种资源对象设置资源(硬件资源)使 用限制</td>
      </tr>
      <tr>
          <td></td>
          <td>Namespace</td>
          <td>提供资源对象所在的命名空间的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Node</td>
          <td>提供 Kubernetes 集群中管理工作节点的资源类型。每个节点都有一个唯一标识符</td>
      </tr>
      <tr>
          <td></td>
          <td>PersistentVolume</td>
          <td>提供 PV 存储的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>PersistentVolumeClaim</td>
          <td>提供 PVC 存储的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Pod</td>
          <td>提供容器集合管理的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>PodTemplate</td>
          <td>提供用于描述预定义 Pod 资源对象副本数模板的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>ReplicationController</td>
          <td>在 Pod资源对象的基础上提供副本数保持不变的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>ResourceQuota</td>
          <td>提供每个命名空间配额限制的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Secret</td>
          <td>提供存储密码 、Token 、密钥等敏感数据的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Service</td>
          <td>提供负载均衡器为 Pod 资源对象的代理服务的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>ServiceAccount</td>
          <td>提供 ServiceAccount 认证的资源类型</td>
      </tr>
      <tr>
          <td>events.k8s.io</td>
          <td>Event</td>
          <td>提供Kuberetes集群事件管理的资源类型</td>
      </tr>
      <tr>
          <td>networking.k8s.io</td>
          <td>RuntimeClass</td>
          <td>提供容器运行时功能的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Ingress</td>
          <td>提供 从Kubernetes 集群外部访问集群内部服务管理的资源类型</td>
      </tr>
      <tr>
          <td>node.k8s.io</td>
          <td>RuntimeClass</td>
          <td>提供容器运行时功能的资源类型</td>
      </tr>
      <tr>
          <td>policy</td>
          <td>Evictions</td>
          <td>在 Pod 资源对象的基础上提供驱逐策略的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>PodDisruptionBudget</td>
          <td>提供限制同时中断 Pod 的数量 ，以保证集群的高可用性</td>
      </tr>
      <tr>
          <td></td>
          <td>PodSecurityPolicy</td>
          <td>提供控制 Pod 资源安全相关策略的资源类型</td>
      </tr>
      <tr>
          <td>rbac.authorization.k8s.io</td>
          <td>ClusterRole</td>
          <td>提供 RBAC 集群角色的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>ClusterRoleBinding</td>
          <td>提供 RBAC 集群角色鄉定的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>Role</td>
          <td>提供 RBAC 角色的资源类型</td>
      </tr>
      <tr>
          <td></td>
          <td>RoleBinding</td>
          <td>提供 RBAC 角色绑定的资源类型</td>
      </tr>
      <tr>
          <td>scheduling.k8s.io</td>
          <td>PriorityClass</td>
          <td>提供 Pod 资源对象优先级管理的资源类型</td>
      </tr>
      <tr>
          <td>settings.k8s.10</td>
          <td>PodPreset</td>
          <td>在创建 Pod 资源对象时，可以将特定信息注入 Pod 资源对象中</td>
      </tr>
      <tr>
          <td>storage.k8s.io</td>
          <td>StorageClass</td>
          <td>提供动态设置PV存储参数的资源类</td>
      </tr>
      <tr>
          <td></td>
          <td>VolumeAttachment</td>
          <td>供触发 CSI ControllerPublish 和 ControllerUnpublish 操作的资源类型</td>
      </tr>
  </tbody>
</table>
<h2 id="runtimeobject-类型基石"><code>runtime.Object</code> 类型基石</h2>
<p>​	<code>runtime.Object</code> 是Kubernetes 类型系统的基石。Kubernetes 上的所有资源对象 ( Resource 0bject ) 实际上就是一种 Go 语言的 Struct 类型 ， 相当于一种数据结构 ，它们都有一个共同的结构叫<code>runtime.Object</code>。<code>runtime.Object</code> 被设计为 Interface 接口类型， 作为资源对象的通用资源对象，<code>runtime.Obejct</code> 类型基石如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230418174437181.png" alt="image-20230418174437181"  />
</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 对象接口必须被在 Scheme 注册的所有 API 类型支持。由于方案中的对象是</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 预期被序列化到线路，对象必须提供给 Scheme 的接口允许</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 用于设置对象表示的种类、版本和组的序列化程序。对象可以选择</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 在不希望序列化的情况下返回无操作 ObjectKindAccessor。</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Object <span style="color:#ff7b72">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">GetObjectKind</span>() schema.ObjectKind
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">DeepCopyObject</span>() Object
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> ObjectKind <span style="color:#ff7b72">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// SetGroupVersionKind sets or clears the intended serialized kind of an object. Passing kind nil</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// should clear the current setting.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">SetGroupVersionKind</span>(kind GroupVersionKind)
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// GroupVersionKind returns the stored group, version, and kind of an object, or an empty struct</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// if the object does not expose or provide these fields.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">GroupVersionKind</span>() GroupVersionKind
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>runtime.Object 提供了两个方法 ，分别是 GetObjectKind 和 DeepCopyObject。</p>
<ul>
<li>
<p>GetObjectKind : 用于设置并返回 GroupVersionKind。</p>
</li>
<li>
<p>DeepCopyObject:  用于深复制当前资源对象并返回 。</p>
<p>深复制相当于将数据结构克隆一份，因此它不与原始对象共享任何内容。它使代码在不修改原始对象的情况下可以改变克隆对象的任何属性。</p>
</li>
</ul>
<p>那么，如何确认一个资源对象是否可以转换成runtime.Object 通用资源对象呢?</p>
<p>这时需要确认该资源对象是否拥有 GetobjectKind 和 DeepCopyobjeot 方法。Kubernetes 的每一个资源对象都嵌入了metav1.TypeMeta 类型，metav1.TypeMeta 类型实现了GetObjectkind 方法，所以资源对象拥有该方法。 另外，Kubernetes 的每一 个资源对象都实现了 DeepCopyobject 方法，该方法一般被定义在 <code>zz_generated.deepcopy.go</code> 文件中。因此，可以认为该资源对象能够转换成 runtime.Object 通用资源对象。</p>
<p>​	所以，Kubernetes 的任意资源对象都可以通过 runtime.Object 存储它的类型并允许深复制操作。通过 runtime.Object Example 代码示例，可以将资源对象转换成通用资源对象并再次转换回资源对象。runtime.Object Example 代码示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> (
</span></span><span style="display:flex;"><span>	metav1 <span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;k8s.io/kubernetes/pkg/apis/core&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;reflect&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">main</span>() {
</span></span><span style="display:flex;"><span>	pod <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72;font-weight:bold">&amp;</span>core.Pod{
</span></span><span style="display:flex;"><span>		TypeMeta: metav1.TypeMeta{
</span></span><span style="display:flex;"><span>			Kind: <span style="color:#a5d6ff">&#34;Pod&#34;</span>,
</span></span><span style="display:flex;"><span>		},
</span></span><span style="display:flex;"><span>		ObjectMeta: metav1.ObjectMeta{
</span></span><span style="display:flex;"><span>			Labels: <span style="color:#ff7b72">map</span>[<span style="color:#ff7b72">string</span>]<span style="color:#ff7b72">string</span>{<span style="color:#a5d6ff">&#34;name&#34;</span>: <span style="color:#a5d6ff">&#34;foo&#34;</span>},
</span></span><span style="display:flex;"><span>		},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	obj <span style="color:#ff7b72;font-weight:bold">:=</span> runtime.<span style="color:#d2a8ff;font-weight:bold">Object</span>(pod)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	pod2, ok <span style="color:#ff7b72;font-weight:bold">:=</span> obj.(<span style="color:#ff7b72;font-weight:bold">*</span>core.Pod)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> !ok {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a5d6ff">&#34;unexpected&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> !reflect.<span style="color:#d2a8ff;font-weight:bold">DeepEqual</span>(pod, pod2) {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a5d6ff">&#34;unexpected&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	在以上代码示例中，首先实例化 Pod 资源, 得到 Pod 资源对象, 通过 <code>runtime.object</code> 将 Pod 资源对象转换成通用资源对象(得到 obj )。然后通过断言的方式，将obj 通用资源对象转换成 Pod 资源对象(得到 pod2 )。最终通过 reflect (反射，来验证转换之前和转换之后的资源对象是否相等。</p>
<h2 id="unstructured数据">Unstructured数据</h2>
<p>​	数据可以分为结构化数据 (StructuredData )和非结构化数据 ( Unstructured Data ) 。 Kubernetes 内部会经常处理这两种数据。</p>
<h4 id="1-结构化数据">1. 结构化数据</h4>
<pre><code>预先知道数据结构的数据类型是结构化数据。例如，JSON 数据:
</code></pre>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;id&#34;</span>: <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a5d6ff">&#34;name&#34;</span>: <span style="color:#a5d6ff">&#34;Derek&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>要使用这种数据，需要创建一个struct 数据结构，其具有id 和name 属性:</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Student <span style="color:#ff7b72">struct</span>{
</span></span><span style="display:flex;"><span>  ID <span style="color:#ff7b72">int</span>
</span></span><span style="display:flex;"><span>  Name <span style="color:#ff7b72">string</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-非结构化数据">2. 非结构化数据</h4>
<p>​	无法预知数据结构的数据类型或属性名称不确定的数据类型是非结构化数据， 其无法通过构建预定的struct 数据结构来序列化或反序列化数据。例如</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#7ee787">&#34;id&#34;</span>: <span style="color:#a5d6ff">1</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#7ee787">&#34;name&#34;</span>: <span style="color:#a5d6ff">&#34;Derek&#34;</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#7ee787">&#34;description&#34;</span>: <span style="color:#f85149">...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	我们无法事先得知description 的数据类型，它可能是字符串，也可能是数组嵌套等。原因在于Go 语言是强类型语言，它需要预先知道数据类型，Go 语言在处理JSON 数据时 不如动态语言那样便捷。 当无法预知数据结构的数据类型或属性名称不确定时，通过如 下结构来解决问题</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">var</span> result <span style="color:#ff7b72">map</span>[<span style="color:#ff7b72">string</span>]<span style="color:#ff7b72">interface</span>{}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	每个字符串对应一 JSON 属性，其映射 interface{} 类型对应值 ，可以是任何类型。使用 interface 字段时，通过 Go 语言断言的方式进行类型转换:</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">if</span> description, ok <span style="color:#ff7b72;font-weight:bold">:=</span> result[<span style="color:#a5d6ff">&#34;description&#34;</span>].(<span style="color:#ff7b72">string</span>);ok{
</span></span><span style="display:flex;"><span>  fmt.<span style="color:#d2a8ff;font-weight:bold">Println</span>(description)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-kubernetes-非结构化数据处理">3. Kubernetes 非结构化数据处理</h4>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// staging/src/k8s.io/apimachinery/pkg/runtime/interfaces.go</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Unstructured objects store values as map[string]interface{}, with only values that can be serialized</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// to JSON allowed.</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Unstructured <span style="color:#ff7b72">interface</span> {
</span></span><span style="display:flex;"><span>	Object
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// NewEmptyInstance returns a new instance of the concrete type containing only kind/apiVersion and no other data.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// This should be called instead of reflect.New() for unstructured types because the go type alone does not preserve kind/apiVersion info.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">NewEmptyInstance</span>() Unstructured
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// UnstructuredContent returns a non-nil map with this object&#39;s contents. Values may be</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// []interface{}, map[string]interface{}, or any primitive type. Contents are typically serialized to</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// and from JSON. SetUnstructuredContent should be used to mutate the contents.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">UnstructuredContent</span>() <span style="color:#ff7b72">map</span>[<span style="color:#ff7b72">string</span>]<span style="color:#ff7b72">interface</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// SetUnstructuredContent updates the object content to match the provided map.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">SetUnstructuredContent</span>(<span style="color:#ff7b72">map</span>[<span style="color:#ff7b72">string</span>]<span style="color:#ff7b72">interface</span>{})
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// IsList returns true if this type is a list or matches the list convention - has an array called &#34;items&#34;.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">IsList</span>() <span style="color:#ff7b72">bool</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// EachListItem should pass a single item out of the list as an Object to the provided function. Any</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// error should terminate the iteration. If IsList() returns false, this method should return an error</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// instead of calling the provided function.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">EachListItem</span>(<span style="color:#ff7b72">func</span>(Object) <span style="color:#ff7b72">error</span>) <span style="color:#ff7b72">error</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// staging/src/k8s.io/apimachinery/pkg/apis/meta/v1/unstructured/unstructured.go</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Unstructured <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Object is a JSON compatible map with string, float, int, bool, []interface{}, or</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// map[string]interface{}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// children.</span>
</span></span><span style="display:flex;"><span>	Object <span style="color:#ff7b72">map</span>[<span style="color:#ff7b72">string</span>]<span style="color:#ff7b72">interface</span>{}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	在上述代码中，Kubernetes 非结构化数据通过 map[string]interface{} 表达，并提供接口。在 client-go 编程式交互的 DynamicClient 内部，实现了 Unstructured 类型， 用于处理非结构化数据。</p>
<h2 id="scheme-资源注册表">Scheme 资源注册表</h2>
<p>​	大家在使用Windows 操作系统时都应该听说过， 当在操作系统上安装应用程序 时， 该程序 的一些信息会注册到注册表中; 当从操作系统 上卸载应用程序时， 会从 注册表中删除该程序的相关信息。而 KubernetesScheme 资源注册表类似于Windows 操作系统上的注册表，只不过注册的是资源类型。</p>
<p>​	Kuberetes 系统拥有众多资源，每一种资源就是一个资源类型，这些资源类型需要有统一的注册 、 存储 、 查询 、 管理等机制 。目前 Kuberetes 系统中的所有资源类型都已注册到 Scheme 资源注册表中，其是 一个内存型的资源注册表，拥有如下特点。</p>
<ul>
<li>支持注册多种资源类型，包括内部版本和外部版本。</li>
<li>支持多种版 本转换机制。</li>
<li>支持不同资源的序列化/反序列化机制。</li>
</ul>
<p>​	Scheme 资源注册表支持两种资源类型( Type )的注册，分别是 UnversionedType 和KnownType 资源类型，分别介绍如下</p>
<ul>
<li>UnversionedType: 无版本资源类型，这是一个早期 Kubernetes 系统中的概 念， 它主要应用于某些没有版本的资源类型，该类型的资源对象并不需要进行转换。在目前的 Kubernetes 发行版本中，无版本类型已被弱化，几乎所有的资源对象都拥有版本， 但在 metav1 元数据中还有部分类型 ，它们既属于 meta.k8s.io/v1 又属于 UnversionedType 无版本资源类型，例如 metav1.Status, metav1.APIVersions、metav1.APIGroupList、metavI.APIGroup、metav1.APIResourceList.</li>
<li>KnownType: 是目前Kubernetes 最常用的资源类型，也可称其为“ 拥有版本的资源类型”</li>
</ul>
<h3 id="schema-资源注册表数据结构">Schema 资源注册表数据结构</h3>
<p>​	Scheme资源注册表数据结构主要由4 个map结构组成，它们分别是. gvkToType、typeToGVK、unversionedTypes、unversionedKinds.</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>eme <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// gvkToType allows one to figure out the go type of an object with</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// the given version and name.</span>
</span></span><span style="display:flex;"><span>	gvkToType <span style="color:#ff7b72">map</span>[schema.GroupVersionKind]reflect.Type
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// typeToGVK allows one to find metadata for a given go object.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// The reflect.Type we index by should *not* be a pointer.</span>
</span></span><span style="display:flex;"><span>	typeToGVK <span style="color:#ff7b72">map</span>[reflect.Type][]schema.GroupVersionKind
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// unversionedTypes are transformed without conversion in ConvertToVersion.</span>
</span></span><span style="display:flex;"><span>	unversionedTypes <span style="color:#ff7b72">map</span>[reflect.Type]schema.GroupVersionKind
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// unversionedKinds are the names of kinds that can be created in the context of any group</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// or version</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// TODO: resolve the status of unversioned types.</span>
</span></span><span style="display:flex;"><span>	unversionedKinds <span style="color:#ff7b72">map</span>[<span style="color:#ff7b72">string</span>]reflect.Type
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#ff7b72;font-weight:bold">...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	Scheme 资源注册表结构字段说明如下。</p>
<ul>
<li>
<p>gVkToType: 存储 GVK 与 Type 的映射关系。</p>
</li>
<li>
<p>typeToGVK: 存储 Type 与 GVK 的映射关系,一个 Type 会对应一个或多个 GVK。</p>
</li>
<li>
<p>unversionedTypes: 存储 UnversionedType 与 GVK 的映射关系。</p>
</li>
<li>
<p>unversionedKinds: 存储 Kind (资源种类)名称与UnversionedType 的映射关系。</p>
<p>Scheme 资源注册表通过Go 语言的map结构实现映射关系，这些映射关系可以 实现高效的正向和反向检索，从 Scheme 资源注册表中检索某个 GVK 的Type， 它的时间复杂度为O（1）。</p>
</li>
</ul>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230420143016157.png" alt="image-20230420143016157"  />
</p>
<p>​	Scheme 资源注册表在 Kubernetes 系统体系中属于非常核心的数据结构。示例代码：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> (
</span></span><span style="display:flex;"><span>	appsv1 <span style="color:#a5d6ff">&#34;k8s.io/api/apps/v1&#34;</span>
</span></span><span style="display:flex;"><span>	corev1 <span style="color:#a5d6ff">&#34;k8s.io/api/core/v1&#34;</span>
</span></span><span style="display:flex;"><span>	metav1 <span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/runtime/schema&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// KnownType external</span>
</span></span><span style="display:flex;"><span>	coreGV <span style="color:#ff7b72;font-weight:bold">:=</span> schema.GroupVersion{Group: <span style="color:#a5d6ff">&#34;&#34;</span>, Version: <span style="color:#a5d6ff">&#34;v1&#34;</span>}
</span></span><span style="display:flex;"><span>	extensionsGV <span style="color:#ff7b72;font-weight:bold">:=</span> schema.GroupVersion{Group: <span style="color:#a5d6ff">&#34;extensions&#34;</span>, Version: <span style="color:#a5d6ff">&#34;v1beta1&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// KnownType internal</span>
</span></span><span style="display:flex;"><span>	coreInternalGV <span style="color:#ff7b72;font-weight:bold">:=</span> schema.GroupVersion{Group: <span style="color:#a5d6ff">&#34;&#34;</span>, Version: runtime.APIVersionInternal}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// UnversionedType</span>
</span></span><span style="display:flex;"><span>	Unversioned <span style="color:#ff7b72;font-weight:bold">:=</span> schema.GroupVersion{Group: <span style="color:#a5d6ff">&#34;&#34;</span>, Version: <span style="color:#a5d6ff">&#34;v1&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	scheme <span style="color:#ff7b72;font-weight:bold">:=</span> runtime.<span style="color:#d2a8ff;font-weight:bold">NewScheme</span>()
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(coreGV, <span style="color:#ff7b72;font-weight:bold">&amp;</span>corev1.Pod{})
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(extensionsGV, <span style="color:#ff7b72;font-weight:bold">&amp;</span>appsv1.DaemonSet{})
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(coreInternalGV, <span style="color:#ff7b72;font-weight:bold">&amp;</span>corev1.Pod{})
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddUnversionedTypes</span>(Unversioned, <span style="color:#ff7b72;font-weight:bold">&amp;</span>metav1.Status{})
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	在上述代码中，首先定义了两种类型的GV( 资源组、资源版本)，KnownType 类型有 coreGV、extensionsGV、coreInternalGV 对象，其中 corelnternalGV 对象属于内部版本(即runtime.APIVersioninternal )，而 UnversionedType 类型有 Unversioned 对象。
​	通过 runtime.NewScheme 实例化一个新的Scheme资源注册表。注册资源类型到 Scheme 资源注册表有两种方式，第一种通过scheme.AddKnownTypes 方法注册 KnownType 类型的对象，第二种通过 scheme. AddUnversionedTypes 方法注册 UnversionedType 类型的对象。</p>
<p>​	在 Scheme Example 代码示例中，我们往 Scheme 资源注册表中分别注册了Pod、 DaemonSet、Pod ( 内部版本)及 Status (无版本资源类型)类型对象，那么这些资源的映射关系，如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230420144147025.png" alt="image-20230420144147025"  />
</p>
<p>​	GVK(资源组、资源版本、资源种类)在Scheme资源注册表中以<code>&lt;group&gt;/&lt;version&gt;, Kind =&lt;kind&gt;</code>的形式存在，其中对于 Kind ( 资源种类)字段，在注册时如果不指定该 字段的名称，那么默认使用类型的名称，例如corev1.Pod 类型，通过reflect 机制获 取资源类型的名称，那么它的资源种类 Kind-Pod。
​	资源类型在Scheme 资源注册表中以 Go Type (通过 reflect 机制获取)形式存在。</p>
<p>​	另外， 需要注意的是，UnversionedType 类型的对象在通过 scheme.AddUnversionedTypes 方法注册时，会同时存在于4个map 结构中，代码示例如</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">/* 
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">AddUnversionedTypes 将提供的类型注册为“未版本化”，这意味着它们遵循特殊规则。
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">每当序列化此类型的对象时，它都会使用提供的组版本进行序列化，而不是
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">转换。因此，未版本化的对象应该永远保持向后兼容，就好像它们在一个永远不会更新的 API 组和版本。
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (s <span style="color:#ff7b72;font-weight:bold">*</span>Scheme) <span style="color:#d2a8ff;font-weight:bold">AddUnversionedTypes</span>(version schema.GroupVersion, types <span style="color:#ff7b72;font-weight:bold">...</span>Object) {
</span></span><span style="display:flex;"><span>	s.<span style="color:#d2a8ff;font-weight:bold">addObservedVersion</span>(version)
</span></span><span style="display:flex;"><span>	s.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(version, types<span style="color:#ff7b72;font-weight:bold">...</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">for</span> _, obj <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72">range</span> types {
</span></span><span style="display:flex;"><span>		t <span style="color:#ff7b72;font-weight:bold">:=</span> reflect.<span style="color:#d2a8ff;font-weight:bold">TypeOf</span>(obj).<span style="color:#d2a8ff;font-weight:bold">Elem</span>()
</span></span><span style="display:flex;"><span>		gvk <span style="color:#ff7b72;font-weight:bold">:=</span> version.<span style="color:#d2a8ff;font-weight:bold">WithKind</span>(t.<span style="color:#d2a8ff;font-weight:bold">Name</span>())
</span></span><span style="display:flex;"><span>		s.unversionedTypes[t] = gvk
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> old, ok <span style="color:#ff7b72;font-weight:bold">:=</span> s.unversionedKinds[gvk.Kind]; ok <span style="color:#ff7b72;font-weight:bold">&amp;&amp;</span> t <span style="color:#ff7b72;font-weight:bold">!=</span> old {
</span></span><span style="display:flex;"><span>			panic(fmt.<span style="color:#d2a8ff;font-weight:bold">Sprintf</span>(<span style="color:#a5d6ff">&#34;%v.%v has already been registered as unversioned kind %q - kind name must be unique in scheme %q&#34;</span>, old.<span style="color:#d2a8ff;font-weight:bold">PkgPath</span>(), old.<span style="color:#d2a8ff;font-weight:bold">Name</span>(), gvk, s.schemeName))
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		s.unversionedKinds[gvk.Kind] = t
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="资源注册表注册方法">资源注册表注册方法</h3>
<p>​	在Scheme 资源 注册表中，不同的资源类型使用的注册方法不同，分别介绍如下。</p>
<ul>
<li>scheme. AddUnversionedTypes: 注册 UnversionedType 资源类型。</li>
<li>scheme. AddKnownTypes: 注册 KnownType 资源类型。</li>
<li>scheme. AddKnownTypewithName: 注册KnownType 资源类型，须指定资源的 Kind 资源种类名</li>
</ul>
<p>​    以 scheme. AddKnownTypes 方法为例，在注册资源类型时，无须指定 Kind 名称， 而是通过 reflect 机制获取资源类型的名称作为资源种类名称，代码示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">/*
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"> AddKnownTypes 将“types”中传递的所有类型注册为版本“version”的成员。
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"> 传递给类型的所有对象都应该是指向结构的指针。去报道的名字
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"> 该结构在编码时成为“种类”字段。版本不能为空 - 使用
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic"> APIVersionInternal 常数，如果你有一个没有正式版本的类型
</span></span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">*/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (s <span style="color:#ff7b72;font-weight:bold">*</span>Scheme) <span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(gv schema.GroupVersion, types <span style="color:#ff7b72;font-weight:bold">...</span>Object) {
</span></span><span style="display:flex;"><span>	s.<span style="color:#d2a8ff;font-weight:bold">addObservedVersion</span>(gv)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">for</span> _, obj <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72">range</span> types {
</span></span><span style="display:flex;"><span>		t <span style="color:#ff7b72;font-weight:bold">:=</span> reflect.<span style="color:#d2a8ff;font-weight:bold">TypeOf</span>(obj)
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> t.<span style="color:#d2a8ff;font-weight:bold">Kind</span>() <span style="color:#ff7b72;font-weight:bold">!=</span> reflect.Pointer {
</span></span><span style="display:flex;"><span>			panic(<span style="color:#a5d6ff">&#34;All types must be pointers to structs.&#34;</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		t = t.<span style="color:#d2a8ff;font-weight:bold">Elem</span>()
</span></span><span style="display:flex;"><span>		s.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypeWithName</span>(gv.<span style="color:#d2a8ff;font-weight:bold">WithKind</span>(t.<span style="color:#d2a8ff;font-weight:bold">Name</span>()), obj)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="资源注册表查询方法">资源注册表查询方法</h3>
<p>​	在运行过程中，kube-apiserver 组件常对 Scheme 资源注册表进行查询，它提供了如下方法。</p>
<ul>
<li>scheme.KnownTypes: 查询注册表中指定GV 下的资源类型。</li>
<li>scheme. AlKnownTypes: 查询注册表中所有GVK 下的资源类型。</li>
<li>scheme.ObjectKinds: 查询资源对象所对应的GVK， 一个资源对象可能存在多个GVK。</li>
<li>scheme.New: 查询GVK 所对应的资源对象。</li>
<li>scheme.IsGroupRegistered: 判断指定的资源组是否已经注册。</li>
<li>scheme.IsVersionRegistered :  判断指定的 G V 是否己经注册。</li>
<li>scheme.Recognizes: 判断指定的GVK 是否己经注册。</li>
<li>scheme.IsUnversioned: 判断指定的资源对象是否属于 UnversionedType 类型。</li>
</ul>
<h2 id="codec-编解码器">Codec 编解码器</h2>
<p>​	在详解 Codec 编解码器之前，先认识下 Codec 编解码器与 Serializer 序列化器之间的差异。</p>
<ul>
<li>
<p>Serializer: 序列化器，包含序列化操作与反序列化操作。序列化操作是将数据 (例如数组 、对象或结构体等 ) 转换为宇符串的过程 ， 反序列化操作是将字符串转换为数据的过程，因此可以轻松地维护数据结构 并存储或传输数据</p>
</li>
<li>
<p>Codee: 编解码器，包含编码器与解码器。编解码器是一个通用术语，指的是可以表示数据的任何格式，或者将数据转换为特定格式的过程。所以，可以将 Serializer 序列化器也理解为 Codec 编解码器的一种 。</p>
<p>Codec 编解码器通用接又定义如下:</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Decoder <span style="color:#ff7b72">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">Decode</span>(data []<span style="color:#ff7b72">byte</span>, defaults <span style="color:#ff7b72;font-weight:bold">*</span>schema.GroupVersionKind, into Object) (Object, <span style="color:#ff7b72;font-weight:bold">*</span>schema.GroupVersionKind, <span style="color:#ff7b72">error</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Encoder <span style="color:#ff7b72">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">Encode</span>(obj Object, w io.Writer) <span style="color:#ff7b72">error</span>
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">Identifier</span>() Identifier
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Serializer <span style="color:#ff7b72">interface</span> {
</span></span><span style="display:flex;"><span>	Encoder
</span></span><span style="display:flex;"><span>	Decoder
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Codec is a Serializer that deals with the details of versioning objects. It offers the same</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// interface as Serializer, so this is a marker to consumers that care about the version of the objects</span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// they receive.</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Codec Serializer
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	从Codec 编解码器通用接又的定义可以看出，Serializer 序列化器属于Codec 编解码器的一种，这是因为每种序列化器都实现了Encoder 与 Decoder 方法。我们可以认为，只要实现了Encoder 与Decoder 方法的数据结构，就是序列化器。Kubernetes 目前支持 3 种主要的序列化器。Codec 编解码器如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230420151842029.png" alt="image-20230420151842029"  />
</p>
<p>​	Codec 编解码器包含了种序列化器 ， 在进行编解码操作时 ，每一种序列化器都对资源对象的 metav1.TypeMeta (即 APIVersion 和Kind 字段)进行验证，如果资源对象未提供这些字段，就会返回错误。每种序列化器分别实现了 Encode 序列化方法与 Decode 反序列化方法 ，分别介绍如下</p>
<ul>
<li><strong>jsonSerializer</strong>: JSON 格式序列化/反序列化器。它使用 <code> application/json</code>的 ContentType 作为标识</li>
<li><strong>yamlSerializer</strong>: YAML 格式化格式序列化/反序列化器。它使用 <code> application/yaml</code>的 ContentType 作为标识</li>
<li><strong>protobufSerializer</strong>： Protobuf 格式化格式序列化/反序列化器。它使用 <code> application/vnd.kubernetes.protobuf</code>的 ContentType 作为标识</li>
</ul>
<p>Codec 编解码器将 Eted 集群中的数据进行编解码操作。</p>
<h3 id="codec-编解码实例化">Codec 编解码实例化</h3>
<p>​	Codec 编码器通过 NewCodecFactory 函数实例化，在实例化的过程中会将 jsonSerializer、yamlSerializer、protobufSerializer 序列化器全部实例化，NewCodecFactory -&gt; newSerializersForScheme ，示例代码如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">64
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">65
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">66
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">67
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">68
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">69
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">70
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">newSerializersForScheme</span>(scheme <span style="color:#ff7b72;font-weight:bold">*</span>runtime.Scheme, mf json.MetaFactory, options CodecFactoryOptions) []serializerType {
</span></span><span style="display:flex;"><span>	jsonSerializer <span style="color:#ff7b72;font-weight:bold">:=</span> json.<span style="color:#d2a8ff;font-weight:bold">NewSerializerWithOptions</span>(
</span></span><span style="display:flex;"><span>		mf, scheme, scheme,
</span></span><span style="display:flex;"><span>		json.SerializerOptions{Yaml: <span style="color:#79c0ff">false</span>, Pretty: <span style="color:#79c0ff">false</span>, Strict: options.Strict},
</span></span><span style="display:flex;"><span>	)
</span></span><span style="display:flex;"><span>	jsonSerializerType <span style="color:#ff7b72;font-weight:bold">:=</span> serializerType{
</span></span><span style="display:flex;"><span>		AcceptContentTypes: []<span style="color:#ff7b72">string</span>{runtime.ContentTypeJSON},
</span></span><span style="display:flex;"><span>		ContentType:        runtime.ContentTypeJSON,
</span></span><span style="display:flex;"><span>		FileExtensions:     []<span style="color:#ff7b72">string</span>{<span style="color:#a5d6ff">&#34;json&#34;</span>},
</span></span><span style="display:flex;"><span>		EncodesAsText:      <span style="color:#79c0ff">true</span>,
</span></span><span style="display:flex;"><span>		Serializer:         jsonSerializer,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		Framer:           json.Framer,
</span></span><span style="display:flex;"><span>		StreamSerializer: jsonSerializer,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> options.Pretty {
</span></span><span style="display:flex;"><span>		jsonSerializerType.PrettySerializer = json.<span style="color:#d2a8ff;font-weight:bold">NewSerializerWithOptions</span>(
</span></span><span style="display:flex;"><span>			mf, scheme, scheme,
</span></span><span style="display:flex;"><span>			json.SerializerOptions{Yaml: <span style="color:#79c0ff">false</span>, Pretty: <span style="color:#79c0ff">true</span>, Strict: options.Strict},
</span></span><span style="display:flex;"><span>		)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	strictJSONSerializer <span style="color:#ff7b72;font-weight:bold">:=</span> json.<span style="color:#d2a8ff;font-weight:bold">NewSerializerWithOptions</span>(
</span></span><span style="display:flex;"><span>		mf, scheme, scheme,
</span></span><span style="display:flex;"><span>		json.SerializerOptions{Yaml: <span style="color:#79c0ff">false</span>, Pretty: <span style="color:#79c0ff">false</span>, Strict: <span style="color:#79c0ff">true</span>},
</span></span><span style="display:flex;"><span>	)
</span></span><span style="display:flex;"><span>	jsonSerializerType.StrictSerializer = strictJSONSerializer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	yamlSerializer <span style="color:#ff7b72;font-weight:bold">:=</span> json.<span style="color:#d2a8ff;font-weight:bold">NewSerializerWithOptions</span>(
</span></span><span style="display:flex;"><span>		mf, scheme, scheme,
</span></span><span style="display:flex;"><span>		json.SerializerOptions{Yaml: <span style="color:#79c0ff">true</span>, Pretty: <span style="color:#79c0ff">false</span>, Strict: options.Strict},
</span></span><span style="display:flex;"><span>	)
</span></span><span style="display:flex;"><span>	strictYAMLSerializer <span style="color:#ff7b72;font-weight:bold">:=</span> json.<span style="color:#d2a8ff;font-weight:bold">NewSerializerWithOptions</span>(
</span></span><span style="display:flex;"><span>		mf, scheme, scheme,
</span></span><span style="display:flex;"><span>		json.SerializerOptions{Yaml: <span style="color:#79c0ff">true</span>, Pretty: <span style="color:#79c0ff">false</span>, Strict: <span style="color:#79c0ff">true</span>},
</span></span><span style="display:flex;"><span>	)
</span></span><span style="display:flex;"><span>	protoSerializer <span style="color:#ff7b72;font-weight:bold">:=</span> protobuf.<span style="color:#d2a8ff;font-weight:bold">NewSerializer</span>(scheme, scheme)
</span></span><span style="display:flex;"><span>	protoRawSerializer <span style="color:#ff7b72;font-weight:bold">:=</span> protobuf.<span style="color:#d2a8ff;font-weight:bold">NewRawSerializer</span>(scheme, scheme)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	serializers <span style="color:#ff7b72;font-weight:bold">:=</span> []serializerType{
</span></span><span style="display:flex;"><span>		jsonSerializerType,
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			AcceptContentTypes: []<span style="color:#ff7b72">string</span>{runtime.ContentTypeYAML},
</span></span><span style="display:flex;"><span>			ContentType:        runtime.ContentTypeYAML,
</span></span><span style="display:flex;"><span>			FileExtensions:     []<span style="color:#ff7b72">string</span>{<span style="color:#a5d6ff">&#34;yaml&#34;</span>},
</span></span><span style="display:flex;"><span>			EncodesAsText:      <span style="color:#79c0ff">true</span>,
</span></span><span style="display:flex;"><span>			Serializer:         yamlSerializer,
</span></span><span style="display:flex;"><span>			StrictSerializer:   strictYAMLSerializer,
</span></span><span style="display:flex;"><span>		},
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			AcceptContentTypes: []<span style="color:#ff7b72">string</span>{runtime.ContentTypeProtobuf},
</span></span><span style="display:flex;"><span>			ContentType:        runtime.ContentTypeProtobuf,
</span></span><span style="display:flex;"><span>			FileExtensions:     []<span style="color:#ff7b72">string</span>{<span style="color:#a5d6ff">&#34;pb&#34;</span>},
</span></span><span style="display:flex;"><span>			Serializer:         protoSerializer,
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// note, strict decoding is unsupported for protobuf,</span>
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// fall back to regular serializing</span>
</span></span><span style="display:flex;"><span>			StrictSerializer: protoSerializer,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			Framer:           protobuf.LengthDelimitedFramer,
</span></span><span style="display:flex;"><span>			StreamSerializer: protoRawSerializer,
</span></span><span style="display:flex;"><span>		},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">for</span> _, fn <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72">range</span> serializerExtensions {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> serializer, ok <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#d2a8ff;font-weight:bold">fn</span>(scheme); ok {
</span></span><span style="display:flex;"><span>			serializers = append(serializers, serializer)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">return</span> serializers
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	jsonSerializer 与 yamlSerializer 分别通过json.NewSerializer 和 json.NewYAMLSerializer 函数进行实例化，jsonSerializer通过 application/json 的ContentType 标识， 文件扩展名为 json，而yamlSerializer 通过application/yaml 的 ContentType 标识，文件扩展名 为 yaml。protobufserializer 通过 protobuf.NewSerializer 函数进行实例化，它通过 application/ vnd.kubernetes.protobuf 的ContentType 标识，文件扩展名为pb</p>
<h3 id="jsonserializer-与-yamlserializer-序列化器">jsonSerializer 与 yamlSerializer 序列化器</h3>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">64
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">65
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">66
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">67
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">68
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">69
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">70
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">71
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">72
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">73
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">74
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">75
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">76
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">77
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">78
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">79
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">80
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">81
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// staging/src/k8s.io/apimachinery/pkg/runtime/serializer/json/json.go</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (s <span style="color:#ff7b72;font-weight:bold">*</span>Serializer) <span style="color:#d2a8ff;font-weight:bold">Decode</span>(originalData []<span style="color:#ff7b72">byte</span>, gvk <span style="color:#ff7b72;font-weight:bold">*</span>schema.GroupVersionKind, into runtime.Object) (runtime.Object, <span style="color:#ff7b72;font-weight:bold">*</span>schema.GroupVersionKind, <span style="color:#ff7b72">error</span>) {
</span></span><span style="display:flex;"><span>	data <span style="color:#ff7b72;font-weight:bold">:=</span> originalData
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> s.options.Yaml {
</span></span><span style="display:flex;"><span>		altered, err <span style="color:#ff7b72;font-weight:bold">:=</span> yaml.<span style="color:#d2a8ff;font-weight:bold">YAMLToJSON</span>(data)
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#79c0ff">nil</span>, err
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		data = altered
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	actual, err <span style="color:#ff7b72;font-weight:bold">:=</span> s.meta.<span style="color:#d2a8ff;font-weight:bold">Interpret</span>(data)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#79c0ff">nil</span>, err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> gvk <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72;font-weight:bold">*</span>actual = <span style="color:#d2a8ff;font-weight:bold">gvkWithDefaults</span>(<span style="color:#ff7b72;font-weight:bold">*</span>actual, <span style="color:#ff7b72;font-weight:bold">*</span>gvk)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> unk, ok <span style="color:#ff7b72;font-weight:bold">:=</span> into.(<span style="color:#ff7b72;font-weight:bold">*</span>runtime.Unknown); ok <span style="color:#ff7b72;font-weight:bold">&amp;&amp;</span> unk <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		unk.Raw = originalData
</span></span><span style="display:flex;"><span>		unk.ContentType = runtime.ContentTypeJSON
</span></span><span style="display:flex;"><span>		unk.<span style="color:#d2a8ff;font-weight:bold">GetObjectKind</span>().<span style="color:#d2a8ff;font-weight:bold">SetGroupVersionKind</span>(<span style="color:#ff7b72;font-weight:bold">*</span>actual)
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> unk, actual, <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> into <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		_, isUnstructured <span style="color:#ff7b72;font-weight:bold">:=</span> into.(runtime.Unstructured)
</span></span><span style="display:flex;"><span>		types, _, err <span style="color:#ff7b72;font-weight:bold">:=</span> s.typer.<span style="color:#d2a8ff;font-weight:bold">ObjectKinds</span>(into)
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">switch</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">case</span> runtime.<span style="color:#d2a8ff;font-weight:bold">IsNotRegisteredError</span>(err), isUnstructured:
</span></span><span style="display:flex;"><span>			strictErrs, err <span style="color:#ff7b72;font-weight:bold">:=</span> s.<span style="color:#d2a8ff;font-weight:bold">unmarshal</span>(into, data, originalData)
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, err
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// when decoding directly into a provided unstructured object,</span>
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// extract the actual gvk decoded from the provided data,</span>
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// and ensure it is non-empty.</span>
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">if</span> isUnstructured {
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72;font-weight:bold">*</span>actual = into.<span style="color:#d2a8ff;font-weight:bold">GetObjectKind</span>().<span style="color:#d2a8ff;font-weight:bold">GroupVersionKind</span>()
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">if</span> len(actual.Kind) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewMissingKindErr</span>(string(originalData))
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>				<span style="color:#8b949e;font-style:italic">// TODO(109023): require apiVersion here as well once unstructuredJSONScheme#Decode does</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">if</span> len(strictErrs) &gt; <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">return</span> into, actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewStrictDecodingError</span>(strictErrs)
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> into, actual, <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">case</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, err
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">default</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72;font-weight:bold">*</span>actual = <span style="color:#d2a8ff;font-weight:bold">gvkWithDefaults</span>(<span style="color:#ff7b72;font-weight:bold">*</span>actual, types[<span style="color:#a5d6ff">0</span>])
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> len(actual.Kind) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewMissingKindErr</span>(string(originalData))
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> len(actual.Version) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewMissingVersionErr</span>(string(originalData))
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// use the target if necessary</span>
</span></span><span style="display:flex;"><span>	obj, err <span style="color:#ff7b72;font-weight:bold">:=</span> runtime.<span style="color:#d2a8ff;font-weight:bold">UseOrCreateObject</span>(s.typer, s.creater, <span style="color:#ff7b72;font-weight:bold">*</span>actual, into)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	strictErrs, err <span style="color:#ff7b72;font-weight:bold">:=</span> s.<span style="color:#d2a8ff;font-weight:bold">unmarshal</span>(obj, data, originalData)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, actual, err
</span></span><span style="display:flex;"><span>	} <span style="color:#ff7b72">else</span> <span style="color:#ff7b72">if</span> len(strictErrs) &gt; <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> obj, actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewStrictDecodingError</span>(strictErrs)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">return</span> obj, actual, <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	Decode 两数支持两种格式的反序列化操作 ，分别是 YAML 格式和 JSON格式。</p>
<p>​	如果是 YAML 格式，则通过 yaml.YAMLTOJSON 两数将 JSON 格式数据转换为资源对象并填充到data 字段中。此时，无论反序列化操作的是YAML格式还是JSON 格式，data 字段中都是JSON格式数据。按着通过s.meta.Interpret 函数从JSON格式 数据中提取出资源对象的metav1.TypeMeta (即 APIVersion 和Kind 字段)。最后通过 caseSensitiveJsonlterator.Unmarshal 函数 (即json-iterator )将JSON 数据反序列化并返回。</p>
<h3 id="protobufserializer-序列化器">protobufSerializer 序列化器</h3>
<p>​	Protobuf (Google Protocol Buffer )是Google 公司内部的混合语言数据标准， Protocol Buffers是一种轻便、高效的结构化数据存储格式，可以用于结构化数据序列 化。它很适合做数据存储或成为 RPC 数据交换格式。它可用于通信协议、数据存储等领域，与语言无关、与平台无关、可扩展的序列化结构数据格式。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">8
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-protobuf" data-lang="protobuf"><span style="display:flex;"><span><span style="color:#ff7b72">package</span> <span style="color:#ff7b72">lm</span>;<span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149"></span><span style="color:#ff7b72">message</span> <span style="color:#f0883e;font-weight:bold">helloworld</span><span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149"></span>{<span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149"></span><span style="color:#ff7b72">required</span> <span style="color:#ff7b72">int32</span> id <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">1</span>; <span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149"></span><span style="color:#ff7b72">required</span> <span style="color:#ff7b72">string</span> str <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">2</span>; <span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149"></span><span style="color:#ff7b72">optional</span> <span style="color:#ff7b72">int32</span> opt <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">3</span>;<span style="color:#f85149">
</span></span></span><span style="display:flex;"><span><span style="color:#f85149"></span>}<span style="color:#f85149">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>​	Protobuf 序列化器使用 proto 库来实现序列化和反序列操作</p>
<h4 id="1-序列化操作">1. 序列化操作</h4>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">64
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">65
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">66
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">67
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">68
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">69
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">70
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">71
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">72
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">73
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (s <span style="color:#ff7b72;font-weight:bold">*</span>Serializer) <span style="color:#d2a8ff;font-weight:bold">doEncode</span>(obj runtime.Object, w io.Writer, memAlloc runtime.MemoryAllocator) <span style="color:#ff7b72">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> memAlloc <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		klog.<span style="color:#d2a8ff;font-weight:bold">Error</span>(<span style="color:#a5d6ff">&#34;a mandatory memory allocator wasn&#39;t provided, this might have a negative impact on performance, check invocations of EncodeWithAllocator method, falling back on runtime.SimpleAllocator&#34;</span>)
</span></span><span style="display:flex;"><span>		memAlloc = <span style="color:#ff7b72;font-weight:bold">&amp;</span>runtime.SimpleAllocator{}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	prefixSize <span style="color:#ff7b72;font-weight:bold">:=</span> uint64(len(s.prefix))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">var</span> unk runtime.Unknown
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">switch</span> t <span style="color:#ff7b72;font-weight:bold">:=</span> obj.(<span style="color:#ff7b72">type</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">case</span> <span style="color:#ff7b72;font-weight:bold">*</span>runtime.Unknown:
</span></span><span style="display:flex;"><span>		estimatedSize <span style="color:#ff7b72;font-weight:bold">:=</span> prefixSize <span style="color:#ff7b72;font-weight:bold">+</span> uint64(t.<span style="color:#d2a8ff;font-weight:bold">Size</span>())
</span></span><span style="display:flex;"><span>		data <span style="color:#ff7b72;font-weight:bold">:=</span> memAlloc.<span style="color:#d2a8ff;font-weight:bold">Allocate</span>(estimatedSize)
</span></span><span style="display:flex;"><span>		i, err <span style="color:#ff7b72;font-weight:bold">:=</span> t.<span style="color:#d2a8ff;font-weight:bold">MarshalTo</span>(data[prefixSize:])
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		copy(data, s.prefix)
</span></span><span style="display:flex;"><span>		_, err = w.<span style="color:#d2a8ff;font-weight:bold">Write</span>(data[:prefixSize<span style="color:#ff7b72;font-weight:bold">+</span>uint64(i)])
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">default</span>:
</span></span><span style="display:flex;"><span>		kind <span style="color:#ff7b72;font-weight:bold">:=</span> obj.<span style="color:#d2a8ff;font-weight:bold">GetObjectKind</span>().<span style="color:#d2a8ff;font-weight:bold">GroupVersionKind</span>()
</span></span><span style="display:flex;"><span>		unk = runtime.Unknown{
</span></span><span style="display:flex;"><span>			TypeMeta: runtime.TypeMeta{
</span></span><span style="display:flex;"><span>				Kind:       kind.Kind,
</span></span><span style="display:flex;"><span>				APIVersion: kind.<span style="color:#d2a8ff;font-weight:bold">GroupVersion</span>().<span style="color:#d2a8ff;font-weight:bold">String</span>(),
</span></span><span style="display:flex;"><span>			},
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">switch</span> t <span style="color:#ff7b72;font-weight:bold">:=</span> obj.(<span style="color:#ff7b72">type</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">case</span> bufferedMarshaller:
</span></span><span style="display:flex;"><span>		<span style="color:#8b949e;font-style:italic">// this path performs a single allocation during write only when the Allocator wasn&#39;t provided</span>
</span></span><span style="display:flex;"><span>		<span style="color:#8b949e;font-style:italic">// it also requires the caller to implement the more efficient Size and MarshalToSizedBuffer methods</span>
</span></span><span style="display:flex;"><span>		encodedSize <span style="color:#ff7b72;font-weight:bold">:=</span> uint64(t.<span style="color:#d2a8ff;font-weight:bold">Size</span>())
</span></span><span style="display:flex;"><span>		estimatedSize <span style="color:#ff7b72;font-weight:bold">:=</span> prefixSize <span style="color:#ff7b72;font-weight:bold">+</span> <span style="color:#d2a8ff;font-weight:bold">estimateUnknownSize</span>(<span style="color:#ff7b72;font-weight:bold">&amp;</span>unk, encodedSize)
</span></span><span style="display:flex;"><span>		data <span style="color:#ff7b72;font-weight:bold">:=</span> memAlloc.<span style="color:#d2a8ff;font-weight:bold">Allocate</span>(estimatedSize)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		i, err <span style="color:#ff7b72;font-weight:bold">:=</span> unk.<span style="color:#d2a8ff;font-weight:bold">NestedMarshalTo</span>(data[prefixSize:], t, encodedSize)
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		copy(data, s.prefix)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		_, err = w.<span style="color:#d2a8ff;font-weight:bold">Write</span>(data[:prefixSize<span style="color:#ff7b72;font-weight:bold">+</span>uint64(i)])
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">case</span> proto.Marshaler:
</span></span><span style="display:flex;"><span>		<span style="color:#8b949e;font-style:italic">// this path performs extra allocations</span>
</span></span><span style="display:flex;"><span>		data, err <span style="color:#ff7b72;font-weight:bold">:=</span> t.<span style="color:#d2a8ff;font-weight:bold">Marshal</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		unk.Raw = data
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		estimatedSize <span style="color:#ff7b72;font-weight:bold">:=</span> prefixSize <span style="color:#ff7b72;font-weight:bold">+</span> uint64(unk.<span style="color:#d2a8ff;font-weight:bold">Size</span>())
</span></span><span style="display:flex;"><span>		data = memAlloc.<span style="color:#d2a8ff;font-weight:bold">Allocate</span>(estimatedSize)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		i, err <span style="color:#ff7b72;font-weight:bold">:=</span> unk.<span style="color:#d2a8ff;font-weight:bold">MarshalTo</span>(data[prefixSize:])
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		copy(data, s.prefix)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		_, err = w.<span style="color:#d2a8ff;font-weight:bold">Write</span>(data[:prefixSize<span style="color:#ff7b72;font-weight:bold">+</span>uint64(i)])
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">default</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#8b949e;font-style:italic">// TODO: marshal with a different content type and serializer (JSON for third party objects)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> errNotMarshalable{reflect.<span style="color:#d2a8ff;font-weight:bold">TypeOf</span>(obj)}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	Encode 函数首先验证资源对象 proto.Marshaler类型，proto.Marshaler是一个interface接又类型，该接又专门留给对象自定义实现的序列化操作。如果资源对象为proto.Marshaler类型，则通过t.Marshal序列化函数进行编码。
​	而且，通过unk.MarshalTo两数在编码后的数据前加上protoEncodingPrefix前缀，前缀为magic-number特殊标识，其用于标识一个包的完整性。所有通过protobufSerializer序列化器编码的数据都会有前缀。前缀数据共4字节，分别是0x6b、0x38、0x73、0x00，其中第4个字节是为编码样式保留的。</p>
<h4 id="2-反序列化操作">2. 反序列化操作</h4>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">64
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (s <span style="color:#ff7b72;font-weight:bold">*</span>Serializer) <span style="color:#d2a8ff;font-weight:bold">Decode</span>(originalData []<span style="color:#ff7b72">byte</span>, gvk <span style="color:#ff7b72;font-weight:bold">*</span>schema.GroupVersionKind, into runtime.Object) (runtime.Object, <span style="color:#ff7b72;font-weight:bold">*</span>schema.GroupVersionKind, <span style="color:#ff7b72">error</span>) {
</span></span><span style="display:flex;"><span>	prefixLen <span style="color:#ff7b72;font-weight:bold">:=</span> len(s.prefix)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">switch</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">case</span> len(originalData) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#8b949e;font-style:italic">// TODO: treat like decoding {} from JSON with defaulting</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#79c0ff">nil</span>, fmt.<span style="color:#d2a8ff;font-weight:bold">Errorf</span>(<span style="color:#a5d6ff">&#34;empty data&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">case</span> len(originalData) &lt; prefixLen <span style="color:#ff7b72;font-weight:bold">||</span> !bytes.<span style="color:#d2a8ff;font-weight:bold">Equal</span>(s.prefix, originalData[:prefixLen]):
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#79c0ff">nil</span>, fmt.<span style="color:#d2a8ff;font-weight:bold">Errorf</span>(<span style="color:#a5d6ff">&#34;provided data does not appear to be a protobuf message, expected prefix %v&#34;</span>, s.prefix)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">case</span> len(originalData) <span style="color:#ff7b72;font-weight:bold">==</span> prefixLen:
</span></span><span style="display:flex;"><span>		<span style="color:#8b949e;font-style:italic">// TODO: treat like decoding {} from JSON with defaulting</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#79c0ff">nil</span>, fmt.<span style="color:#d2a8ff;font-weight:bold">Errorf</span>(<span style="color:#a5d6ff">&#34;empty body&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	data <span style="color:#ff7b72;font-weight:bold">:=</span> originalData[prefixLen:]
</span></span><span style="display:flex;"><span>	unk <span style="color:#ff7b72;font-weight:bold">:=</span> runtime.Unknown{}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">:=</span> unk.<span style="color:#d2a8ff;font-weight:bold">Unmarshal</span>(data); err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#79c0ff">nil</span>, err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	actual <span style="color:#ff7b72;font-weight:bold">:=</span> unk.<span style="color:#d2a8ff;font-weight:bold">GroupVersionKind</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">copyKindDefaults</span>(<span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, gvk)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> intoUnknown, ok <span style="color:#ff7b72;font-weight:bold">:=</span> into.(<span style="color:#ff7b72;font-weight:bold">*</span>runtime.Unknown); ok <span style="color:#ff7b72;font-weight:bold">&amp;&amp;</span> intoUnknown <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72;font-weight:bold">*</span>intoUnknown = unk
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> ok, _, _ <span style="color:#ff7b72;font-weight:bold">:=</span> s.<span style="color:#d2a8ff;font-weight:bold">RecognizesData</span>(unk.Raw); ok {
</span></span><span style="display:flex;"><span>			intoUnknown.ContentType = runtime.ContentTypeProtobuf
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> intoUnknown, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> into <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		types, _, err <span style="color:#ff7b72;font-weight:bold">:=</span> s.typer.<span style="color:#d2a8ff;font-weight:bold">ObjectKinds</span>(into)
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">switch</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">case</span> runtime.<span style="color:#d2a8ff;font-weight:bold">IsNotRegisteredError</span>(err):
</span></span><span style="display:flex;"><span>			pb, ok <span style="color:#ff7b72;font-weight:bold">:=</span> into.(proto.Message)
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">if</span> !ok {
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, errNotMarshalable{reflect.<span style="color:#d2a8ff;font-weight:bold">TypeOf</span>(into)}
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">:=</span> proto.<span style="color:#d2a8ff;font-weight:bold">Unmarshal</span>(unk.Raw, pb); err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, err
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> into, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">case</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, err
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">default</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#d2a8ff;font-weight:bold">copyKindDefaults</span>(<span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, <span style="color:#ff7b72;font-weight:bold">&amp;</span>types[<span style="color:#a5d6ff">0</span>])
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// if the result of defaulting did not set a version or group, ensure that at least group is set</span>
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// (copyKindDefaults will not assign Group if version is already set). This guarantees that the group</span>
</span></span><span style="display:flex;"><span>			<span style="color:#8b949e;font-style:italic">// of into is set if there is no better information from the caller or object.</span>
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">if</span> len(actual.Version) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> <span style="color:#ff7b72;font-weight:bold">&amp;&amp;</span> len(actual.Group) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>				actual.Group = types[<span style="color:#a5d6ff">0</span>].Group
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> len(actual.Kind) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewMissingKindErr</span>(fmt.<span style="color:#d2a8ff;font-weight:bold">Sprintf</span>(<span style="color:#a5d6ff">&#34;%#v&#34;</span>, unk.TypeMeta))
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> len(actual.Version) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, runtime.<span style="color:#d2a8ff;font-weight:bold">NewMissingVersionErr</span>(fmt.<span style="color:#d2a8ff;font-weight:bold">Sprintf</span>(<span style="color:#a5d6ff">&#34;%#v&#34;</span>, unk.TypeMeta))
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">return</span> <span style="color:#d2a8ff;font-weight:bold">unmarshalToObject</span>(s.typer, s.creater, <span style="color:#ff7b72;font-weight:bold">&amp;</span>actual, into, unk.Raw)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	Decode两数首先验证protoEncodingPrefix前缀，前级为magic-number特殊标识，其用于标识一个包的完整性，然后验证资源对象是否为proto.Mesage类型，最后通过 proto.Unmarshal 反序列化函数进行解码。</p>
<h2 id="converter-资源版本转换器">Converter 资源版本转换器</h2>
<p>​	在Kubernetes 系统中，同一资源拥有多个资源版本，Kubernetes 系统允许同一资 源的不同资源版本进行转换，例如Deployment 资源对象， 当前运行的是v1beta1 资 源版本，但vlbetal 资源版本的某些功能或字段不如v1资源版本完善，则可以将 Deployment 资源对象的v1beta1 资源版本转换为 v1 版本。可通过kubectl convert 命 令进行资源版本转换，执行命令如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#7ee787">apiVersion</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">apps/v1beta1</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">kind</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Deployment</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">metadata</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">	</span><span style="color:#a5d6ff">name:nginx-deployment</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">spec</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">	</span><span style="color:#7ee787">replicas</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">1</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">template</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">metadata</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">labels</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">          </span><span style="color:#7ee787">app</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">spec</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">containers</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      	</span><span style="color:#7ee787">image</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx:1.7.9</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">ports</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      	</span>- <span style="color:#a5d6ff">containerPort:80</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl convert -f vlbeta1Deployment.yami --output-version<span style="color:#ff7b72;font-weight:bold">=</span>apps/v1
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	首先，定义一个 YAML Manifest File 资源描述文件，该文件中定义Deployment 资源版本为v1beta1。通过执行kubect convert 命令，&ndash;output -ver sion 将 资源版本转换 为指定的资源版本v1。如果指定的资源版本不在Scheme 资源注册表中，则会报错。 如果不指定资源版本，则默认转换为资源的首选版本。</p>
<p>​	Converter 资源版本转换器主要用于解决多资源版本转换问题，Kubernetes 系统 中的一 个资源支持多个资源版本，如果要在每个资源版本之间转换，最直接的方式是，每个资源版本都支持其他资源版本的转换，但这样处理起来非常麻烦。例如，某个资源对象支持 3 个资源版本，那么就需要提前定义一个资源版本转换到其他两个资源版本(vI&ndash; vlalphal,vI- vlbetal)、(vlalphal-v1,vlalphal-v1beta1)及( v1beta1-v1, vlbetal&ndash;vlalphal)，随着资源版本的增加，资源版本转换的定义会越来越多。</p>
<p>​	为了解决这个问题，Kubernetes通过内部版本(InternalVersion)机制实现资源版本转换，Converter 资源版本转换过程如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230420175427860.png" alt="image-20230420175427860"  />
</p>
<p>​	当需要在两个资源版本之间转换时，例如 vlalphal&ndash;vlbetal 或 vlalphal&ndash;v1。 Converter 资源版本转换器先将第 一个资源版本转换为_ internal 内部版本，再转换为相应的资源版本。每个资源只要能支持内部版本，就能与其他任何资源版本进行间接的资源版本转换</p>
<h3 id="converter-转换器数据结构">Converter 转换器数据结构</h3>
<p>​	Converter转换器数据结构主要存放转换函数(即Conversion Funcs)。Converter 转换器数据结构代码示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Converter knows how to convert one type to another.</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Converter <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Map from the conversion pair to a function which can</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// do the conversion.</span>
</span></span><span style="display:flex;"><span>	conversionFuncs          ConversionFuncs
</span></span><span style="display:flex;"><span>	generatedConversionFuncs ConversionFuncs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Set of conversions that should be treated as a no-op</span>
</span></span><span style="display:flex;"><span>	ignoredUntypedConversions <span style="color:#ff7b72">map</span>[typePair]<span style="color:#ff7b72">struct</span>{}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>conversionFuncs: 默认转换两数。这些转换西数 一般定义在资源目录下的 conversion.go 代码文件中。</li>
<li>generatedConversionFuncs: 自动生成的转换两数。这些转换函数 一般定 义在资源目录下的 zz_generated.conversion.go 代码文件中，是由代码生成器自动生成的转换函数。</li>
<li>ignoredConversions: 若资源对象注册到此字段，则忽略此资源对象的转换操作。</li>
</ul>
<p>​    Converter转换器数据结构中存放的转换两数(即ConversionFuncs)可以分为两类，分别为默认的转换两数(即conversionFuncs字段)和自动生成的转换函数(即generatedConversionFuncs字段)。它们都通过ConversionFuncs来管理转换函数，代码示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> ConversionFuncs <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	untyped <span style="color:#ff7b72">map</span>[typePair]ConversionFunc
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> typePair <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	source reflect.Type
</span></span><span style="display:flex;"><span>	dest   reflect.Type
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> ConversionFunc <span style="color:#ff7b72">func</span>(a, b <span style="color:#ff7b72">interface</span>{}, scope Scope) <span style="color:#ff7b72">error</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	ConversionFunc 类型函数(即Type Function )定义了转换函数实现的结构，将资 源对象a转换为资源对象b。a 参数定义了转换源(即source)的资源类型，b 参数定义 了转换目标(即dest)的资源类型。scope 定义了多次转换机制(即递归调用转换函数)。</p>
<blockquote>
<p>ConversionFunc 类型函数的资源对象传参必须是指针，否则无法进 行转换并抛出异常</p></blockquote>
<h3 id="converter-注册转换函数">Converter 注册转换函数</h3>
<p>​	Converter 转换函数需要通过注册才能在Kubernetes 内部使用，目前 Kubernetes 支持 5 个注册转换西数，分别介绍如下。</p>
<ul>
<li>scheme. AddlgnoredConversionType :注册忽略的资源类型，不会执行转换操作，忽略资源对象的转换操作。</li>
<li>scheme. AddConversionFuncs: 注册多个Conversion Func 转换函数</li>
<li>scheme.AddConversionFunc: 注册单个Conversion Func转换函数</li>
<li>scheme. AddGeneratedConversionFunc: 注册自动生成的转换函数</li>
<li>scheme.AddFieldLabelConversionFune: 注册字段标签 ( FieldLabel )的转换函数</li>
</ul>
<p>​    以apps/v1资源组、资源版本为例，通过scheme.AddConversionFuncs函数注册所有资源的转换函数，代码示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// v1版本好像已经弃用了</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">addConversionFuncs</span>(scheme <span style="color:#ff7b72;font-weight:bold">*</span>runtime.Scheme) <span style="color:#ff7b72">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Add field label conversions for kinds having selectable nothing but ObjectMeta fields.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">:=</span> scheme.<span style="color:#d2a8ff;font-weight:bold">AddFieldLabelConversionFunc</span>(SchemeGroupVersion.<span style="color:#d2a8ff;font-weight:bold">WithKind</span>(<span style="color:#a5d6ff">&#34;StatefulSet&#34;</span>),
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">func</span>(label, value <span style="color:#ff7b72">string</span>) (<span style="color:#ff7b72">string</span>, <span style="color:#ff7b72">string</span>, <span style="color:#ff7b72">error</span>) {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">switch</span> label {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">case</span> <span style="color:#a5d6ff">&#34;metadata.name&#34;</span>, <span style="color:#a5d6ff">&#34;metadata.namespace&#34;</span>, <span style="color:#a5d6ff">&#34;status.successful&#34;</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">return</span> label, value, <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">default</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#ff7b72">return</span> <span style="color:#a5d6ff">&#34;&#34;</span>, <span style="color:#a5d6ff">&#34;&#34;</span>, fmt.<span style="color:#d2a8ff;font-weight:bold">Errorf</span>(<span style="color:#a5d6ff">&#34;field label not supported for appsv1beta2.StatefulSet: %s&#34;</span>, label)
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}); err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="converter-资源版本转换原理">Converter 资源版本转换原理</h3>
<p>​	Converter 转换器在 Kubernetes 源码中实际应用非常广泛，例如 Deployment 资源对象，起初使用 v1beta1 资源版本，而 v1 资源版本更稳定，则会将 v1beta1 资源版本转换为v1资源版本 。Converter 资源版本转换过程如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230420181057162.png" alt="image-20230420181057162"  />
</p>
<p>代码示例</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// ! 版本转换在1.7中废弃，此代码在最新版本中转换失败</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	appsv1 <span style="color:#a5d6ff">&#34;k8s.io/api/apps/v1&#34;</span>
</span></span><span style="display:flex;"><span>	appsv1beta1 <span style="color:#a5d6ff">&#34;k8s.io/api/apps/v1beta1&#34;</span>
</span></span><span style="display:flex;"><span>	metav1 <span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a5d6ff">&#34;k8s.io/kubernetes/pkg/apis/apps&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// KnownType external</span>
</span></span><span style="display:flex;"><span>	scheme <span style="color:#ff7b72;font-weight:bold">:=</span> runtime.<span style="color:#d2a8ff;font-weight:bold">NewScheme</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(appsv1beta1.SchemeGroupVersion, <span style="color:#ff7b72;font-weight:bold">&amp;</span>appsv1beta1.Deployment{})
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(appsv1.SchemeGroupVersion, <span style="color:#ff7b72;font-weight:bold">&amp;</span>appsv1.Deployment{})
</span></span><span style="display:flex;"><span>	scheme.<span style="color:#d2a8ff;font-weight:bold">AddKnownTypes</span>(apps.SchemeGroupVersion, <span style="color:#ff7b72;font-weight:bold">&amp;</span>appsv1.Deployment{})
</span></span><span style="display:flex;"><span>	metav1.<span style="color:#d2a8ff;font-weight:bold">AddToGroupVersion</span>(scheme, appsv1beta1.SchemeGroupVersion)
</span></span><span style="display:flex;"><span>	metav1.<span style="color:#d2a8ff;font-weight:bold">AddToGroupVersion</span>(scheme, appsv1.SchemeGroupVersion)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	v1betalDeployment <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72;font-weight:bold">&amp;</span>appsv1beta1.Deployment{TypeMeta: metav1.TypeMeta{Kind: <span style="color:#a5d6ff">&#34;Deployment&#34;</span>, APIVersion: <span style="color:#a5d6ff">&#34;apps/v1beta1&#34;</span>}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// v1beta1 - internal</span>
</span></span><span style="display:flex;"><span>	objInternal, err <span style="color:#ff7b72;font-weight:bold">:=</span> scheme.<span style="color:#d2a8ff;font-weight:bold">ConvertToVersion</span>(v1betalDeployment, apps.SchemeGroupVersion)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		panic(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	fmt.<span style="color:#d2a8ff;font-weight:bold">Println</span>(<span style="color:#a5d6ff">&#34;GVK:&#34;</span>, objInternal.<span style="color:#d2a8ff;font-weight:bold">GetObjectKind</span>().<span style="color:#d2a8ff;font-weight:bold">GroupVersionKind</span>().<span style="color:#d2a8ff;font-weight:bold">String</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// internal - v1</span>
</span></span><span style="display:flex;"><span>	objV1, err <span style="color:#ff7b72;font-weight:bold">:=</span> scheme.<span style="color:#d2a8ff;font-weight:bold">ConvertToVersion</span>(objInternal, appsv1.SchemeGroupVersion)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> {
</span></span><span style="display:flex;"><span>		panic(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	v1Deployment, ok <span style="color:#ff7b72;font-weight:bold">:=</span> objV1.(<span style="color:#ff7b72;font-weight:bold">*</span>appsv1.Deployment)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> !ok {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a5d6ff">&#34;not a Deployment&#34;</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	fmt.<span style="color:#d2a8ff;font-weight:bold">Println</span>(<span style="color:#a5d6ff">&#34;GVK:&#34;</span>, v1Deployment.<span style="color:#d2a8ff;font-weight:bold">GetObjectKind</span>().<span style="color:#d2a8ff;font-weight:bold">GroupVersionKind</span>().<span style="color:#d2a8ff;font-weight:bold">String</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码分析：</p>
<ul>
<li>
<p>第 1 部分 ： 实例化一个空的 scheme 资源注册表 ， 将 v1beta1 资源版本 、 v1 资源版本及内部版本 （ internal ） 的 Deployment 资源注册到 scheme 资源注册表中 。</p>
</li>
<li>
<p>第 2 部分 ： 实例化 v1beta1 Deployment 资源对象 ， 通过 scheme.ConvefiToVersion 将其转换为目标资源版本（ 即 internale 版本 ），得到 objlnternal资源对象 ， objlnternal 资源对象的 GVK 输出为 “ / ， Kind= ”</p>
</li>
<li>
<p>第 3 部分 ： 将 obj lnternal 资源对象通过 scheme.ConvertToVersion 转换为目标资源版本 （ 即 v1 资源版本 ） ， 得到 objV1资源对象 ， 并通过断言的方式来验证是否转换成功 ， objV1 资源对象的 GVK 输出为 “ apps/v 1 ， Kind=Deployment &quot; 。</p>
<ul>
<li>在 converter Example 代码示例的第 2 部分中 ， 将 vlbetal 资源版本转换为内部版本 （ 即 internal 版本 ） ， 得到转换后资源对象的 GVK 为 “ / ， Kind= ” 。 在这里 ， 读者肯定会产生疑问 ， 为什么 vlbetal 资源版本转换为内部版本以后得到的 GVK 为 “ / ，Kind= ” 而不是 “ apps/__internal ， Kmd=Deployment ” 。 下面带着疑问来看看 Kubernetes源码实现 。</li>
<li>scheme 资源注册表可以通过两种方式进行版本转换 ， 分别介绍如下 。</li>
<li>scheme.ConvertToVersion ： 将传入的 (in) 资源对象转换成目标 （ target ）资源版本 ，在版本转换之前 ，会将资源对象深复制一份后再执行转换操作 ，相当于安全的内存对象转换操作 。与 scheme.ConvertToVersion 功能相同 ，</li>
<li>scheme.UnsafeConvcrtToVersion ：但在转换过程中不会深复制资源对象 ， 而是直接对原资源对象进行转换操作 ， 尽可能高效地实现转换 。但该操作是非安全的内存对象转换操作 。</li>
</ul>
<p>scheme.ConvertToVersion 与 scheme.UnsafeConveftToVersion 资源版本转换功能都依赖于 s.convertToVersion 函数来实现 ， Converter 转换器流程图如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230420183659993.png" alt="image-20230420183659993"  />
</p>
</li>
</ul>
<h4 id="1获取传入的资源对象的反射类型">1.获取传入的资源对象的反射类型</h4>
<p>​	资源版本转换的类型可以是 runtime.ObJect 或 runtime.Unstructured ， 它们都属于Go 语言里的 struct 数据结构 ， 通过 Go 语言标准库 reflect 机制获取该资源类型的反射类型 ， 因为在 scheme 资源注册表中是以反射类型注册资源的 。 获取传入的资源对象的反射类型 。</p>
<h4 id="2从资源注册表中查找到传入的资源对象的-gvk">2.从资源注册表中查找到传入的资源对象的 GVK</h4>
<p>从 scheme 资源注册表中查找到传入的资源对象的所有 GVK ， 验证传入的资源对象是否己经注册 ， 如果未曾注册 ， 则返回错误.</p>
<h4 id="3从个-gvk-中选出与目标资源对象相匹配的-gvk">3.从个 GVK 中选出与目标资源对象相匹配的 GVK</h4>
<p>​	target.KindForGroupVersionKinds 函数从多个可转换的 GVK 中选出与目标资源对象相匹配的 GVK 。 这里有一个优化点 ， 转换过程是相对耗时的 ， 大量的相同资源之间进行版本转换的耗时会比较长 。 在 Kubemetes 源码中判断 ， 如果目标资源对象的 GVK 在可转换的 G VK 列表中 ， 则直接将传入的资源对象的 G VK 设置为目标资源对象的 GVK ， 而无须执行转换操作 ， 缩短部分耗时 。</p>
<h4 id="4判断传入的资源对象是否属于-unversioned-类型">4.判断传入的资源对象是否属于 Unversioned 类型</h4>
<p>​	对于 Unversioned 类型 ， 前面曾介绍过 ， 即无版本类型 （ UnversionedType) 。 属于该类型的资源对象并不需要进行转换操作 ， 而是直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK 。</p>
<h4 id="5执行转换操作">5.执行转换操作</h4>
<p>在执行转换操作之前 ， 先判断是否需要对传入的资源对象执行深复制操作 ， 然后通过 s.converter.Convert 转换函数执行转换操作.</p>
<p>​	实际的转换函数是通过 doconversion 函数执行的 ， 执行过程如下 。</p>
<ul>
<li>从默认转换函数列表 （ 即 c.conversionFuncs ） 中查找出 pair 对应的转换函数 ， 如果存在则执行该转换函数 （ 即fn ） 并返回 。</li>
<li>从自动生成的转换函数列表 （ 即 generatedConversionFuncs ） 中查找出 pair 对应的转换函数 ， 如果存在则执行该转换函数 （ 即fn ） 并返回 。</li>
<li>如果默认转换函数列表和自动生成的转换函数列表中都不存在当前资源对象的转换函数 ， 则使用 doconversion 函数传入的转换函数 （ 即 f) 。 调用 f
之前 ， 需要将 s rc 与 dest 资源对象通过 EnforcePtr 函数取指针的值 ， 因为函数传入的转换函数接收的是非指针资源对象 。</li>
</ul>
<h4 id="6设置转换后资源对象的-gvk">6.设置转换后资源对象的 GVK</h4>
<p>​	在代码示例的第 2 部分中 ， 将 v1beta1 资源版本转换为内部版本 （ 即 internal 版本 ），得到转换后资源对象的 GVK 为 “ / ， Kind= ” 。 原因在于 setTargetKind 函数 ， 转换操作执行完成以后 ， 通过 setTargetKind 函数设置转换后资源对象的 GVK ， 判断当前资源对象是否为内部版本 （ 即 APIVersion1nternal) ， 是内部版本则设置 GVK 为 schema.GroupVersionKind{}</p>]]></content:encoded>
    </item>
    <item>
      <title>k8s核心数据结构（1）</title>
      <link>https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/</link>
      <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/</guid>
      <description>&lt;h1 id=&#34;kubernetes-核心数据结构1&#34;&gt;Kubernetes 核心数据结构（1）&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;参考书籍：《Kubernetes源码剖析-郑旭东著》&lt;/p&gt;
&lt;p&gt;K8s 是一个完全以资源为中心的系统&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;groupversionresource-核心数据结构&#34;&gt;Group、Version、Resource 核心数据结构&lt;/h2&gt;
&lt;p&gt;​	Kuberetes 系统虽然有相当复杂和众多的 功能，但它本质 上是一个资源控制系统——注册、管理、调度资源 并维护资源的状态。&lt;/p&gt;
&lt;p&gt;​	Kuberetes 将资源再次分组和版本化，形成 Group（资源组）、Version（资源版本）、Resource（资源）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Group: 被称为资源组，在Kubernetes API Server 中也可称其为 APIGroup。&lt;/li&gt;
&lt;li&gt;Version: 被称为资源版本，在Kubernetes API Server 中也可称其为 APIVersions。&lt;/li&gt;
&lt;li&gt;Resource: 被称为资源，在Kubernetes API Server 中也可称其为 APIResource。&lt;/li&gt;
&lt;li&gt;Kind: 资源种类，描述 Resource 的种类，与 Resource 为同一级别。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230410172134645.png&#34; alt=&#34;image-20230410172134645&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;​	Kubernetes 系统支持多个Group，每个Group 支持多个Version，每个Version 支 持多个Resource，其中部分资源同时会拥有自己的子资源(即SubResource )。例如， Deployment资源拥有Status 子资源。
​	资源组、资源版本、资源、子资源的完整表现形式&lt;code&gt;&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;resource&amp;gt;/ &amp;lt;subresource&amp;gt;&lt;/code&gt;。以常用的 Deployment 资源为例，其完整表现形式为&lt;code&gt;apps/v1/deployments/status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​	另外资源对象(Resource Object )在本书中也是 一个常用概念，由“ 资源组+ 资源版本+资源种类” 组成，并在实例化后表达一个资源对象，例如 Deployment 资源实例化后拥有资源组、资源版本及资源种类，其表现形式为&lt;code&gt;&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;, Kind=&amp;lt;kind&amp;gt;&lt;/code&gt;，例如&lt;code&gt;apps/v1, Kind=Deployment&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;​	每一个资源都拥有一定数量的资源操作方法(即 Verbs )，资源操作方法用于 Etcd 集群存储中对资源对象的增、删、改、查操作。目前 Kubemetes 系统支持8 种资源操作方法，分别是 create、delete、delete、collection、get、list、patch、update、watch 操作方法。&lt;/p&gt;
&lt;p&gt;​	每一个资源都至少有两个版本，分别是外部版本(External Version)和内部版本 ( Internal Version )。外部版本用于对外暴露给用户请求的接又所使用的资源对象。内部版本不对外暴露，仅在Kubernetes API Server 内部使用。&lt;/p&gt;
&lt;p&gt;​	Kubernetes 资源也可分为两种， 分别是Kubernetes Resource (Kubermetes 内罝资源 ) 和 Custom Resource( 自 定 义 资 源 )。 开 发 者 通 过 C R D ( 即 Custom Resource Definitions )可实现自定义资源，它允许用户将自己定义的资源添加到 Kubernetes 系统中，并像使用 Kubernetes 内置资源 一样使用它们。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="kubernetes-核心数据结构1">Kubernetes 核心数据结构（1）</h1>
<blockquote>
<p>参考书籍：《Kubernetes源码剖析-郑旭东著》</p>
<p>K8s 是一个完全以资源为中心的系统</p></blockquote>
<h2 id="groupversionresource-核心数据结构">Group、Version、Resource 核心数据结构</h2>
<p>​	Kuberetes 系统虽然有相当复杂和众多的 功能，但它本质 上是一个资源控制系统——注册、管理、调度资源 并维护资源的状态。</p>
<p>​	Kuberetes 将资源再次分组和版本化，形成 Group（资源组）、Version（资源版本）、Resource（资源）</p>
<ul>
<li>Group: 被称为资源组，在Kubernetes API Server 中也可称其为 APIGroup。</li>
<li>Version: 被称为资源版本，在Kubernetes API Server 中也可称其为 APIVersions。</li>
<li>Resource: 被称为资源，在Kubernetes API Server 中也可称其为 APIResource。</li>
<li>Kind: 资源种类，描述 Resource 的种类，与 Resource 为同一级别。</li>
</ul>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230410172134645.png" alt="image-20230410172134645"  />
</p>
<p>​</p>
<p>​	Kubernetes 系统支持多个Group，每个Group 支持多个Version，每个Version 支 持多个Resource，其中部分资源同时会拥有自己的子资源(即SubResource )。例如， Deployment资源拥有Status 子资源。
​	资源组、资源版本、资源、子资源的完整表现形式<code>&lt;group&gt;/&lt;version&gt;/&lt;resource&gt;/ &lt;subresource&gt;</code>。以常用的 Deployment 资源为例，其完整表现形式为<code>apps/v1/deployments/status</code></p>
<p>​	另外资源对象(Resource Object )在本书中也是 一个常用概念，由“ 资源组+ 资源版本+资源种类” 组成，并在实例化后表达一个资源对象，例如 Deployment 资源实例化后拥有资源组、资源版本及资源种类，其表现形式为<code>&lt;group&gt;/&lt;version&gt;, Kind=&lt;kind&gt;</code>，例如<code>apps/v1, Kind=Deployment</code>.</p>
<p>​	每一个资源都拥有一定数量的资源操作方法(即 Verbs )，资源操作方法用于 Etcd 集群存储中对资源对象的增、删、改、查操作。目前 Kubemetes 系统支持8 种资源操作方法，分别是 create、delete、delete、collection、get、list、patch、update、watch 操作方法。</p>
<p>​	每一个资源都至少有两个版本，分别是外部版本(External Version)和内部版本 ( Internal Version )。外部版本用于对外暴露给用户请求的接又所使用的资源对象。内部版本不对外暴露，仅在Kubernetes API Server 内部使用。</p>
<p>​	Kubernetes 资源也可分为两种， 分别是Kubernetes Resource (Kubermetes 内罝资源 ) 和 Custom Resource( 自 定 义 资 源 )。 开 发 者 通 过 C R D ( 即 Custom Resource Definitions )可实现自定义资源，它允许用户将自己定义的资源添加到 Kubernetes 系统中，并像使用 Kubernetes 内置资源 一样使用它们。</p>
<h3 id="resourcelist">ResourceList</h3>
<p>​	Kubernetes Group、 Version、Resource 等核心数据结构存放在<code>staging/src/k8s.io/apimachinery/pkg/apis/meta/v1</code> 目录中。它包含了Kubernetes
集群中所有组件使用的通 用核心数据结构，例如APIGroup、APIVersions、APIResource 等。其
中，我们可以 通过 APIResourceList 数据结构描述所有Group、Version、Resource 的结构。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> APIResourceList <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	TypeMeta <span style="color:#a5d6ff">`json:&#34;,inline&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// groupVersion is the group and version this APIResourceList is for.</span>
</span></span><span style="display:flex;"><span>	GroupVersion <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;groupVersion&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// resources contains the name of the resources and if they are namespaced.</span>
</span></span><span style="display:flex;"><span>	APIResources []APIResource <span style="color:#a5d6ff">`json:&#34;resources&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> TypeMeta <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	Kind <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;kind,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	APIVersion <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;apiVersion,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> APIResource <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// name is the plural name of the resource.</span>
</span></span><span style="display:flex;"><span>	Name <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;name&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// The singularName is more correct for reporting status on a single item and both singular and plural are allowed</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// from the kubectl CLI interface.</span>
</span></span><span style="display:flex;"><span>	SingularName <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;singularName&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// namespaced indicates if a resource is namespaced or not.</span>
</span></span><span style="display:flex;"><span>	Namespaced <span style="color:#ff7b72">bool</span> <span style="color:#a5d6ff">`json:&#34;namespaced&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// group is the preferred group of the resource.  Empty implies the group of the containing resource list.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// For subresources, this may have a different value, for example: Scale&#34;.</span>
</span></span><span style="display:flex;"><span>	Group <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;group,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// version is the preferred version of the resource.  Empty implies the version of the containing resource list</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource&#39;s group)&#34;.</span>
</span></span><span style="display:flex;"><span>	Version <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;version,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;)</span>
</span></span><span style="display:flex;"><span>	Kind <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;kind&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// verbs is a list of supported kube verbs (this includes get, list, watch, create,</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// update, patch, delete, deletecollection, and proxy)</span>
</span></span><span style="display:flex;"><span>	Verbs Verbs <span style="color:#a5d6ff">`json:&#34;verbs&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// shortNames is a list of suggested short names of the resource.</span>
</span></span><span style="display:flex;"><span>	ShortNames []<span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;shortNames,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// categories is a list of the grouped resources this resource belongs to (e.g. &#39;all&#39;)</span>
</span></span><span style="display:flex;"><span>	Categories []<span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;categories,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	StorageVersionHash <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;storageVersionHash,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	Kubernetes的每个资源可使用<code>metav1.APIResource</code> 结构进行描述，它描述资源的基本信息，例如资源名称 (即 Name 字段)、资源所属的命名空间(即 Namespaced 字段)、资源种类(即 Kind 字段)、资源可操作的方法列表(即 Verbs 字段)。</p>
<p>​	每一个资源都属于一个或多个资源版本， 资源所属的版本通过 <code>metavl.APIVersions</code> 结构描述，一个或多个资源版本通过<code>Versions []string</code> 字符串数组进行存储。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230411111820480.png" alt="image-20230411111820480"  />
</p>
<h3 id="group">Group</h3>
<p>​	Group ( 资源组)，在Kubernetes API Server 中也可称其为 APIGroup。Kubernetes 系统中定义了许多资源组，这些资源组按照不同功能将资源进行了划分，资源组特点如下。</p>
<ul>
<li>将众多资源按照功能划分成不同的资源组，并允许单独启用/ 禁用资源组。 当然也可以单独启用/禁用资源组中的资源。</li>
<li>支持不同资源组中拥有不同的资源版本。这方便组内的资源根据版本进行迭代升级。</li>
<li>支持同名的资源种类 (即 Kind ) 存在于不同的资源组内 。</li>
<li>资源组与资源版本通过 Kubernetes API Server 对外暴露，允许开发者通过 HTTP 协议进行交互并通过动态客户端( 即 DynamicClient )进行资源发现。</li>
<li>支持CRD 自定 义资源扩展。</li>
<li>用户交互简单，例如在使用kubectl 命令行工具时，可以不填写资源组名称</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> APIGroup <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	TypeMeta <span style="color:#a5d6ff">`json:&#34;,inline&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// name is the name of the group.</span>
</span></span><span style="display:flex;"><span>	Name <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;name&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源组下所支持的资源版本.</span>
</span></span><span style="display:flex;"><span>	Versions []GroupVersionForDiscovery <span style="color:#a5d6ff">`json:&#34;versions&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 首选版本。 当一个资源组内存在多个资源版本时， Kubernetes API Server 在使用资源时会选择一 个首选版本作为当前版本</span>
</span></span><span style="display:flex;"><span>	PreferredVersion GroupVersionForDiscovery <span style="color:#a5d6ff">`json:&#34;preferredVersion,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// a map of client CIDR to server address that is serving this group.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// This is to help clients reach servers in the most network-efficient way possible.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Clients can use the app ropriate server address as per the CIDR that they match.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// In case of multiple matches, clients should use the longest matching CIDR.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// The server returns only those CIDRs that it thinks that the client can match.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.</span>
</span></span><span style="display:flex;"><span>	ServerAddressByClientCIDRs []ServerAddressByClientCIDR <span style="color:#a5d6ff">`json:&#34;serverAddressByClientCIDRs,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	在当前的Kubernetes 系统中，支持两类资源组，分别是拥有组名的资源组和没有组名的资源组。</p>
<ul>
<li>
<p><strong>拥有组名的资源组</strong>: 其表现形式为<code>&lt;group&gt;/&lt;version&gt;/&lt;resource&gt;</code>，例如 <code>apps/v1/deployments</code></p>
</li>
<li>
<p><strong>没有组名的资源组</strong>:  被称为 Core Groups ( 即核心资源组)或 Legacy Groups , 也可被称为 Group Less ( 即无组 )。 其表现形式为<code> /&lt;version&gt;/&lt;resource&gt;</code> ， 例 如 <code>/v1/pods</code></p>
<p>两类资源组表现形式不同， 形成的 HTTP PATH 路径也不同。 拥有组名的资源组的 HTTP PATH 以<code>/apis</code> 为前缀，其表现形式为<code>/apis/&lt;group&gt;/&lt;version&gt;/&lt;resource&gt;</code>，例如 <code>http://localhost:8080/apis/apps/v1/deployments</code>。没有组名的资源组的 HTTP PATH 以 <code>api</code> 为前缀，其表现形式为<code>/api/&lt;version&gt;/&lt;resource&gt;</code>，例如 <code>http://localhost:8080/api/vl/pods</code>.</p>
</li>
</ul>
<h3 id="version">Version</h3>
<p>​	Kubernetes 的资源版本控制可分为了种，分别是 Alpha、Beta、Stable，它们之间的迭代顺序为<code>Alpha -&gt; Beta -&gt; Stable</code>，其通常用来表示软件测试过程中的 了个阶段。 Alpha是第1个阶段，一般用于内部测试; Beta 是第2 个阶段，该版本已经修复了大 部分不完善之处，但仍有可能存在缺陷和漏洞， 一般由特定的用户群来进行测试; Stable 是第了个阶段，此时基本形成了产品并达到了一定的成熟度，可稳定运行。 Kubernetes 资源版本控制详情如下:</p>
<ul>
<li>Alpha 版本</li>
</ul>
<p>​    Alpha 版本为内部测试版本，用于Kubernetes 开发者内部测试，该版本是不稳定的，可能存在很多缺陷和漏洞，官方随时可能会放弃支持该版本。在默认的情况下， 处于Alpha 版本的功能会被禁用。Alpha 版本名称一般为 vlalphal、vlalpha2、v2alphal 等。</p>
<ul>
<li>Beta 版本</li>
</ul>
<p>​    Beta 版本为相对稳定的版本， Beta 版本经过官方和社区很多次测试 ， 当功能迭代时，该版本会有较小的改变，但不会被删除。在默认的情况下，处于Beta 版本的功能是开启状态的。Beta 版本命名一般为 v1betal、v1beta2、v2betal。</p>
<ul>
<li>Stable 版本</li>
</ul>
<p>​    Stable 版本为正式发布的版本, Stable 版本基本形成了产品 ，该版本不会被删除。 在默认的情况下 ，处于 stable 版本的功能全部处于开启状态 。Stable 版本命名一般为  v1、v2、 v3。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> APIVersions <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	TypeMeta <span style="color:#a5d6ff">`json:&#34;,inline&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 所支持的资源版本列表.</span>
</span></span><span style="display:flex;"><span>	Versions []<span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;versions&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// a map of client CIDR to server address that is serving this group.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// This is to help clients reach servers in the most network-efficient way possible.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Clients can use the appropriate server address as per the CIDR that they match.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// In case of multiple matches, clients should use the longest matching CIDR.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// The server returns only those CIDRs that it thinks that the client can match.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.</span>
</span></span><span style="display:flex;"><span>	ServerAddressByClientCIDRs []ServerAddressByClientCIDR <span style="color:#a5d6ff">`json:&#34;serverAddressByClientCIDRs&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>CIDR（Classless Inter-Domain Routing）是一个用于给用户分配<a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址</a>以及在<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>上有效地路由IP<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8C%85">数据包</a>的对IP地址进行归类的方法。与传统的A类、B类和C类寻址模式相比，CIDR在IP地址分配方面更为高效。CIDR采用斜线记法，表示为：IP地址/网络ID的位数。</p>
<ul>
<li>
<p>示例一：CIDR格式换算为IP地址网段</p>
<p>例如10.0.0.0/8，换算为32位二进制地址：00001010.00000000.00000000.00000000。其中/8表示8位网络ID，即32位二进制地址中前8位是固定不变的，对应网段为：00001010.00000000.00000000.00000000<del>00001010.11111111.11111111.11111111。则换算为十进制后，10.0.0.0/8表示：子网掩码为255.0.0.0，对应网段为10.0.0.0</del>10.255.255.255。</p>
</li>
<li>
<p>示例二：IP地址网段换算为CIDR格式</p>
<p>例如192.168.0.0<del>192.168.31.255，后两段IP换算为二进制地址：00000000.00000000</del>00011111.11111111，可以得出前19位（8*2+3）是固定不变的，则换算为CIDR格式后，表示为：192.168.0.0/19</p>
</li>
</ul></blockquote>
<h3 id="resource">Resource</h3>
<p>​	一 个资源被实例化后会表达为一 个资源对象(即Resource Object )。在 Kuberetes 系统中定义并运行着各式各样的资源对象，Kubernetes 资源对象如图所示。所有资源对象都是 Entity 。 Entity 翻译成中 文为 “ 实 体” ，Kubernetes 使用这些 Entity 来表示当前状态。可以通过 Kubernetes API Server 进行查询和更新每一个资源对象。 Kubernetes 目前支持两种 Entity，分别介绍如下</p>
<ul>
<li>
<p><strong>持久性实体(Persistent Entity)</strong>: 在资源对象被创建后，Kubernetes 会持久确保该资源对象存在。大部分资源对象属于持久性实体，例如 Deployment 资源对象</p>
</li>
<li>
<p><strong>短暂性实体(Ephemeral Entity</strong>): 也可称其为非持久性实体(Non-Persistent Entity ) 。 在资源对象被创建后，如果出现故障或调度失败 ，不会重新创建该资源对象，例如 Pod 资源对象</p>
</li>
<li>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230411115903185.png" alt="image-20230411115903185"  />
</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> APIResource <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// name is the plural name of the resource.</span>
</span></span><span style="display:flex;"><span>	Name <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;name&#34; protobuf:&#34;bytes,1,opt,name=name&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源的单数名称，它必须由小写字母组成，默认使用资源种类(Kind)的小写形式进行命名。例如，Pod 资源的单数名称为pod, 复数名称为pods</span>
</span></span><span style="display:flex;"><span>	SingularName <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;singularName&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源是否拥有所属命名空间</span>
</span></span><span style="display:flex;"><span>  Namespaced <span style="color:#ff7b72">bool</span> <span style="color:#a5d6ff">`json:&#34;namespaced&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源所在的资源组名称</span>
</span></span><span style="display:flex;"><span>	Group <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;group,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源所在的资源版本</span>
</span></span><span style="display:flex;"><span>	Version <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;version,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源种类</span>
</span></span><span style="display:flex;"><span>  Kind <span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;kind&#34; `</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源可操作的方法列表，例如get 、list、delete、create、update 等</span>
</span></span><span style="display:flex;"><span>  Verbs Verbs <span style="color:#a5d6ff">`json:&#34;verbs&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 资源的简称，例如 Pod 资源的简称为 po</span>
</span></span><span style="display:flex;"><span>  ShortNames []<span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;shortNames,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>  <span style="color:#8b949e;font-style:italic">// 该资源所属的分组资源列表（例如“全部”)</span>
</span></span><span style="display:flex;"><span>	Categories []<span style="color:#ff7b72">string</span> <span style="color:#a5d6ff">`json:&#34;categories,omitempty&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72;font-weight:bold">...</span>	
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="资源外部版本与内部版本">资源外部版本与内部版本</h4>
<p>​	Kubernetes 资源代码定义在 <code>pkg/apis</code> 目录下， 在详解资源代码定义之前， 先来了解一下资源的外部版本(ExternalVersion )与内部版本(Internal Version )。在 Kubernetes 系统中，同 一资源对应着两个版本，分别是外部版本和内部版本。例如，Deployment 资源，它所属的外部版本表现形式为<code>apps/ v1</code>，内部版本表现形式为<code>apps/_internal</code>'</p>
<ul>
<li>
<p>ExternalObject:  外部版本资源对象，也称为 Versioned Object ( 即拥有资源版本的资源对象)。外部版本用于对外暴露给用户请求的接又所使用的资源对象，例如，用户在通过 YAML 或 JSON 格式的描述文件创建资源对象时，所使用的是外部版本的资源对象。外部版本的资源对象通过资源版本( Alpha 、Beta 、Stable )进行标识</p>
</li>
<li>
<p>Internal Object: 内部版本资源对象。内部版本不对外暴露，仅在 Kubernetes API Server 内部使用。内部版本用于多资源版本的转换，例如将 v1betal 版本转换为 v1 版本，其过程为 <code>v1betal--internal - v1</code>，即先将 v1betal 转换为内部版本(internal )，再由内部版本(internal)转换为V1版本。内部版本资源对象通过 <code>runtime. APIVersionlnternal</code>  (即  internal )进行标识。</p>
<p>资源的外部版本代码定义在 <code>pkg/apis/&lt;group&gt;/&lt;version&gt;/</code>目录下，资源的内部版本代码定义在 <code>pkg/apis/&lt;group&gt;/</code>日 录 下。 例 如 ， Deployment 资源 ，它的外部版本定义在
<code>pkg/apis/apps/{v1,V1betal, v1beta2}/</code> 目录下， 它的内部版本定义在<code>pkg/apis/apps/</code>目录下(内部版本一般与资源组在同一级目录下)。资源的外部版本与内部版本如图所示。</p>
</li>
</ul>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230411141133099.png" alt="image-20230411141133099"  />
</p>
<p><strong>资源的外部版本和内部版本是需要相互转换的</strong>，而用于转换的函数需要事先初始化到资源注册表 (Scheme) 中 。 多个外部版本 ( External Version ) 之间的资源进行相互转换，都需要通过内部版本 (Internal Version )进行中转。这也是Kubernetes 能实现多资源版本转换的关键.</p>
<p>​	资源的外部版本与内部版本的代码定义也不太一样，外部版本的资源需要对外暴露给用户请求的接又，所以资源代码定义了 <code>JSONTags </code>和 <code>Proto Tags</code>，用于请求的序列化和反序列化操作。内部版本的资源不对外暴露，所以没有任何的 JSON Tags 和ProtoTags定义。以Pod 资源代码定义为例，代码示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span> <span style="color:#8b949e;font-style:italic">// staging/src/k8s.io/api/core/v1/types.go 外部使用</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Pod <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	metav1.TypeMeta <span style="color:#a5d6ff">`json:&#34;,inline&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Standard object&#39;s metadata.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// +optional</span>
</span></span><span style="display:flex;"><span>	metav1.ObjectMeta <span style="color:#a5d6ff">`json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Specification of the desired behavior of the pod.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// +optional</span>
</span></span><span style="display:flex;"><span>	Spec PodSpec <span style="color:#a5d6ff">`json:&#34;spec,omitempty&#34; protobuf:&#34;bytes,2,opt,name=spec&#34;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Most recently observed status of the pod.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// This data may not be up to date.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Populated by the system.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Read-only.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// +optional</span>
</span></span><span style="display:flex;"><span>	Status PodStatus <span style="color:#a5d6ff">`json:&#34;status,omitempty&#34; protobuf:&#34;bytes,3,opt,name=status&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// pkg/apis/core/types.go  内部使用</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Pod <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>	metav1.TypeMeta
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// +optional</span>
</span></span><span style="display:flex;"><span>	metav1.ObjectMeta
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Spec defines the behavior of a pod.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// +optional</span>
</span></span><span style="display:flex;"><span>	Spec PodSpec
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// Status represents the current information about a pod. This data may not be up</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// to date.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// +optional</span>
</span></span><span style="display:flex;"><span>	Status PodStatus
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="资源代码定义">资源代码定义</h4>
<p>​    Kubernetes资源代码定义在<code>pkg/apis</code>目录下，<strong>同一资源对应着内部版本和外部版本，内部版本和外部版本的资源代码结构并不相同</strong>。</p>
<p>​	资源的内部版本定义了所支持的资源类型 ( types.go)、资源验证方法( validation.go )、资源注册至资源注册表的方法 ( install/install.go) 等 。 而资源的外部版本定义了资源的转换方法 (conversion.go )、资源的默认值 (defaults.go) 等。</p>
<p>​	以 Deployment 资源为例，它的内部版本定义在 <code>pkg/apis/apps/</code>目录下，其资源代码结构为</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── OWNERS
</span></span><span style="display:flex;"><span>├── doc.go 
</span></span><span style="display:flex;"><span>├── fuzzer
</span></span><span style="display:flex;"><span>├── install
</span></span><span style="display:flex;"><span>├── register.go
</span></span><span style="display:flex;"><span>├── types.go
</span></span><span style="display:flex;"><span>├── v1
</span></span><span style="display:flex;"><span>├── v1beta1
</span></span><span style="display:flex;"><span>├── v1beta2
</span></span><span style="display:flex;"><span>├── validation
</span></span><span style="display:flex;"><span>└── zz_generated.deepcopy.go
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>doc.go: GoDoc 文件，定义了当前包的注释信息。在 Kubernetes 资源包中， 它还担当了代码生成器的全局 Tags 描述文件</li>
<li>register. go : 定义了资源组、资源版本及资源的注册信息 。</li>
<li>types.go: 定义了在当前资源组、资源版本下所支持的资源类型。</li>
<li>v1、v1betal 、v1beta2 :  定义了资源组下拥有的资源版本的资源 (即外部版本)。</li>
<li>install :  把当前资源组下的所有资源注册到资源注册表中。</li>
<li>validation: 定义了资源的验证方法。</li>
<li>zz_generated.deepcopy-go: 定义了资源的深复制操作，该文件由代码生成器自动生成</li>
</ul>
<p>​    每一个 Kubernetes 资源目录，都通过 register.go 代码文件定义所属的资源组和资源版本，内部版本资源对象通过<code>runtime.APIVersionInternal</code> (即 _internal ) 标识 ，代码示例如下:</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// pkg/apis/apps/types.go</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Deployment <span style="color:#ff7b72">struct</span>{ <span style="color:#ff7b72;font-weight:bold">...</span> }
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> DeploymentSpec <span style="color:#ff7b72">struct</span> {<span style="color:#ff7b72;font-weight:bold">...</span>}
</span></span><span style="display:flex;"><span><span style="color:#ff7b72;font-weight:bold">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	以 Deployment 资源为例，它的外部版本定义在 <code>pkg/apis/apps/{vl,v1betal, v1beta2 } </code>目录下，其资源代码结构如下:</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── conversion.go
</span></span><span style="display:flex;"><span>├── conversion_test.go
</span></span><span style="display:flex;"><span>├── defaults.go
</span></span><span style="display:flex;"><span>├── defaults_test.go
</span></span><span style="display:flex;"><span>├── doc.go
</span></span><span style="display:flex;"><span>├── register.go
</span></span><span style="display:flex;"><span>├── zz_generated.conversion.go
</span></span><span style="display:flex;"><span>└── zz_generated.defaults.go
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>conversion.go</code> :  定义了资源的转换函数 (默认转换函数 )，并将默认转换函数注册到资源注册表中。</li>
<li><code>zz_generated.conversion.go</code>: 定义了资源的转换西数(自动生成的转换函 数)，并将生成的转换两数注册到资源注册表中。该文件由代码生成器自 动生成。</li>
<li><code>defaults.go</code>: 定义了资源的默认值函 数 ，并将默认值函数注册到资源注册表中</li>
<li><code>zz_generated.defaults.go</code>: 定义了资源的默认值函数(自动生成的默认值函数 )，并将生成的默认值两数注册到资源注册表中。该文件由代码生成器自动生成</li>
</ul>
<p>​    外部版本与内部版本资源类型相同，都通过 <code>register.go</code>代码文件定义所属的资源组和资源版本，外部版本资源对象通过资源版本( Alpha、Beta、Stable)标识，代码</p>
<p>示例如下</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// GroupName is the group name use in this package</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">const</span> GroupName = <span style="color:#a5d6ff">&#34;apps&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// SchemeGroupVersion is group version used to register these objects</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">var</span> SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: <span style="color:#a5d6ff">&#34;v1&#34;</span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="将资源注册到资源注册表中">将资源注册到资源注册表中</h4>
<p>​	在每一个Kubernetes资源组目录中，都拥有一个<code>instal/install.go</code> 代码文件，它负责将资源信息注册到资源注册表(Scheme)中。以 core 核心资源组为例，代码示例如下:</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// pkg/apis/core/install/install.go</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">init</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#d2a8ff;font-weight:bold">Install</span>(legacyscheme.Scheme)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Install registers the API group and adds types to a scheme</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">Install</span>(scheme <span style="color:#ff7b72;font-weight:bold">*</span>runtime.Scheme) {
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(core.<span style="color:#d2a8ff;font-weight:bold">AddToScheme</span>(scheme))
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(v1.<span style="color:#d2a8ff;font-weight:bold">AddToScheme</span>(scheme))
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(scheme.<span style="color:#d2a8ff;font-weight:bold">SetVersionPriority</span>(v1.SchemeGroupVersion))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​    <code>legacyscheme.Scheme</code> 是<code>kube-apiserver</code> 组件的全局资源注册表，Kubernetes 的所有资源信息都交给资源注册表统一管理。<code>core. AddToScheme</code>函数注册<code>core</code>资源组内部版本的资源。<code>v1.AddToScheme</code> 函数注册 <code>core</code> 资源组外部版本的资源。 <code>scheme.SetVersionPriority</code>两数注册资源组的版本顺序，如有多个资源版本，排在最前面的为资源首选版本。</p>
<h4 id="资源首选版本">资源首选版本</h4>
<p>​    首选版本( Preferred Version )，也称优选版本( Priority Version)，一个资源组下拥有多个资源版本，例如，apps资源组拥有v1、v1betal、v1beta2 等资源版本。当我们使用 apps 资源组下的Deployment 资源时，在一些场景下，如不指定资源版本，则使用该资源的首选版本。</p>
<p>​	以apps 资源组为例，注册资源时会注册多个资源版本，分别是v1、v1beta2、 v1betal ，代码示例如下：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// pkg/apis/apps/install/install.go</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">Install</span>(scheme <span style="color:#ff7b72;font-weight:bold">*</span>runtime.Scheme) {
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(apps.<span style="color:#d2a8ff;font-weight:bold">AddToScheme</span>(scheme))
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(v1beta1.<span style="color:#d2a8ff;font-weight:bold">AddToScheme</span>(scheme))
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(v1beta2.<span style="color:#d2a8ff;font-weight:bold">AddToScheme</span>(scheme))
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(v1.<span style="color:#d2a8ff;font-weight:bold">AddToScheme</span>(scheme))
</span></span><span style="display:flex;"><span>	utilruntime.<span style="color:#d2a8ff;font-weight:bold">Must</span>(scheme.<span style="color:#d2a8ff;font-weight:bold">SetVersionPriority</span>(v1.SchemeGroupVersion, v1beta2.SchemeGroupVersion, v1beta1.SchemeGroupVersion))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	<code>scheme.SetVersionPriority</code> 注册版本顺序很重要，apps 资源组的注册版本顺序为 v1 、v1beta2 、v1betal ，那么在资源注册表的 <code>version Priority</code> 结构中 ，资源的首选版本</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (s <span style="color:#ff7b72;font-weight:bold">*</span>Scheme) <span style="color:#d2a8ff;font-weight:bold">SetVersionPriority</span>(versions <span style="color:#ff7b72;font-weight:bold">...</span>schema.GroupVersion) <span style="color:#ff7b72">error</span> {
</span></span><span style="display:flex;"><span>	groups <span style="color:#ff7b72;font-weight:bold">:=</span> sets.String{}
</span></span><span style="display:flex;"><span>	order <span style="color:#ff7b72;font-weight:bold">:=</span> []<span style="color:#ff7b72">string</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">for</span> _, version <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72">range</span> versions {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">if</span> len(version.Version) <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">0</span> <span style="color:#ff7b72;font-weight:bold">||</span> version.Version <span style="color:#ff7b72;font-weight:bold">==</span> APIVersionInternal {
</span></span><span style="display:flex;"><span>			<span style="color:#ff7b72">return</span> fmt.<span style="color:#d2a8ff;font-weight:bold">Errorf</span>(<span style="color:#a5d6ff">&#34;internal versions cannot be prioritized: %v&#34;</span>, version)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		groups.<span style="color:#d2a8ff;font-weight:bold">Insert</span>(version.Group)
</span></span><span style="display:flex;"><span>		order = append(order, version.Version)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> len(groups) <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#a5d6ff">1</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> fmt.<span style="color:#d2a8ff;font-weight:bold">Errorf</span>(<span style="color:#a5d6ff">&#34;must register versions for exactly one group: %v&#34;</span>, strings.<span style="color:#d2a8ff;font-weight:bold">Join</span>(groups.<span style="color:#d2a8ff;font-weight:bold">List</span>(), <span style="color:#a5d6ff">&#34;, &#34;</span>))
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	s.versionPriority[groups.<span style="color:#d2a8ff;font-weight:bold">List</span>()[<span style="color:#a5d6ff">0</span>]] = order
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">return</span> <span style="color:#79c0ff">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="资源操作方法">资源操作方法</h4>
<p>​	在 Kubernetes 系统中 ，针对每一个资源都有一定的操作方法 ( 即 Verbs )，例如 ，对于 Pod 资源对象，可以通过kubectl 命令行工具对其执行 create、delete、get 等操 作。Kubernetes 系统所支持的操作方法目前有8 种操作，分别是 create、delete、 deletecollection、get、list、patch、update、watch。这些操作方法可分为四大类，分别属于增、删、改、查，对资源进行创建、删除、更新和查询。资源操作方法如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230411161222986.png" alt="image-20230411161222986"  />
</p>
<p>​	资源操作方法可以通过<code>metav1.Verbs</code> 数据结构进行描述，代码示例如下:</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Verbs []<span style="color:#ff7b72">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> (vs Verbs) <span style="color:#d2a8ff;font-weight:bold">String</span>() <span style="color:#ff7b72">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">return</span> fmt.<span style="color:#d2a8ff;font-weight:bold">Sprintf</span>(<span style="color:#a5d6ff">&#34;%v&#34;</span>, []string(vs))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	不同资源拥有不同的操作方法，例如，针对 Pod 资源对象与 pod logs 子资源对象，Pod 资源对象拥有create、delete、deletecollection、get、list、patch、update、watch 等操作方法，pod/logs 子资源对象只拥有get操作方法，因为日志只需要执行查看操作。Pod 资源对象与pod/ logs 子资源对象的操作方法分别通过 metav1. Verbs 进行描述。</p>
<p>​	资源对象的操作方法与存储 (Storage )相关联，增、删、改、查实际上都是针对存储的操作。如何解 一个资源对象拥有哪些可操作的方法呢 ?</p>
<p>​	需要查看与存储相关联的源码包 <code>registry</code> ，其定义在 <code>vendor/k8s.io/apiserver/pkg/registry/ </code>目录下。 每种操作方法对应一个操作方法接又 (Interface)，资源对象操作方法接口说明：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230411162803191.png" alt="image-20230411162803191"  />
</p>
<h4 id="资源与命名空间">资源与命名空间</h4>
<p>​	Kubernetes 系统支持命名空间(Namespace)，其用来解決Kubernetes 集群中资源对象过多导致管理复杂的问题 。 每个命名空间相当于一个 “ 虚 拟 集 群 ” ，不同命名空间之间可以进行隔离，当然也可以通过某种方式跨命名空间通信。</p>
<p>​	Kubernetes 系统中默认内置了4个命名空间 ，分别介绍如下。</p>
<ul>
<li>
<p>default: 所有未指定命名空间的资源对象都会被分配给该命名空间</p>
</li>
<li>
<p>kube-system: 所有由 Kubernetes 系统创建的资源对象都会被分配给该命名空间</p>
</li>
<li>
<p>kube-public: 此命名空间下的资源对象可以被所有人访问 (包括未认证用户)</p>
</li>
<li>
<p>kube-node-lease: 此命名空间下存放来自节点的心跳记录(节点租约信息)</p>
<p>通过运行 <code>kubectl get namespace</code> 命令查看 <code>Kubernetes</code> 系统上所有的命名空间信息 。另外，在Kubernetes 系统中，大部分资源对象都存在于某些命名空间中(例如Pod 资源对象)。但并不是所有的资源对象都存在于某个命名空间中(例如 Node 资源对象)。决定资源对象属于哪个命名空间，可通过资源对象的 <code>ObjectMeta.Namespace</code>描述</p>
</li>
</ul>
<h4 id="自定义资源">自定义资源</h4>
<p>​	Kubenetes 系统拥有强大的高扩展功能 ，其中自定义资源 (CustomResource ) 就是一种常见的扩展方式，即可将自己定义的资源添加到 Kubemetes 系统中。Kubernetes 系统附带了许多内置资源，但是仍有些需求需要使用自定义资源来扩展 Kubernetes 的功能。</p>
<p>​	开发者通过 CRD 可以实现自定义资源，它允许用户将自己定义的资源添加到 Kubernetes 系统中，并像使用 Kubernetes 内置资源一样使用 这些资源，例如，在 YAML/JSON 文件中带有 Spec 的资源定义都是对 Kubernetes 中的资源对象的定义，所有的自定义资源都可以与 Kubernetes 系统中的内置资源一样使用 kubectl 或 client- go 进行操作</p>
<h4 id="资源对象描述文件定义">资源对象描述文件定义</h4>
<p>​	Kubernetes 资源可分为内置资源(Kubernetes Resources )和自定义资源(Custom Resources)，它们都通过资源对象描述文件(Manifest File)进行定义，资源对象描述文件如图</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230411171215994.png" alt="image-20230411171215994"  />
</p>
<p>​	一个资源对象需要用5 个字段来描述它分别是Group/Version、KindMetaData、 Spec、Status。这些字段定义在YAML或JSON 文件中。Kubernetes系统中的所有的 资源对象都可以采用YAML或JSON格式的描述文件来定义，下面是某个Pod 文件的资源对象描述文件 。 YAML Manifest File Example 代码示例如下：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#7ee787">apiVersion</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">apps/v1</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">kind</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">Deployment</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">metadata</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx-deployment</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">spec</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">selector</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">matchLabels</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">app</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">replicas</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">2</span><span style="color:#6e7681"> </span><span style="color:#8b949e;font-style:italic"># 告知 Deployment 运行 2 个与该模板匹配的 Pod</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">template</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">metadata</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">labels</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">app</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">spec</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span><span style="color:#7ee787">containers</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">image</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">nginx:1.14.2</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">ports</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span>- <span style="color:#7ee787">containerPort</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">80</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>apiversion: 指定创建资源对象的资源组和资源版本， 其表现形式为 <code>&lt;group&gt;/&lt;version&gt;</code>， 若是<code>core</code>资源组 (即核心资源组 ) 下的资源对象 ，其表现形式为<code>&lt;version&gt;</code></li>
<li>kind:  指定创建资源对象的种类</li>
<li>metadata: 描述创建资源对象的元数据信息，例如名称、命名空间等</li>
<li>spee: 包含有关Deployment 资源对象的核心信息，告诉Kubernetes 期望的资源状态、副本数量、环境变量、 卷等信息</li>
<li>status: 包含有关正在运行的 Deployment 资源对象的信息</li>
</ul>
<p>​	每一个Kubernetes 资源对象都包含两个嵌套字段，即 spec 字段和 status 字段。 其中spec 字段是必需的，它描述了资源对象的“期望状态”(DesiredState)，而status 字段用于描述资源对象的“ 实际状态” (Actual State) ，它是由Kubernetes 系统提供 和更新的。在任何时刻，Kubernetes控制器一直努力地管理着对象的实际状态以与期望状态相匹配。</p>]]></content:encoded>
    </item>
    <item>
      <title>k8s架构介绍</title>
      <link>https://luenci.com/en/posts/k8s%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/k8s%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;k8s-架构&#34;&gt;K8s 架构&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文章：Kubernetes源码剖析&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;架构概览&#34;&gt;架构概览&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/architecture.png&#34; alt=&#34;Kubernetes（k8s）中文文档 Kubernetes设计架构_Kubernetes中文社区&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;​	Kubernetes 系统架构遵循客户端 / 服务端 （ C/S ） 架构 ， 系统架构分为 Master 和 Node 两部分 ， Master 作为服务端 ， Node 作为客户端 。 Kubernetes 系统具有多个 Master 服务端 ， 可以实现高可用 。 在默认的情况下 ， 一个 Master 服务端即可完成所有工作 。&lt;/p&gt;
&lt;p&gt;服务端也被称为主控节点 ， 它在集群中主要负责如下任务 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群的 “ 大脑 ” ， 负责管理所有节点 (Node）。&lt;/li&gt;
&lt;li&gt;负责调度 Pod 在哪些节点上运行 。&lt;/li&gt;
&lt;li&gt;负责控制集群运行过程中的所有状态 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node 客户端也被称为工作节点 ， 它在集群中主要负责如下任务 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责管理所有容器 （ container ) 。&lt;/li&gt;
&lt;li&gt;负责监控 / 上报所有 Pod 的运行状态 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;组件概览&#34;&gt;组件概览&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230402142654737.png&#34; alt=&#34;image-20230402142654737&#34;  /&gt;
&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="k8s-架构">K8s 架构</h1>
<blockquote>
<p>参考文章：Kubernetes源码剖析</p></blockquote>
<h2 id="架构概览">架构概览</h2>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/architecture.png" alt="Kubernetes（k8s）中文文档 Kubernetes设计架构_Kubernetes中文社区"  />
</p>
<p>​	Kubernetes 系统架构遵循客户端 / 服务端 （ C/S ） 架构 ， 系统架构分为 Master 和 Node 两部分 ， Master 作为服务端 ， Node 作为客户端 。 Kubernetes 系统具有多个 Master 服务端 ， 可以实现高可用 。 在默认的情况下 ， 一个 Master 服务端即可完成所有工作 。</p>
<p>服务端也被称为主控节点 ， 它在集群中主要负责如下任务 。</p>
<ul>
<li>集群的 “ 大脑 ” ， 负责管理所有节点 (Node）。</li>
<li>负责调度 Pod 在哪些节点上运行 。</li>
<li>负责控制集群运行过程中的所有状态 。</li>
</ul>
<p>Node 客户端也被称为工作节点 ， 它在集群中主要负责如下任务 。</p>
<ul>
<li>负责管理所有容器 （ container ) 。</li>
<li>负责监控 / 上报所有 Pod 的运行状态 。</li>
</ul>
<h2 id="组件概览">组件概览</h2>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230402142654737.png" alt="image-20230402142654737"  />
</p>
<h2 id="控制平面组件control-plane-components">控制平面组件（Control Plane Components）</h2>
<ul>
<li>控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 <code>replicas</code> 字段时，启动新的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">pod</a>）。</li>
<li>控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器</li>
</ul>
<h3 id="kube-apiserver"><code>kube-apiserver</code></h3>
<p>​	API 服务器是 Kubernetes <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane">控制面</a>的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。Kubernetes API 服务器的主要实现是 <a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver</a>。 kube-apiserver 设计上考虑了水平伸缩，也就是说，它可通过部署多个实例进行伸缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。</p>
<p>kube-apiserver 属于核心组件 ， 对于整个集群至关重要 ， 它具有以下重要特性 。</p>
<ul>
<li>将 Kubernetes 系统中的所有资源对象都封装成 RESTful 风格的 AP I 接口进
行管理 。</li>
<li>可进行集群状态管理和数据管理 ， 是唯一与 Etcd 集群交互的组件 。</li>
<li>拥有丰富的集群安全访问机制 ， 以及认证 、 授权及准入控制器 。</li>
<li>提供了集群各组件的通信和交互功能 。</li>
</ul>
<h3 id="etcd"><strong><code>etcd</code></strong></h3>
<blockquote>
<ul>
<li>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</li>
<li>您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。</li>
</ul></blockquote>
<p>​	Etcd 集群是分布式键值存储集群 ， 其提供了可靠的强一致性服务发现 。 Etcd 集群存储 Kubernetes 系统集群的状态和元数据 ， 其中包括所有 Kubernetes 资源对象信息 、 集群节点信息等 。 Kubemetes 将所有数据存储至 Etcd 集群中前缀为<code> /regis</code> 叮的目录下 。</p>
<h3 id="kube-scheduler"><strong><code>kube-scheduler</code></strong></h3>
<blockquote>
<ul>
<li>控制平面组件，负责监视新创建的、未指定运行<a href="https://kubernetes.io/zh/docs/concepts/architecture/nodes/">节点（node）</a>的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pods</a>，选择节点让 Pod 在上面运行。</li>
<li>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</li>
</ul></blockquote>
<p>​	kube-scheduler 组件 ， 也被称为调度器 ， 目前是 Kubernetes 集群的默认调度器 。它负责在 Kubernetes 集群中为一个 Pod 资源对象找到合适的节点并在该节点上运行 。调度器每次只调度一个 Pod 资源对象 ， 为每一个 Pod 资源对象寻找合适节点的过程是一个调度周期 。</p>
<p>​	kube-scheduler 组件监控整个集群的 Pod 资源对象和 Node 资源对象 ， 当监控到新的 Pod 资源对象时 ， 会通过调度算法为其选择最优节点 。 调度算法分为两种 ， 分别为预选调度算法和优选调度算法 。 除调度策略外 ， Kubernetes 还支持优先级调度 、抢占机制及亲和性调度等功能 。</p>
<p>​	kube-scheduler 组件支持高可用性 （ 即多实例同时运行 ） ， 即基于 Etcd 集群上的分布式锁实现领导者选举机制 ， 多实例同时运行 ， 通过 kube-apiserver 提供的资源锁进行选举竞争 。 抢先获取锁的实例被称为 Leader 节点 （ 即领导者节点 ） ， 并运行kube-scheduler 组件的主逻辑 ； 而未获取锁的实例被称为 candidate 节点 （ 即候选节点 ） ，运行时处于阻塞状态 。 在 Leader 节点因某些原因退出后 ， Candidate 节点则通过领导者选举机制参与竞选 ， 成为 Leader 节点后接替 kube-scheduler 的工作 。</p>
<h3 id="kube-controller-manager"><strong><code>kube-controller-manager</code></strong></h3>
<p>运行<a href="https://kubernetes.io/zh/docs/concepts/architecture/controller/">控制器</a>进程的控制平面组件。</p>
<p>​    kube-controller-manager 组件 ， 也被称为 Controller Manager （ 管理控制器 ） ， 它负责管理 Kubernetes 集群中的节点 （ Node ） 、 Pod 副本 、 服务  端点 （ Endpoint ） 、 命名空间 （ Namespace ） 、 服务账户 （ ServiceAccount ） 、 资源定额 （ ResourceQuota ） 等 。例如 ， 当某个节点意外宕机时 ， Controller Manager 会及时发现并执行自动化修复流程 ， 确保集群始终处于预期的工作状态 。</p>
<p>​	Controller Manager 负责确保 Kub ernete s 系统的实际状态收敛到所需状态 ， 其默认提供了一些控制器 （ Controller) ， 例如 <code>DeploymentControllers 控制器</code> 、 <code>StatefulSet控制器</code> 、 <code>Namespace 控制器</code>及 <code>PersistentVolume 控制器</code>等 ， 每个控制器通过 kube-apiserver  组件提供的接口实时监控整个集群每个资源对象的当前状态 ， 当因发生各种故障而导致系统状态出现变化时 ， 会尝试将系统状态修复到 “ 期望状态 ” 。从逻辑上讲，每个<a href="https://kubernetes.io/zh/docs/concepts/architecture/controller/">控制器</a>都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</p>
<p>​	控制器还包括:</p>
<ul>
<li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应</li>
<li>任务控制器（Job controller）: 监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li>
<li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)</li>
<li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌</li>
</ul>
<p>​	controller Manager 具备高可用性 （ 即多实例同时运行 ） ， 即基于 Etcd 集群上的分布式锁实现领导者选举机制 ， 多实例同时运行 ， 通过 kube-apiserver 提供的资源锁进行选举竞争 。 抢先获取锁的实例被称为 Leader 节点 （ 即领导者节点 ） ， 并运行kub e-controller-manager 组件的主逻辑 ： 而未获取锁的实例被称为 candidate 节点 （ 即候选节点 ） ， 运行时处于阻塞状态 。 在 Leader 节点因某些原因退出后 ， candidate 节点则通过领导者选举机制参与竞选 ， 成为 Leader 节点后接替 kube-controller-manager的工作 。</p>
<h2 id="kubelet"><strong>kubelet</strong></h2>
<blockquote>
<p>kubelet 进程用于处理master 下发的任务, 管理pod 中的容器, 注册自身所在的节点.</p></blockquote>
<p>​	kubelet 组件 ， 用于管理节点 ， 运行在每个 Kubernete s 节点上 。 kube let 组件用来接收 、 处理 、 上报 kub e-ap i s erver 组件下发的任务 。 kubelet 进程启动时会向kube-apiserver 注册节点自身信息 。 它主要负责所在节点 （ Node ） 上的 Pod 资源对象的管理 ， 例如 Pod 资源对象的创建 、 修改 、 监控 、 删除 、 驱逐及 pod 生命周期管理等 。</p>
<p>​	kubelet 组件会定期监控所在节点的资源使用状态并上报给 kube-apiserver 组件 ，这些资源数据可以帮助 kube-scheduler 调度器为 Pod 资源对象预选节点 。 kubelet 也会对所在节点的镜像和容器做清理工作 ， 保证节点上的镜像不会占满磁盘空间 、 删除的容器释放相关资源 。
kubelet 组件实现了 3 种开放接口 ， 如图所示 。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230405132716985.png" alt="image-20230405132716985"  />
</p>
<ul>
<li><code>Container Runtime lnterface</code> ： 简称 CRI （ 容器运行时接口 ） ， 提供容器运行时通用插件接口服务定义了容器和镜像服务的接口 。 CRI 将 kubelet组件与容器运行时进行解耦 ， 将原来完全面向 Pod 级别的内部接口拆分成面向 sandbox 和 container 的 gRPC 接口 ， 并将镜像管理和容器管理分离给
不同的服务 。</li>
<li><code>Container Network lnterface</code> ： 简称 CNI （ 容器网络接口 ） ， 提供网络通用插件接口服务 。 CN I 定义了 Kubernete s 网络插件的基础 ， 容器创建时通过 CNI 插件配置网络 。</li>
<li><code>Container Storage lnterface</code> ： 简称 CSI （ 容器存储接口 ） ， 提供存储通用插件接口服务 。 CSI 定义了容器存储卷标准规范 ， 容器创建时通过 CSI 插件配置存储卷 。</li>
</ul>
<h2 id="kube-proxy"><strong>kube-proxy</strong></h2>
<blockquote>
<p>kube-proxy 本质上,类似一个反向代理. 我们可以把每个节点上运行的 kube-proxy 看作 service 的<strong>透明代理</strong>兼LB.</p></blockquote>
<p>​	kube-proxy 组件 ， 作为节点上的网络代理 ， 运行在每个 Kubernetes 节点上 。 它监控 kube-ap iserver 的服务和端点资源变化 ， 并通过 iptables/ipvs 等配置负载均衡器 ，为一组 Pod 提供统一的 TC P/UDP 流量转发和负载均衡功能 。kube-proxy 组件是参与管理 Pod-to-Service 和 Extemal-to-Service 网络的最重要的节点组件之一 。 kube-proxy 组件相当于代理模型 ， 对于某个 iP:Port 的请求 ， 负责将其转发给专用网络上的相应服务或应用程序 。 但是 ， kube-proxy 组件与其他负载均衡服务的区别在于 ， kube-proxy 代理只向 Kubernetes 服务及其后端 Pod 发出请求 。</p>
<h3 id="cloud-controller-manager"><strong><code>cloud-controller-manager</code></strong></h3>
<p>​	云控制器管理器是指嵌入特定云的控制逻辑的<a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane">控制平面</a>组件。 云控制器管理器使得你可以将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p>
<p>​	<code>cloud-controller-manager</code> 仅运行特定于云平台的控制回路。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的环境中不需要云控制器管理器。</p>
<p>​	与 <code>kube-controller-manager</code> 类似，<code>cloud-controller-manager</code> 将若干逻辑上独立的 控制回路组合到同一个可执行文件中，供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p>
<p>下面的控制器都包含对云平台驱动的依赖：</p>
<ul>
<li>节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li>
<li>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由</li>
<li>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li>
</ul>
<h1 id="项目目录结构">项目目录结构</h1>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── CHANGELOG 						<span style="color:#8b949e;font-style:italic"># 版本更新log</span>
</span></span><span style="display:flex;"><span>├── CHANGELOG.md -&gt; CHANGELOG/README.md
</span></span><span style="display:flex;"><span>├── CONTRIBUTING.md
</span></span><span style="display:flex;"><span>├── LICENSE
</span></span><span style="display:flex;"><span>├── LICENSES
</span></span><span style="display:flex;"><span>├── Makefile -&gt; build/root/Makefile
</span></span><span style="display:flex;"><span>├── OWNERS
</span></span><span style="display:flex;"><span>├── OWNERS_ALIASES
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── SECURITY_CONTACTS
</span></span><span style="display:flex;"><span>├── SUPPORT.md
</span></span><span style="display:flex;"><span>├── api								<span style="color:#8b949e;font-style:italic"># 存放 OpenAPI/Swagger 的 spec 文件，包括 JSON 、 Protocol 的定义等</span>
</span></span><span style="display:flex;"><span>├── build							<span style="color:#8b949e;font-style:italic"># 存放与构建相关脚本</span>
</span></span><span style="display:flex;"><span>├── cluster							<span style="color:#8b949e;font-style:italic"># 存放集群相关配置</span>
</span></span><span style="display:flex;"><span>├── cmd								<span style="color:#8b949e;font-style:italic"># 存放可执行文件的入口代码 ， 每个可执行文件都会对应一个函数</span>
</span></span><span style="display:flex;"><span>├── code-of-conduct.md
</span></span><span style="display:flex;"><span>├── docs
</span></span><span style="display:flex;"><span>├── go.mod
</span></span><span style="display:flex;"><span>├── go.sum
</span></span><span style="display:flex;"><span>├── hack
</span></span><span style="display:flex;"><span>├── logo
</span></span><span style="display:flex;"><span>├── pkg								<span style="color:#8b949e;font-style:italic"># 存放核心库代码，可被项目内部或外部直接引用</span>
</span></span><span style="display:flex;"><span>├── plugin							<span style="color:#8b949e;font-style:italic"># 存放 Kubernetes 插件代码目录 ，例如认证 、授权等相关插件</span>
</span></span><span style="display:flex;"><span>├── staging							<span style="color:#8b949e;font-style:italic"># 存放部分核心库的暂存目录</span>
</span></span><span style="display:flex;"><span>├── test
</span></span><span style="display:flex;"><span>├── third_party						<span style="color:#8b949e;font-style:italic"># 存放第三方工具 、代码或其他组件</span>
</span></span><span style="display:flex;"><span>└── vendor
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="组件文件启动流程">组件文件启动流程</h2>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230405135113841.png" alt="image-20230405135113841"  />
</p>
<h3 id="kube-apiserver启动流程">kube-apiserver启动流程</h3>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230405135304684.png" alt="image-20230405135304684"  />
</p>
<ul>
<li>（ 1 ） rand.seed ： 组件中的全局随机数生成对象 。</li>
<li>（ 2 ） app.NewCommand ： 实例化命令行参数 。 通过 flags 对命令行参数进行解析并存储至 0ptions 对象中 。</li>
<li>（ 3 ） logs.initLogs ： 实例化日志对象 ， 用于日志管理 。</li>
<li>（ 4 ） command.Execute ： 组件进程运行的逻辑 。 运行前通过 Complete 函数填充默认参数 ， 通过 validate 函数验证所有参数 ， 最后通过 Run 函数持久运行 。 只有当进程收到退出信号时 ， 进程才会退出 。</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>K8s的Pod创建历程</title>
      <link>https://luenci.com/en/posts/k8s%E5%88%9B%E5%BB%BApod%E5%8E%86%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/k8s%E5%88%9B%E5%BB%BApod%E5%8E%86%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;k8s创建pod的历程&#34;&gt;K8s创建Pod的历程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;参考原文：https://icloudnative.io/posts/what-happens-when-k8s/#span-idinline-toc1span-kubectl&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;1-kubectl&#34;&gt;1. kubectl&lt;/h2&gt;
&lt;h3 id=&#34;验证和生成器&#34;&gt;验证和生成器&lt;/h3&gt;
&lt;p&gt;​	当敲下回车键以后，&lt;code&gt;kubectl&lt;/code&gt; 首先会执行一些客户端验证操作，以确保不合法的请求（例如，创建不支持的资源或使用格式错误的镜像名称）将会快速失败，也不会发送给 &lt;code&gt;kube-apiserver&lt;/code&gt;。通过减少不必要的负载来提高系统性能。&lt;/p&gt;
&lt;p&gt;​	验证通过之后， kubectl 开始将发送给 kube-apiserver 的 HTTP 请求进行封装。&lt;code&gt;kube-apiserver&lt;/code&gt; 与 etcd 进行通信，所有尝试访问或更改 Kubernetes 系统状态的请求都会通过 kube-apiserver 进行，kubectl 也不例外。kubectl 使用生成器（ &lt;a href=&#34;https://kubernetes.io/docs/user-guide/kubectl-conventions/#generators&#34;&gt;generators&lt;/a&gt;）来构造 HTTP 请求。生成器是一个用来处理序列化的抽象概念。&lt;/p&gt;
&lt;p&gt;​	通过 &lt;code&gt;kubectl run&lt;/code&gt; 不仅可以运行 &lt;code&gt;deployment&lt;/code&gt;，还可以通过指定参数 &lt;code&gt;--generator&lt;/code&gt; 来部署其他多种资源类型。如果没有指定 &lt;code&gt;--generator&lt;/code&gt; 参数的值，kubectl 将会自动判断资源的类型。&lt;/p&gt;
&lt;p&gt;​	例如，带有参数 &lt;code&gt;--restart-policy=Always&lt;/code&gt; 的资源将被部署为 Deployment，而带有参数 &lt;code&gt;--restart-policy=Never&lt;/code&gt; 的资源将被部署为 Pod。同时 kubectl 也会检查是否需要触发其他操作，例如记录命令（用来进行回滚或审计）。&lt;/p&gt;
&lt;p&gt;​	在 kubectl 判断出要创建一个 Deployment 后，它将使用 &lt;code&gt;DeploymentV1Beta1&lt;/code&gt; 生成器从我们提供的参数中生成一个 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/run.go#L59&#34;&gt;运行时对象&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;api-版本协商与-api-组&#34;&gt;API 版本协商与 API 组&lt;/h3&gt;
&lt;p&gt;​	为了更容易地消除字段或者重新组织资源结构，Kubernetes 支持多个 API 版本，每个版本都在不同的 API 路径下，例如 &lt;code&gt;/api/v1&lt;/code&gt; 或者 &lt;code&gt;/apis/extensions/v1beta1&lt;/code&gt;。不同的 API 版本表明不同的稳定性和支持级别，更详细的描述可以参考 &lt;a href=&#34;https://k8smeetup.github.io/docs/reference/api-overview/&#34;&gt;Kubernetes API 概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​	API 组旨在对类似资源进行分类，以便使得 Kubernetes API 更容易扩展。API 的组名在 REST 路径或者序列化对象的 &lt;code&gt;apiVersion&lt;/code&gt; 字段中指定。例如，Deployment 的 API 组名是 &lt;code&gt;apps&lt;/code&gt;，最新的 API 版本是 &lt;code&gt;v1beta2&lt;/code&gt;，这就是为什么你要在 Deployment manifests 顶部输入 &lt;code&gt;apiVersion: apps/v1beta2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​	kubectl 在生成运行时对象后，开始为它 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/run.go#L580-L597&#34;&gt;找到适当的 API 组和 API 版本&lt;/a&gt;，然后 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/run.go#L598&#34;&gt;组装成一个版本化客户端&lt;/a&gt;，该客户端知道资源的各种 REST 语义。该阶段被称为版本协商，kubectl 会扫描 &lt;code&gt;remote API&lt;/code&gt; 上的 &lt;code&gt;/apis&lt;/code&gt; 路径来检索所有可能的 API 组。由于 kube-apiserver 在 &lt;code&gt;/apis&lt;/code&gt; 路径上公开了 OpenAPI 格式的规范文档， 因此客户端很容易找到合适的 API。&lt;/p&gt;
&lt;p&gt;​	为了提高性能，kubectl &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/util/factory_client_access.go#L117&#34;&gt;将 OpenAPI 规范缓存&lt;/a&gt;到了 &lt;code&gt;~/.kube/cache&lt;/code&gt; 目录。如果你想了解 API 发现的过程，请尝试删除该目录并在运行 kubectl 命令时将 &lt;code&gt;-v&lt;/code&gt; 参数的值设为最大值，然后你将会看到所有试图找到这些 API 版本的HTTP 请求。参考 &lt;a href=&#34;https://k8smeetup.github.io/docs/reference/kubectl/cheatsheet/&#34;&gt;kubectl 备忘单&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​	最后一步才是真正地发送 HTTP 请求。一旦请求发送之后获得成功的响应，kubectl 将会根据所需的输出格式打印 success message。&lt;/p&gt;
&lt;h3 id=&#34;客户端身份认证&#34;&gt;客户端身份认证&lt;/h3&gt;
&lt;p&gt;在发送 HTTP 请求之前还要进行客户端认证，这是之前没有提到的，现在可以来看一下。&lt;/p&gt;
&lt;p&gt;为了能够成功发送请求，kubectl 需要先进行身份认证。用户凭证保存在 &lt;code&gt;kubeconfig&lt;/code&gt; 文件中，kubectl 通过以下顺序来找到 kubeconfig 文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果提供了 &lt;code&gt;--kubeconfig&lt;/code&gt; 参数， kubectl 就使用 –kubeconfig 参数提供的 kubeconfig 文件。&lt;/li&gt;
&lt;li&gt;如果没有提供 –kubeconfig 参数，但设置了环境变量 &lt;code&gt;$KUBECONFIG&lt;/code&gt;，则使用该环境变量提供的 kubeconfig 文件。&lt;/li&gt;
&lt;li&gt;如果 –kubeconfig 参数和环境变量 &lt;code&gt;$KUBECONFIG&lt;/code&gt; 都没有提供，kubectl 就使用默认的 kubeconfig 文件 &lt;code&gt;$HOME/.kube/config&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解析完 kubeconfig 文件后，kubectl 会确定当前要使用的上下文、当前指向的群集以及与当前用户关联的任何认证信息。如果用户提供了额外的参数（例如 –username），则优先使用这些参数覆盖 kubeconfig 中指定的值。一旦拿到这些信息之后， kubectl 就会把这些信息填充到将要发送的 HTTP 请求头中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x509 证书使用 &lt;a href=&#34;https://github.com/kubernetes/client-go/blob/82aa063804cf055e16e8911250f888bc216e8b61/rest/transport.go#L80-L89&#34;&gt;tls.TLSConfig&lt;/a&gt; 发送（包括 CA 证书）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bearer tokens&lt;/code&gt; 在 HTTP 请求头 &lt;code&gt;Authorization&lt;/code&gt; 中 &lt;a href=&#34;https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/transport/round_trippers.go#L314&#34;&gt;发送&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;用户名和密码通过 HTTP 基本认证 &lt;a href=&#34;https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/transport/round_trippers.go#L223&#34;&gt;发送&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OpenID&lt;/code&gt; 认证过程是由用户事先手动处理的，产生一个像 bearer token 一样被发送的 token。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小结补充&#34;&gt;小结补充&lt;/h3&gt;
&lt;p&gt;​	如果要对k8s的部署文件进行进一步正确性校验，可以参看这个&lt;a href=&#34;https://github.com/instrumenta/kubeval&#34;&gt;Kubeval&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="k8s创建pod的历程">K8s创建Pod的历程</h1>
<blockquote>
<p>参考原文：https://icloudnative.io/posts/what-happens-when-k8s/#span-idinline-toc1span-kubectl</p></blockquote>
<h2 id="1-kubectl">1. kubectl</h2>
<h3 id="验证和生成器">验证和生成器</h3>
<p>​	当敲下回车键以后，<code>kubectl</code> 首先会执行一些客户端验证操作，以确保不合法的请求（例如，创建不支持的资源或使用格式错误的镜像名称）将会快速失败，也不会发送给 <code>kube-apiserver</code>。通过减少不必要的负载来提高系统性能。</p>
<p>​	验证通过之后， kubectl 开始将发送给 kube-apiserver 的 HTTP 请求进行封装。<code>kube-apiserver</code> 与 etcd 进行通信，所有尝试访问或更改 Kubernetes 系统状态的请求都会通过 kube-apiserver 进行，kubectl 也不例外。kubectl 使用生成器（ <a href="https://kubernetes.io/docs/user-guide/kubectl-conventions/#generators">generators</a>）来构造 HTTP 请求。生成器是一个用来处理序列化的抽象概念。</p>
<p>​	通过 <code>kubectl run</code> 不仅可以运行 <code>deployment</code>，还可以通过指定参数 <code>--generator</code> 来部署其他多种资源类型。如果没有指定 <code>--generator</code> 参数的值，kubectl 将会自动判断资源的类型。</p>
<p>​	例如，带有参数 <code>--restart-policy=Always</code> 的资源将被部署为 Deployment，而带有参数 <code>--restart-policy=Never</code> 的资源将被部署为 Pod。同时 kubectl 也会检查是否需要触发其他操作，例如记录命令（用来进行回滚或审计）。</p>
<p>​	在 kubectl 判断出要创建一个 Deployment 后，它将使用 <code>DeploymentV1Beta1</code> 生成器从我们提供的参数中生成一个 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/run.go#L59">运行时对象</a>。</p>
<h3 id="api-版本协商与-api-组">API 版本协商与 API 组</h3>
<p>​	为了更容易地消除字段或者重新组织资源结构，Kubernetes 支持多个 API 版本，每个版本都在不同的 API 路径下，例如 <code>/api/v1</code> 或者 <code>/apis/extensions/v1beta1</code>。不同的 API 版本表明不同的稳定性和支持级别，更详细的描述可以参考 <a href="https://k8smeetup.github.io/docs/reference/api-overview/">Kubernetes API 概述</a>。</p>
<p>​	API 组旨在对类似资源进行分类，以便使得 Kubernetes API 更容易扩展。API 的组名在 REST 路径或者序列化对象的 <code>apiVersion</code> 字段中指定。例如，Deployment 的 API 组名是 <code>apps</code>，最新的 API 版本是 <code>v1beta2</code>，这就是为什么你要在 Deployment manifests 顶部输入 <code>apiVersion: apps/v1beta2</code>。</p>
<p>​	kubectl 在生成运行时对象后，开始为它 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/run.go#L580-L597">找到适当的 API 组和 API 版本</a>，然后 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/run.go#L598">组装成一个版本化客户端</a>，该客户端知道资源的各种 REST 语义。该阶段被称为版本协商，kubectl 会扫描 <code>remote API</code> 上的 <code>/apis</code> 路径来检索所有可能的 API 组。由于 kube-apiserver 在 <code>/apis</code> 路径上公开了 OpenAPI 格式的规范文档， 因此客户端很容易找到合适的 API。</p>
<p>​	为了提高性能，kubectl <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/util/factory_client_access.go#L117">将 OpenAPI 规范缓存</a>到了 <code>~/.kube/cache</code> 目录。如果你想了解 API 发现的过程，请尝试删除该目录并在运行 kubectl 命令时将 <code>-v</code> 参数的值设为最大值，然后你将会看到所有试图找到这些 API 版本的HTTP 请求。参考 <a href="https://k8smeetup.github.io/docs/reference/kubectl/cheatsheet/">kubectl 备忘单</a>。</p>
<p>​	最后一步才是真正地发送 HTTP 请求。一旦请求发送之后获得成功的响应，kubectl 将会根据所需的输出格式打印 success message。</p>
<h3 id="客户端身份认证">客户端身份认证</h3>
<p>在发送 HTTP 请求之前还要进行客户端认证，这是之前没有提到的，现在可以来看一下。</p>
<p>为了能够成功发送请求，kubectl 需要先进行身份认证。用户凭证保存在 <code>kubeconfig</code> 文件中，kubectl 通过以下顺序来找到 kubeconfig 文件：</p>
<ul>
<li>如果提供了 <code>--kubeconfig</code> 参数， kubectl 就使用 –kubeconfig 参数提供的 kubeconfig 文件。</li>
<li>如果没有提供 –kubeconfig 参数，但设置了环境变量 <code>$KUBECONFIG</code>，则使用该环境变量提供的 kubeconfig 文件。</li>
<li>如果 –kubeconfig 参数和环境变量 <code>$KUBECONFIG</code> 都没有提供，kubectl 就使用默认的 kubeconfig 文件 <code>$HOME/.kube/config</code>。</li>
</ul>
<p>解析完 kubeconfig 文件后，kubectl 会确定当前要使用的上下文、当前指向的群集以及与当前用户关联的任何认证信息。如果用户提供了额外的参数（例如 –username），则优先使用这些参数覆盖 kubeconfig 中指定的值。一旦拿到这些信息之后， kubectl 就会把这些信息填充到将要发送的 HTTP 请求头中：</p>
<ul>
<li>x509 证书使用 <a href="https://github.com/kubernetes/client-go/blob/82aa063804cf055e16e8911250f888bc216e8b61/rest/transport.go#L80-L89">tls.TLSConfig</a> 发送（包括 CA 证书）。</li>
<li><code>bearer tokens</code> 在 HTTP 请求头 <code>Authorization</code> 中 <a href="https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/transport/round_trippers.go#L314">发送</a>。</li>
<li>用户名和密码通过 HTTP 基本认证 <a href="https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/transport/round_trippers.go#L223">发送</a>。</li>
<li><code>OpenID</code> 认证过程是由用户事先手动处理的，产生一个像 bearer token 一样被发送的 token。</li>
</ul>
<h3 id="小结补充">小结补充</h3>
<p>​	如果要对k8s的部署文件进行进一步正确性校验，可以参看这个<a href="https://github.com/instrumenta/kubeval">Kubeval</a></p>
<h2 id="2-kube-apiserver">2. kube-apiserver</h2>
<h3 id="认证"><a href="https://k8smeetup.github.io/docs/admin/authentication/">认证</a></h3>
<p>​	现在我们的请求已经发送成功了，接下来将会发生什么？这时候就该 <code>kube-apiserver</code> 闪亮登场了！kube-apiserver 是客户端和系统组件用来保存和检索集群状态的主要接口。为了执行相应的功能，kube-apiserver 需要能够验证请求者是合法的，这个过程被称为认证。</p>
<p>​	那么 apiserver 如何对请求进行认证呢？当 kube-apiserver 第一次启动时，它会查看用户提供的所有 <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">CLI 参数</a>，并组合成一个合适的令牌列表。</p>
<p><strong>举个例子 :</strong> 如果提供了 <code>--client-ca-file</code> 参数，则会将 x509 客户端证书认证添加到令牌列表中；如果提供了 <code>--token-auth-file</code> 参数，则会将 breaer token 添加到令牌列表中。</p>
<p>每次收到请求时，apiserver 都会 <a href="https://github.com/kubernetes/apiserver/blob/51bebaffa01be9dc28195140da276c2f39a10cd4/pkg/authentication/request/union/union.go#L54">通过令牌链进行认证，直到某一个认证成功为止</a>：</p>
<ul>
<li><a href="https://github.com/kubernetes/apiserver/blob/51bebaffa01be9dc28195140da276c2f39a10cd4/pkg/authentication/request/x509/x509.go#L60">x509 处理程序</a>将验证 HTTP 请求是否是由 CA 根证书签名的 TLS 密钥进行编码的。</li>
<li><a href="https://github.com/kubernetes/apiserver/blob/51bebaffa01be9dc28195140da276c2f39a10cd4/pkg/authentication/request/bearertoken/bearertoken.go#L38">bearer token 处理程序</a>将验证 <code>--token-auth-file</code> 参数提供的 token 文件是否存在。</li>
<li><a href="https://github.com/kubernetes/apiserver/blob/51bebaffa01be9dc28195140da276c2f39a10cd4/plugin/pkg/authenticator/request/basicauth/basicauth.go#L37">基本认证处理程序</a>确保 HTTP 请求的基本认证凭证与本地的状态匹配。</li>
</ul>
<p>​	如果 <a href="https://github.com/kubernetes/apiserver/blob/20bfbdf738a0643fe77ffd527b88034dcde1b8e3/pkg/authentication/request/union/union.go#L71">认证失败</a>，则请求失败并返回相应的错误信息；如果验证成功，则将请求中的 <code>Authorization</code> 请求头删除，并 <a href="https://github.com/kubernetes/apiserver/blob/e30df5e70ef9127ea69d607207c894251025e55b/pkg/endpoints/filters/authentication.go#L71-L75">将用户信息添加到</a>其上下文中。这给后续的授权和准入控制器提供了访问之前建立的用户身份的能力。</p>
<h3 id="授权"><a href="https://k8smeetup.github.io/docs/admin/authorization/">授权</a></h3>
<p>​	OK，现在请求已经发送，并且 kube-apiserver 已经成功验证我们是谁，终于解脱了！</p>
<p>​	然而事情并没有结束，虽然我们已经证明了<strong>我们是合法的</strong>，但我们有权执行此操作吗？毕竟身份和权限不是一回事。为了进行后续的操作，kube-apiserver 还要对用户进行授权。</p>
<p>​	kube-apiserver 处理授权的方式与处理身份验证的方式相似：通过 kube-apiserver 的启动参数 <code>--authorization_mode</code> 参数设置。它将组合一系列授权者，这些授权者将针对每个传入的请求进行授权。如果所有授权者都拒绝该请求，则该请求会被禁止响应并且 <a href="https://github.com/kubernetes/apiserver/blob/e30df5e70ef9127ea69d607207c894251025e55b/pkg/endpoints/filters/authorization.go#L60">不会再继续响应</a>。如果某个授权者批准了该请求，则请求继续。</p>
<p>kube-apiserver 目前支持以下几种授权方法：</p>
<ul>
<li><a href="https://k8smeetup.github.io/docs/admin/authorization/webhook/">webhook</a>: 它与集群外的 HTTP(S) 服务交互。</li>
<li><a href="https://k8smeetup.github.io/docs/admin/authorization/abac/">ABAC</a>: 它执行静态文件中定义的策略。</li>
<li><a href="https://k8smeetup.github.io/docs/admin/authorization/rbac/">RBAC</a>: 它使用 <code>rbac.authorization.k8s.io</code> API Group实现授权决策，允许管理员通过 Kubernetes API 动态配置策略。</li>
<li><a href="https://k8smeetup.github.io/docs/admin/authorization/node/">Node</a>: 它确保 kubelet 只能访问自己节点上的资源。</li>
</ul>
<h3 id="准入控制"><a href="https://k8smeetup.github.io/docs/admin/admission-controllers/">准入控制</a></h3>
<p>​	突破了之前所说的认证和授权两道关口之后，客户端的调用请求就能够得到 API Server 的真正响应了吗？答案是：不能！</p>
<p>​	从 kube-apiserver 的角度来看，它已经验证了我们的身份并且赋予了相应的权限允许我们继续，但对于 Kubernetes 而言，其他组件对于应不应该允许发生的事情还是很有意见的。所以这个请求还需要通过 <code>Admission Controller</code> 所控制的一个 <code>准入控制链</code> 的层层考验，官方标准的 “关卡” 有近十个之多，而且还能自定义扩展！</p>
<p>​	虽然授权的重点是回答用户是否有权限，但准入控制器会拦截请求以确保它符合集群的更广泛的期望和规则。它们是资源对象保存到 <code>etcd</code> 之前的最后一个堡垒，封装了一系列额外的检查以确保操作不会产生意外或负面结果。不同于授权和认证只关心请求的用户和操作，<strong>准入控制还处理请求的内容，并且仅对创建、更新、删除或连接（如代理）等有效，而对读操作无效</strong>。</p>
<blockquote>
<p>准入控制器的工作方式与授权者和验证者的工作方式类似，但有一点区别：与验证链和授权链不同，如果某个准入控制器检查不通过，则整个链会中断，整个请求将立即被拒绝并且返回一个错误给终端用户。</p></blockquote>
<p>​	准入控制器设计的重点在于提高可扩展性，某个控制器都作为一个插件存储在 <code>plugin/pkg/admission</code> 目录中，并且与某一个接口相匹配，最后被编译到 kube-apiserver 二进制文件中。</p>
<p>​	大部分准入控制器都比较容易理解，接下来着重介绍 <code>SecurityContextDeny</code>、<code>ResourceQuota</code> 及 <code>LimitRanger</code> 这三个准入控制器。</p>
<ul>
<li><strong>SecurityContextDeny</strong> 该插件将禁止创建设置了 Security Context 的 Pod。</li>
<li><strong>ResourceQuota</strong> 不仅能限制某个 Namespace 中创建资源的数量，而且能限制某个 Namespace 中被 Pod 所请求的资源总量。该准入控制器和资源对象 <code>ResourceQuota</code> 一起实现了资源配额管理。</li>
<li><strong>LimitRanger</strong> 作用类似于上面的 ResourceQuota 控制器，针对 Namespace 资源的每个个体（Pod 与 Container 等）的资源配额。该插件和资源对象 <code>LimitRange</code> 一起实现资源配额管理。</li>
</ul>
<h2 id="3-etcd">3. etcd</h2>
<hr>
<p>到现在为止，Kubernetes 已经对该客户端的调用请求进行了全面彻底地审查，并且已经验证通过，运行它进入下一个环节。下一步 kube-apiserver 将对 HTTP 请求进行反序列化，然后利用得到的结果构建运行时对象（有点像 kubectl 生成器的逆过程），并保存到 <code>etcd</code> 中。下面我们将这个过程分解一下。</p>
<p>当收到请求时，kube-apiserver 是如何知道它该怎么做的呢？事实上，在客户端发送调用请求之前就已经产生了一系列非常复杂的流程。我们就从 kube-apiserver 二进制文件首次运行开始分析吧：</p>
<ol>
<li>当运行 kube-apiserver 二进制文件时，它会 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/cmd/kube-apiserver/app/server.go#L119">创建一个允许 apiserver 聚合的服务链</a>。这是一种对 <code>Kubernetes API</code> 进行扩展的方式。</li>
<li>同时会创建一个 <code>generic apiserver</code> 作为默认的 apiserver。</li>
<li>然后利用 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/server/config.go#L149">生成的 OpenAPI 规范</a>来填充 apiserver 的配置。</li>
<li>然后 kube-apiserver 遍历数据结构中指定的所有 API 组，并将每一个 API 组作为通用的存储抽象保存到 etcd 中。当你访问或变更资源状态时，kube-apiserver 就会调用这些 API 组。</li>
<li>每个 API 组都会遍历它的所有组版本，并且将每个 HTTP 路由 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/endpoints/groupversion.go#L92">映射到 REST 路径中</a>。</li>
<li>当请求的 METHOD 是 <code>POST</code> 时，kube-apiserver 就会将请求转交给 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/endpoints/handlers/create.go#L37">资源创建处理器</a>。</li>
</ol>
<p>现在 kube-apiserver 已经知道了所有的路由及其对应的 REST 路径，以便在请求匹配时知道调用哪些处理器和键值存储。多么机智的设计！现在假设客户端的 HTTP 请求已经被 kube-apiserver 收到了：</p>
<ol>
<li>如果处理链可以将请求与已经注册的路由进行匹配，就会将该请求交给注册到该路由的 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/server/handler.go#L143">专用处理器</a>来处理；如果没有任何一个路由可以匹配该请求，就会将请求转交给 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/server/mux/pathrecorder.go#L248">基于路径的处理器</a>（比如当调用 <code>/apis</code> 时）；如果没有任何一个基于路径的处理器注册到该路径，请求就会被转交给 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/server/mux/pathrecorder.go#L254">not found 处理器</a>，最后返回 <code>404</code>。</li>
<li>幸运的是，我们有一个名为 <code>createHandler</code> 的注册路由！它有什么作用呢？首先它会解码 HTTP 请求并进行基本的验证，例如确保请求提供的 json 与 API 资源的版本相匹配。</li>
<li>接下来进入 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/endpoints/handlers/create.go#L93-L104">审计和准入控制</a>阶段。</li>
<li>然后资源将会通过 <a href="https://github.com/kubernetes/apiserver/blob/19667a1afc13cc13930c40a20f2c12bbdcaaa246/pkg/registry/generic/registry/store.go#L327">storage provider</a> 保存 <a href="https://github.com/kubernetes/apiserver/blob/7001bc4df8883d4a0ec84cd4b2117655a0009b6c/pkg/endpoints/handlers/create.go#L111">到 etcd</a> 中。默认情况下保存到 etcd 中的键的格式为 <code>&lt;namespace&gt;/&lt;name&gt;</code>，你也可以自定义。</li>
<li>资源创建过程中出现的任何错误都会被捕获，最后 <code>storage provider</code> 会执行 <code>get</code> 调用来确认该资源是否被成功创建。如果需要额外的清理工作，就会调用后期创建的处理器和装饰器。</li>
<li>最后构造 HTTP 响应并返回给客户端。</li>
</ol>
<p>原来 apiserver 做了这么多的工作，以前竟然没有发现呢！到目前为止，我们创建的 <code>Deployment</code> 资源已经保存到了 etcd 中，但 apiserver 仍然看不到它。</p>
<h2 id="4-初始化">4. 初始化</h2>
<hr>
<p>​	在一个资源对象被持久化到数据存储之后，apiserver 还无法完全看到或调度它，在此之前还要执行一系列 <a href="https://v1-13.docs.kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#initializers">Initializers</a>。Initializers是一种与资源类型相关联的控制器，它会在资源对外可用之前执行某些逻辑。如果某个资源类型没有Initializers，就会跳过此初始化步骤立即使资源对外可见。</p>
<p>​	正如 <a href="https://ahmet.im/blog/initializers/">大佬的博客</a>指出的那样，Initializers是一个强大的功能，因为它允许我们执行通用引导操作。例如：</p>
<ul>
<li>将代理边车容器注入到暴露 80 端口的 Pod 中，或者加上特定的 <code>annotation</code>。</li>
<li>将保存着测试证书的 <code>volume</code> 注入到特定命名空间的所有 Pod 中。</li>
<li>如果 <code>Secret</code> 中的密码小于 20 个字符，就组织其创建。</li>
</ul>
<p><code>initializerConfiguration</code> 资源对象允许你声明某些资源类型应该运行哪些Initializers。如果你想每创建一个 Pod 时就运行一个自定义Initializers，你可以这样做：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#7ee787">apiVersion</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">admissionregistration.k8s.io/v1alpha1</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">kind</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">InitializerConfiguration</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">metadata</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">custom-pod-initializer</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#7ee787">initializers</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span>- <span style="color:#7ee787">name</span>:<span style="color:#6e7681"> </span><span style="color:#a5d6ff">podimage.example.com</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#7ee787">rules</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">      </span>- <span style="color:#7ee787">apiGroups</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">          </span>- <span style="color:#a5d6ff">&#34;&#34;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">apiVersions</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">          </span>- <span style="color:#a5d6ff">v1</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#7ee787">resources</span>:<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">          </span>- <span style="color:#a5d6ff">pods</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>​	通过该配置创建资源对象 <code>InitializerConfiguration</code> 之后，就会在每个 Pod 的 <code>metadata.initializers.pending</code> 字段中添加 <code>custom-pod-initializer</code> 字段。该初始化控制器会定期扫描新的 Pod，一旦在 Pod 的 <code>pending</code> 字段中检测到自己的名称，就会执行其逻辑，执行完逻辑之后就会将 <code>pending</code> 字段下的自己的名称删除。</p>
<p>​	只有在 <code>pending</code> 字段下的列表中的第一个Initializers可以对资源进行操作，当所有的Initializers执行完成，并且 <code>pending</code> 字段为空时，该对象就会被认为初始化成功。</p>
<p>​	<strong>你可能会注意到一个问题：如果 kube-apiserver 不能显示这些资源，那么用户级控制器是如何处理资源的呢？</strong></p>
<p>​	为了解决这个问题，kube-apiserver 暴露了一个 <code>?includeUninitialized</code> 查询参数，它会返回所有的资源对象（包括未初始化的）。</p>
<h2 id="5-控制循环">5. 控制循环</h2>
<hr>
<h3 id="deployments-controller">Deployments controller</h3>
<p>​	到了这个阶段，我们的 Deployment 记录已经保存在 etcd 中，并且所有的初始化逻辑都执行完成，接下来的阶段将会涉及到该资源所依赖的拓扑结构。在 Kubernetes 中，Deployment 实际上只是一系列 <code>Replicaset</code> 的集合，而 Replicaset 是一系列 <code>Pod</code> 的集合。那么 Kubernetes 是如何从一个 HTTP 请求按照层级结构依次创建这些资源的呢？其实这些工作都是由 Kubernetes 内置的 <code>Controller</code>(控制器) 来完成的。</p>
<p>​	Kubernetes 在整个系统中使用了大量的 Controller，Controller 是一个用于将系统状态从“当前状态”修正到“期望状态”的异步脚本。所有 Controller 都通过 <code>kube-controller-manager</code> 组件并行运行，每种 Controller 都负责一种具体的控制流程。首先介绍一下 <code>Deployment Controller</code>：</p>
<p>​	将 Deployment 记录存储到 etcd 并初始化后，就可以通过 kube-apiserver 使其可见，然后 <code>Deployment Controller</code> 就会检测到它（它的工作就是负责监听 Deployment 记录的更改）。在我们的例子中，控制器通过一个 <code>Informer</code> <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/controller/deployment/deployment_controller.go#L122">注册一个创建事件的特定回调函数</a>（更多信息参加下文）。</p>
<p>当 Deployment 第一次对外可见时，该 Controller 就会 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/controller/deployment/deployment_controller.go#L170">将该资源对象添加到内部工作队列</a>，然后开始处理这个资源对象：</p>
<blockquote>
<p>通过使用标签选择器查询 kube-apiserver 来 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/controller/deployment/deployment_controller.go#L633">检查</a>该 Deployment 是否有与其关联的 <code>ReplicaSet</code> 或 <code>Pod</code> 记录。</p></blockquote>
<p>有趣的是，这个同步过程是状态不可知的，它核对新记录与核对已经存在的记录采用的是相同的方式。</p>
<p>在意识到没有与其关联的 <code>ReplicaSet</code> 或 <code>Pod</code> 记录后，Deployment Controller 就会开始执行 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/controller/deployment/sync.go#L385">弹性伸缩流程</a>：</p>
<blockquote>
<p>创建 ReplicaSet 资源，为其分配一个标签选择器并将其版本号设置为 1。</p></blockquote>
<p>ReplicaSet 的 <code>PodSpec</code> 字段从 Deployment 的 manifest 以及其他相关元数据中复制而来。有时 Deployment 记录在此之后也需要更新（例如，如果设置了 <code>process deadline</code>）。</p>
<p>​	当完成以上步骤之后，该 Deployment 的 <code>status</code> 就会被更新，然后重新进入与之前相同的循环，等待 Deployment 与期望的状态相匹配。由于 Deployment Controller 只关心 ReplicaSet，因此需要通过 <code>ReplicaSet Controller</code> 来继续协调。</p>
<h3 id="replicasets-controller">ReplicaSets controller</h3>
<p>​	在前面的步骤中，Deployment Controller 创建了第一个 ReplicaSet，但仍然还是没有 Pod，这时候就该 <code>ReplicaSet Controller</code> 登场了！ReplicaSet Controller 的工作是监视 ReplicaSets 及其相关资源（Pod）的生命周期。和大多数其他 Controller 一样，它通过触发某些事件的处理器来实现此目的。</p>
<p>​	当创建 ReplicaSet 时（由 Deployment Controller 创建），RS Controller <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/controller/replicaset/replica_set.go#L583">检查新 ReplicaSet 的状态</a>，并检查当前状态与期望状态之间存在的偏差，然后通过 <a href="https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/controller/replicaset/replica_set.go#L460">调整 Pod 的副本数</a>来达到期望的状态。</p>
<p>​	Pod 的创建也是批量进行的，从 <code>SlowStartInitialBatchSize</code> 开始，然后在每次成功的迭代中以一种 <code>slow start</code> 操作加倍。这样做的目的是在大量 Pod 启动失败时（例如，由于资源配额），可以减轻 kube-apiserver 被大量不必要的 HTTP 请求吞没的风险。如果创建失败，最好能够优雅地失败，并且对其他的系统组件造成的影响最小！</p>
<p>​	Kubernetes 通过 <code>Owner References</code>（在子级资源的某个字段中引用其父级资源的 ID） 来构造严格的资源对象层级结构。这确保了一旦 Controller 管理的资源被删除（级联删除），子资源就会被垃圾收集器删除，同时还为父级资源提供了一种有效的方式来避免他们竞争同一个子级资源（想象两对父母都认为他们拥有同一个孩子的场景）。</p>
<p>​	Owner References 的另一个好处是：它是有状态的。如果有任何 Controller 重启了，那么由于资源对象的拓扑关系与 Controller 无关，该操作不会影响到系统的稳定运行。这种对资源隔离的重视也体现在 Controller 本身的设计中：Controller 不能对自己没有明确拥有的资源进行操作，它们应该选择对资源的所有权，互不干涉，互不共享。</p>
<p>有时系统中也会出现孤儿（orphaned）资源，通常由以下两种途径产生：</p>
<ul>
<li>父级资源被删除，但子级资源没有被删除</li>
<li>垃圾收集策略禁止删除子级资源</li>
</ul>
<p>​	当发生这种情况时，Controller 将会确保孤儿资源拥有新的 <code>Owner</code>。多个父级资源可以相互竞争同一个孤儿资源，但只有一个会成功（其他父级资源会收到验证错误）。</p>
<h3 id="informers">Informers</h3>
<p>你可能已经注意到，某些 Controller（例如 RBAC 授权器或 Deployment Controller）需要先检索集群状态然后才能正常运行。拿 RBAC 授权器举例，当请求进入时，授权器会将用户的初始状态缓存下来，然后用它来检索与 etcd 中的用户关联的所有 角色（<code>Role</code>）和 角色绑定（<code>RoleBinding</code>）。那么问题来了，Controller 是如何访问和修改这些资源对象的呢？事实上 Kubernetes 是通过 <code>Informer</code> 机制来解决这个问题的。</p>
<p>Infomer 是一种模式，它允许 Controller 查找缓存在本地内存中的数据(这份数据由 Informer 自己维护)并列出它们感兴趣的资源。</p>
<p>虽然 Informer 的设计很抽象，但它在内部实现了大量的对细节的处理逻辑（例如缓存），缓存很重要，因为它不但可以减少对 Kubenetes API 的直接调用，同时也能减少 Server 和 Controller 的大量重复性工作。通过使用 Informer，不同的 Controller 之间以线程安全（Thread safety）的方式进行交互，而不必担心多个线程访问相同的资源时会产生冲突。</p>
<p>有关 Informer 的更多详细解析，请参考这篇文章： <a href="https://borismattijssen.github.io/articles/kubernetes-informers-controllers-reflectors-stores">Kubernetes: Controllers, Informers, Reflectors and Stores</a></p>
<h3 id="scheduler">Scheduler</h3>
<p>当所有的 Controller 正常运行后，etcd 中就会保存一个 Deployment、一个 ReplicaSet 和 三个 Pod 资源记录，并且可以通过 kube-apiserver 查看。然而，这些 Pod 资源现在还处于 <code>Pending</code> 状态，因为它们还没有被调度到集群中合适的 Node 上运行。这个问题最终要靠调度器（Scheduler）来解决。</p>
<p><code>Scheduler</code> 作为一个独立的组件运行在集群控制平面上，工作方式与其他 Controller 相同：监听实际并将系统状态调整到期望的状态。具体来说，Scheduler 的作用是将待调度的 Pod 按照特定的算法和调度策略绑定（Binding）到集群中某个合适的 Node 上，并将绑定信息写入 etcd 中（它会过滤其 PodSpec 中 <code>NodeName</code> 字段为空的 Pod），默认的调度算法的工作方式如下：</p>
<ol>
<li>当 Scheduler 启动时，会 <a href="https://github.com/kubernetes/kubernetes/blob/2d64ce5e8e45e26b02492d2b6c85e5ebfb1e4761/plugin/pkg/scheduler/algorithmprovider/defaults/defaults.go#L65-L81">注册一个默认的预选策略链</a>，这些 <code>预选策略</code> 会对备选节点进行评估，判断备选节点是否 <a href="https://github.com/kubernetes/kubernetes/blob/2d64ce5e8e45e26b02492d2b6c85e5ebfb1e4761/plugin/pkg/scheduler/core/generic_scheduler.go#L117">满足备选 Pod 的需求</a>。例如，如果 PodSpec 字段限制了 CPU 和内存资源，那么当备选节点的资源容量不满足备选 Pod 的需求时，备选 Pod 就不会被调度到该节点上（<strong>资源容量=备选节点资源总量-节点中已存在 Pod 的所有容器的需求资源（CPU 和内存）的总和</strong>）</li>
<li>一旦筛选出符合要求的候选节点，就会采用 <code>优选策略</code> 计算出每个候选节点的积分，然后对这些候选节点进行排序，积分最高者胜出。例如，为了在整个系统中分摊工作负载，这些优选策略会从备选节点列表中选出资源消耗最小的节点。每个节点通过优选策略时都会算出一个得分，计算各项得分，最终选出分值大的节点作为优选的结果。</li>
</ol>
<p>一旦找到了合适的节点，Scheduler 就会创建一个 <code>Binding</code> 对象，该对象的 <code>Name</code> 和 <code>Uid</code> 与 Pod 相匹配，并且其 <code>ObjectReference</code> 字段包含所选节点的名称，然后通过 <code>POST</code> 请求 <a href="https://github.com/kubernetes/kubernetes/blob/2d64ce5e8e45e26b02492d2b6c85e5ebfb1e4761/plugin/pkg/scheduler/factory/factory.go#L1095">发送给 apiserver</a>。</p>
<p>当 kube-apiserver 接收到此 Binding 对象时，注册吧会将该对象<strong>反序列化</strong>并更新 Pod 资源中的以下字段：</p>
<ul>
<li>将 <code>NodeName</code> 的值设置为 ObjectReference 中的 NodeName。</li>
<li>添加相关的注释。</li>
<li>将 <code>PodScheduled</code> 的 <code>status</code> 值设置为 True。可以通过 kubectl 来查看：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ kubectl get &lt;PODNAME&gt; -o go-template<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#39;{{range .status.conditions}}{{if eq .type &#34;PodScheduled&#34;}}{{.status}}{{end}}{{end}}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一旦 Scheduler 将 Pod 调度到某个节点上，该节点的 <code>Kubelet</code> 就会接管该 Pod 并开始部署。</p>
<blockquote>
<p>预选策略和优选策略都可以通过 <code>–policy-config-file</code> 参数来扩展，如果默认的调度器不满足要求，还可以部署自定义的调度器。如果 <code>podSpec.schedulerName</code> 的值设置为其他的调度器，则 Kubernetes 会将该 Pod 的调度转交给那个调度器。</p></blockquote>
<h2 id="6-kubelet">6. Kubelet</h2>
<hr>
<h3 id="pod-同步">Pod 同步</h3>
<p>现在，所有的 Controller 都完成了工作，我们来总结一下：</p>
<ul>
<li>HTTP 请求通过了认证、授权和准入控制阶段。</li>
<li>一个 Deployment、ReplicaSet 和三个 Pod 资源被持久化到 etcd 存储中。</li>
<li>然后运行了一系列Initializers。</li>
<li>最后每个 Pod 都被调度到合适的节点。</li>
</ul>
<p>然而到目前为止，所有的状态变化仅仅只是针对保存在 etcd 中的资源记录，接下来的步骤涉及到运行在工作节点之间的 Pod 的分布状况，这是分布式系统（比如 Kubernetes）的关键因素。这些任务都是由 <code>Kubelet</code> 组件完成的，让我们开始吧！</p>
<p>在 Kubernetes 集群中，每个 Node 节点上都会启动一个 Kubelet 服务进程，该进程用于处理 Scheduler 下发到本节点的任务，管理 Pod 的生命周期，包括挂载卷、容器日志记录、垃圾回收以及其他与 Pod 相关的事件。</p>
<p>如果换一种思维模式，你可以把 Kubelet 当成一种特殊的 Controller，它每隔 20 秒（可以自定义）向 kube-apiserver 通过 <code>NodeName</code> 获取自身 Node 上所要运行的 Pod 清单。一旦获取到了这个清单，它就会通过与自己的内部缓存进行比较来检测新增加的 Pod，如果有差异，就开始同步 Pod 列表。我们来详细分析一下同步过程：</p>
<ol>
<li>如果 Pod 正在创建， Kubelet 就会 <a href="https://github.com/kubernetes/kubernetes/blob/fc8bfe2d8929e11a898c4557f9323c482b5e8842/pkg/kubelet/kubelet.go#L1519">记录一些在 <code>Prometheus</code> 中用于追踪 Pod 启动延时的指标</a>。</li>
<li>然后生成一个 <code>PodStatus</code> 对象，它表示 Pod 当前阶段的状态。Pod 的状态(<code>Phase</code>) 是 Pod 在其生命周期中的最精简的概要，包括 <code>Pending</code>，<code>Running</code>，<code>Succeeded</code>，<code>Failed</code> 和 <code>Unkown</code> 这几个值。状态的产生过程非常过程，所以很有必要深入了解一下背后的原理：</li>
</ol>
<ul>
<li>
<p>首先串行执行一系列 Pod 同步处理器（<code>PodSyncHandlers</code>），每个处理器检查检查 Pod 是否应该运行在该节点上。当所有的处理器都认为该 Pod 不应该运行在该节点上，则 Pod 的 <code>Phase</code> 值就会变成 <code>PodFailed</code>，并且将该 Pod 从该节点上驱逐出去。例如当你创建一个 <code>Job</code> 时，如果 Pod 失败重试的时间超过了 <code>spec.activeDeadlineSeconds</code> 设置的值，就会将 Pod 从该节点驱逐出去。</p>
</li>
<li>
<p>接下来，Pod 的 Phase 值由 <code>init 容器</code> 和应用容器的状态共同来决定。因为目前容器还没有启动，容器被视为 <a href="https://github.com/kubernetes/kubernetes/blob/fc8bfe2d8929e11a898c4557f9323c482b5e8842/pkg/kubelet/kubelet_pods.go#L1244">处于等待阶段</a>，如果 Pod 中至少有一个容器处于等待阶段，则其 <code>Phase</code> 值为 <a href="https://github.com/kubernetes/kubernetes/blob/fc8bfe2d8929e11a898c4557f9323c482b5e8842/pkg/kubelet/kubelet_pods.go#L1258-L1261">Pending</a>。</p>
</li>
<li>
<p>最后，Pod 的 <code>Condition</code> 字段由 Pod 内所有容器的状态决定。现在我们的容器还没有被容器运行时创建，所以 <a href="https://github.com/kubernetes/kubernetes/blob/fc8bfe2d8929e11a898c4557f9323c482b5e8842/pkg/kubelet/status/generate.go#L70-L81"><code>PodReady</code> 的状态被设置为 <code>False</code></a>。可以通过 kubectl 查看：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ kubectl get &lt;PODNAME&gt; -o go-template<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#39;{{range .status.conditions}}{{if eq .type &#34;Ready&#34;}}{{.status}}{{end}}{{end}}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<ol>
<li>生成 PodStatus 之后（Pod 中的 <code>status</code> 字段），Kubelet 就会将它发送到 Pod 的状态管理器，该管理器的任务是通过 apiserver 异步更新 etcd 中的记录。</li>
<li>接下来运行一系列<strong>准入处理器</strong>来确保该 Pod 是否具有相应的权限（包括强制执行 <a href="https://github.com/kubernetes/kubernetes/blob/fc8bfe2d8929e11a898c4557f9323c482b5e8842/pkg/kubelet/kubelet.go#L883-L884"><code>AppArmor</code> 配置文件和 <code>NO_NEW_PRIVS</code></a>），被准入控制器拒绝的 Pod 将一直保持 <code>Pending</code> 状态。</li>
<li>如果 Kubelet 启动时指定了 <code>cgroups-per-qos</code> 参数，Kubelet 就会为该 Pod 创建 <code>cgroup</code> 并进行相应的资源限制。这是为了更方便地对 Pod 进行服务质量（QoS）管理。</li>
<li>然后为 Pod 创建相应的目录，包括 Pod 的目录（<code>/var/run/kubelet/pods/&lt;podID&gt;</code>），该 Pod 的卷目录（<code>&lt;podDir&gt;/volumes</code>）和该 Pod 的插件目录（<code>&lt;podDir&gt;/plugins</code>）。</li>
<li><strong>卷管理器</strong>会 <a href="https://github.com/kubernetes/kubernetes/blob/2723e06a251a4ec3ef241397217e73fa782b0b98/pkg/kubelet/volumemanager/volume_manager.go#L330">挂载 <code>Spec.Volumes</code> 中定义的相关数据卷，然后等待是否挂载成功</a>。根据挂载卷类型的不同，某些 Pod 可能需要等待更长的时间（比如 NFS 卷）。</li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/dd9981d038012c120525c9e6df98b3beb3ef19e1/pkg/kubelet/kubelet_pods.go#L788">从 apiserver 中检索</a> <code>Spec.ImagePullSecrets</code> 中定义的所有 <code>Secret</code>，然后将其注入到容器中。</li>
<li>最后通过容器运行时接口（<code>Container Runtime Interface（CRI）</code>）开始启动容器（下面会详细描述）。</li>
</ol>
<h3 id="cri-与-pause-容器">CRI 与 pause 容器</h3>
<p>到了这个阶段，大量的初始化工作都已经完成，容器已经准备好开始启动了，而容器是由<strong>容器运行时</strong>（例如 <code>Docker</code> 和 <code>Rkt</code>）启动的。</p>
<p>为了更容易扩展，Kubelet 从 1.5.0 开始通过<strong>容器运行时接口</strong>与容器运行时（Container Runtime）交互。简而言之，CRI 提供了 Kubelet 和特定的运行时之间的抽象接口，它们之间通过 <a href="https://github.com/google/protobuf">协议缓冲区</a>（它像一个更快的 JSON）和 <a href="https://grpc.io/">gRPC API</a>（一种非常适合执行 Kubernetes 操作的 API）。这是一个非常酷的想法，通过使用 Kubelet 和运行时之间定义的契约关系，容器如何编排的具体实现细节已经变得无关紧要。由于不需要修改 Kubernetes 的核心代码，开发者可以以最小的开销添加新的运行时。</p>
<p>不好意思有点跑题了，让我们继续回到容器启动的阶段。第一次启动 Pod 时，Kubelet 会通过 <code>Remote Procedure Command</code>(RPC) 协议调用 <a href="https://github.com/kubernetes/kubernetes/blob/2d64ce5e8e45e26b02492d2b6c85e5ebfb1e4761/pkg/kubelet/kuberuntime/kuberuntime_sandbox.go#L51">RunPodSandbox</a>。<code>sandbox</code> 用于描述一组容器，例如在 Kubernetes 中它表示的是 Pod。<code>sandbox</code> 是一个很宽泛的概念，所以对于其他没有使用容器的运行时仍然是有意义的（比如在一个基于 <code>hypervisor</code> 的运行时中，sandbox 可能指的就是虚拟机）。</p>
<p>我们的例子中使用的容器运行时是 Docker，创建 sandbox 时首先创建的是 <code>pause</code> 容器。pause 容器作为同一个 Pod 中所有其他容器的基础容器，它为 Pod 中的每个业务容器提供了大量的 Pod 级别资源，这些资源都是 Linux 命名空间（包括网络命名空间，IPC 命名空间和 PID 命名空间）。</p>
<p>pause 容器提供了一种方法来管理所有这些命名空间并允许业务容器共享它们，在同一个网络命名空间中的好处是：同一个 Pod 中的容器可以使用 <code>localhost</code> 来相互通信。pause 容器的第二个功能与 PID 命名空间的工作方式相关，在 PID 命名空间中，进程之间形成一个树状结构，一旦某个子进程由于父进程的错误而变成了“孤儿进程”，其便会被 <code>init</code> 进程进行收养并最终回收资源。关于 pause 工作方式的详细信息可以参考： <a href="https://www.ianlewis.org/en/almighty-pause-container">The Almighty Pause Container</a>。</p>
<p>一旦创建好了 pause 容器，下面就会开始检查磁盘状态然后开始启动业务容器。</p>
<h3 id="cni-和-pod-网络">CNI 和 Pod 网络</h3>
<p>现在我们的 Pod 已经有了基本的骨架：一个共享所有命名空间以允许业务容器在同一个 Pod 里进行通信的 pause 容器。但现在还有一个问题，那就是容器的网络是如何建立的？</p>
<p>当 Kubelet 为 Pod 创建网络时，它会将创建网络的任务交给 <code>CNI</code> 插件。CNI 表示容器网络接口（Container Network Interface），和容器运行时的运行方式类似，它也是一种抽象，允许不同的网络提供商为容器提供不同的网络实现。通过将 json 配置文件（默认在 <code>/etc/cni/net.d</code> 路径下）中的数据传送到相关的 CNI 二进制文件（默认在 <code>/opt/cni/bin</code> 路径下）中，cni 插件可以给 pause 容器配置相关的网络，然后 Pod 中其他的容器都使用 pause 容器的网络。下面是一个简单的示例配置文件：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;cniVersion&#34;</span>: <span style="color:#a5d6ff">&#34;0.3.1&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;name&#34;</span>: <span style="color:#a5d6ff">&#34;bridge&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;bridge&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;bridge&#34;</span>: <span style="color:#a5d6ff">&#34;cnio0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;isGateway&#34;</span>: <span style="color:#79c0ff">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;ipMasq&#34;</span>: <span style="color:#79c0ff">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&#34;ipam&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;type&#34;</span>: <span style="color:#a5d6ff">&#34;host-local&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;ranges&#34;</span>: [
</span></span><span style="display:flex;"><span>          [{<span style="color:#7ee787">&#34;subnet&#34;</span>: <span style="color:#a5d6ff">&#34;${POD_CIDR}&#34;</span>}]
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&#34;routes&#34;</span>: [{<span style="color:#7ee787">&#34;dst&#34;</span>: <span style="color:#a5d6ff">&#34;0.0.0.0/0&#34;</span>}]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>CNI 插件还会通过 <code>CNI_ARGS</code> 环境变量为 Pod 指定其他的元数据，包括 Pod 名称和命名空间。</p>
<p>下面的步骤因 CNI 插件而异，我们以 <code>bridge</code> 插件举例：</p>
<ul>
<li>该插件首先会在根网络命名空间（也就是宿主机的网络命名空间）中设置本地 Linux 网桥，以便为该主机上的所有容器提供网络服务。</li>
<li>然后它会将一个网络接口（<code>veth</code> 设备对的一端）插入到 pause 容器的网络命名空间中，并将另一端连接到网桥上。你可以这样来理解 veth 设备对：它就像一根很长的管道，一端连接到容器，一端连接到根网络命名空间中，数据包就在管道中进行传播。</li>
<li>接下来 json 文件中指定的 <code>IPAM</code> Plugin 会为 pause 容器的网络接口分配一个 IP 并设置相应的路由，现在 Pod 就有了自己的 IP。
<ul>
<li>IPAM Plugin 的工作方式和 CNI Plugin 类似：通过二进制文件调用并具有标准化的接口，每一个 IPAM Plugin 都必须要确定容器网络接口的 IP、子网以及网关和路由，并将信息返回给 CNI 插件。最常见的 IPAM Plugin 是 <code>host-local</code>，它从预定义的一组地址池中为容器分配 IP 地址。它将地址池的信息以及分配信息保存在主机的文件系统中，从而确保了同一主机上每个容器的 IP 地址的唯一性。</li>
</ul>
</li>
<li>最后 Kubelet 会将集群内部的 <code>DNS</code> 服务器的 <code>Cluster IP</code> 地址传给 CNI 插件，然后 CNI 插件将它们写到容器的 <code>/etc/resolv.conf</code> 文件中。</li>
</ul>
<p>一旦完成了上面的步骤，CNI 插件就会将操作的结果以 json 的格式返回给 Kubelet。</p>
<h3 id="跨主机容器网络">跨主机容器网络</h3>
<p>到目前为止，我们已经描述了容器如何与宿主机进行通信，但跨主机之间的容器如何通信呢？</p>
<p>​	通常情况下使用 <code>overlay</code> 网络来进行跨主机容器通信，这是一种动态同步多个主机间路由的方法。 其中最常用的 overlay 网络插件是 <code>flannel</code>，flannel 具体的工作方式可以参考 <a href="https://github.com/coreos/flannel">CoreOS 的文档</a>。</p>
<h3 id="容器启动">容器启动</h3>
<p>所有网络都配置完成后，接下来就开始真正启动业务容器了！</p>
<p>一旦 sanbox 完成初始化并处于 <code>active</code> 状态，Kubelet 就可以开始为其创建容器了。首先 <a href="https://github.com/kubernetes/kubernetes/blob/5adfb24f8f25a0d57eb9a7b158db46f9f46f0d80/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L690">启动 PodSpec 中定义的 init 容器</a>，然后再启动业务容器。具体过程如下：</p>
<ol>
<li>首先拉取容器的镜像。如果是私有仓库的镜像，就会利用 PodSpec 中指定的 Secret 来拉取该镜像。</li>
<li>然后通过 CRI 接口创建容器。Kubelet 向 PodSpec 中填充了一个 <code>ContainerConfig</code> 数据结构（在其中定义了命令，镜像，标签，挂载卷，设备，环境变量等待），然后通过 <code>protobufs</code> 发送给 CRI 接口。对于 Docker 来说，它会将这些信息反序列化并填充到自己的配置信息中，然后再发送给 <code>Dockerd</code> 守护进程。在这个过程中，它会将一些元数据标签（例如容器类型，日志路径，dandbox ID 等待）添加到容器中。</li>
<li>接下来会使用 CPU 管理器来约束容器，这是 Kubelet 1.8 中新添加的 alpha 特性，它使用 <code>UpdateContainerResources</code> CRI 方法将容器分配给本节点上的 CPU 资源池。</li>
<li>最后容器开始真正 <a href="https://github.com/kubernetes/kubernetes/blob/5f9f4a1c5939436fa320e9bc5973a55d6446e59f/pkg/kubelet/kuberuntime/kuberuntime_container.go#L135">启动</a>。</li>
<li>如果 Pod 中配置了容器生命周期钩子（Hook），容器启动之后就会运行这些 <code>Hook</code>。Hook 的类型包括两种：<code>Exec</code>（执行一段命令） 和 <code>HTTP</code>（发送HTTP请求）。如果 PostStart Hook 启动的时间过长、挂起或者失败，容器将永远不会变成 <code>running</code> 状态。</li>
</ol>
<h1 id="总结">总结</h1>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/Pod%E5%88%9B%E5%BB%BA%E5%8E%86%E7%A8%8B.jpg" alt="Pod创建历程"  />
</p>]]></content:encoded>
    </item>
    <item>
      <title>Giweights 介绍</title>
      <link>https://luenci.com/en/posts/gitops-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/gitops-%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;giweights-介绍&#34;&gt;Giweights 介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://icloudnative.io/posts/what-is-giweights/&#34;&gt;https://icloudnative.io/posts/what-is-giweights/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;基础设施即代码&#34;&gt;基础设施即代码&lt;/h2&gt;
&lt;p&gt;在理解 Giweights 之前，我们需要先理解什么是&lt;strong&gt;基础设施即代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;基础设施即代码（Infrastructure as Code, &lt;strong&gt;IaC&lt;/strong&gt;），顾名思义，表示使用代码（而非手动流程）来定义基础设施，研发人员可以像对待应用软件一样对待基础设施，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以创建包含基础架构规范的声明式配置文件，从而便于编辑和分发配置。&lt;/li&gt;
&lt;li&gt;可以确保每次配置的环境都完全相同。&lt;/li&gt;
&lt;li&gt;可以进行版本控制，所有的变更都会被记录下来，方便溯源。&lt;/li&gt;
&lt;li&gt;可以将基础设施划分为若干个模块化组件，并通过自动化以不同的方式进行组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，广义上的 IaC 不仅仅只关于基础设施，还包含了&lt;strong&gt;网络&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;配置&lt;/strong&gt;等等，所以广义上的 IaC 又叫 &lt;strong&gt;X as Code&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-16-10-zwMOq2.jpg&#34; alt=&#34;img&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;​	比如你想在 AWS 中创建服务器，配置网络，部署 Kubernetes 集群以及各种工作负载，你只需要定义好 Terraform 或 Ansible 的声明式配置，以及 Kubernetes 的配置清单即可，免去一切繁杂的手动操作。&lt;/p&gt;
&lt;h2 id=&#34;giweights-是什么&#34;&gt;Giweights 是什么&lt;/h2&gt;
&lt;p&gt;​	Giweights = IaC + Git + CI/CD，即基于 IaC 的版本化 CI/CD。它的核心是使用 Git 仓库来管理基础设施和应用的配置，并且&lt;strong&gt;以 Git 仓库作为基础设施和应用的单一事实来源&lt;/strong&gt;，你从其他地方修改配置（比如手动改线上配置）一概不予通过。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-16-34-pRb1Jc.jpg&#34; alt=&#34;img&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;​	Git 仓库中的声明式配置描述了目标环境当前所需基础设施的期望状态，借助于 Giweights，如果集群的实际状态与 Git 仓库中定义的期望状态不匹配，Kubernetes reconcilers 会根据期望状态来调整当前的状态，最终使实际状态符合期望状态。&lt;/p&gt;
&lt;p&gt;​	另一方面，现代应用的开发更多关注的是迭代速度和规模，拥有成熟 DevOps 文化的组织每天可以将代码部署到生成环境中数百次，DevOps 团队可以通过版本控制、代码审查以及自动测试和部署的 CI/CD 流水线等最佳实践来实现这一目标，这就是 Giweights 干的事情。&lt;/p&gt;
&lt;h2 id=&#34;giweights-vs-devops&#34;&gt;Giweights vs DevOps&lt;/h2&gt;
&lt;p&gt;​	从广义上来看，Giweights 与 DevOps 并不冲突，&lt;strong&gt;Giweights 是一种技术手段，而 DevOps 是一种文化&lt;/strong&gt;。Giweights 是一种实现持续交付（Continuous Delivery）、持续部署（Continuous Deployment）和基础设施即代码（IaC）的工具和框架，它是支持 DevOps 文化的。&lt;/p&gt;
&lt;p&gt;从狭义上来看，Giweights 与 DevOps 有以下几个区别：&lt;/p&gt;
&lt;p&gt;​	首先，&lt;strong&gt;Giweights 是以目标为导向的&lt;/strong&gt;。它使用 Git 来维护期望状态，并不断调整实际状态，最终与期望状态相匹配。而 &lt;strong&gt;DevOps 更多关注的是最佳实践&lt;/strong&gt;，这些实践可以普遍应用于企业的每一个流程。&lt;/p&gt;
&lt;p&gt;​	其次，&lt;strong&gt;Giweights 采取声明式的操作方法，而 DevOps 同时接受声明式和命令式的方法&lt;/strong&gt;，所以 DevOps 除了适用于容器环境之外，还适用于虚拟机和裸机环境。&lt;/p&gt;
&lt;p&gt;​	最后，&lt;strong&gt;Giweights 重新定义了云原生场景下的 CI/CD&lt;/strong&gt;，它以 Git 作为中心的不可变状态声明，以加快持续部署速度。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="giweights-介绍">Giweights 介绍</h1>
<blockquote>
<p><a href="https://icloudnative.io/posts/what-is-giweights/">https://icloudnative.io/posts/what-is-giweights/</a></p></blockquote>
<h2 id="基础设施即代码">基础设施即代码</h2>
<p>在理解 Giweights 之前，我们需要先理解什么是<strong>基础设施即代码</strong>。</p>
<p>基础设施即代码（Infrastructure as Code, <strong>IaC</strong>），顾名思义，表示使用代码（而非手动流程）来定义基础设施，研发人员可以像对待应用软件一样对待基础设施，例如：</p>
<ul>
<li>可以创建包含基础架构规范的声明式配置文件，从而便于编辑和分发配置。</li>
<li>可以确保每次配置的环境都完全相同。</li>
<li>可以进行版本控制，所有的变更都会被记录下来，方便溯源。</li>
<li>可以将基础设施划分为若干个模块化组件，并通过自动化以不同的方式进行组合。</li>
</ul>
<p>当然，广义上的 IaC 不仅仅只关于基础设施，还包含了<strong>网络</strong>、<strong>安全</strong>、<strong>配置</strong>等等，所以广义上的 IaC 又叫 <strong>X as Code</strong>。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-16-10-zwMOq2.jpg" alt="img"  />
</p>
<p>​	比如你想在 AWS 中创建服务器，配置网络，部署 Kubernetes 集群以及各种工作负载，你只需要定义好 Terraform 或 Ansible 的声明式配置，以及 Kubernetes 的配置清单即可，免去一切繁杂的手动操作。</p>
<h2 id="giweights-是什么">Giweights 是什么</h2>
<p>​	Giweights = IaC + Git + CI/CD，即基于 IaC 的版本化 CI/CD。它的核心是使用 Git 仓库来管理基础设施和应用的配置，并且<strong>以 Git 仓库作为基础设施和应用的单一事实来源</strong>，你从其他地方修改配置（比如手动改线上配置）一概不予通过。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-16-34-pRb1Jc.jpg" alt="img"  />
</p>
<p>​	Git 仓库中的声明式配置描述了目标环境当前所需基础设施的期望状态，借助于 Giweights，如果集群的实际状态与 Git 仓库中定义的期望状态不匹配，Kubernetes reconcilers 会根据期望状态来调整当前的状态，最终使实际状态符合期望状态。</p>
<p>​	另一方面，现代应用的开发更多关注的是迭代速度和规模，拥有成熟 DevOps 文化的组织每天可以将代码部署到生成环境中数百次，DevOps 团队可以通过版本控制、代码审查以及自动测试和部署的 CI/CD 流水线等最佳实践来实现这一目标，这就是 Giweights 干的事情。</p>
<h2 id="giweights-vs-devops">Giweights vs DevOps</h2>
<p>​	从广义上来看，Giweights 与 DevOps 并不冲突，<strong>Giweights 是一种技术手段，而 DevOps 是一种文化</strong>。Giweights 是一种实现持续交付（Continuous Delivery）、持续部署（Continuous Deployment）和基础设施即代码（IaC）的工具和框架，它是支持 DevOps 文化的。</p>
<p>从狭义上来看，Giweights 与 DevOps 有以下几个区别：</p>
<p>​	首先，<strong>Giweights 是以目标为导向的</strong>。它使用 Git 来维护期望状态，并不断调整实际状态，最终与期望状态相匹配。而 <strong>DevOps 更多关注的是最佳实践</strong>，这些实践可以普遍应用于企业的每一个流程。</p>
<p>​	其次，<strong>Giweights 采取声明式的操作方法，而 DevOps 同时接受声明式和命令式的方法</strong>，所以 DevOps 除了适用于容器环境之外，还适用于虚拟机和裸机环境。</p>
<p>​	最后，<strong>Giweights 重新定义了云原生场景下的 CI/CD</strong>，它以 Git 作为中心的不可变状态声明，以加快持续部署速度。</p>
<h2 id="giweights-的设计哲学">Giweights 的设计哲学</h2>
<p>想要使用 Giweights 来管理你的基础设施和应用，需要践行以下几个原则：</p>
<h3 id="1-声明式">1. 声明式</h3>
<p>必须通过声明式来描述系统的期望状态。例如 Kubernetes，众多现代云原生工具都是声明式的，Kubernetes 只是其中的一种。</p>
<h3 id="2-版本控制不可变">2. 版本控制/不可变</h3>
<p>因为所有的状态声明都存储在 Git 仓库中，并且把 Git 仓库作为单一事实来源，那么所有的操作都是从 Git 仓库里驱动的，而且保留了完整的版本历史，方便回滚。有了 Git 优秀的安全保障，也可以使用 SSH 密钥来签署 commits，对代码的作者和出处实施强有力的安全保障。</p>
<h3 id="3-自动应用变更">3. 自动应用变更</h3>
<p>Git 仓库中声明的期望状态发生了任何变更，都可以立即应用到系统中，而且不需要安装配置额外工具（比如 kubectl），也不需要配置 Kubernetes 的认证授权。</p>
<h3 id="4-持续的-reconciliation">4. 持续的 Reconciliation</h3>
<p>​	Reconciliation 其实最早是 Kubernetes 里的一个概念，表示的是<strong>确保系统的实际状态与期望状态一致的过程</strong>。具体的实现方式是在目标环境中安装一个 agent，一旦实际状态与期望状态不匹配，agent 就会进行自动修复。这里的修复比 Kubernetes 的故障自愈更高级，即使是手动修改了集群的编排清单，集群也会被恢复到 Git 仓库中的清单所描述的状态。</p>
<p>鉴于以上这些设计哲学，我们来看一下 Giweights 的工作流：</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-22-01-V2RPEM.jpg" alt="img"  />
</p>
<ul>
<li>首先，团队中的任何一个成员都可以 Fork 仓库对配置进行更改，然后提交 Pull Request。</li>
<li>接下来会运行 CI 流水线，一般会做这么几件事情：验证配置文件、执行自动化测试、检测代码的复杂性、构建 OCI 镜像、将镜像推送到镜像仓库等等。</li>
<li>CI 流水线运行完成后，团队中拥有合并代码权限的人将会将这个 Pull Request 合并到主分支中 。一般拥有这个权限的都是研发人员、安全专家或者高级运维工程师。</li>
<li>最后会运行 CD 流水线，将变更应用到目标系统中（比如 Kubernetes 集群或者 AWS） 。</li>
</ul>
<p>​	整个过程完全自动化且透明，通过多人协作和自动化测试来保证了基础设施声明配置的健壮性。而传统的模式是其中一个工程师在自己的电脑上操作这一切，其他人不知道发生了什么，也无法对其操作进行 Review。</p>
<h3 id="push-模式">Push 模式</h3>
<p>​	目前大多数 CI/CD 工具都使用基于 Push 的部署模式，例如 Jenkins、CircleCI 等。这种模式一般都会在 CI 流水线运行完成后执行一个命令（比如 kubectl）将应用部署到目标环境中。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-23-12-coPxwT.jpg" alt="img"  />
</p>
<p>这种 CD 模式的缺陷很明显：</p>
<ul>
<li>需要安装配置额外工具（比如 kubectl）；</li>
<li>需要 Kubernetes 对其进行授权；</li>
<li>需要云平台授权；</li>
<li>无法感知部署状态。也就无法感知期望状态与实际状态的偏差，需要借助额外的方案来保障一致性。</li>
</ul>
<p>​	Kubernetes 集群或者云平台对 CI 系统的授权凭证在集群或云平台的信任域之外，不受集群或云平台的安全策略保护，因此 CI 系统很容易被当成非法攻击的载体。</p>
<h3 id="pull-模式">Pull 模式</h3>
<p>Pull 模式会在目标环境中安装一个 Agent，例如在 Kubernetes 集群中就靠 Operator 来充当这个 Agent。Operator 会周期性地监控目标环境的实际状态，并与 Git 仓库中的期望状态进行比较，如果实际状态不符合期望状态，Operator 就会更新基础设施的实际状态以匹配期望状态。</p>
<p><img loading="lazy" src="https://jsdelivr.icloudnative.io/gh/yangchuansheng/imghosting4@main/uPic/2022-07-02-23-38-YrEEzt.jpg" alt="img"  />
</p>
<p>只有 Git 的变更可以作为期望状态的唯一来源，除此之外，任何人都不可以对集群进行任何更改，即使你修改了，也会被 Operator 还原为期望状态，这也就是传说中的<strong>不可变基础设施</strong>。</p>
<p>目前基于 Pull 模式的 CD 工具有 <a href="https://github.com/argoproj/argo-cd/">Argo CD</a>， <a href="https://github.com/fluxcd/flux">Flux CD</a> 以及 <a href="https://github.com/kubesphere/ks-devops">ks-devops</a>。</p>
<h2 id="giweights-的优势">Giweights 的优势</h2>
<p>​	一般 Giweights 首选的都是基于 Pull 的部署模式，因为这种模式有很多不可替代的优势。</p>
<h3 id="更强大的安全保障">更强大的安全保障</h3>
<p>​	上面已经提到了，使用 Giweights 不需要任何 Kubernetes 或者云平台的凭证来执行部署，Kubernetes 集群内的 Argo CD 或者 Flux CD 只需要访问 Git 仓库，并通过 Pull 模式来更新即可。</p>
<p>​	另一方面，Git 由用于跟踪和管理代码变更的强大密码学支持，拥有对变更进行签名以证明作者身份和来源的能力，这是保障集群安全的关键。</p>
<h3 id="git-作为事实的唯一真实来源">Git 作为事实的唯一真实来源</h3>
<p>​	因为所有的应用包括基础设施的声明式配置都保存在 Git 中，并把 Git 作为应用系统的唯一事实来源，因此可以利用 Git 的强大功能操作所有东西，例如版本控制、历史记录、审计和回滚等等，无需使用 kubectl 这样的工具来操作。</p>
<h3 id="提高生产力">提高生产力</h3>
<p>​	Git 也是开发人员非常熟悉的工具，通过 Git 不断迭代，可以提高生产率，加快开发和部署速度，更快地推出新产品，同时提高系统的稳定性和可靠性。</p>
<h3 id="更容易合规的审计">更容易合规的审计</h3>
<p>​	使用 Giweights 的基础设施可以像任何软件项目一样使用 Git 来管理，所以同样可以对其进行质量审计。当有人需要对基础设施进行更改时，会创建一个 Pull Request，等相关人员对其进行 Code Review 之后，更改才可以应用到系统中。</p>
<h2 id="总结">总结</h2>
<p>​	Giweights 是对现有 DevOps 文化的补充，它使用 Git 这样的版本控制系统来自动部署基础设施，部署过程清晰可见，可以查看和跟踪对系统进行的任何变更，提高了生产力、安全性和合规性。而且 Giweights 提供了更优雅的可观测性，可以实时观测部署状态，并采取行动使实际状态与期望状态保持一致。</p>
<p>​	而且在 Giweights 中，整个系统都是通过声明式来描述的，天然适合云原生环境，因为 Kubernetes 也是这么设计的。</p>]]></content:encoded>
    </item>
  </channel>
</rss>

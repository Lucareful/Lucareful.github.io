<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Web安全 on Luenci</title>
    <link>https://luenci.com/en/tags/web%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in Web安全 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/tags/web%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>同源和跨域</title>
      <link>https://luenci.com/en/posts/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E5%92%8C%E5%90%8C%E6%BA%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E5%92%8C%E5%90%8C%E6%BA%90/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文:&lt;a href=&#34;https://www.cnblogs.com/rockmadman/p/6836834.html&#34;&gt;同源策略、跨域解决方案&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;一同源策略&#34;&gt;一、同源策略&lt;/h2&gt;
&lt;h3 id=&#34;1先来说说什么是源&#34;&gt;1、先来说说什么是源&lt;/h3&gt;
&lt;p&gt;• 源（origin）就是协议、域名和端口号。
以上url中的源就是：http://www.company.com:80
若地址里面的协议、域名和端口号均相同则属于同源。
以下是相对于 &lt;a href=&#34;http://www.a.com/test/index.html&#34;&gt;http://www.a.com/test/index.html&lt;/a&gt; 的同源检测&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>原文:<a href="https://www.cnblogs.com/rockmadman/p/6836834.html">同源策略、跨域解决方案</a></p></blockquote>
<h2 id="一同源策略">一、同源策略</h2>
<h3 id="1先来说说什么是源">1、先来说说什么是源</h3>
<p>• 源（origin）就是协议、域名和端口号。
以上url中的源就是：http://www.company.com:80
若地址里面的协议、域名和端口号均相同则属于同源。
以下是相对于 <a href="http://www.a.com/test/index.html">http://www.a.com/test/index.html</a> 的同源检测</p>
<p>• <a href="http://www.a.com/dir/page.html">http://www.a.com/dir/page.html</a> &mdash;-成功
• <a href="http://www.child.a.com/test/index.html">http://www.child.a.com/test/index.html</a> &mdash;-失败，域名不同
• <a href="https://www.a.com/test/index.html">https://www.a.com/test/index.html</a> &mdash;-失败，协议不同
• <a href="http://www.a.com:8080/test/index.html">http://www.a.com:8080/test/index.html</a> &mdash;-失败，端口号不同</p>
<h3 id="2什么是同源策略">2.什么是同源策略？</h3>
<p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p>
<p>• 不受同源策略限制的：
1、页面中的链接，重定向以及表单提交是不会受到同源策略限制的。
2、跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;``&lt;/script&gt;，&lt;img&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;iframe&gt;</code>等。</p>
<!-- more -->
<h2 id="二跨域">二、跨域</h2>
<h3 id="1什么是跨域">1、什么是跨域</h3>
<p>根据前面所讲的浏览器同源策略的影响，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象是就需要跨域。</p>
<h3 id="2跨域的实现形式">2、跨域的实现形式</h3>
<h4 id="1设置documentdomain">（1）设置document.domain</h4>
<ul>
<li>比如<code>home.example.com</code>要读取<code>developer.example.com</code>里面的文档，由于同源策略的限制，就无法读取，我们通过设置<code>document.domain=&quot;example.com&quot;;</code>这时就不再受同源策略的限制了。</li>
</ul>
<h4 id="2跨资源共享corscross-origin-resource-sharing">（2）跨资源共享CORS（Cross-origin resource sharing）</h4>
<ul>
<li>
<p>CORS采用新的<code>“origin:”</code>请求头和新的<code>Access-Control-Allow-Origin</code>响应头来扩展HTTP。它允许服务器用头信息显示地列出源，或使用通配符来匹配所有的源并允许任何地址请求文件。</p>
</li>
<li>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
</li>
</ul>
<p>从而它允许浏览器向跨源服务器，发出XMLHttpRequest请求，克服了AJAX只能同源使用的限制。</p>
<h4 id="3跨文档消息cross-document-messaging">（3）跨文档消息（cross-document messaging）</h4>
<ul>
<li>允许来自一个文档的脚本可以传递消息到另一个文档里的脚本，而不管脚本的来源是否不同，通过调用<code>window.postMessage()</code>方法，可以异步传递消息事件(可以使用<code>onmessage</code>事件处理程序函数来处理它)到窗口的文档里。</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>

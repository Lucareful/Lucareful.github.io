<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>分布式事务 on Luenci</title>
    <link>https://luenci.com/en/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 分布式事务 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊聊分布式事务</title>
      <link>https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;聊聊分布式事务&#34;&gt;聊聊分布式事务&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;​    随着业务的快速发展、业务复杂度越来越高，传统单体应用逐渐暴露出了一些问题，例如开发效率低、可维护性差、架构扩展性差、部署不灵活、健壮性差等等。&lt;/p&gt;
&lt;p&gt;​    微服务架构是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。每个微服务仅关注于完成一件任务并很好地完成该任务。&lt;/p&gt;
&lt;h2 id=&#34;微服务架构的特点&#34;&gt;微服务架构的特点&lt;/h2&gt;
&lt;p&gt;微服务架构的优势非常明显，在近些年迅猛发展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将复杂的业务拆分成多个小的业务，能够达到更好的业务复用，有利于人员组织分工&lt;/li&gt;
&lt;li&gt;服务独立部署，独立扩容，每个服务的修改和部署对其他服务没有影响&lt;/li&gt;
&lt;li&gt;每个服务可以根据业务场景选取合适的编程语言和数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微服务有以上的优势，但是微服务也带来不少的新问题，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务数量众多，其测试、部署、监控等都变的更加困难。&lt;/li&gt;
&lt;li&gt;单体应用拆分为分布式系统后，进程间的通讯机制和故障处理措施变的更加复杂&lt;/li&gt;
&lt;li&gt;系统微服务化后，原先是一个服务内部的本地数据库事务，被拆到了多个服务，需要在分布式环境下保证事务的一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的各项问题中，1、2都可以通过近几年涌现的各项微服务技术解决，例如&lt;code&gt;Kubernetes&lt;/code&gt;提供了服务发现、服务治理等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此分布式事务已经成为微服务落地最大的阻碍，也是最具挑战性的一个技术难题。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;cap-理论&#34;&gt;CAP 理论&lt;/h3&gt;
&lt;p&gt;一个分布式系统最多只能同时满足 &lt;code&gt;一致性（Consistency）&lt;/code&gt;、&lt;code&gt;可用性（Availability）&lt;/code&gt;和&lt;code&gt;分区容错性（Partition tolerance）&lt;/code&gt;这三项中的两项。&lt;/p&gt;
&lt;h2 id=&#34;分布式事务方案&#34;&gt;分布式事务方案&lt;/h2&gt;
&lt;p&gt;分布式事务模式常见的有&lt;code&gt;XA&lt;/code&gt;、&lt;code&gt;TCC&lt;/code&gt;、&lt;code&gt;SAGA&lt;/code&gt;、&lt;code&gt;可靠消息&lt;/code&gt;。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="聊聊分布式事务">聊聊分布式事务</h1>
<h2 id="前言">前言</h2>
<p>​    随着业务的快速发展、业务复杂度越来越高，传统单体应用逐渐暴露出了一些问题，例如开发效率低、可维护性差、架构扩展性差、部署不灵活、健壮性差等等。</p>
<p>​    微服务架构是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。每个微服务仅关注于完成一件任务并很好地完成该任务。</p>
<h2 id="微服务架构的特点">微服务架构的特点</h2>
<p>微服务架构的优势非常明显，在近些年迅猛发展。</p>
<ul>
<li>将复杂的业务拆分成多个小的业务，能够达到更好的业务复用，有利于人员组织分工</li>
<li>服务独立部署，独立扩容，每个服务的修改和部署对其他服务没有影响</li>
<li>每个服务可以根据业务场景选取合适的编程语言和数据库</li>
</ul>
<p>微服务有以上的优势，但是微服务也带来不少的新问题，例如：</p>
<ul>
<li>服务数量众多，其测试、部署、监控等都变的更加困难。</li>
<li>单体应用拆分为分布式系统后，进程间的通讯机制和故障处理措施变的更加复杂</li>
<li>系统微服务化后，原先是一个服务内部的本地数据库事务，被拆到了多个服务，需要在分布式环境下保证事务的一致性</li>
</ul>
<p>上述的各项问题中，1、2都可以通过近几年涌现的各项微服务技术解决，例如<code>Kubernetes</code>提供了服务发现、服务治理等。</p>
<p><strong>因此分布式事务已经成为微服务落地最大的阻碍，也是最具挑战性的一个技术难题。</strong></p>
<h3 id="cap-理论">CAP 理论</h3>
<p>一个分布式系统最多只能同时满足 <code>一致性（Consistency）</code>、<code>可用性（Availability）</code>和<code>分区容错性（Partition tolerance）</code>这三项中的两项。</p>
<h2 id="分布式事务方案">分布式事务方案</h2>
<p>分布式事务模式常见的有<code>XA</code>、<code>TCC</code>、<code>SAGA</code>、<code>可靠消息</code>。</p>
<h3 id="两阶段提交xa">两阶段提交<code>XA</code></h3>
<p>​    <code>XA </code>是由<code>X/Open</code>组织提出的分布式事务的规范，<code>XA</code>规范主要定义了（全局）事务管理器（TM）和（局部）资源管理器（RM）之间的接口。本地的数据库如<code>MySQL</code>在<code>XA</code>中扮演的是<code>RM</code>角色。</p>
<p>​    <code>XA</code>一共分为两阶段：</p>
<ul>
<li>
<p>第一阶段（prepare）：即所有的参与者RM准备执行事务并锁住需要的资源。参与者ready时，向TM报告已准备就绪。</p>
</li>
<li>
<p>第二阶段（commit/rollback）：当事务管理者（TM）确认所有参与者（RM）都ready后，向所有参与者发送commit命令。</p>
</li>
</ul>
<p>目前主流的数据库基本都支持<code>XA</code>事务，包括<code>MySQL</code>、<code>Oracle</code>、<code>SQLServer</code>、<code>PostgreSQL</code>。</p>
<p>一个成功完成的<code>XA</code>事务时序图如下：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/202205201524887.jpeg" alt="img"  />
</p>
<h3 id="tcc事务方案"><code>TCC</code>事务方案</h3>
<p>​    <code>TCC</code>方案其实是<code>XA</code>提交的一种改进。其将整个业务逻辑的每个分支显式的分成了<code>Try</code>、<code>Confirm</code>、<code>Cancel</code>三个操作。<code>Try</code>部分完成业务的准备工作，<code>confirm</code>部分完成业务的提交，<code>cancel</code>部分完成事务的回滚。</p>
<p>​    事务开始时，业务应用会向事务协调器注册启动事务。之后业务应用会调用所有服务的<code>try</code>接口，完成一阶段准备。之后事务协调器会根据<code>try</code>接口返回情况，决定调用<code>confirm接口</code>或者<code>cancel接口</code>。如果接口调用失败，会进行重试。</p>
<p>一个成功完成的<code>TCC</code>事务时序图如下：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/202205201829792.jpeg" alt="img"  />
</p>
<h3 id="saga事务方案">SAGA事务方案</h3>
<p>​    <code>Saga</code>和<code>TCC</code>一样，也是最终一致性事务、柔性事务。Saga的本质就是把一个长事务分隔成一个个小的事务，每个事务都包含一个执行模块和补偿模块。</p>
<p>​    <code>Saga</code>没有<code>try</code>，直接提交事务，可能出现脏读的情况，在某些对一致性要求较高的场景下，是不可接受的。</p>
<p>​    在启动一个<code>Saga</code>事务时，事务管理器会告诉第一个<code>Saga</code>参与者，也就是子事务，去执行本地事务。事务完成之后<code>Saga</code>的会按照执行顺序调用<code>Saga</code>的下一个参与的子事务。这个过程会一直持续到<code>Saga</code>事务执行完毕。</p>
<p>如果在执行子事务的过程中遇到子事务对应的本地事务失败，则<code>Saga</code>会按照相反的顺序执行补偿事务。</p>
<p>一个成功完成的SAGA事务时序图如下：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/202205201828396.jpeg" alt="img"  />
</p>
<h3 id="可靠消息">可靠消息</h3>
<p>​    消息一致性方案是通过消息中间件保证上下游应用数据操作的一致性。基本思路是将本地操作和发送消息放在一个本地事务中，保证本地操作和消息发送要么两者都成功或者都失败。下游应用向消息系统订阅该消息，收到消息后执行相应操作。</p>
<p><code>RocketMQ</code> 提供了典型的可靠消息接口，可以参考。</p>
<h3 id="分布式事务开源项目">分布式事务开源项目</h3>
<p>​    当前的分布式事务领域，有<code>java</code>语言的开源项目，以<code>seata</code>为代表。在非Java领域，Go语言的<code> DTM</code> 是代表项目。 <code>DTM </code>支持<code>XA</code>、<code>TCC</code>、<code>SAGA</code>、可靠消息，架构图如下：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/202205201530623.jpeg" alt="img"  />
</p>
<p>图中的各角色与<code>XA</code>模型中的角色模型一致，分别解释如下：</p>
<ul>
<li>AP应用程序（定义和提交事务，当前支持Go语言，即将支持<code>Nodejs</code>、<code>Python</code>、<code>PHP</code>、Rust等）</li>
<li>RM资源管理器（负责管理本地事务，不限语言，只要提供了<code>http</code>相关的接口即可）</li>
<li>TM事务管理器（<code>DTM</code>，协调全局事务，进行提交以及回滚）</li>
</ul>
<p>在上述的架构图中，<code>AP</code>通过<code>DTM</code>提供的分布式事务接口，与<code>RM</code>和<code>TM</code>交互，对现有的微服务，侵入很小。</p>
<p>另外在实际的业务中，AP和RM角色可能会有重叠，例如<code>TCC</code>模式下，AP可能有自己的本地事务，也会注册并调用其他事务分支。</p>]]></content:encoded>
    </item>
  </channel>
</rss>

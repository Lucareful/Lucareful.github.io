<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>算法 on Luenci</title>
    <link>https://luenci.com/en/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法时间复杂度和五大经典排序算法</title>
      <link>https://luenci.com/en/posts/%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E4%BA%94%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E4%BA%94%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;渐进时间度表&#34;&gt;渐进时间度表&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;O&lt;/code&gt;记法所代表的是渐进上界限，&lt;code&gt;Ω&lt;/code&gt;记法代表的是渐进下界&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Θ代表的集合是上述符号的交集，Θ(g) = O(g)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见的渐进运行时间实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;时间复杂度&lt;/th&gt;
          &lt;th&gt;相关名称&lt;/th&gt;
          &lt;th&gt;相关实例及说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ（1）&lt;/td&gt;
          &lt;td&gt;常数级&lt;/td&gt;
          &lt;td&gt;哈希表的查询和修改&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ（lg n）&lt;/td&gt;
          &lt;td&gt;对数级&lt;/td&gt;
          &lt;td&gt;二分搜索，其对数基数并不重要&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ（n）&lt;/td&gt;
          &lt;td&gt;线性级&lt;/td&gt;
          &lt;td&gt;列表的遍历&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ(nlgn)&lt;/td&gt;
          &lt;td&gt;线性对数级&lt;/td&gt;
          &lt;td&gt;任意值序列的最优化排序，其复杂度等同于Θ(lg n!)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ(n^2)&lt;/td&gt;
          &lt;td&gt;平方级&lt;/td&gt;
          &lt;td&gt;拿n个对象进行互相比对&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ(n^3)&lt;/td&gt;
          &lt;td&gt;立方级&lt;/td&gt;
          &lt;td&gt;Floyd-Warshall算法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;O(n^k)&lt;/td&gt;
          &lt;td&gt;多项式级&lt;/td&gt;
          &lt;td&gt;基于n的k层嵌套循环（k为整数），且必须满足K &amp;gt; 0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Ω(K^n)&lt;/td&gt;
          &lt;td&gt;指数级&lt;/td&gt;
          &lt;td&gt;每n项产生一个子集（其中k = 2），且必须满足K &amp;gt; 1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Θ(n!)&lt;/td&gt;
          &lt;td&gt;阶乘级&lt;/td&gt;
          &lt;td&gt;对n个值执行全排列操作&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<h1 id="渐进时间度表">渐进时间度表</h1>
<ul>
<li>
<p><code>O</code>记法所代表的是渐进上界限，<code>Ω</code>记法代表的是渐进下界</p>
</li>
<li>
<p>Θ代表的集合是上述符号的交集，Θ(g) = O(g)</p>
</li>
<li>
<p>常见的渐进运行时间实例</p>
</li>
<li>
<table>
  <thead>
      <tr>
          <th>时间复杂度</th>
          <th>相关名称</th>
          <th>相关实例及说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Θ（1）</td>
          <td>常数级</td>
          <td>哈希表的查询和修改</td>
      </tr>
      <tr>
          <td>Θ（lg n）</td>
          <td>对数级</td>
          <td>二分搜索，其对数基数并不重要</td>
      </tr>
      <tr>
          <td>Θ（n）</td>
          <td>线性级</td>
          <td>列表的遍历</td>
      </tr>
      <tr>
          <td>Θ(nlgn)</td>
          <td>线性对数级</td>
          <td>任意值序列的最优化排序，其复杂度等同于Θ(lg n!)</td>
      </tr>
      <tr>
          <td>Θ(n^2)</td>
          <td>平方级</td>
          <td>拿n个对象进行互相比对</td>
      </tr>
      <tr>
          <td>Θ(n^3)</td>
          <td>立方级</td>
          <td>Floyd-Warshall算法</td>
      </tr>
      <tr>
          <td>O(n^k)</td>
          <td>多项式级</td>
          <td>基于n的k层嵌套循环（k为整数），且必须满足K &gt; 0</td>
      </tr>
      <tr>
          <td>Ω(K^n)</td>
          <td>指数级</td>
          <td>每n项产生一个子集（其中k = 2），且必须满足K &gt; 1</td>
      </tr>
      <tr>
          <td>Θ(n!)</td>
          <td>阶乘级</td>
          <td>对n个值执行全排列操作</td>
      </tr>
  </tbody>
</table>
</li>
</ul>
<h1 id="冒泡排序">冒泡排序</h1>
<ul>
<li>冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 冒泡排序算法的运作如下： 1、比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。 2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 3、针对所有的元素重复以上的步骤，除了最后一个。 4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 &rsquo;''</li>
<li>冒泡排序的时间复杂度为O(n^2)。</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">store</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#39;&#39;&#39;冒泡排序算法实现&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    f<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">while</span> f <span style="color:#ff7b72;font-weight:bold">&lt;</span> len(x):
</span></span><span style="display:flex;"><span>        i<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">0</span>
</span></span><span style="display:flex;"><span>        j<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">while</span> j <span style="color:#ff7b72;font-weight:bold">&lt;</span> len(x):
</span></span><span style="display:flex;"><span>            <span style="color:#ff7b72">if</span> x[i] <span style="color:#ff7b72;font-weight:bold">&lt;=</span> x[j]:
</span></span><span style="display:flex;"><span>                i <span style="color:#ff7b72;font-weight:bold">=</span> i <span style="color:#ff7b72;font-weight:bold">+</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>                j <span style="color:#ff7b72;font-weight:bold">=</span> j <span style="color:#ff7b72;font-weight:bold">+</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff7b72">elif</span> x[i] <span style="color:#ff7b72;font-weight:bold">&gt;</span> x[j]:
</span></span><span style="display:flex;"><span>                var1 <span style="color:#ff7b72;font-weight:bold">=</span> x[i]
</span></span><span style="display:flex;"><span>                var2 <span style="color:#ff7b72;font-weight:bold">=</span> x[j]
</span></span><span style="display:flex;"><span>                x[j] <span style="color:#ff7b72;font-weight:bold">=</span> var1
</span></span><span style="display:flex;"><span>                x[i] <span style="color:#ff7b72;font-weight:bold">=</span> var2
</span></span><span style="display:flex;"><span>                i <span style="color:#ff7b72;font-weight:bold">=</span> i <span style="color:#ff7b72;font-weight:bold">+</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>                j <span style="color:#ff7b72;font-weight:bold">=</span> j <span style="color:#ff7b72;font-weight:bold">+</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>        f <span style="color:#ff7b72;font-weight:bold">=</span> f <span style="color:#ff7b72;font-weight:bold">+</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    test <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">2</span>,<span style="color:#a5d6ff">4</span>,<span style="color:#a5d6ff">6</span>,<span style="color:#a5d6ff">5</span>,<span style="color:#a5d6ff">9</span>,<span style="color:#a5d6ff">7</span>,<span style="color:#a5d6ff">12</span>,<span style="color:#a5d6ff">15</span>,<span style="color:#a5d6ff">13</span>,<span style="color:#a5d6ff">19</span>,<span style="color:#a5d6ff">20</span>,<span style="color:#a5d6ff">1</span>,<span style="color:#a5d6ff">3</span>]
</span></span><span style="display:flex;"><span>    print(store(test))
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="归并排序">归并排序</h1>
<ul>
<li>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表， 即把待排序序列分为若干个子序列，每个子序列是有序的。 然后再把有序子序列合并为整体有序序列。</li>
<li>空间复杂度为O(n)，时间复杂度为O(nlogn)。</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">merge_extend</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#39;&#39;&#39;归并排序算法&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 拆分列表</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">if</span> len(x) <span style="color:#ff7b72;font-weight:bold">&lt;=</span> <span style="color:#a5d6ff">1</span>:
</span></span><span style="display:flex;"><span>         <span style="color:#8b949e;font-style:italic"># 向下取整数</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">return</span> x
</span></span><span style="display:flex;"><span>    mid <span style="color:#ff7b72;font-weight:bold">=</span> len(x)<span style="color:#ff7b72;font-weight:bold">//</span><span style="color:#a5d6ff">2</span>
</span></span><span style="display:flex;"><span>    left <span style="color:#ff7b72;font-weight:bold">=</span> merge_extend(x[:mid])
</span></span><span style="display:flex;"><span>    right <span style="color:#ff7b72;font-weight:bold">=</span> merge_extend(x[mid:])
</span></span><span style="display:flex;"><span>    print(left,right)
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> merge_add(left, right)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">merge_add</span>(a, b):
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#39;&#39;&#39;和并列表&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#ff7b72;font-weight:bold">=</span> []
</span></span><span style="display:flex;"><span>    i <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">0</span>
</span></span><span style="display:flex;"><span>    j <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#a5d6ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">while</span> i <span style="color:#ff7b72;font-weight:bold">&lt;</span> len(a) <span style="color:#ff7b72;font-weight:bold">and</span> j <span style="color:#ff7b72;font-weight:bold">&lt;</span> len(b):
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">if</span> a[i] <span style="color:#ff7b72;font-weight:bold">&lt;</span> b[j]:
</span></span><span style="display:flex;"><span>            result<span style="color:#ff7b72;font-weight:bold">.</span>append(a[i])
</span></span><span style="display:flex;"><span>            i <span style="color:#ff7b72;font-weight:bold">+=</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">else</span>:
</span></span><span style="display:flex;"><span>            result<span style="color:#ff7b72;font-weight:bold">.</span>append(b[j])
</span></span><span style="display:flex;"><span>            j <span style="color:#ff7b72;font-weight:bold">+=</span> <span style="color:#a5d6ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic">#print(&#34;a&#34;,a[i:])</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic">#print(&#34;b&#34;,b[j:])</span>
</span></span><span style="display:flex;"><span>    result<span style="color:#ff7b72;font-weight:bold">.</span>extend(a[i:])
</span></span><span style="display:flex;"><span>    result<span style="color:#ff7b72;font-weight:bold">.</span>extend(b[j:])
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    test<span style="color:#ff7b72;font-weight:bold">=</span>[<span style="color:#a5d6ff">11</span>,<span style="color:#a5d6ff">0</span>,<span style="color:#a5d6ff">5</span>,<span style="color:#a5d6ff">7</span>,<span style="color:#a5d6ff">3</span>,<span style="color:#a5d6ff">6</span>,<span style="color:#a5d6ff">8</span>,<span style="color:#a5d6ff">1</span>,<span style="color:#a5d6ff">2</span>]
</span></span><span style="display:flex;"><span>    print(merge_extend(test))
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="插入排序">插入排序</h1>
<ul>
<li>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列， 对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。 插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>
<li>简单插入排序的时间复杂度也是O(n^2)</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">insert_sort</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 取列表的第一个元素为单独的一个，已经排好序的列表</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">in</span> range(<span style="color:#a5d6ff">1</span>, len(x)):
</span></span><span style="display:flex;"><span>        <span style="color:#8b949e;font-style:italic"># 要排序的的牌</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">for</span> j <span style="color:#ff7b72;font-weight:bold">in</span> range(<span style="color:#a5d6ff">0</span>, i):
</span></span><span style="display:flex;"><span>            <span style="color:#ff7b72">if</span> x[i] <span style="color:#ff7b72;font-weight:bold">&lt;</span> x[j]:
</span></span><span style="display:flex;"><span>                x[i], x[j] <span style="color:#ff7b72;font-weight:bold">=</span> x[j], x[i]
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__<span style="color:#ff7b72;font-weight:bold">==</span><span style="color:#a5d6ff">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    test <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">2</span>,<span style="color:#a5d6ff">3</span>,<span style="color:#a5d6ff">5</span>,<span style="color:#a5d6ff">7</span>,<span style="color:#a5d6ff">9</span>,<span style="color:#a5d6ff">1</span>,<span style="color:#a5d6ff">20</span>,<span style="color:#a5d6ff">0</span>,<span style="color:#a5d6ff">4</span>,<span style="color:#a5d6ff">12</span>,<span style="color:#a5d6ff">19</span>,<span style="color:#a5d6ff">11</span>,<span style="color:#a5d6ff">8</span>,<span style="color:#a5d6ff">1</span>]
</span></span><span style="display:flex;"><span>    print(insert_sort(test))
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="选择排序">选择排序</h1>
<ul>
<li>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置， 然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 以此类推，直到所有元素均排序完毕。 选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。 选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上， 因此对n个元素的表进行排序总共进行至多n-1次交换。 在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</li>
<li>选择排序的时间复杂度为O(n^2)</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">select_sort</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#39;&#39;&#39;选择排序&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    new <span style="color:#ff7b72;font-weight:bold">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">while</span> x:
</span></span><span style="display:flex;"><span>        new<span style="color:#ff7b72;font-weight:bold">.</span>append(min(x))
</span></span><span style="display:flex;"><span>        x<span style="color:#ff7b72;font-weight:bold">.</span>remove(min(x))
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> new
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__<span style="color:#ff7b72;font-weight:bold">==</span><span style="color:#a5d6ff">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    test <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">2</span>,<span style="color:#a5d6ff">3</span>,<span style="color:#a5d6ff">5</span>,<span style="color:#a5d6ff">7</span>,<span style="color:#a5d6ff">9</span>,<span style="color:#a5d6ff">1</span>,<span style="color:#a5d6ff">20</span>,<span style="color:#a5d6ff">0</span>,<span style="color:#a5d6ff">4</span>,<span style="color:#a5d6ff">12</span>,<span style="color:#a5d6ff">19</span>,<span style="color:#a5d6ff">11</span>,<span style="color:#a5d6ff">8</span>,<span style="color:#a5d6ff">1</span>]
</span></span><span style="display:flex;"><span>    print(select_sort(test))
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="快速排序">快速排序</h1>
<ul>
<li>1.先从待排序的数组中找出一个数作为基准数（取第一个数即可）， 2.然后将原来的数组划分成两部分：小于基准数的左子数组和大于等于基准数的右子数组。 3.然后对这两个子数组再递归重复上述过程，直到两个子数组的所有数都分别有序。 4.最后返回“左子数组” + “基准数” + “右子数组”，即是最终排序好的数组。</li>
<li>快速排序是不稳定的，其时间平均时间复杂度是O(nlgn)</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff7b72">def</span> <span style="color:#d2a8ff;font-weight:bold">quick_sort</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#39;&#39;&#39;快速排序&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">if</span> len(x) <span style="color:#ff7b72;font-weight:bold">&lt;=</span> <span style="color:#a5d6ff">1</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">return</span> x
</span></span><span style="display:flex;"><span>    base <span style="color:#ff7b72;font-weight:bold">=</span> x[<span style="color:#a5d6ff">0</span>]
</span></span><span style="display:flex;"><span>    left <span style="color:#ff7b72;font-weight:bold">=</span> []
</span></span><span style="display:flex;"><span>    right <span style="color:#ff7b72;font-weight:bold">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> var <span style="color:#ff7b72;font-weight:bold">in</span> x:
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">if</span> var <span style="color:#ff7b72;font-weight:bold">&gt;</span> base:
</span></span><span style="display:flex;"><span>            right<span style="color:#ff7b72;font-weight:bold">.</span>append(var)
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">elif</span> var <span style="color:#ff7b72;font-weight:bold">&lt;</span> base:
</span></span><span style="display:flex;"><span>            left<span style="color:#ff7b72;font-weight:bold">.</span>append(var)
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> quick_sort(left) <span style="color:#ff7b72;font-weight:bold">+</span> [base] <span style="color:#ff7b72;font-weight:bold">+</span> quick_sort(right)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">if</span> __name__ <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#8b949e;font-style:italic"># 存在重复值被覆盖</span>
</span></span><span style="display:flex;"><span>    test <span style="color:#ff7b72;font-weight:bold">=</span> [<span style="color:#a5d6ff">2</span>,<span style="color:#a5d6ff">6</span>,<span style="color:#a5d6ff">7</span>,<span style="color:#a5d6ff">8</span>,<span style="color:#a5d6ff">12</span>,<span style="color:#a5d6ff">56</span>,<span style="color:#a5d6ff">36</span>,<span style="color:#a5d6ff">89</span>,<span style="color:#a5d6ff">45</span>,<span style="color:#a5d6ff">3</span>]
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>性能优化 on Luenci</title>
    <link>https://luenci.com/en/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 性能优化 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luenci.com/en/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅析 GO 中的内存对齐</title>
      <link>https://luenci.com/en/posts/%E6%B5%85%E6%9E%90-go-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E6%B5%85%E6%9E%90-go-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
      <description>&lt;h1 id=&#34;浅析-go-中的内存对齐&#34;&gt;浅析 GO 中的内存对齐&lt;/h1&gt;
&lt;h2 id=&#34;前置概念&#34;&gt;前置概念&lt;/h2&gt;
&lt;h3 id=&#34;位bit&#34;&gt;位（bit）&lt;/h3&gt;
&lt;p&gt;​	所谓位，是最基本的概念，在计算机中，由于只有逻辑0和逻辑1的存在，因此很多东西、动作、数字都要表示为一串二进制的字码。例如： 1001 0000 1101等等。其中每一个逻辑0或者1便是一个位。例如这个例子里的&lt;code&gt;1000 1110&lt;/code&gt;共有八个位，它的英文名字叫（bit），是&lt;strong&gt;计算机中最基本的单位&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;字节byte&#34;&gt;字节(Byte)&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;由八个位(bit)组成的一个单元&lt;/strong&gt;，也就是8个bit组成1个Byte。在计算机科学中，&lt;strong&gt;用于表示ASCII字符&lt;/strong&gt;，便是运用字节来记录表示字母和一些符号，例如字符A便用 “0100 0001”来表示。&lt;/p&gt;
&lt;h3 id=&#34;字word&#34;&gt;字（word）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;表示被处理信息的单位，用来度量数据类型的宽度&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​	在计算机体系结构中，&amp;ldquo;字&amp;quot;是处理器可以在单个操作中处理的数据单元 - 通常是内存中可寻址的最小单位。它是固定大小的比特（二进制数字）组。处理器的字长决定了它处理数据的效率。常见的字长包括 8、16、32 和 64 比特。一些计算机处理器体系结构支持半字，即一个字中的一半比特数，以及双字，即两个相邻字。&lt;/p&gt;
&lt;p&gt;​	现在最常见的架构是 32 位和 64 位。如果你有 32 位处理器，那意味着它可以一次访问 4 个字节，也就是字长为 4 个字节。如果你有 64 位处理器，那意味着它可以一次访问 8 个字节，也就是字长为 8 个字节。&lt;/p&gt;
&lt;p&gt;​	将数据存储在内存中时，每个 32 位数据字都有一个唯一地址，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111819119.jpg&#34; alt=&#34;memory&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Figure. 1 - 可寻址内存&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;​	我们可以使用加载字（lw）指令读取存储在内存中的数据并将其加载到一个寄存器中。&lt;/p&gt;
&lt;p&gt;​	字的位数并不是确定值，如 x86 机器将字定义为16位(汇编语言课程中)，也就是两个字节，在32位arm机器中，字定义为32位(嵌入式课程中)。&lt;/p&gt;
&lt;p&gt;​	指令字长：字节的整数倍，指一个指令字中包含的二进制代码位数。&lt;/p&gt;
&lt;p&gt;​	存储字长：字节的整数倍，一个存储单元存储的二进制代码的长度。&lt;/p&gt;
&lt;p&gt;字是单位，随系统而变，字长是同一时间处理二进制的长度。&lt;/p&gt;
&lt;h3 id=&#34;字符与字节对应关系&#34;&gt;字符与字节对应关系&lt;/h3&gt;
&lt;p&gt;​	常见的编码字符与字节的对应关系如下：&lt;/p&gt;
&lt;p&gt;① ASCII 码中，一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数，换算为十进制。最小值0，最大值255。&lt;/p&gt;
&lt;p&gt;② UTF-8 编码中，一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。&lt;/p&gt;
&lt;p&gt;③ Unicode 编码中，一个英文等于两个字节，一个中文（含繁体）等于两个字节。
符号：英文标点占一个字节，中文标点占两个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。&lt;/p&gt;
&lt;p&gt;④ GBK 编码方式是中文占两个字节，英文占1个字节。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="浅析-go-中的内存对齐">浅析 GO 中的内存对齐</h1>
<h2 id="前置概念">前置概念</h2>
<h3 id="位bit">位（bit）</h3>
<p>​	所谓位，是最基本的概念，在计算机中，由于只有逻辑0和逻辑1的存在，因此很多东西、动作、数字都要表示为一串二进制的字码。例如： 1001 0000 1101等等。其中每一个逻辑0或者1便是一个位。例如这个例子里的<code>1000 1110</code>共有八个位，它的英文名字叫（bit），是<strong>计算机中最基本的单位</strong>。</p>
<h3 id="字节byte">字节(Byte)</h3>
<p>​	<strong>由八个位(bit)组成的一个单元</strong>，也就是8个bit组成1个Byte。在计算机科学中，<strong>用于表示ASCII字符</strong>，便是运用字节来记录表示字母和一些符号，例如字符A便用 “0100 0001”来表示。</p>
<h3 id="字word">字（word）</h3>
<blockquote>
<p><strong>表示被处理信息的单位，用来度量数据类型的宽度</strong>。</p></blockquote>
<p>​	在计算机体系结构中，&ldquo;字&quot;是处理器可以在单个操作中处理的数据单元 - 通常是内存中可寻址的最小单位。它是固定大小的比特（二进制数字）组。处理器的字长决定了它处理数据的效率。常见的字长包括 8、16、32 和 64 比特。一些计算机处理器体系结构支持半字，即一个字中的一半比特数，以及双字，即两个相邻字。</p>
<p>​	现在最常见的架构是 32 位和 64 位。如果你有 32 位处理器，那意味着它可以一次访问 4 个字节，也就是字长为 4 个字节。如果你有 64 位处理器，那意味着它可以一次访问 8 个字节，也就是字长为 8 个字节。</p>
<p>​	将数据存储在内存中时，每个 32 位数据字都有一个唯一地址，如下所示。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111819119.jpg" alt="memory"  />
</p>
<blockquote>
<p><em>Figure. 1 - 可寻址内存</em></p></blockquote>
<p>​	我们可以使用加载字（lw）指令读取存储在内存中的数据并将其加载到一个寄存器中。</p>
<p>​	字的位数并不是确定值，如 x86 机器将字定义为16位(汇编语言课程中)，也就是两个字节，在32位arm机器中，字定义为32位(嵌入式课程中)。</p>
<p>​	指令字长：字节的整数倍，指一个指令字中包含的二进制代码位数。</p>
<p>​	存储字长：字节的整数倍，一个存储单元存储的二进制代码的长度。</p>
<p>字是单位，随系统而变，字长是同一时间处理二进制的长度。</p>
<h3 id="字符与字节对应关系">字符与字节对应关系</h3>
<p>​	常见的编码字符与字节的对应关系如下：</p>
<p>① ASCII 码中，一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数，换算为十进制。最小值0，最大值255。</p>
<p>② UTF-8 编码中，一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。</p>
<p>③ Unicode 编码中，一个英文等于两个字节，一个中文（含繁体）等于两个字节。
符号：英文标点占一个字节，中文标点占两个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。</p>
<p>④ GBK 编码方式是中文占两个字节，英文占1个字节。</p>
<h2 id="struct-内存对齐">struct 内存对齐</h2>
<blockquote>
<p><strong>结构体是一种用户定义的数据类型，它将不同类型的相关变量组合在一个名称下。</strong></p></blockquote>
<p>​	Go 使用一种称为“结构填充”的技术，以确保数据在内存中适当对齐，这可能会受到硬件和架构限制的影响，从而显著影响性能。数据填充和对齐符合系统架构的要求，主要是通过确保数据边界与字长对齐来优化 CPU 访问时间。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Employee <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>  IsAdmin  <span style="color:#ff7b72">bool</span>
</span></span><span style="display:flex;"><span>  Id       <span style="color:#ff7b72">int64</span>
</span></span><span style="display:flex;"><span>  Age      <span style="color:#ff7b72">int32</span>
</span></span><span style="display:flex;"><span>  Salary   <span style="color:#ff7b72">float32</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	一个布尔型变量占用 1 字节， <code>int64</code> 占用 8 字节， <code>int32</code> 占用 4 字节， <code>float32</code> 占用 4 字节，总共为 17 字节。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;unsafe&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Employee <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    IsAdmin <span style="color:#ff7b72">bool</span>
</span></span><span style="display:flex;"><span>    Id      <span style="color:#ff7b72">int64</span>
</span></span><span style="display:flex;"><span>    Age     <span style="color:#ff7b72">int32</span>
</span></span><span style="display:flex;"><span>    Salary  <span style="color:#ff7b72">float32</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">var</span> emp Employee
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    fmt.<span style="color:#d2a8ff;font-weight:bold">Printf</span>(<span style="color:#a5d6ff">&#34;Size of Employee: %d\n&#34;</span>, unsafe.<span style="color:#d2a8ff;font-weight:bold">Sizeof</span>(emp))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Size of Employee: 24</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>报告的大小是 24 字节，而不是 17 字节。这种差异是由内存对齐引起的。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111822307.jpg" alt="dc2"  />
</p>
<blockquote>
<p>图 未优化的内存布局</p></blockquote>
<p>​	Employee 结构将使用 8*3 = 24 字节。现在看到问题了， <code>Employee</code> 的布局中有很多空洞（对齐规则产生的间隙称为“填充”）。</p>
<h2 id="填充优化和性能影响">填充优化和性能影响</h2>
<p>​	理解内存对齐和填充如何影响应用程序性能至关重要。具体来说，数据对齐会影响访问结构体中字段所需的 CPU 周期数。这种影响主要来自 CPU 缓存效应，而不是原始时钟周期本身，因为缓存行为在很大程度上取决于数据局部性和内存块内的对齐。
​	现代 CPU 将数据从内存提取到一个更快的中间存储器中，称为缓存，它以固定大小的块（通常为 64 字节）组织。当数据对齐良好且位于相同或更少的缓存行中时，CPU 可以更快地访问数据，因为减少了缓存加载操作。</p>
<p>考虑以下 Go 结构以示出较差与最佳对齐：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Poorly aligned struct</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Misaligned <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    Age        <span style="color:#ff7b72">uint8</span>  <span style="color:#8b949e;font-style:italic">// Uses 1 byte, followed by 7 bytes of padding to align the next field</span>
</span></span><span style="display:flex;"><span>    PassportId <span style="color:#ff7b72">uint64</span> <span style="color:#8b949e;font-style:italic">// 8-byte aligned uint64 for the passport ID</span>
</span></span><span style="display:flex;"><span>    Children   <span style="color:#ff7b72">uint16</span> <span style="color:#8b949e;font-style:italic">//2-byte aligned uint16</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Well-aligned struct</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Aligned <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    Age        <span style="color:#ff7b72">uint8</span>  <span style="color:#8b949e;font-style:italic">// Starting with 1 byte</span>
</span></span><span style="display:flex;"><span>    Children   <span style="color:#ff7b72">uint16</span> <span style="color:#8b949e;font-style:italic">// Next, 2 bytes; all these combine into a 3-byte sequence</span>
</span></span><span style="display:flex;"><span>    PassportId <span style="color:#ff7b72">uint64</span> <span style="color:#8b949e;font-style:italic">// Finally, an 8-byte aligned uint64 without needing additional padding</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="对齐方式如何影响性能">对齐方式如何影响性能</h3>
<p>​	CPU 以字长而非字节大小读取数据。在 64 位系统中，一个字是 8 字节，而在 32 位系统中，一个字是 4 字节。简而言之，CPU 以其字大小的倍数来读取地址。为了获取变量 passportId，我们的 CPU 需要两个周期来访问数据，而不是一个。第一个周期将提取内存 0 到 7，随后的周期将提取其余部分。这是低效的- 我们需要数据结构对齐。通过简单地对齐数据，计算机确保 <code>var passportId</code> 可以在一个 CPU 周期内检索到。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111825038.jpg" alt="duiqi"  />
</p>
<blockquote>
<p><em>比较内存访问效率</em></p></blockquote>
<p>​	填充是实现数据对齐的关键。填充发生是因为现代 CPU 被优化为从对齐地址的内存中读取数据。这种对齐使 CPU 能够在一次操作中读取数据。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111826953.jpg" alt="di1"  />
</p>
<p>​	没有填充，数据可能不对齐，导致多次内存访问和性能较慢。因此，虽然填充可能会浪费一些内存，但它确保您的程序运行高效。</p>
<h3 id="填充优化策略">填充优化策略</h3>
<p>​	对齐的结构消耗更少的内存，仅因为它具备比未对齐更好的结构字段顺序。由于填充，两个 13 字节的数据结构分别变成了 16 字节和 24 字节。因此，通过简单地重新排列您的结构字段，可以节省额外的内存。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111828383.jpg" alt="d12"  />
</p>
<blockquote>
<p>优化字段顺序</p></blockquote>
<p>​	不正确对齐的数据可能会拖慢性能，因为 CPU 可能需要多个周期来访问未对齐的字段。相反，正确对齐的数据可减少缓存行的加载，这对性能至关重要，特别是在内存速度成为瓶颈的系统中。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">33
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">34
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">35
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">36
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">37
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">38
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">39
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">40
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">41
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">42
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">43
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">44
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">45
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">46
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">47
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">48
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">49
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">50
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">51
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">52
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">53
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">54
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">55
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">56
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">57
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">58
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">59
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">60
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">61
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">62
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">63
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">64
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">65
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">66
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">67
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">68
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">69
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">70
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">71
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">72
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">73
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">74
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">75
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">76
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">77
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">78
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">79
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">80
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Poorly aligned struct</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Misaligned <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    Age        <span style="color:#ff7b72">uint8</span>  <span style="color:#8b949e;font-style:italic">// Uses 1 byte, followed by 7 bytes of padding to align the next field</span>
</span></span><span style="display:flex;"><span>    PassportId <span style="color:#ff7b72">uint64</span> <span style="color:#8b949e;font-style:italic">// 8-byte aligned uint64 for the passport ID</span>
</span></span><span style="display:flex;"><span>    Children   <span style="color:#ff7b72">uint16</span> <span style="color:#8b949e;font-style:italic">//2-byte aligned uint16</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// Well-aligned struct</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> Aligned <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    Age        <span style="color:#ff7b72">uint8</span>  <span style="color:#8b949e;font-style:italic">// Starting with 1 byte</span>
</span></span><span style="display:flex;"><span>    Children   <span style="color:#ff7b72">uint16</span> <span style="color:#8b949e;font-style:italic">// Next, 2 bytes; all these combine into a 3-byte sequence</span>
</span></span><span style="display:flex;"><span>    PassportId <span style="color:#ff7b72">uint64</span> <span style="color:#8b949e;font-style:italic">// Finally, an 8-byte aligned uint64 without needing additional padding</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">var</span> AlignedArr []Aligned
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">var</span> MisalignedArr []Misaligned
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">init</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">const</span> sampleSize = <span style="color:#a5d6ff">1000</span>
</span></span><span style="display:flex;"><span>	AlignedArr = make([]Aligned, sampleSize)
</span></span><span style="display:flex;"><span>	MisalignedArr = make([]Misaligned, sampleSize)
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#a5d6ff">0</span>; i &lt; sampleSize; i<span style="color:#ff7b72;font-weight:bold">++</span> {
</span></span><span style="display:flex;"><span>		AlignedArr[i] = Aligned{Age: uint8(i <span style="color:#ff7b72;font-weight:bold">%</span> <span style="color:#a5d6ff">256</span>), PassportId: uint64(i), Children: uint16(i)}
</span></span><span style="display:flex;"><span>		MisalignedArr[i] = Misaligned{
</span></span><span style="display:flex;"><span>			Age:        uint8(i <span style="color:#ff7b72;font-weight:bold">%</span> <span style="color:#a5d6ff">256</span>),
</span></span><span style="display:flex;"><span>			PassportId: uint64(i),
</span></span><span style="display:flex;"><span>			Children:   uint16(i),
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">traverseAligned</span>() <span style="color:#ff7b72">uint16</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">var</span> arbitraryNum <span style="color:#ff7b72">uint16</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> _, item <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72">range</span> AlignedArr {
</span></span><span style="display:flex;"><span>        arbitraryNum <span style="color:#ff7b72;font-weight:bold">+=</span> item.Siblings
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> arbitraryNum
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">traverseMisaligned</span>() <span style="color:#ff7b72">uint16</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">var</span> arbitraryNum <span style="color:#ff7b72">uint16</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> _, item <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#ff7b72">range</span> MisalignedArr {
</span></span><span style="display:flex;"><span>        arbitraryNum <span style="color:#ff7b72;font-weight:bold">+=</span> item.Children
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> arbitraryNum
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">BenchmarkTraverseAligned</span>(b <span style="color:#ff7b72;font-weight:bold">*</span>testing.B) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> n <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#a5d6ff">0</span>; n &lt; b.N; n<span style="color:#ff7b72;font-weight:bold">++</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#d2a8ff;font-weight:bold">traverseAligned</span>()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">BenchmarkTraverseMisaligned</span>(b <span style="color:#ff7b72;font-weight:bold">*</span>testing.B) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">for</span> n <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#a5d6ff">0</span>; n &lt; b.N; n<span style="color:#ff7b72;font-weight:bold">++</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#d2a8ff;font-weight:bold">traverseMisaligned</span>()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>   
</span></span><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 插个眼： 需要禁止编译器优化，否则效果不是很明显</span>
</span></span><span style="display:flex;"><span><span style="color:#f85149">$</span> <span style="color:#ff7b72">go</span> test <span style="color:#ff7b72;font-weight:bold">-</span>gcflags=<span style="color:#a5d6ff">&#34;-m -l&#34;</span> <span style="color:#ff7b72;font-weight:bold">-</span>v <span style="color:#ff7b72;font-weight:bold">-</span>bench=BenchmarkTraverseMisaligned <span style="color:#ff7b72;font-weight:bold">-</span>count <span style="color:#a5d6ff">3</span>
</span></span><span style="display:flex;"><span>goos: windows
</span></span><span style="display:flex;"><span>goarch: amd64
</span></span><span style="display:flex;"><span>pkg: xxx
</span></span><span style="display:flex;"><span>cpu: <span style="color:#a5d6ff">12</span>th Gen <span style="color:#d2a8ff;font-weight:bold">Intel</span>(R) <span style="color:#d2a8ff;font-weight:bold">Core</span>(TM) i5<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">1240</span>P
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">16</span>           <span style="color:#a5d6ff">3843603</span>               <span style="color:#a5d6ff">322.5</span> ns<span style="color:#ff7b72;font-weight:bold">/</span>op
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">16</span>           <span style="color:#a5d6ff">3888368</span>               <span style="color:#a5d6ff">318.4</span> ns<span style="color:#ff7b72;font-weight:bold">/</span>op
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">16</span>           <span style="color:#a5d6ff">3600476</span>               <span style="color:#a5d6ff">313.6</span> ns<span style="color:#ff7b72;font-weight:bold">/</span>op
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f85149">$</span> <span style="color:#ff7b72">go</span> test <span style="color:#ff7b72;font-weight:bold">-</span>gcflags=<span style="color:#a5d6ff">&#34;-m -l&#34;</span> <span style="color:#ff7b72;font-weight:bold">-</span>v <span style="color:#ff7b72;font-weight:bold">-</span>bench=BenchmarkTraverseMisaligned <span style="color:#ff7b72;font-weight:bold">-</span>count <span style="color:#a5d6ff">3</span>
</span></span><span style="display:flex;"><span>goos: windows
</span></span><span style="display:flex;"><span>goarch: amd64
</span></span><span style="display:flex;"><span>pkg: xxx
</span></span><span style="display:flex;"><span>cpu: <span style="color:#a5d6ff">12</span>th Gen <span style="color:#d2a8ff;font-weight:bold">Intel</span>(R) <span style="color:#d2a8ff;font-weight:bold">Core</span>(TM) i5<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">1240</span>P
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">16</span>           <span style="color:#a5d6ff">3843603</span>               <span style="color:#a5d6ff">322.5</span> ns<span style="color:#ff7b72;font-weight:bold">/</span>op
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">16</span>           <span style="color:#a5d6ff">3888368</span>               <span style="color:#a5d6ff">318.4</span> ns<span style="color:#ff7b72;font-weight:bold">/</span>op
</span></span><span style="display:flex;"><span>BenchmarkTraverseMisaligned<span style="color:#ff7b72;font-weight:bold">-</span><span style="color:#a5d6ff">16</span>           <span style="color:#a5d6ff">3600476</span>               <span style="color:#a5d6ff">313.6</span> ns<span style="color:#ff7b72;font-weight:bold">/</span>op    
</span></span></code></pre></td></tr></table>
</div>
</div><p>​	填充是为了确保每个结构字段根据其需要正确对齐在内存中，就像我们之前看到的那样。但是，虽然它可以实现高效访问，但如果字段顺序不合适，填充也可能会浪费空间。</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">32
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a5d6ff">&#34;unsafe&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> PoorlyAlignedPerson <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    Active   <span style="color:#ff7b72">bool</span>
</span></span><span style="display:flex;"><span>    Salary   <span style="color:#ff7b72">float64</span>
</span></span><span style="display:flex;"><span>    Age      <span style="color:#ff7b72">int32</span>
</span></span><span style="display:flex;"><span>    Nickname <span style="color:#ff7b72">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">type</span> WellAlignedPerson <span style="color:#ff7b72">struct</span> {
</span></span><span style="display:flex;"><span>    Salary   <span style="color:#ff7b72">float64</span>
</span></span><span style="display:flex;"><span>    Nickname <span style="color:#ff7b72">string</span>
</span></span><span style="display:flex;"><span>    Age      <span style="color:#ff7b72">int32</span>
</span></span><span style="display:flex;"><span>    Active   <span style="color:#ff7b72">bool</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">main</span>() {
</span></span><span style="display:flex;"><span>    poorlyAligned <span style="color:#ff7b72;font-weight:bold">:=</span> PoorlyAlignedPerson{}
</span></span><span style="display:flex;"><span>    wellAligned <span style="color:#ff7b72;font-weight:bold">:=</span> WellAlignedPerson{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    fmt.<span style="color:#d2a8ff;font-weight:bold">Printf</span>(<span style="color:#a5d6ff">&#34;Size of PoorlyAlignedPerson: %d bytes\n&#34;</span>, unsafe.<span style="color:#d2a8ff;font-weight:bold">Sizeof</span>(poorlyAligned))
</span></span><span style="display:flex;"><span>    fmt.<span style="color:#d2a8ff;font-weight:bold">Printf</span>(<span style="color:#a5d6ff">&#34;Size of WellAlignedPerson: %d bytes\n&#34;</span>, unsafe.<span style="color:#d2a8ff;font-weight:bold">Sizeof</span>(wellAligned))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Output<span style="color:#f85149">：</span>
</span></span><span style="display:flex;"><span>Size of PoorlyAlignedPerson: <span style="color:#a5d6ff">40</span> bytes
</span></span><span style="display:flex;"><span>Size of WellAlignedPerson: <span style="color:#a5d6ff">32</span> bytes
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment">https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment</a> 一个自动内存对齐的工具</p></blockquote>
<h1 id="参考文章">参考文章</h1>
<ul>
<li><a href="https://dev.to/yanev/optimizing-memory-usage-in-go-mastering-data-structure-alignment-4beb">Optimizing Memory Usage in Go: Mastering Data Structure Alignment - DEV Community</a></li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Golang pprof 性能分析指南</title>
      <link>https://luenci.com/en/posts/golang-pprof-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/golang-pprof-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;golang-pprof-性能分析指南&#34;&gt;Golang pprof 性能分析指南&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;pprof 是一个用于可视化和分析分析数据的工具。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;采样方式&#34;&gt;采样方式&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方式名称&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;如何使用&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;优点&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;缺点&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;使用场景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;runtime/pprof&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;手动调用【runtime.StartCPUProfile、runtime.SweightCPUProfile】等&lt;strong&gt;API&lt;/strong&gt;来进行数据的采集。采集程序（非 Server）的指定区块的运行数据进行分析。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;灵活性高&lt;/strong&gt;、按需采集。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;工具型应用&lt;/strong&gt;（比如说定制化的分析小工具、集成到公司监控系统）。这种应用运行一段时间就结束。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;net/http/pprof&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;通过&lt;strong&gt;http&lt;/strong&gt;服务来获取Profile采样文件。 &lt;code&gt;import _ &amp;quot;net/http/pprof&amp;quot;&lt;/code&gt;。基于 HTTP Server 运行，并且可以采集运行时数据进行分析。&lt;code&gt;net/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;简单易用&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;在线服务（一直运行着的程序）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;go test&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;通过命令&lt;code&gt;go test -bench . -cpuprofile cpu.prof&lt;/code&gt;来进行采集数据。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;针对性强&lt;/strong&gt;、细化到函数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;进行某函数的性能测试&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;指标解释&#34;&gt;指标解释&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151739088.png&#34; alt=&#34;350959005-c2182bee-333f-4ec3-94cb-7a36440bb105&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;常用指标如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allocs：所有时刻的内存使用情况，包括正在使用的及已经回收的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;block：导致在同步原语上发生阻塞的堆栈跟踪&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmdline： 当前程序的命令行的完整调用路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;goroutine：目前的 goroutine 数量及运行情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;heap：当前时刻的内存使用情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mutex：查看导致互斥锁的竞争持有者的堆栈跟踪&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;profile：默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;threadcreate：查看创建新 OS 线程的堆栈跟踪。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;trance：当前程序执行的追踪，可以在秒数的 GET 参数中指定持续时间。在获取追踪文件后，请使用 go 工具的 trace 命令来调查追踪。（&lt;a href=&#34;https://mp.weixin.qq.com/s/I9xSMxy32cALSNQAN8wlnQ&#34;&gt;深入浅出 Go trace (qq.com)&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，默认情况下是不追踪block和mutex的信息的，如果想要看这两个信息，需要在代码中加上两行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runtime.&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;SetBlockProfileRate&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 开启对阻塞操作的跟踪，block  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runtime.&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;SetMutexProfileFraction&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 开启对锁调用的跟踪，mutex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;注意，上文的所有信息都是实时的，如果你刷新一下，是可以看到数字在变化的。此时如果点击蓝色的连接，可以看到一些协程的栈信息，这些信息并不容易阅读。如果想要更加清晰的数据，需要将信息保存下来，在本地进行分析。
&lt;/code&gt;&lt;/pre&gt;</description>
      <content:encoded><![CDATA[<h1 id="golang-pprof-性能分析指南">Golang pprof 性能分析指南</h1>
<blockquote>
<p>pprof 是一个用于可视化和分析分析数据的工具。</p></blockquote>
<h2 id="采样方式">采样方式</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">方式名称</th>
          <th style="text-align: left">如何使用</th>
          <th style="text-align: left">优点</th>
          <th style="text-align: left">缺点</th>
          <th style="text-align: left">使用场景</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">runtime/pprof</td>
          <td style="text-align: left">手动调用【runtime.StartCPUProfile、runtime.SweightCPUProfile】等<strong>API</strong>来进行数据的采集。采集程序（非 Server）的指定区块的运行数据进行分析。</td>
          <td style="text-align: left"><strong>灵活性高</strong>、按需采集。</td>
          <td style="text-align: left"></td>
          <td style="text-align: left"><strong>工具型应用</strong>（比如说定制化的分析小工具、集成到公司监控系统）。这种应用运行一段时间就结束。</td>
      </tr>
      <tr>
          <td style="text-align: left">net/http/pprof</td>
          <td style="text-align: left">通过<strong>http</strong>服务来获取Profile采样文件。 <code>import _ &quot;net/http/pprof&quot;</code>。基于 HTTP Server 运行，并且可以采集运行时数据进行分析。<code>net/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来</code></td>
          <td style="text-align: left"><strong>简单易用</strong></td>
          <td style="text-align: left"></td>
          <td style="text-align: left">在线服务（一直运行着的程序）</td>
      </tr>
      <tr>
          <td style="text-align: left">go test</td>
          <td style="text-align: left">通过命令<code>go test -bench . -cpuprofile cpu.prof</code>来进行采集数据。</td>
          <td style="text-align: left"><strong>针对性强</strong>、细化到函数</td>
          <td style="text-align: left"></td>
          <td style="text-align: left">进行某函数的性能测试</td>
      </tr>
  </tbody>
</table>
<h2 id="指标解释">指标解释</h2>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151739088.png" alt="350959005-c2182bee-333f-4ec3-94cb-7a36440bb105"  />
</p>
<p>常用指标如下：</p>
<ul>
<li>
<p>allocs：所有时刻的内存使用情况，包括正在使用的及已经回收的</p>
</li>
<li>
<p>block：导致在同步原语上发生阻塞的堆栈跟踪</p>
</li>
<li>
<p>cmdline： 当前程序的命令行的完整调用路径。</p>
</li>
<li>
<p>goroutine：目前的 goroutine 数量及运行情况</p>
</li>
<li>
<p>heap：当前时刻的内存使用情况</p>
</li>
<li>
<p>mutex：查看导致互斥锁的竞争持有者的堆栈跟踪</p>
</li>
<li>
<p>profile：默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件</p>
</li>
<li>
<p>threadcreate：查看创建新 OS 线程的堆栈跟踪。</p>
</li>
<li>
<p>trance：当前程序执行的追踪，可以在秒数的 GET 参数中指定持续时间。在获取追踪文件后，请使用 go 工具的 trace 命令来调查追踪。（<a href="https://mp.weixin.qq.com/s/I9xSMxy32cALSNQAN8wlnQ">深入浅出 Go trace (qq.com)</a>）</p>
</li>
</ul>
<blockquote>
<p>注意，默认情况下是不追踪block和mutex的信息的，如果想要看这两个信息，需要在代码中加上两行：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>runtime.<span style="color:#d2a8ff;font-weight:bold">SetBlockProfileRate</span>(<span style="color:#a5d6ff">1</span>) <span style="color:#8b949e;font-style:italic">// 开启对阻塞操作的跟踪，block  </span>
</span></span><span style="display:flex;"><span>runtime.<span style="color:#d2a8ff;font-weight:bold">SetMutexProfileFraction</span>(<span style="color:#a5d6ff">1</span>) <span style="color:#8b949e;font-style:italic">// 开启对锁调用的跟踪，mutex</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<pre><code>注意，上文的所有信息都是实时的，如果你刷新一下，是可以看到数字在变化的。此时如果点击蓝色的连接，可以看到一些协程的栈信息，这些信息并不容易阅读。如果想要更加清晰的数据，需要将信息保存下来，在本地进行分析。
</code></pre>
<h2 id="理解指标">理解指标</h2>
<ul>
<li>flat：函数自身的运行耗时。</li>
<li>flat%：函数自身在 CPU 运行耗时总比例。</li>
<li>sum%：函数自身累积使用 CPU 总比例。</li>
<li>cum：函数自身及其调用函数的运行总耗时。</li>
<li>cum%：函数自身及其调用函数的运行耗时总比例。</li>
</ul>
<h3 id="flat-flat"><code>flat flat%</code></h3>
<pre><code>一个函数内的 directly 操作的物理耗时。例如
</code></pre>
<blockquote>
<p>flat只会记录 step2 和 step3 的时间</p></blockquote>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">foo</span>(){
</span></span><span style="display:flex;"><span>     <span style="color:#d2a8ff;font-weight:bold">a</span>()                                        <span style="color:#8b949e;font-style:italic">// step1</span>
</span></span><span style="display:flex;"><span>     largeArray <span style="color:#ff7b72;font-weight:bold">:=</span> [math.MaxInt64]<span style="color:#ff7b72">int64</span>{}       <span style="color:#8b949e;font-style:italic">// step2</span>
</span></span><span style="display:flex;"><span>     <span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#a5d6ff">0</span>; i &lt; math.MaxInt64; i<span style="color:#ff7b72;font-weight:bold">++</span> {       <span style="color:#8b949e;font-style:italic">// step3</span>
</span></span><span style="display:flex;"><span>             <span style="color:#d2a8ff;font-weight:bold">c</span>()                                <span style="color:#8b949e;font-style:italic">// step4</span>
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>flat%即是 `flat/总运行时间`。内存等参数同理。**所有的 flat 相加即是总采样时间**，所有的flat%相加应该等于100%。

flat一般是我们最关注的。其代表一个函数可能非常耗时，或者调用了非常多次，或者两者兼而有之，从而导致这个函数消耗了最多的时间。

如果是我们自己编写的代码，则很可能有一些无脑 for 循环、复杂的计算、字符串操作、频繁申请内存等等。

如果是第三方库的代码，则很可能我们过于频繁地调用了这些第三方库，或者以不正确的方式使用了这些第三方库。
</code></pre>
<h3 id="cum-cum"><code>cum cum%</code></h3>
<pre><code>相比 flat，cum则是这个函数内所有操作的物理耗时，比如包括了上述的 step1、2、3、4。

cum%即是`cum的时间/总运行时间`。内存等参数同理。

一般cum是我们次关注的，且需要结合flat来看。
</code></pre>
<p><strong>flat 可以让我们知道哪个函数耗时多，而 cum 可以帮助我们找到是哪些函数调用了这些耗时的（flat 值大的）函数。</strong></p>
<h3 id="sum"><code>sum%</code></h3>
<pre><code>其上所有行的flat%的累加。可以视为，这一行及其以上行，其所有的 directly 操作一共占了多少物理时间。
</code></pre>
<h2 id="案例分析">案例分析</h2>
<h2 id="go-test">go test</h2>
<ul>
<li>cpu 使用分析：<code>-cpuprofile=cpu.pprof</code></li>
<li>内存使用分析：<code>-benchmem -memprofile=mem.pprof</code></li>
<li>block分析：<code>-blockprofile=block.pprof</code></li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>go test -bench<span style="color:#ff7b72;font-weight:bold">=</span>. -run<span style="color:#ff7b72;font-weight:bold">=</span>none -benchmem -memprofile<span style="color:#ff7b72;font-weight:bold">=</span>mem.pprof 
</span></span><span style="display:flex;"><span>go test -bench<span style="color:#ff7b72;font-weight:bold">=</span>. -run<span style="color:#ff7b72;font-weight:bold">=</span>none -blockprofile<span style="color:#ff7b72;font-weight:bold">=</span>block.pprof 
</span></span><span style="display:flex;"><span>go test -bench<span style="color:#ff7b72;font-weight:bold">=</span>. -run<span style="color:#ff7b72;font-weight:bold">=</span>none -benchmem -memprofile<span style="color:#ff7b72;font-weight:bold">=</span>mem.pprof -cpuprofile<span style="color:#ff7b72;font-weight:bold">=</span>cpu.pprof s
</span></span><span style="display:flex;"><span>go test -bench<span style="color:#ff7b72;font-weight:bold">=</span>. -run<span style="color:#ff7b72;font-weight:bold">=</span>none -benchmem -memprofile<span style="color:#ff7b72;font-weight:bold">=</span>mem.pprof -cpuprofsile<span style="color:#ff7b72;font-weight:bold">=</span>cpu.pprof -blockprofile<span style="color:#ff7b72;font-weight:bold">=</span>block.pprof
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="runtimepprof">runtime/pprof</h2>
<p>除了注入 http handler 和 go test 以外，我们还可以在程序中通过 pprof 所提供的 Lookup 方法来进行相关内容的采集和调用，其一共支持六种类型，分别是：goroutine、threadcreate、heap、block、mutex，代码如下：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">21
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">22
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">23
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">24
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">25
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">26
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">27
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">28
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">29
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">30
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">31
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">type</span> LookupType <span style="color:#ff7b72">int8</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">const</span> ( 
</span></span><span style="display:flex;"><span>    LookupGoroutine LookupType = <span style="color:#79c0ff">iota</span> 
</span></span><span style="display:flex;"><span>    LookupThreadcreate LookupHeap 
</span></span><span style="display:flex;"><span>    LookupAllocs LookupBlock LookupMutex ) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">pprofLookup</span>(lookupType LookupType, w io.Writer) <span style="color:#ff7b72">error</span> { 
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">var</span> err <span style="color:#ff7b72">error</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">switch</span> lookupType { 
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">case</span> LookupGoroutine: 
</span></span><span style="display:flex;"><span>        	p <span style="color:#ff7b72;font-weight:bold">:=</span> pprof.<span style="color:#d2a8ff;font-weight:bold">Lookup</span>(<span style="color:#a5d6ff">&#34;goroutine&#34;</span>) 
</span></span><span style="display:flex;"><span>        err = p.<span style="color:#d2a8ff;font-weight:bold">WriteTo</span>(w, <span style="color:#a5d6ff">2</span>) 
</span></span><span style="display:flex;"><span>    	<span style="color:#ff7b72">case</span> LookupThreadcreate: 
</span></span><span style="display:flex;"><span>        	p <span style="color:#ff7b72;font-weight:bold">:=</span> pprof.<span style="color:#d2a8ff;font-weight:bold">Lookup</span>(<span style="color:#a5d6ff">&#34;threadcreate&#34;</span>) 
</span></span><span style="display:flex;"><span>        err = p.<span style="color:#d2a8ff;font-weight:bold">WriteTo</span>(w, <span style="color:#a5d6ff">2</span>) 
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">case</span> LookupHeap: 
</span></span><span style="display:flex;"><span>        	p <span style="color:#ff7b72;font-weight:bold">:=</span> pprof.<span style="color:#d2a8ff;font-weight:bold">Lookup</span>(<span style="color:#a5d6ff">&#34;heap&#34;</span>) 
</span></span><span style="display:flex;"><span>        err = p.<span style="color:#d2a8ff;font-weight:bold">WriteTo</span>(w, <span style="color:#a5d6ff">2</span>) 
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">case</span> LookupAllocs: 
</span></span><span style="display:flex;"><span>        	p <span style="color:#ff7b72;font-weight:bold">:=</span> pprof.<span style="color:#d2a8ff;font-weight:bold">Lookup</span>(<span style="color:#a5d6ff">&#34;allocs&#34;</span>) 
</span></span><span style="display:flex;"><span>        	err = p.<span style="color:#d2a8ff;font-weight:bold">WriteTo</span>(w, <span style="color:#a5d6ff">2</span>) 
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">case</span> LookupBlock: 
</span></span><span style="display:flex;"><span>        	p <span style="color:#ff7b72;font-weight:bold">:=</span> pprof.<span style="color:#d2a8ff;font-weight:bold">Lookup</span>(<span style="color:#a5d6ff">&#34;block&#34;</span>) 
</span></span><span style="display:flex;"><span>        	err = p.<span style="color:#d2a8ff;font-weight:bold">WriteTo</span>(w, <span style="color:#a5d6ff">2</span>) 
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">case</span> LookupMutex: 
</span></span><span style="display:flex;"><span>        	p <span style="color:#ff7b72;font-weight:bold">:=</span> pprof.<span style="color:#d2a8ff;font-weight:bold">Lookup</span>(<span style="color:#a5d6ff">&#34;mutex&#34;</span>) 
</span></span><span style="display:flex;"><span>        	err = p.<span style="color:#d2a8ff;font-weight:bold">WriteTo</span>(w, <span style="color:#a5d6ff">2</span>) 
</span></span><span style="display:flex;"><span>    	} 
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72">return</span> err 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来我们只需要对该方法进行调用就好了，其提供了 <code>io.Writer</code> 接口，也就是只要实现了对应的 Write 方法，我们可以将其写到任何支持地方去，如下：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">init</span>() { 
</span></span><span style="display:flex;"><span>    runtime.<span style="color:#d2a8ff;font-weight:bold">SetMutexProfileFraction</span>(<span style="color:#a5d6ff">1</span>) 
</span></span><span style="display:flex;"><span>    runtime.<span style="color:#d2a8ff;font-weight:bold">SetBlockProfileRate</span>(<span style="color:#a5d6ff">1</span>) 
</span></span><span style="display:flex;"><span>} 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">main</span>() { 
</span></span><span style="display:flex;"><span>    http.<span style="color:#d2a8ff;font-weight:bold">HandleFunc</span>(<span style="color:#a5d6ff">&#34;/lookup/heap&#34;</span>, <span style="color:#ff7b72">func</span>(w http.ResponseWriter, r <span style="color:#ff7b72;font-weight:bold">*</span>http.Request) {
</span></span><span style="display:flex;"><span>        _ = <span style="color:#d2a8ff;font-weight:bold">pprofLookup</span>(LookupHeap, os.Stdout) }) 
</span></span><span style="display:flex;"><span>    http.<span style="color:#d2a8ff;font-weight:bold">HandleFunc</span>(<span style="color:#a5d6ff">&#34;/lookup/threadcreate&#34;</span>, <span style="color:#ff7b72">func</span>(w http.ResponseWriter, r <span style="color:#ff7b72;font-weight:bold">*</span>http.Request) { 
</span></span><span style="display:flex;"><span>        _ = <span style="color:#d2a8ff;font-weight:bold">pprofLookup</span>(LookupThreadcreate, os.Stdout) }) 
</span></span><span style="display:flex;"><span>    http.<span style="color:#d2a8ff;font-weight:bold">HandleFunc</span>(<span style="color:#a5d6ff">&#34;/lookup/block&#34;</span>, <span style="color:#ff7b72">func</span>(w http.ResponseWriter, r <span style="color:#ff7b72;font-weight:bold">*</span>http.Request) { 
</span></span><span style="display:flex;"><span>        _ = <span style="color:#d2a8ff;font-weight:bold">pprofLookup</span>(LookupBlock, os.Stdout) }) 
</span></span><span style="display:flex;"><span>    http.<span style="color:#d2a8ff;font-weight:bold">HandleFunc</span>(<span style="color:#a5d6ff">&#34;/lookup/goroutine&#34;</span>, <span style="color:#ff7b72">func</span>(w http.ResponseWriter, r <span style="color:#ff7b72;font-weight:bold">*</span>http.Request) { 
</span></span><span style="display:flex;"><span>        _ = <span style="color:#d2a8ff;font-weight:bold">pprofLookup</span>(LookupGoroutine, os.Stdout) }) 
</span></span><span style="display:flex;"><span>   
</span></span><span style="display:flex;"><span>    _ = http.<span style="color:#d2a8ff;font-weight:bold">ListenAndServe</span>(<span style="color:#a5d6ff">&#34;0.0.0.0:6060&#34;</span>, <span style="color:#79c0ff">nil</span>) 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="采集cpucpu-占用过高">采集CPU(CPU 占用过高)</h3>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#ff7b72">func</span> <span style="color:#d2a8ff;font-weight:bold">CollectCpu</span>() { 
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 创建分析文件，在当前目录下 </span>
</span></span><span style="display:flex;"><span>	file, err <span style="color:#ff7b72;font-weight:bold">:=</span> os.<span style="color:#d2a8ff;font-weight:bold">Create</span>(<span style="color:#a5d6ff">&#34;./cpu.prof&#34;</span>) 
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">if</span> err <span style="color:#ff7b72;font-weight:bold">!=</span> <span style="color:#79c0ff">nil</span> { 
</span></span><span style="display:flex;"><span>		fmt.<span style="color:#d2a8ff;font-weight:bold">Printf</span>(<span style="color:#a5d6ff">&#34;创建采集文件失败, err:%v\n&#34;</span>, err) 
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">return</span> 
</span></span><span style="display:flex;"><span>	} 
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 进行 cpu 数据的获取 </span>
</span></span><span style="display:flex;"><span>	pprof.<span style="color:#d2a8ff;font-weight:bold">StartCPUProfile</span>(file) 
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">defer</span> pprof.<span style="color:#d2a8ff;font-weight:bold">SweightCPUProfile</span>() 
</span></span><span style="display:flex;"><span>	<span style="color:#8b949e;font-style:italic">// 执行一段有问题的代码 </span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff7b72">for</span> i <span style="color:#ff7b72;font-weight:bold">:=</span> <span style="color:#a5d6ff">0</span>; i &lt; <span style="color:#a5d6ff">4</span>; i<span style="color:#ff7b72;font-weight:bold">++</span> { s
</span></span><span style="display:flex;"><span>		<span style="color:#ff7b72">go</span> <span style="color:#d2a8ff;font-weight:bold">do1</span>() 
</span></span><span style="display:flex;"><span>	} 
</span></span><span style="display:flex;"><span>	time.<span style="color:#d2a8ff;font-weight:bold">Sleep</span>(<span style="color:#a5d6ff">10</span> <span style="color:#ff7b72;font-weight:bold">*</span> time.Second) 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nethttppprof">net/http/pprof</h2>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span> <span style="color:#8b949e;font-style:italic"># 网页，运行该命令让程序开始半分钟（默认值）的CPU采样 服务开启了 pprof</span>
</span></span><span style="display:flex;"><span> <span style="color:#ff7b72;font-weight:bold">$</span> go <span style="color:#ff7b72">tool</span> pprof http:<span style="color:#ff7b72;font-weight:bold">//</span><span style="color:#a5d6ff">127.0</span><span style="color:#ff7b72;font-weight:bold">.</span><span style="color:#a5d6ff">0.1</span>:<span style="color:#a5d6ff">8080</span><span style="color:#ff7b72;font-weight:bold">/</span>debug<span style="color:#ff7b72;font-weight:bold">/</span>pprof<span style="color:#ff7b72;font-weight:bold">/</span>profile
</span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151742895.png" alt="350959401-d56c6bdc-d272-4960-8ac0-943f42b46e54"  />
</p>
<h3 id="扩展参数选项">扩展参数选项</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">选项名</th>
          <th style="text-align: left">作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">alloc_objects</td>
          <td style="text-align: left">分析应用程序的内存临时分配情况</td>
      </tr>
      <tr>
          <td style="text-align: left">alloc_space</td>
          <td style="text-align: left">查看每个函数分配的内存空间大小</td>
      </tr>
      <tr>
          <td style="text-align: left">inuse_space</td>
          <td style="text-align: left">分析应用程序的常驻内存占用情况</td>
      </tr>
      <tr>
          <td style="text-align: left">inuse_objects</td>
          <td style="text-align: left">查看每个函数所分配的对象数量</td>
      </tr>
  </tbody>
</table>
<h3 id="常用命令">常用命令</h3>
<h4 id="web-连线图">web （连线图）</h4>
<blockquote>
<p>通过Web浏览器可视化图</p></blockquote>
<blockquote>
<p><code>web</code> 将会生成一张svg格式的图片，并用默认打开程序打开（一般是浏览器）。渲染图片需要下载 <a href="https://graphviz.org/download/">Download | Graphviz</a></p></blockquote>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151744662.png" alt="350959152-f919098b-a923-4cbd-8349-89f0e3a0d52b"  />
</p>
<pre><code>节点的颜色越红，其cum和cum%越大。其颜色越灰白，则cum和cum%越小。

节点越大，其flat和flat%越大；其越小，则flat和flat%越小

线条代表了函数的调用链，线条越粗，代表指向的函数消耗了越多的资源。反之亦然。

线条的样式代表了调用关系。实线代表直接调用；虚线代表中间少了几个节点；带有inline字段表示该函数被内联进了调用方（不用在意，可以理解成实线）。
</code></pre>
<blockquote>
<p>对于一些代码行比较少的函数，编译器倾向于将它们在编译期展开从而消除函数调用，这种行为就是内联。</p></blockquote>
<h4 id="weight">weight</h4>
<blockquote>
<p><code>weight</code>默认按flat排序，打印出消耗前10的函数。也可以选择消耗前N的函数，比如<code>weight5</code>，<code>weight20</code>。</p></blockquote>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151745485.png" alt="350959570-a1c83317-3d82-4bfe-aaf7-4abfebd1884f"  />
</p>
<h4 id="list">list</h4>
<blockquote>
<p>当发现某个函数资源占用情况可疑时，可以通过 <code>list 函数名</code> 定位到具体的代码位置。比如:<code> list Fire</code></p></blockquote>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151746075.png" alt="350959588-87007000-e59a-43d1-bcce-2c8e5fe79a9c"  />
</p>
<h3 id="火焰图">火焰图</h3>
<pre><code>调用顺序**由上到下**，每一块代表一个函数，越大代表占用 CPU 的时间更长。同时它也可以支持点击块深入进行分析。
</code></pre>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151746996.png" alt="350959621-4992c35f-ac6f-4e44-8246-a99ce6302bfb"  />
</p>
<h2 id="代码优化建议">代码优化建议</h2>
<p>以下是一些从其它项目借鉴或者自己总结的实践经验，它们只是建议，而不是准则，实际项目中应该以性能分析数据来作为优化的参考，<strong>避免过早优化</strong>。</p>
<ol>
<li>对频繁分配的小对象，使用 <a href="https://golang.org/pkg/sync/#Pool">sync.Pool</a> 对象池避免分配</li>
<li>自动化的 DeepCopy 是非常耗时的，其中涉及到反射，内存分配，容器(如 map)扩展等，大概比手动拷贝慢一个数量级</li>
<li>用 atomic.Load/StoreXXX，atomic.Value, sync.Map 等代替 Mutex。(优先级递减)</li>
<li>使用高效的第三方库，如用<a href="https://github.com/valyala/fasthttp">fasthttp</a>替代 net/http</li>
<li>在开发环境加上<code>-race</code>编译选项进行竞态检查</li>
<li>在开发环境开启 net/http/pprof，方便实时 pprof</li>
<li>将所有外部IO(网络IO，磁盘IO)做成异步ss</li>
</ol>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://wxsm.space/2023/go-pprof-note/">Go 语言性能调试与分析工具：pprof 用法简介 | wxsm&rsquo;s pace</a></li>
<li><a href="https://juejin.cn/post/7122473470424219656">golang pprof实用使用指南 - 掘金 (juejin.cn)</a></li>
<li><a href="https://nyadgar.com/posts/go-profiling-like-a-pro/">Profiling in Go: A Practical Guide | nyadgar.com</a></li>
<li><a href="https://debug-lixiwen.github.io/2021/07/18/shi-zhan/">golang的pprof与火焰图实战 | wish (debug-lixiwen.github.io)</a></li>
<li><a href="https://blog.wolfogre.com/posts/go-ppof-practice/">golang pprof 实战 | Wolfogre&rsquo;s Blog</a></li>
<li><a href="https://farmerchillax.github.io/2023/07/04/Go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/">Go性能分析工具 | Farmer (farmerchillax.github.io)</a></li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>

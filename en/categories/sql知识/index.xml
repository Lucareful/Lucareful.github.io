<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SQL知识 on Luenci</title>
    <link>https://luenci.com/en/categories/sql%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in SQL知识 on Luenci</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://luenci.com/en/categories/sql%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL数据库函数</title>
      <link>https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;mysql数据库函数&#34;&gt;MySQL数据库函数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;MySQL函数是数据库提供的内置函数，可以帮助用户更加方便地处理表中的数据。MySQL的内置函数，不但可以在SELECT查询语句中使用，同样可以在INSERT、UPDATE、DELETE等语句中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1数学函数&#34;&gt;&lt;strong&gt;1.数学函数：&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MySQL中内置的数学函数见下表：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="mysql数据库函数">MySQL数据库函数</h1>
<ul>
<li>MySQL函数是数据库提供的内置函数，可以帮助用户更加方便地处理表中的数据。MySQL的内置函数，不但可以在SELECT查询语句中使用，同样可以在INSERT、UPDATE、DELETE等语句中使用。</li>
</ul>
<h2 id="1数学函数"><strong>1.数学函数：</strong></h2>
<p>MySQL中内置的数学函数见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>ABS(x)</td>
          <td>返回x的绝对值</td>
      </tr>
      <tr>
          <td>CEIL9x),CEILIN(x)</td>
          <td>返回不小于x的最小整数值</td>
      </tr>
      <tr>
          <td>FLOOR(x)</td>
          <td>返回不大于x的最大整数值</td>
      </tr>
      <tr>
          <td>RAND()</td>
          <td>返回0~1的随机数</td>
      </tr>
      <tr>
          <td>RAND(x)</td>
          <td>返回0~1的随机数，x值相同时返回的随机数相同</td>
      </tr>
      <tr>
          <td>SIGN(x)</td>
          <td>返回参数作为-1、0、1的符号，该符号取决于x值的负、零、正</td>
      </tr>
      <tr>
          <td>PI()</td>
          <td>返回圆周率的值，默认是7位，内部使用完全双精度值</td>
      </tr>
      <tr>
          <td>TRUNCATE(x,y)</td>
          <td>返回数值x保留到小数点y位的值</td>
      </tr>
      <tr>
          <td>ROUND(x)</td>
          <td>返回离x最近的整数</td>
      </tr>
      <tr>
          <td>ROUND(x,y)</td>
          <td>保留x小数点后y位的值，但截断时要进行四舍五入</td>
      </tr>
      <tr>
          <td>POW(x,y),POWER(x,y)</td>
          <td>返回x的y乘方的结果值</td>
      </tr>
      <tr>
          <td>SQRT(x)</td>
          <td>返回非负数x的二次方根</td>
      </tr>
      <tr>
          <td>EXP(x)</td>
          <td>返回e的x乘方后的值（自然对数的底）</td>
      </tr>
      <tr>
          <td>MOD(x,y)</td>
          <td>返回x除以y后的余数</td>
      </tr>
      <tr>
          <td>LOG(x)</td>
          <td>返回x的基数为2的对数</td>
      </tr>
      <tr>
          <td>LOG10(x)</td>
          <td>返回x的基数为10的对数</td>
      </tr>
      <tr>
          <td>RADIANS(x)</td>
          <td>将角度转换为弧度</td>
      </tr>
      <tr>
          <td>DEGREES(x)</td>
          <td>将弧度转化为角度</td>
      </tr>
      <tr>
          <td>SIN(x)</td>
          <td>返回x的正弦，其中x使用弧度</td>
      </tr>
      <tr>
          <td>ASIN(x,y)</td>
          <td>返回x的反正弦，若x不在-1到1范围内则返回NULL</td>
      </tr>
      <tr>
          <td>COS(x)</td>
          <td>返回x的余弦，其中x为弧度</td>
      </tr>
      <tr>
          <td>ACOS(x,y)</td>
          <td>返回x的反余弦，若x不在-1到1范围内则返回NULL</td>
      </tr>
      <tr>
          <td>TAN(x,y)</td>
          <td>返回x的正切，其中x为弧度</td>
      </tr>
      <tr>
          <td>ATAN(x),ATAN2(x)</td>
          <td>返回x的反正切，y确定结果所在象限</td>
      </tr>
      <tr>
          <td>COT(x,y)</td>
          <td>返回x的余切</td>
      </tr>
  </tbody>
</table>
<h2 id="2字符串函数"><strong>2.字符串函数：</strong></h2>
<p>字符串函数是MySQL中最常用的的一类函数，主要用于处理表中的字符串。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CHAR_LENGTH(s)</td>
          <td>返回字符串s的字符数</td>
      </tr>
      <tr>
          <td>LENGTH(s)</td>
          <td>返回字符串的字节长度，一个多字节字符算作多字节</td>
      </tr>
      <tr>
          <td>CONCAT(s)</td>
          <td>返回结果为连接参数产生的字符串。为了避免将数字参数转化为二进制字符串使用SELECT CONCAT(CAST(int_col AS CHAR),char_col)</td>
      </tr>
      <tr>
          <td>CONCAT_WS(x,s1,s2,&hellip;)</td>
          <td>同CONCAT()函数，但每个字符串都要加上x</td>
      </tr>
      <tr>
          <td>INSERT(s1,x,len,s2)</td>
          <td>将字符串s2替换为s1的x位置开始长度为len的字符串</td>
      </tr>
      <tr>
          <td>UPPER(s),UCASE(s)</td>
          <td>将字符串s的所有字母都变成大写字母</td>
      </tr>
      <tr>
          <td>LOWER(s),LCASE(s)</td>
          <td>将字符串s的所有字母都变成小写字母</td>
      </tr>
      <tr>
          <td>LEFT(s,n)</td>
          <td>返回从字符串s开始的最左边n个字符</td>
      </tr>
      <tr>
          <td>RIGHT(s,n)</td>
          <td>返回从字符串s开始的最右边n个字符</td>
      </tr>
      <tr>
          <td>LPAD(s1,len,s2)</td>
          <td>返回字符串s1，其左边由字符串s2填补到len字符长度</td>
      </tr>
      <tr>
          <td>RPAD(s1,len,s2)</td>
          <td>返回字符串s1，其右边被字符串s2填补至len字符长度</td>
      </tr>
      <tr>
          <td>LTRIM(s)</td>
          <td>返回字符串s，其引导空格字符被删除</td>
      </tr>
      <tr>
          <td>RTRIM(s)</td>
          <td>返回字符串s，结尾空格字符被删去</td>
      </tr>
      <tr>
          <td>TRIM(s)</td>
          <td>去掉字符串s开始和结尾处的空格</td>
      </tr>
      <tr>
          <td>TRIM(s1 FROM s)</td>
          <td>去掉字符串s中开始处和结尾处的字符串s1</td>
      </tr>
      <tr>
          <td>REPEAT(s,n)</td>
          <td>将字符串s重复n次</td>
      </tr>
      <tr>
          <td>SPACE(n)</td>
          <td>返回n个空格</td>
      </tr>
      <tr>
          <td>REPLACE(s,s1,s2)</td>
          <td>用字符串s2替代字符串s中的字符串s1</td>
      </tr>
      <tr>
          <td>STRCMP(s1,s2)</td>
          <td>比较字符串s1和s2</td>
      </tr>
      <tr>
          <td>SUBSTRING(s,n,len)</td>
          <td>获取从字符串s第n个位置开始长度为len的字符串</td>
      </tr>
      <tr>
          <td>MID(s,n,len)</td>
          <td>同SUBSTRING()</td>
      </tr>
      <tr>
          <td>LOCATE(s1,s) POSITION(s1 IN s)</td>
          <td>从字符串s中获取s1的开始位置</td>
      </tr>
      <tr>
          <td>INSTR(s,s1)</td>
          <td>从字符串s中获取s1的开始位置</td>
      </tr>
      <tr>
          <td>REVERSE(s)</td>
          <td>将字符串s的顺序反过来</td>
      </tr>
      <tr>
          <td>ELT(n,s1,s2)</td>
          <td>返回第n个字符串</td>
      </tr>
      <tr>
          <td>EXPORT_SET(bits,on,off[, separator[,number_of_bits]])</td>
          <td>返回一个字符串，生成规则为：针对bits的二进制格式，如果位为1则返回一个on值，如果为0则返回一个off值。每个字符串用separator分隔，默认逗号；number_of_bits指定bits的可用位数，默认64位。示例 selectEXPORT_SET(182,&lsquo;Y&rsquo;,&lsquo;N&rsquo;,&rsquo;@&rsquo;,6);</td>
      </tr>
      <tr>
          <td>FIELD(s,s1,s2)</td>
          <td>返回第一个与字符串s匹配的字符串的位置</td>
      </tr>
      <tr>
          <td>FIND_IN_SET(s,s2)</td>
          <td>返回在字符串s2中与s1匹配的字符串的位置</td>
      </tr>
      <tr>
          <td>MAKE_SET(x,s1,s2,&hellip;)</td>
          <td>按x的二进制数从s1,s2,&hellip;,sn中选取字符串</td>
      </tr>
  </tbody>
</table>
<!-- more -->
<h2 id="3日期和时间函数"><strong>3.日期和时间函数：</strong></h2>
<p>日期和时间函数主要用于对表中的日期和时间数据的处理。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CURDATE(),CURRENT_DATE()</td>
          <td>返回当前日期</td>
      </tr>
      <tr>
          <td>CURTIME(),CURRENT_TIME()</td>
          <td>返回当前时间</td>
      </tr>
      <tr>
          <td>NOW(),CURRENT_TIMESTAMP(), LOCALTIME(),SYSDATE(),LOCALTIMESTAMP()</td>
          <td>返回当前日期时间</td>
      </tr>
      <tr>
          <td>UNIX_TIMESTAMP()</td>
          <td>以UNIX时间戳的形式返回当前时间</td>
      </tr>
      <tr>
          <td>UNIX_TIMESTAMP(d)</td>
          <td>将时间d以UNIX时间戳的形式返回</td>
      </tr>
      <tr>
          <td>FROM_UNIXTIME(d)</td>
          <td>把UNIX时间戳的时间转换为普通格式的时间</td>
      </tr>
      <tr>
          <td>UTC_DATE()</td>
          <td>返回UTC（Universal Coordinated Time，国际协调时间）日期</td>
      </tr>
      <tr>
          <td>UTC_TIME()</td>
          <td>返回UTC时间</td>
      </tr>
      <tr>
          <td>MONTH(d)</td>
          <td>返回日期d中的月份值，范围1~12</td>
      </tr>
      <tr>
          <td>MONTHNAME(d)</td>
          <td>返回日期d中的月份名称，如January</td>
      </tr>
      <tr>
          <td>DAYNAME(d)</td>
          <td>返回日期d是星期几，如Monday</td>
      </tr>
      <tr>
          <td>DAYOFWEEK(d)</td>
          <td>返回日期d是星期几，范围1~7，1表示星期日</td>
      </tr>
      <tr>
          <td>WEEKDAY(d)</td>
          <td>返回日期d是星期几，范围0~6，0表示星期一</td>
      </tr>
      <tr>
          <td>WEEK(d)</td>
          <td>计算日期d是本年的第几个星期，范围0~53</td>
      </tr>
      <tr>
          <td>WEEKOFYEAR(d)</td>
          <td>计算日期d是本年的第几个星期，范围1~54</td>
      </tr>
      <tr>
          <td>DAYOFYEAR(d)</td>
          <td>计算日期d是本年的第几天</td>
      </tr>
      <tr>
          <td>DAYOFMONTH(d)</td>
          <td>计算日期d是本月的第几天</td>
      </tr>
      <tr>
          <td>YEAR(d)</td>
          <td>返回日期d中的年份值</td>
      </tr>
      <tr>
          <td>QUARTER(d)</td>
          <td>返回日期d是第几季度，范围1~4</td>
      </tr>
      <tr>
          <td>HOUR(t)</td>
          <td>返回时间t中的小时数</td>
      </tr>
      <tr>
          <td>MINUTE(t)</td>
          <td>返回时间t中的分钟数</td>
      </tr>
      <tr>
          <td>SECOND(t)</td>
          <td>返回时间t中的秒数</td>
      </tr>
      <tr>
          <td>EXTRACT(type FROM d)</td>
          <td>从日期d中获取指定值，type指定返回的值，如YERR HOUR等</td>
      </tr>
      <tr>
          <td>TIME_TO_SEC(t)</td>
          <td>将时间t转换为秒</td>
      </tr>
      <tr>
          <td>SEC_TO_TIME(t)</td>
          <td>将以秒为单位的时间s转换为时分秒的格式</td>
      </tr>
      <tr>
          <td>TO_DAYS(d)</td>
          <td>计算日期d~0000年1月1日的天数</td>
      </tr>
      <tr>
          <td>FROM_DAYS(d)</td>
          <td>计算从0000年1月1日开始n天后的日期</td>
      </tr>
      <tr>
          <td>DATEDIFF(d1,d2)</td>
          <td>计算日期d1~d2之间间隔的天数</td>
      </tr>
      <tr>
          <td>ADDDATE(d,n)</td>
          <td>计算起始日期d加上n天的日期</td>
      </tr>
      <tr>
          <td>ADDDATE(d,INTERVAL expr type)</td>
          <td>计算起始日期d加上一个时段后的日期</td>
      </tr>
      <tr>
          <td>DATE_ADD(d,INTERVAL expr type)</td>
          <td>同ADDDATE(d,INTERVAL expr type)</td>
      </tr>
      <tr>
          <td>SUBDATE(d,n)</td>
          <td>计算起始日期d减去n天后的日期</td>
      </tr>
      <tr>
          <td>SUBDATE(d,INTERVAL expr type)</td>
          <td>计算起始日期d减去一个时段后的日期</td>
      </tr>
      <tr>
          <td>ADDTIME(t,n)</td>
          <td>计算起始时间t加上n秒的时间</td>
      </tr>
      <tr>
          <td>SUBTIME(t,n)</td>
          <td>计算起始时间t减去n秒的时间</td>
      </tr>
      <tr>
          <td>DATE_FROMAT(d,f)</td>
          <td>按照表达式f的要求显示日期d</td>
      </tr>
      <tr>
          <td>TIME_FROMAT(t,f)</td>
          <td>按照表达式f的要求显示时间t</td>
      </tr>
      <tr>
          <td>GET_FORMAT(type,s)</td>
          <td>根据字符串s获取type类型数据的显示格式</td>
      </tr>
  </tbody>
</table>
<h2 id="4条件判断函数"><strong>4.条件判断函数：</strong></h2>
<p>条件函数用来在SQL语句中进行条件判断，根据不同的条件执行不同的SQL语句。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>IF(expr,v1,v2)</td>
          <td>如果表达式expr成立，则执行v1；否则执行v2</td>
      </tr>
      <tr>
          <td>IFNULL(v1,v2)</td>
          <td>如果v1不为空，则显示v1的值；否则显示v2的值</td>
      </tr>
      <tr>
          <td>CASE WHEN expr1 THEN v1 [WHEN expr2 THEN v2&hellip;][ELSE vn] END</td>
          <td>case表示函数开始，end表示函数结束。如果表达式expr1成立，则返回v1的值；如果表达式expr2成立，则返回v2的值。依次类推，最后遇到else时，返回vn的值。</td>
      </tr>
      <tr>
          <td>CASE expr WHEN e1 THEN v1 [WHEN e2 THEN v2&hellip;][ELSE vn] END</td>
          <td>case表示函数开始，end表示函数结束。如果表达式expr取值为e1，则返回v1的值；如果表达式expr取值为e2，则返回v2的值。依次类推，最后遇到else，返回vn的值。</td>
      </tr>
  </tbody>
</table>
<p>示例：select id,grade, CASE WHEN grade&gt;1000000 THEN &lsquo;Very Good&rsquo; WHEN grade&lt;1000000 and grade&gt;=100000 THEN &lsquo;Popularly&rsquo; ELSE &lsquo;Not Good&rsquo; END level from tb_bccd;</p>
<h2 id="5系统信息函数"><strong>5.系统信息函数：</strong></h2>
<p>系统信息函数用来查询MySQL数据库的系统信息。见下表：</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
          <th>示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>VERSION()</td>
          <td>获取数据库的版本号</td>
          <td>select VERSION();</td>
      </tr>
      <tr>
          <td>CONNECTION_ID()</td>
          <td>获取数据库的连接数</td>
          <td>select CONNECT_ID();</td>
      </tr>
      <tr>
          <td>DATABASE(),SCHEMA()</td>
          <td>获取当前数据库名</td>
          <td>select DATABASE();</td>
      </tr>
      <tr>
          <td>USER(),SYSTEM_USER(),SESSION_USER()</td>
          <td>获取当前用户</td>
          <td>select USER();</td>
      </tr>
      <tr>
          <td>CURRENT_USER()</td>
          <td>获取当前用户</td>
          <td>select CURRENT-USER();</td>
      </tr>
      <tr>
          <td>CHARSET(str)</td>
          <td>获取字符串str的字符集</td>
          <td>select CHARSET(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>COLLATION(str)</td>
          <td>获取字符串str的字符排列方式</td>
          <td>select COLLATION(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>LAST_INSERT_ID()</td>
          <td>获取最近生成的AUTO_INCREMENT值</td>
          <td>select LAST_INSERT_ID();</td>
      </tr>
  </tbody>
</table>
<h2 id="6加密函数"><strong>6.加密函数：</strong></h2>
<p>数据库中有些敏感信息不希望被其他人看到，就可以用加密的方法使这些数据看似乱码。</p>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
          <th>示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>PASSWORD(str)</td>
          <td>对字符串str加密，不可逆加密</td>
          <td>select PASSWORD(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>MD5(str)</td>
          <td>对字符串str进行加密，用于普通数据</td>
          <td>select MD5(&lsquo;mrsoft&rsquo;);</td>
      </tr>
      <tr>
          <td>ENCODE(str,pswd_str)</td>
          <td>使用字符串pswd_str来加密字符串str，结果是二进制数，用BLOB类型保存</td>
          <td>select ENCODE(&lsquo;mrsoft&rsquo;,&lsquo;mr&rsquo;);</td>
      </tr>
      <tr>
          <td>DECODE(crypt_str,pswd_str)</td>
          <td>使用字符串pswd_str来解密字符串crypt_str，对ENCODE()解码</td>
          <td>select DECODE (ENCODE(&lsquo;mrsoft&rsquo;,&lsquo;mr&rsquo;),&lsquo;mr&rsquo;);</td>
      </tr>
  </tbody>
</table>
<h2 id="7统计函数"><strong>7.统计函数：</strong></h2>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>说明</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Avg(字段名)</td>
          <td>获取指定列的平均值</td>
      </tr>
      <tr>
          <td>Count(字段名)</td>
          <td>如指定一个记录，会统计该字段中非空记录数，如前面使用DISTINCT，则会统计不同值的记录，相同的值当作一条记录。</td>
      </tr>
      <tr>
          <td>Min(字段名)</td>
          <td>获取指定字段的最小值</td>
      </tr>
      <tr>
          <td>Max(字段名)</td>
          <td>获取指定字段的最大值</td>
      </tr>
      <tr>
          <td>Std(字段名)</td>
          <td>指定字段的标准背离值</td>
      </tr>
      <tr>
          <td>Stdtev(字段名)</td>
          <td>与Std相同</td>
      </tr>
      <tr>
          <td>Sum(字段名)</td>
          <td>指定字段所有记录的总和</td>
      </tr>
  </tbody>
</table>
<h2 id="8其他函数"><strong>8.其他函数：</strong></h2>
<table>
  <thead>
      <tr>
          <th>函数</th>
          <th>作用</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>FORMAT(x,n)</td>
          <td>将数字x进行格式化，保留到小数点后n位，四舍五入</td>
      </tr>
      <tr>
          <td>ASCII(x)</td>
          <td>返回字符串s的第一个字符的ASCII码</td>
      </tr>
      <tr>
          <td>BIN(x)</td>
          <td>返回x的二进制编码</td>
      </tr>
      <tr>
          <td>HEX(x)</td>
          <td>返回x的十六进制编码</td>
      </tr>
      <tr>
          <td>OCT(x)</td>
          <td>返回x的八进制编码</td>
      </tr>
      <tr>
          <td>CONV(x,f1,f2)</td>
          <td>将x从f1进制数变成f2进制数</td>
      </tr>
      <tr>
          <td>INET_ATON(IP)</td>
          <td>将IP地址转换为数字表示</td>
      </tr>
      <tr>
          <td>INET_NTOA(N)</td>
          <td>将数字n转换成IP形式</td>
      </tr>
      <tr>
          <td>GET_LOCT(name,time)</td>
          <td>定义一个名称为name持续时长为time秒的锁。锁定成功返回1；如此尝试超时返回0；遇到错误返回NULL。</td>
      </tr>
      <tr>
          <td>RELEASE_LOCK(name)</td>
          <td>解除名称为name的锁。解锁成功返回1，尝试超时返回0，失败返回NULL。</td>
      </tr>
      <tr>
          <td>IF_FREE_LOCK(name)</td>
          <td>判断是否使用名为name的锁，成功返回0，否则返回1。</td>
      </tr>
      <tr>
          <td>BENCHMARK(count,expr)</td>
          <td>将表达式expr重复执行count次，然后返回执行时间</td>
      </tr>
      <tr>
          <td>CONVERT(s USING cs)</td>
          <td>将字符串s的字符集变成cs</td>
      </tr>
      <tr>
          <td>CAST(x AS type), CONVERT(x,type)</td>
          <td>将x变成type类型。这两个函数只对BINARY、CHAR、DATE、DATETIME、TIME、SIGNED INTEGER、UNSIGNED INTEGER类型起作用。只是改变了输出值的数据类型，并没有改变表中字段的类型。</td>
      </tr>
  </tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL数据库引擎和数据类型</title>
      <link>https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h2 id=&#34;数据库引擎介绍&#34;&gt;&lt;strong&gt;数据库引擎介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、存储引擎其实就是对于数据库文件的一种存取机制，如何实现存储数据，如何为存储的数据建立索引以及如何更新，查询数据等技术实现的方法。&lt;/li&gt;
&lt;li&gt;2、MySQL中的数据用各种不同的技术存储在文件（或内存）中，这些技术中的每一种技术都使用不同的存储机制，索引技巧，锁定水平并且最终提供广泛的不同功能和能力。在MySQL中将这些不同的技术及配套的相关功能称为存储引擎。&lt;/li&gt;
&lt;li&gt;3、根据需求可以在表中设置不同的存储引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看mysql中的引擎&#34;&gt;查看mysql中的引擎&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200605131656597.png&#34; alt=&#34;查看引擎&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;mysql中常用的几种存储引擎&#34;&gt;MySQL中常用的几种存储引擎&lt;/h3&gt;
&lt;h3 id=&#34;1myisam存储引擎&#34;&gt;1．&lt;code&gt;MyISAM&lt;/code&gt;存储引擎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存放的位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL如果使用&lt;code&gt;MyISAM&lt;/code&gt;存储引擎，数据库文件类型就包括&lt;code&gt;.frm&lt;/code&gt;、&lt;code&gt;.MYD&lt;/code&gt;、&lt;code&gt;.MYI&lt;/code&gt;，默认存放位置是&lt;code&gt;C:\Documentsand Settings\All Users\Application Data\MySQL\MySQL Server 5.1\data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存放的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt; 这种存储引擎不支持事务，不支持行级锁，只支持并发插入的表锁，主要用于高负载的select。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyISAM&lt;/code&gt;也是使用B+tree索引但是和&lt;code&gt;Innodb&lt;/code&gt;的在具体实现上有些不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该引擎基于&lt;code&gt;ISAM&lt;/code&gt;数据库引擎，除了提供&lt;code&gt;ISAM&lt;/code&gt;里所没有的索引和字段管理等大量功能，&lt;code&gt;MyISAM&lt;/code&gt;还使用一种表格锁定的机制来优化多个并发的读写操作，但是需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间，否则碎片也会随之增加，最终影响数据访问性能。&lt;code&gt;MyISAM&lt;/code&gt;还有一些有用的扩展，例如用来修复数据库文件的&lt;code&gt;MyISAMChk&lt;/code&gt;工具和用来恢复浪费空间的 &lt;code&gt;MyISAMPack&lt;/code&gt;工具。&lt;code&gt;MyISAM&lt;/code&gt;强调了快速读取操作，主要用于高负载的select，这可能也是MySQL深受Web开发的主要原因：在Web开发中进行的大量数据操作都是读取操作，所以大多数虚拟主机提供商和Internet平台提供商（Internet Presence Provider, &lt;code&gt;IPP&lt;/code&gt;）只允许使用&lt;code&gt;MyISAM&lt;/code&gt;格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MyISAM&lt;/code&gt;类型的表支持三种不同的存储结构：静态型、动态型、压缩型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态型：指定义的表列的大小是固定（即不含有：&lt;code&gt;xblob&lt;/code&gt;、&lt;code&gt;xtext&lt;/code&gt;、&lt;code&gt;varchar&lt;/code&gt;等长度可变的数据类型），这样MySQL就会自动使用静态&lt;code&gt;MyISAM&lt;/code&gt;格式。使用静态格式的表的性能比较高，因为在维护和访问以预定格式存储数据时需要的开销很低；但这种高性能是以空间为代价换来的，因为在定义的时候是固定的，所以不管列中的值有多大，都会以最大值为准，占据了整个空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态型：如果列（即使只有一列）定义为动态的（&lt;code&gt;xblob&lt;/code&gt;, &lt;code&gt;xtext&lt;/code&gt;, &lt;code&gt;varchar&lt;/code&gt;等数据类型），这时&lt;code&gt;MyISAM&lt;/code&gt;就自动使用动态型，虽然动态型的表占用了比静态型表较少的空间，但带来了性能的降低，因为如果某个字段的内容发生改变则其位置很可能需要移动，这样就会导致碎片的产生，随着数据变化的增多，碎片也随之增加，数据访问性能会随之降低。
对于因碎片增加而降低数据访问性这个问题，有两种解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a、尽可能使用静态数据类型；&lt;/li&gt;
&lt;li&gt;b、经常使用&lt;code&gt;optimize table table_name&lt;/code&gt;语句整理表的碎片，恢复由于表数据的更新和删除导致的空间丢失。如果存储引擎不支持&lt;code&gt; optimize table table_name&lt;/code&gt;则可以转储并 重新加载数据，这样也可以减少碎片；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压缩型：如果在数据库中创建在整个生命周期内只读的表，则应该使用&lt;code&gt;MyISAM&lt;/code&gt;的压缩型表来减少空间的占用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优缺点：&lt;code&gt;MyISAM&lt;/code&gt;的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;2innodb存储引擎&#34;&gt;2．&lt;code&gt;innoDB&lt;/code&gt;存储引擎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存储位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL如果使用&lt;code&gt;InnoDB&lt;/code&gt;存储引擎，数据库文件类型就包括&lt;code&gt;.frm&lt;/code&gt;、&lt;code&gt;ibdata1&lt;/code&gt;、&lt;code&gt;.ibd&lt;/code&gt;，存放位置有两个，&lt;code&gt;.frm&lt;/code&gt;文件默认存放位置是&lt;code&gt;C:\Documents and Settings\All Users\ApplicationData\MySQL\MySQL Server 5.1\data&lt;/code&gt;，&lt;code&gt;ibdata1&lt;/code&gt;、&lt;code&gt;.ibd&lt;/code&gt;文件默认存放位置是MySQL安装目录下的data文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎的mysql表提供了事务，回滚以及系统崩溃修复能力和多版本迸发控制的事务的安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;支持自增长列（auto_increment）,自增长列的值不能为空，如果在使用的时候为空的话怎会进行自动存现有的值开始增值，如果有但是比现在的还大，则就保存这个值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎支持外键（foreign key） ,外键所在的表称为子表而所依赖的表称为父表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎最重要的是支持事务，以及事务相关联功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎支持&lt;code&gt;mvcc&lt;/code&gt;的行级锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;innodb&lt;/code&gt;存储引擎索引使用的是B+Tree&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优缺点：&lt;code&gt;InnoDB&lt;/code&gt;的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。&lt;/p&gt;&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<h2 id="数据库引擎介绍"><strong>数据库引擎介绍</strong></h2>
<h3 id="前言">前言</h3>
<ul>
<li>1、存储引擎其实就是对于数据库文件的一种存取机制，如何实现存储数据，如何为存储的数据建立索引以及如何更新，查询数据等技术实现的方法。</li>
<li>2、MySQL中的数据用各种不同的技术存储在文件（或内存）中，这些技术中的每一种技术都使用不同的存储机制，索引技巧，锁定水平并且最终提供广泛的不同功能和能力。在MySQL中将这些不同的技术及配套的相关功能称为存储引擎。</li>
<li>3、根据需求可以在表中设置不同的存储引擎。</li>
</ul>
<h3 id="查看mysql中的引擎">查看mysql中的引擎</h3>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200605131656597.png" alt="查看引擎"  />
</p>
<h3 id="mysql中常用的几种存储引擎">MySQL中常用的几种存储引擎</h3>
<h3 id="1myisam存储引擎">1．<code>MyISAM</code>存储引擎</h3>
<ul>
<li>
<p>存放的位置</p>
<ul>
<li>MySQL如果使用<code>MyISAM</code>存储引擎，数据库文件类型就包括<code>.frm</code>、<code>.MYD</code>、<code>.MYI</code>，默认存放位置是<code>C:\Documentsand Settings\All Users\Application Data\MySQL\MySQL Server 5.1\data</code></li>
</ul>
</li>
<li>
<p>存放的方式</p>
<ul>
<li><code>MyISAM</code> 这种存储引擎不支持事务，不支持行级锁，只支持并发插入的表锁，主要用于高负载的select。</li>
</ul>
</li>
<li>
<p>索引的方式</p>
<ul>
<li><code>MyISAM</code>也是使用B+tree索引但是和<code>Innodb</code>的在具体实现上有些不同。</li>
</ul>
</li>
</ul>
<p>该引擎基于<code>ISAM</code>数据库引擎，除了提供<code>ISAM</code>里所没有的索引和字段管理等大量功能，<code>MyISAM</code>还使用一种表格锁定的机制来优化多个并发的读写操作，但是需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间，否则碎片也会随之增加，最终影响数据访问性能。<code>MyISAM</code>还有一些有用的扩展，例如用来修复数据库文件的<code>MyISAMChk</code>工具和用来恢复浪费空间的 <code>MyISAMPack</code>工具。<code>MyISAM</code>强调了快速读取操作，主要用于高负载的select，这可能也是MySQL深受Web开发的主要原因：在Web开发中进行的大量数据操作都是读取操作，所以大多数虚拟主机提供商和Internet平台提供商（Internet Presence Provider, <code>IPP</code>）只允许使用<code>MyISAM</code>格式。</p>
<ul>
<li>
<p><code>MyISAM</code>类型的表支持三种不同的存储结构：静态型、动态型、压缩型。</p>
</li>
<li>
<p>静态型：指定义的表列的大小是固定（即不含有：<code>xblob</code>、<code>xtext</code>、<code>varchar</code>等长度可变的数据类型），这样MySQL就会自动使用静态<code>MyISAM</code>格式。使用静态格式的表的性能比较高，因为在维护和访问以预定格式存储数据时需要的开销很低；但这种高性能是以空间为代价换来的，因为在定义的时候是固定的，所以不管列中的值有多大，都会以最大值为准，占据了整个空间。</p>
</li>
<li>
<p>动态型：如果列（即使只有一列）定义为动态的（<code>xblob</code>, <code>xtext</code>, <code>varchar</code>等数据类型），这时<code>MyISAM</code>就自动使用动态型，虽然动态型的表占用了比静态型表较少的空间，但带来了性能的降低，因为如果某个字段的内容发生改变则其位置很可能需要移动，这样就会导致碎片的产生，随着数据变化的增多，碎片也随之增加，数据访问性能会随之降低。
对于因碎片增加而降低数据访问性这个问题，有两种解决办法：</p>
<ul>
<li>a、尽可能使用静态数据类型；</li>
<li>b、经常使用<code>optimize table table_name</code>语句整理表的碎片，恢复由于表数据的更新和删除导致的空间丢失。如果存储引擎不支持<code> optimize table table_name</code>则可以转储并 重新加载数据，这样也可以减少碎片；</li>
</ul>
</li>
<li>
<p>压缩型：如果在数据库中创建在整个生命周期内只读的表，则应该使用<code>MyISAM</code>的压缩型表来减少空间的占用。</p>
</li>
</ul>
<blockquote>
<p>优缺点：<code>MyISAM</code>的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。</p></blockquote>
<h3 id="2innodb存储引擎">2．<code>innoDB</code>存储引擎</h3>
<ul>
<li>
<p>存储位置</p>
<ul>
<li>MySQL如果使用<code>InnoDB</code>存储引擎，数据库文件类型就包括<code>.frm</code>、<code>ibdata1</code>、<code>.ibd</code>，存放位置有两个，<code>.frm</code>文件默认存放位置是<code>C:\Documents and Settings\All Users\ApplicationData\MySQL\MySQL Server 5.1\data</code>，<code>ibdata1</code>、<code>.ibd</code>文件默认存放位置是MySQL安装目录下的data文件夹。</li>
</ul>
</li>
<li>
<p><code>innodb</code>存储引擎的mysql表提供了事务，回滚以及系统崩溃修复能力和多版本迸发控制的事务的安全。</p>
</li>
<li>
<p><code>innodb</code>支持自增长列（auto_increment）,自增长列的值不能为空，如果在使用的时候为空的话怎会进行自动存现有的值开始增值，如果有但是比现在的还大，则就保存这个值。</p>
</li>
<li>
<p><code>innodb</code>存储引擎支持外键（foreign key） ,外键所在的表称为子表而所依赖的表称为父表。</p>
</li>
<li>
<p><code>innodb</code>存储引擎最重要的是支持事务，以及事务相关联功能。</p>
</li>
<li>
<p><code>innodb</code>存储引擎支持<code>mvcc</code>的行级锁。</p>
</li>
<li>
<p><code>innodb</code>存储引擎索引使用的是B+Tree</p>
</li>
</ul>
<blockquote>
<p>优缺点：<code>InnoDB</code>的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。</p></blockquote>
<h3 id="3memory存储引擎">3．<code>MEMORY</code>存储引擎</h3>
<ul>
<li>
<p><code>memory</code>存储引擎相比前面的一些存储引擎，有点不一样，其使用存储在内从中的数据来创建表，而且所有的数据也都存储在内存中。</p>
</li>
<li>
<p>每个基于memory存储引擎的表实际对应一个磁盘文件，该文件的文件名和表名是相同的，类型为<code>.frm</code>。该文件只存储表的结构，而其数据文件，都是存储在内存中，这样有利于对数据的快速处理，提高整个表的处理能力。</p>
</li>
<li>
<p><code>memory</code>存储引擎默认使用哈希（HASH）索引，其速度比使用<code>B-+ Tree</code>型要快，如果读者希望使用B树型，则在创建的时候可以引用。</p>
</li>
<li>
<p><code>memory</code>存储引擎文件数据都存储在内存中，如果<code>mysqld</code>进程发生异常，重启或关闭机器这些数据都会消失。所以<code>memory</code>存储引擎中的表的生命周期很短，一般只使用一次。</p>
</li>
</ul>
<h3 id="4archive存储引擎">4．<code>ARCHIVE</code>存储引擎</h3>
<ul>
<li>该存储引擎非常适合存储大量独立的、作为历史记录的数据。</li>
<li>区别于<code>InnoDB</code>和<code>MyISAM</code>这两种引擎，ARCHIVE提供了压缩功能，拥有高效的插入速度，但是这种引擎不支持索引，所以查询性能较差一些。</li>
</ul>
<h2 id="四种存储引擎比较">四种存储引擎比较</h2>
<ul>
<li>
<p><code>InnoDB</code>：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择<code>InnoDB</code>有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择<code>InnoDB</code>，因为支持事务的提交（commit）和回滚（rollback）。</p>
</li>
<li>
<p><code>MyISAM</code>：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择<code>MyISAM</code>能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。如果数据表主要用来插入和查询记录，则<code>MyISAM</code>引擎能提供较高的处理效率</p>
</li>
<li>
<p><code>MEMORY</code>：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择<code>MEMOEY</code>。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的<code>Memory</code>引擎，MySQL中使用该引擎作为临时表，存放查询的中间结果</p>
</li>
<li>
<p>如果只有<code>INSERT</code>和<code>SELECT</code>操作，可以选择<code>Archive</code>，<code>Archive</code>支持高并发的插入操作，但是本身不是事务安全的。</p>
</li>
<li>
<p><code>Archive</code>非常适合存储归档数据，如记录日志信息可以使用<code>Archiv</code></p>
</li>
</ul>
<blockquote>
<p>注意，同一个数据库也可以使用多种存储引擎的表。如果一个表要求比较高的事务处理，可以选择<code>InnoDB</code>。这个数据库中可以将查询要求比较高的表选择<code>MyISAM</code>存储。如果该数据库需要一个用于查询的临时表，可以选择MEMORY存储引擎。</p></blockquote>
<h2 id="数据类型">数据类型</h2>
<h3 id="数值类型">数值类型</h3>
<p>MySQL支持所有标准SQL数值数据类型。</p>
<p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。</p>
<p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p>
<p>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。</p>
<p>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">类型</th>
          <th style="text-align: left">大小</th>
          <th style="text-align: left">范围（有符号）</th>
          <th style="text-align: left">范围（无符号）</th>
          <th style="text-align: left">用途</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">TINYINT</td>
          <td style="text-align: left">1 byte</td>
          <td style="text-align: left">(-128，127)</td>
          <td style="text-align: left">(0，255)</td>
          <td style="text-align: left">小整数值</td>
      </tr>
      <tr>
          <td style="text-align: left">SMALLINT</td>
          <td style="text-align: left">2 bytes</td>
          <td style="text-align: left">(-32 768，32 767)</td>
          <td style="text-align: left">(0，65 535)</td>
          <td style="text-align: left">大整数值</td>
      </tr>
      <tr>
          <td style="text-align: left">MEDIUMINT</td>
          <td style="text-align: left">3 bytes</td>
          <td style="text-align: left">(-8 388 608，8 388 607)</td>
          <td style="text-align: left">(0，16 777 215)</td>
          <td style="text-align: left">大整数值</td>
      </tr>
      <tr>
          <td style="text-align: left">INT或INTEGER</td>
          <td style="text-align: left">4 bytes</td>
          <td style="text-align: left">(-2 147 483 648，2 147 483 647)</td>
          <td style="text-align: left">(0，4 294 967 295)</td>
          <td style="text-align: left">大整数值</td>
      </tr>
      <tr>
          <td style="text-align: left">BIGINT</td>
          <td style="text-align: left">8 bytes</td>
          <td style="text-align: left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
          <td style="text-align: left">(0，18 446 744 073 709 551 615)</td>
          <td style="text-align: left">极大整数值</td>
      </tr>
      <tr>
          <td style="text-align: left">FLOAT</td>
          <td style="text-align: left">4 bytes</td>
          <td style="text-align: left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
          <td style="text-align: left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
          <td style="text-align: left">单精度 浮点数值</td>
      </tr>
      <tr>
          <td style="text-align: left">DOUBLE</td>
          <td style="text-align: left">8 bytes</td>
          <td style="text-align: left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
          <td style="text-align: left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
          <td style="text-align: left">双精度 浮点数值</td>
      </tr>
      <tr>
          <td style="text-align: left">DECIMAL</td>
          <td style="text-align: left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
          <td style="text-align: left">依赖于M和D的值</td>
          <td style="text-align: left">依赖于M和D的值</td>
          <td style="text-align: left">小数值</td>
      </tr>
  </tbody>
</table>
<hr>
<h3 id="日期和时间类型">日期和时间类型</h3>
<p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p>
<p>每个时间类型有一个有效值范围和一个&quot;零&quot;值，当指定不合法的MySQL不能表示的值时使用&quot;零&quot;值。</p>
<p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">类型</th>
          <th style="text-align: left">大小 ( bytes)</th>
          <th style="text-align: left">范围</th>
          <th style="text-align: left">格式</th>
          <th style="text-align: left">用途</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">DATE</td>
          <td style="text-align: left">3</td>
          <td style="text-align: left">1000-01-01/9999-12-31</td>
          <td style="text-align: left">YYYY-MM-DD</td>
          <td style="text-align: left">日期值</td>
      </tr>
      <tr>
          <td style="text-align: left">TIME</td>
          <td style="text-align: left">3</td>
          <td style="text-align: left">&lsquo;-838:59:59&rsquo;/&lsquo;838:59:59&rsquo;</td>
          <td style="text-align: left">HH:MM:SS</td>
          <td style="text-align: left">时间值或持续时间</td>
      </tr>
      <tr>
          <td style="text-align: left">YEAR</td>
          <td style="text-align: left">1</td>
          <td style="text-align: left">1901/2155</td>
          <td style="text-align: left">YYYY</td>
          <td style="text-align: left">年份值</td>
      </tr>
      <tr>
          <td style="text-align: left">DATETIME</td>
          <td style="text-align: left">8</td>
          <td style="text-align: left">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
          <td style="text-align: left">YYYY-MM-DD HH:MM:SS</td>
          <td style="text-align: left">混合日期和时间值</td>
      </tr>
      <tr>
          <td style="text-align: left">TIMESTAMP</td>
          <td style="text-align: left">4</td>
          <td style="text-align: left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
          <td style="text-align: left">YYYYMMDD HHMMSS</td>
          <td style="text-align: left">混合日期和时间值，时间戳</td>
      </tr>
  </tbody>
</table>
<hr>
<h3 id="字符串类型">字符串类型</h3>
<p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">类型</th>
          <th style="text-align: left">大小</th>
          <th style="text-align: left">用途</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">CHAR</td>
          <td style="text-align: left">0-255 bytes</td>
          <td style="text-align: left">定长字符串</td>
      </tr>
      <tr>
          <td style="text-align: left">VARCHAR</td>
          <td style="text-align: left">0-65535 bytes</td>
          <td style="text-align: left">变长字符串</td>
      </tr>
      <tr>
          <td style="text-align: left">TINYBLOB</td>
          <td style="text-align: left">0-255 bytes</td>
          <td style="text-align: left">不超过 255 个字符的二进制字符串</td>
      </tr>
      <tr>
          <td style="text-align: left">TINYTEXT</td>
          <td style="text-align: left">0-255 bytes</td>
          <td style="text-align: left">短文本字符串</td>
      </tr>
      <tr>
          <td style="text-align: left">BLOB</td>
          <td style="text-align: left">0-65 535 bytes</td>
          <td style="text-align: left">二进制形式的长文本数据</td>
      </tr>
      <tr>
          <td style="text-align: left">TEXT</td>
          <td style="text-align: left">0-65 535 bytes</td>
          <td style="text-align: left">长文本数据</td>
      </tr>
      <tr>
          <td style="text-align: left">MEDIUMBLOB</td>
          <td style="text-align: left">0-16 777 215 bytes</td>
          <td style="text-align: left">二进制形式的中等长度文本数据</td>
      </tr>
      <tr>
          <td style="text-align: left">MEDIUMTEXT</td>
          <td style="text-align: left">0-16 777 215 bytes</td>
          <td style="text-align: left">中等长度文本数据</td>
      </tr>
      <tr>
          <td style="text-align: left">LONGBLOB</td>
          <td style="text-align: left">0-4 294 967 295 bytes</td>
          <td style="text-align: left">二进制形式的极大文本数据</td>
      </tr>
      <tr>
          <td style="text-align: left">LONGTEXT</td>
          <td style="text-align: left">0-4 294 967 295 bytes</td>
          <td style="text-align: left">极大文本数据</td>
      </tr>
  </tbody>
</table>
<p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p>
<p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>
<p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>
<p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>]]></content:encoded>
    </item>
    <item>
      <title>MySQL索引和事务</title>
      <link>https://luenci.com/en/posts/%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;索引&#34;&gt;索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;索引特点：创建与维护索引会消耗很多时间与磁盘空间，但查询速度大大提高！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，对于&lt;code&gt;students&lt;/code&gt;表：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;id&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;class_id&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;name&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;gender&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;score&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;小明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;90&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;小红&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;小军&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;88&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果要经常根据&lt;code&gt;score&lt;/code&gt;列进行查询，就可以对&lt;code&gt;score&lt;/code&gt;列创建索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALTER TABLE students
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ADD INDEX idx_score (score);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;ADD INDEX idx_score (score)&lt;/code&gt;就创建了一个名称为&lt;code&gt;idx_score&lt;/code&gt;，使用列&lt;code&gt;score&lt;/code&gt;的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALTER TABLE students
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ADD INDEX idx_name_score (name, score);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如&lt;code&gt;gender&lt;/code&gt;列，大约一半的记录值是&lt;code&gt;M&lt;/code&gt;，另一半是&lt;code&gt;F&lt;/code&gt;，因此，对该列创建索引就没有意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;mysql索引的类型&#34;&gt;MySQL索引的类型&lt;/h2&gt;
&lt;h3 id=&#34;1-普通索引&#34;&gt;1. 普通索引&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，&lt;code&gt;MyIASM&lt;/code&gt;中默认的&lt;code&gt;BTREE&lt;/code&gt;类型的索引，也是我们大多数情况下用到的索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;01&lt;/span&gt;  –直接创建索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;02&lt;/span&gt;  CREATE INDEX index_name ON table&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;column&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;length&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;03&lt;/span&gt;  –修改表结构的方式添加索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;04&lt;/span&gt;  ALTER TABLE table_name ADD INDEX index_name ON &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;column&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;length&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;05&lt;/span&gt;  –创建表的时候同时创建索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;06&lt;/span&gt;  CREATE TABLE &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;table&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;07&lt;/span&gt;      &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; int&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;11&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; NOT NULL AUTO_INCREMENT ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;08&lt;/span&gt;      &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;title&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; char&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;255&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;09&lt;/span&gt;      &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;content&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;      &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;time&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; int&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;10&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; NULL DEFAULT NULL ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;11&lt;/span&gt;       PRIMARY KEY &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;12&lt;/span&gt;       INDEX index_name &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;title&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;length&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;14&lt;/span&gt;  –删除索引
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;15&lt;/span&gt;  DROP INDEX index_name ON table
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      <content:encoded><![CDATA[<h1 id="索引">索引</h1>
<ul>
<li>
<p>索引特点：创建与维护索引会消耗很多时间与磁盘空间，但查询速度大大提高！</p>
</li>
<li>
<p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。</p>
</li>
<li>
<p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p>
</li>
</ul>
<p>例如，对于<code>students</code>表：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">id</th>
          <th style="text-align: left">class_id</th>
          <th style="text-align: left">name</th>
          <th style="text-align: left">gender</th>
          <th style="text-align: left">score</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">1</td>
          <td style="text-align: left">1</td>
          <td style="text-align: left">小明</td>
          <td style="text-align: left">M</td>
          <td style="text-align: left">90</td>
      </tr>
      <tr>
          <td style="text-align: left">2</td>
          <td style="text-align: left">1</td>
          <td style="text-align: left">小红</td>
          <td style="text-align: left">F</td>
          <td style="text-align: left">95</td>
      </tr>
      <tr>
          <td style="text-align: left">3</td>
          <td style="text-align: left">1</td>
          <td style="text-align: left">小军</td>
          <td style="text-align: left">M</td>
          <td style="text-align: left">88</td>
      </tr>
  </tbody>
</table>
<p>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>ALTER TABLE students
</span></span><span style="display:flex;"><span>ADD INDEX idx_score (score);
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>ALTER TABLE students
</span></span><span style="display:flex;"><span>ADD INDEX idx_name_score (name, score);
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。</p>
</li>
<li>
<p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p>
</li>
</ul>
<blockquote>
<p><strong>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</strong></p></blockquote>
<h2 id="mysql索引的类型">MySQL索引的类型</h2>
<h3 id="1-普通索引">1. 普通索引</h3>
<ul>
<li>这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，<code>MyIASM</code>中默认的<code>BTREE</code>类型的索引，也是我们大多数情况下用到的索引。</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#a5d6ff">01</span>  –直接创建索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">02</span>  CREATE INDEX index_name ON table<span style="color:#ff7b72;font-weight:bold">(</span>column<span style="color:#ff7b72;font-weight:bold">(</span>length<span style="color:#ff7b72;font-weight:bold">))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">03</span>  –修改表结构的方式添加索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">04</span>  ALTER TABLE table_name ADD INDEX index_name ON <span style="color:#ff7b72;font-weight:bold">(</span>column<span style="color:#ff7b72;font-weight:bold">(</span>length<span style="color:#ff7b72;font-weight:bold">))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">05</span>  –创建表的时候同时创建索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">06</span>  CREATE TABLE <span style="color:#a5d6ff">`</span>table<span style="color:#a5d6ff">`</span> <span style="color:#ff7b72;font-weight:bold">(</span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">07</span>      <span style="color:#a5d6ff">`</span>id<span style="color:#a5d6ff">`</span> int<span style="color:#ff7b72;font-weight:bold">(</span>11<span style="color:#ff7b72;font-weight:bold">)</span> NOT NULL AUTO_INCREMENT ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">08</span>      <span style="color:#a5d6ff">`</span>title<span style="color:#a5d6ff">`</span> char<span style="color:#ff7b72;font-weight:bold">(</span>255<span style="color:#ff7b72;font-weight:bold">)</span> CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">09</span>      <span style="color:#a5d6ff">`</span>content<span style="color:#a5d6ff">`</span> text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">10</span>      <span style="color:#a5d6ff">`</span>time<span style="color:#a5d6ff">`</span> int<span style="color:#ff7b72;font-weight:bold">(</span>10<span style="color:#ff7b72;font-weight:bold">)</span> NULL DEFAULT NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">11</span>       PRIMARY KEY <span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">`</span>id<span style="color:#a5d6ff">`</span><span style="color:#ff7b72;font-weight:bold">)</span>,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">12</span>       INDEX index_name <span style="color:#ff7b72;font-weight:bold">(</span>title<span style="color:#ff7b72;font-weight:bold">(</span>length<span style="color:#ff7b72;font-weight:bold">))</span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">13</span>  <span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">14</span>  –删除索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">15</span>  DROP INDEX index_name ON table
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-唯一索引">2. 唯一索引</h3>
<ul>
<li>与普通索引类似，不同的就是：索引列的值必须唯一，<strong>但允许有空值（注意和主键不同）</strong>。</li>
<li>如果是组合索引，则列值的组合必须唯一，创建方法和普通索引类似。</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#a5d6ff">01</span>  –创建唯一索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">02</span>  CREATE UNIQUE INDEX indexName ON table<span style="color:#ff7b72;font-weight:bold">(</span>column<span style="color:#ff7b72;font-weight:bold">(</span>length<span style="color:#ff7b72;font-weight:bold">))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">03</span>  –修改表结构
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">04</span>  ALTER TABLE table_name ADD UNIQUE indexName ON <span style="color:#ff7b72;font-weight:bold">(</span>column<span style="color:#ff7b72;font-weight:bold">(</span>length<span style="color:#ff7b72;font-weight:bold">))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">05</span>  –创建表的时候直接指定
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">06</span>  CREATE TABLE <span style="color:#a5d6ff">`</span>table<span style="color:#a5d6ff">`</span> <span style="color:#ff7b72;font-weight:bold">(</span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">07</span>      <span style="color:#a5d6ff">`</span>id<span style="color:#a5d6ff">`</span> int<span style="color:#ff7b72;font-weight:bold">(</span>11<span style="color:#ff7b72;font-weight:bold">)</span> NOT NULL AUTO_INCREMENT ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">08</span>      <span style="color:#a5d6ff">`</span>title<span style="color:#a5d6ff">`</span> char<span style="color:#ff7b72;font-weight:bold">(</span>255<span style="color:#ff7b72;font-weight:bold">)</span> CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">09</span>      <span style="color:#a5d6ff">`</span>content<span style="color:#a5d6ff">`</span> text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">10</span>      <span style="color:#a5d6ff">`</span>time<span style="color:#a5d6ff">`</span> int<span style="color:#ff7b72;font-weight:bold">(</span>10<span style="color:#ff7b72;font-weight:bold">)</span> NULL DEFAULT NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">11</span>      PRIMARY KEY <span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">`</span>id<span style="color:#a5d6ff">`</span><span style="color:#ff7b72;font-weight:bold">)</span>,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">12</span>      UNIQUE indexName <span style="color:#ff7b72;font-weight:bold">(</span>title<span style="color:#ff7b72;font-weight:bold">(</span>length<span style="color:#ff7b72;font-weight:bold">))</span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">13</span>  <span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-全文索引fulltext">3. 全文索引（<code>FULLTEXT</code>）</h3>
<ul>
<li>MySQL从3.23.23版开始支持全文索引和全文检索，<code>FULLTEXT</code>索引仅可用于 <code>MyISAM </code>表；</li>
<li>他们可以从<code>CHAR</code>、<code>VARCHAR</code>或<code>TEXT</code>列中作为<code>CREATE TABLE</code>语句的一部分被创建，或是随后使用<code>ALTER TABLE </code>或<code>CREATE INDEX</code>被添加。</li>
<li>对于较大的数据集，将你的资料输入一个没有<code>FULLTEXT</code>索引的表中，然后创建索引，其速度比把资料输入现有<code>FULLTEXT</code>索引的中速度更为快。</li>
<li>不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#a5d6ff">01</span>  –创建表的适合添加全文索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">02</span>  CREATE TABLE <span style="color:#a5d6ff">`</span>table<span style="color:#a5d6ff">`</span> <span style="color:#ff7b72;font-weight:bold">(</span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">03</span>    <span style="color:#a5d6ff">`</span>id<span style="color:#a5d6ff">`</span> int<span style="color:#ff7b72;font-weight:bold">(</span>11<span style="color:#ff7b72;font-weight:bold">)</span> NOT NULL AUTO_INCREMENT ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">04</span>    <span style="color:#a5d6ff">`</span>title<span style="color:#a5d6ff">`</span> char<span style="color:#ff7b72;font-weight:bold">(</span>255<span style="color:#ff7b72;font-weight:bold">)</span> CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">05</span>    <span style="color:#a5d6ff">`</span>content<span style="color:#a5d6ff">`</span> text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">06</span>    <span style="color:#a5d6ff">`</span>time<span style="color:#a5d6ff">`</span> int<span style="color:#ff7b72;font-weight:bold">(</span>10<span style="color:#ff7b72;font-weight:bold">)</span> NULL DEFAULT NULL ,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">07</span>    PRIMARY KEY <span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">`</span>id<span style="color:#a5d6ff">`</span><span style="color:#ff7b72;font-weight:bold">)</span>,
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">08</span>    FULLTEXT <span style="color:#ff7b72;font-weight:bold">(</span>content<span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">09</span>  <span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">10</span>  –修改表结构添加全文索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">11</span>  ALTER TABLE article ADD FULLTEXT index_content<span style="color:#ff7b72;font-weight:bold">(</span>content<span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">12</span>  –直接创建索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">13</span>  CREATE FULLTEXT INDEX index_content ON article<span style="color:#ff7b72;font-weight:bold">(</span>content<span style="color:#ff7b72;font-weight:bold">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-单列索引多列索引">4. 单列索引、多列索引</h3>
<ul>
<li>多个单列索引与单个多列索引的查询效果不同，因为执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。</li>
</ul>
<h3 id="5-组合索引最左前缀">5. 组合索引（最左前缀）</h3>
<ul>
<li>平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。例如上表中针对title和time建立一个组合索引：<code>ALTER TABLE article ADD INDEX index_titme_time (title(50),time(10))</code>。</li>
<li>建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>–title,time
</span></span><span style="display:flex;"><span>–title
</span></span></code></pre></td></tr></table>
</div>
</div><p>为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面的几个SQL所示：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#a5d6ff">1</span>   –使用到上面的索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">2</span>   SELECT * FROM article WHREE <span style="color:#79c0ff">title</span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#39;测试&#39;</span> AND <span style="color:#79c0ff">time</span><span style="color:#ff7b72;font-weight:bold">=</span>1234567890;
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">3</span>   SELECT * FROM article WHREE <span style="color:#79c0ff">utitle</span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#39;测试&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">4</span>   –不使用上面的索引
</span></span><span style="display:flex;"><span><span style="color:#a5d6ff">5</span>   SELECT * FROM article WHREE <span style="color:#79c0ff">time</span><span style="color:#ff7b72;font-weight:bold">=</span>1234567890;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="小结">小结</h3>
<ul>
<li>
<p>通过对数据库表创建索引，可以提高查询速度。</p>
</li>
<li>
<p>通过创建唯一索引，可以保证某一列的值具有唯一性。</p>
</li>
<li>
<p>数据库索引对于用户和应用程序来说都是透明的。</p>
</li>
</ul>
<blockquote>
<p>有几个索引就有几组排序，索引越多占用空间越大，插入速度越慢查询的时候数据库自动分析然后挑一个最合适的索引</p></blockquote>
<h1 id="mysql-事务">MySQL 事务</h1>
<blockquote>
<p><strong>事务指逻辑上的一组操作，组成这个操作的各个单元，要么都成功，要么都不成功</strong></p></blockquote>
<p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<ul>
<li>在 MySQL 中只有使用了 <code>Innodb</code> 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 <code>insert</code>,<code>update</code>,<code>delete</code> 语句</li>
</ul>
<p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p>
<ul>
<li>**原子性：**一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>**一致性：**在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li>**隔离性：**数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（<code>Read uncommitted</code>）、读提交（<code>read committed</code>）、可重复读（<code>repeatable read</code>）和串行化（<code>Serializable</code>）。</li>
<li>**持久性：**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<blockquote>
<p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 <code>BEGIN </code>或 <code>START TRANSACTION</code>，或者执行命令 <code>SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。</p></blockquote>
<h2 id="事务控制语句">事务控制语句</h2>
<ul>
<li><code>BEGIN</code> 或 <code>START TRANSACTION </code>显式地开启一个事务；</li>
<li><code>COMMIT</code> 也可以使用<code> COMMIT WORK</code>，不过二者是等价的。<code>COMMIT </code>会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li><code>ROLLBACK</code> 也可以使用 <code>ROLLBACK WORK</code>，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li><code>SAVEPOINT identifier</code>，<code>SAVEPOINT</code> 允许在事务中创建一个保存点，一个事务中可以有多个<code> SAVEPOINT</code>；</li>
<li><code>RELEASE SAVEPOINT identifier</code> 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li><code>ROLLBACK TO identifier</code> 把事务回滚到标记点；</li>
<li><code>SET TRANSACTION</code> 用来设置事务的隔离级别。<code>InnoDB</code> 存储引擎提供事务的隔离级别有<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code> 和<code> SERIALIZABLE</code>。</li>
</ul>
<h2 id="mysql-事务处理方法">MYSQL 事务处理方法</h2>
<p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li><strong>BEGIN</strong> 开始一个事务</li>
<li><strong>ROLLBACK</strong> 事务回滚</li>
<li><strong>COMMIT</strong> 事务确认</li>
</ul>
<p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p>
<ul>
<li><code>SET AUTOCOMMIT=0</code> 禁止自动提交</li>
<li><code>SET AUTOCOMMIT=1</code> 开启自动提交</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>SQL性能调优</title>
      <link>https://luenci.com/en/posts/sql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/sql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;原文链接：https://blog.csdn.net/u010520146/article/details/81161762&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;一创建索引&#34;&gt;一.创建索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1.要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引&lt;/li&gt;
&lt;li&gt;2.1在经常需要进行检索的字段上创建索引，比如要按照表字段&lt;code&gt;username&lt;/code&gt;进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。&lt;/li&gt;
&lt;li&gt;2.2创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。&lt;/li&gt;
&lt;li&gt;2.3一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二避免在索引上使用计算&#34;&gt;二.避免在索引上使用计算&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数
属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。&lt;/li&gt;
&lt;li&gt;效率低：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt; select * from user where salary*22 &amp;gt; 11000 (salary是索引列)&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em><strong>原文链接：https://blog.csdn.net/u010520146/article/details/81161762</strong></em></p>
<h1 id="一创建索引">一.创建索引</h1>
<ul>
<li>1.要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引</li>
<li>2.1在经常需要进行检索的字段上创建索引，比如要按照表字段<code>username</code>进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。</li>
<li>2.2创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。</li>
<li>2.3一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。</li>
</ul>
<h1 id="二避免在索引上使用计算">二.避免在索引上使用计算</h1>
<ul>
<li>在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数
属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。</li>
<li>效率低：</li>
</ul>
<p><code> select * from user where salary*22 &gt; 11000 (salary是索引列)</code></p>
<ul>
<li>效率高：</li>
</ul>
<p><code>select * from user where salary &gt; 11000/22 (salary是索引列)</code></p>
<h1 id="三使用预编译查询">三.使用预编译查询</h1>
<ul>
<li>程序中通常是根据用户的输入来动态执行SQL，这时应该尽量使用参数化SQL,这样不仅可以避免SQL注入漏洞
攻击，最重要数据库会对这些参数化SQL进行预编译，这样第一次执行的时候DBMS会为这个SQL语句进行查询优化并且执行预编译，这样以后再执行这个SQL的时候就直接使用预编译的结果，这样可以大大提高执行的速度。</li>
</ul>
<h1 id="四调整where字句中的连接顺序">四.调整Where字句中的连接顺序</h1>
<ul>
<li>DBMS一般采用自下而上的顺序解析where字句，根据这个原理表连接最好写在其他where条件之前，那些可以过滤掉最大数量记录。</li>
</ul>
<!-- more -->
<h1 id="五尽量将多条sql语句压缩到一句sql中">五.尽量将多条SQL语句压缩到一句SQL中</h1>
<ul>
<li>每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程
是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行。</li>
</ul>
<h1 id="六用where子句替换having字句">六.用where子句替换HAVING字句</h1>
<ul>
<li>避免使用<code>HAVING</code>字句，因为<code>HAVING</code>只会在检索出所有记录之后才对结果集进行过滤，而<code>where</code>则是在聚合前
刷选记录，如果能通过<code>where</code>字句限制记录的数目，那就能减少这方面的开销。<code>HAVING</code>中的条件一般用于聚合函数
的过滤，除此之外，应该将条件写在<code>where</code>字句中。</li>
</ul>
<h1 id="七使用表的别名">七.使用表的别名</h1>
<ul>
<li>当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减
少哪些友列名歧义引起的语法错误。</li>
</ul>
<h1 id="八用union-all替换union">八.用union all替换union</h1>
<ul>
<li>当SQL语句需要<code>union</code>两个查询结果集合时，即使检索结果中不会有重复的记录，如果使用<code>union</code>这两个结果集同样会尝试进行合并，然后在输出最终结果前进行排序，因此如果可以判断检索结果中不会有重复的记录时候，应该用union all，这样效率就会因此得到提高。</li>
</ul>
<h1 id="九考虑使用临时表暂存中间结果">九.考虑使用“临时表”暂存中间结果</h1>
<ul>
<li>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是，临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在<code>tempdb</code>中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。但是也得避免频繁创建和删除临时表，以减少系统表资源的消耗。</li>
</ul>
<h1 id="十只在必要的情况下才使用事务begin-translation">十.只在必要的情况下才使用事务begin translation</h1>
<ul>
<li>SQL Server中一句SQL语句默认就是一个事务，在该语句执行完成后也是默认<code>commit</code>的。其实，这就是<code>begin tran</code>的一个最小化的形式，好比在每句语句开头隐含了一个<code>begin tran</code>，结束时隐含了一个commit。</li>
<li>有些情况下，我们需要显式声明<code>begin tran</code>，比如做“插、删、改”操作需要同时修改几个表，要求要么几个表都修改成功，要么都不成功。<code>begin tran</code> 可以起到这样的作用，它可以把若干SQL语句套在一起执行，最后再一起<code>commit</code>。 好处是保证了数据的一致性，但任何事情都不是完美无缺的。<code>Begin tran</code>付出的代价是在提交之前，所有SQL语句锁住的资源都不能释放，直到<code>commit</code>掉。
可见，如果<code>Begin tran</code>套住的SQL语句太多，那数据库的性能就糟糕了。在该大事务提交之前，必然会阻塞别的语句，造成<code>block</code>很多。</li>
<li><code>Begin tran</code>使用的原则是，在保证数据一致性的前提下，<code>begin tran </code>套住的SQL语句越少越好！有些情况下可以采用触发器同步数据，不一定要用<code>begin tran</code>。</li>
</ul>
<h1 id="十一尽量避免使用游标">十一.尽量避免使用游标</h1>
<ul>
<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</li>
</ul>
<h1 id="十二用varcharnvarchar-代替-charnchar">十二.用<code>varchar</code>/<code>nvarchar </code>代替 <code>char</code>/<code>nchar</code></h1>
<ul>
<li>尽可能的使用 <code>varchar/nvarchar </code>代替<code> char/nchar</code> ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>
<li>不要以为 <code>NULL </code>不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是<code>varchar</code>这样的变长字段， <code>null </code>不占用空间。</li>
</ul>
<h1 id="十三查询select语句优化">十三.查询select语句优化</h1>
<ul>
<li>1.任何地方都不要使用 <code>select * from T </code>，用具体的字段列表代替“*”，不要返回用不到的任何字段</li>
<li>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，
如：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#6e7681"> </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#6e7681"> </span><span style="color:#ff7b72">is</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">null</span><span style="color:#6e7681">           
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以在num上设置默认值0，确保表中num列没有null值，
然后这样查询：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">0</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">10</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">or</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">20</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以这样查询：</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">10</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">   </span><span style="color:#ff7b72">union</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">all</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">  </span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>num<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">20</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>4.不能前置百分</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>t<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>name<span style="color:#6e7681"> </span><span style="color:#ff7b72">like</span><span style="color:#6e7681"> </span><span style="color:#f85149">‘</span><span style="color:#ff7b72;font-weight:bold">%</span>abc<span style="color:#ff7b72;font-weight:bold">%</span><span style="color:#f85149">’</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>若要提高效率，可以考虑全文检索。</p>
<p>select id from t where num in(1,2,3)</p>
</li>
<li>
<p>对于连续的数值，能用 between 就不要用 in 了：</p>
<p>select id from t where num between 1 and 3
6.如果查询的两个表大小相当，那么用in和exists差别不大。
in：
例如：表A（小表），表B（大表）</p>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">in</span><span style="color:#6e7681"> </span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B)<span style="color:#6e7681"> 			</span><span style="color:#f85149">效率低，用到了</span>A表上cc列的索引<span style="color:#f85149">；</span><span style="color:#6e7681">     
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">exists</span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#ff7b72;font-weight:bold">=</span>A.cc)<span style="color:#6e7681">   </span><span style="color:#f85149">效率高，用到了</span>B表上cc列的索引<span style="color:#f85149">。</span><span style="color:#6e7681">   
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>相反的</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">in</span><span style="color:#6e7681"> </span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A)<span style="color:#6e7681">  			</span><span style="color:#f85149">效率高，用到了</span>B表上cc列的索引<span style="color:#f85149">；</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>B<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">exists</span>(<span style="color:#ff7b72">select</span><span style="color:#6e7681"> </span>cc<span style="color:#6e7681"> </span><span style="color:#ff7b72">from</span><span style="color:#6e7681"> </span>A<span style="color:#6e7681"> </span><span style="color:#ff7b72">where</span><span style="color:#6e7681"> </span>cc<span style="color:#ff7b72;font-weight:bold">=</span>B.cc)<span style="color:#6e7681">  </span><span style="color:#f85149">效率低，用到了</span>A表上cc列的索引<span style="color:#f85149">。</span><span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="十四更新update语句优化">十四.更新Update语句优化</h1>
<ul>
<li>1.如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志</li>
</ul>
<h1 id="十五-删除delete语句优化语句">十五. 删除Delete语句优化语句</h1>
<p>1.最高效的删除重复记录方法 ( 因为使用了ROWID)例子：</p>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#ff7b72">DELETE</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">FROM</span><span style="color:#6e7681"> </span>EMP<span style="color:#6e7681"> </span>E<span style="color:#6e7681"> </span><span style="color:#ff7b72">WHERE</span><span style="color:#6e7681"> </span>E.ROWID<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span>(<span style="color:#ff7b72">SELECT</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">MIN</span>(X.ROWID)<span style="color:#6e7681"> </span><span style="color:#ff7b72">FROM</span><span style="color:#6e7681"> </span>EMP<span style="color:#6e7681"> </span>X<span style="color:#6e7681"> </span><span style="color:#ff7b72">WHERE</span><span style="color:#6e7681"> </span>X.EMP_NO<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>E.EMP_NO);<span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="十六插入insert语句优化">十六.插入Insert语句优化</h1>
<ul>
<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量<code>log</code>，以提高速度；如果数据量不大，为了缓和系统表的资源，应先<code>create table</code>，然后<code>insert</code>。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>查看mysql连接状况</title>
      <link>https://luenci.com/en/posts/%E6%9F%A5%E7%9C%8Bmysql%E8%BF%9E%E6%8E%A5%E6%83%85%E5%86%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://luenci.com/en/posts/%E6%9F%A5%E7%9C%8Bmysql%E8%BF%9E%E6%8E%A5%E6%83%85%E5%86%B5/</guid>
      <description>&lt;p&gt;使用&lt;a href=&#34;http://www.boke365.net/archives/tag/mysql&#34;&gt;mysql&lt;/a&gt;- uroot -p登录后&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;执行命令: show processlist;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询当前数据库用户连接情况.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是root帐号,你能看到所有用户的当前连接.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是其它普通帐号,只能看到自己占用的连接.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>使用<a href="http://www.boke365.net/archives/tag/mysql">mysql</a>- uroot -p登录后</p>
<ul>
<li>
<p>执行命令: show processlist;</p>
</li>
<li>
<p>查询当前数据库用户连接情况.</p>
</li>
<li>
<p>如果是root帐号,你能看到所有用户的当前连接.</p>
</li>
<li>
<p>如果是其它普通帐号,只能看到自己占用的连接.</p>
</li>
<li>
<p>只列出前100条</p>
<ul>
<li><code>show processlist;</code></li>
</ul>
</li>
<li>
<p>如果想全列出请使用</p>
<ul>
<li><code>show full processlist;</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>mysql<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">show</span><span style="color:#6e7681"> </span>processlist;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#f85149">命令：</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">show</span><span style="color:#6e7681"> </span>status;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#f85149">命令：</span><span style="color:#ff7b72">show</span><span style="color:#6e7681"> </span>status<span style="color:#6e7681"> </span><span style="color:#ff7b72">like</span><span style="color:#6e7681"> </span><span style="color:#f85149">‘</span><span style="color:#ff7b72;font-weight:bold">%</span><span style="color:#f85149">下面变量</span><span style="color:#ff7b72;font-weight:bold">%</span><span style="color:#f85149">’</span>;<span style="color:#6e7681">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Aborted_clients	由于客户没有正确关闭连接已经死掉,已经放弃的连接数量.</li>
<li>Aborted_connects	尝试已经失败的MySQL服务器的连接的次数.</li>
<li>Connections	试图连接MySQL服务器的次数.</li>
<li>Created_tmp_tables	当执行语句时,已经被创造了的隐含临时表的数量.</li>
<li>Delayed_insert_threads	正在使用的延迟插入处理器线程的数量.</li>
<li>Delayed_writes	用INSERT DELAYED写入的行数.</li>
<li>Delayed_errors	用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数.</li>
<li>Flush_commands	执行FLUSH命令的次数.</li>
<li>Handler_delete	请求从一张表中删除行的次数.</li>
</ul>
<!-- more -->
<ul>
<li>Handler_read_first	请求读入表中第一行的次数.</li>
<li>Handler_read_key	请求数字基于键读行.</li>
<li>Handler_read_next	请求读入基于一个键的一行的次数.</li>
<li>Handler_read_rnd	请求读入基于一个固定位置的一行的次数.</li>
<li>Handler_update	请求更新表中一行的次数.</li>
<li>Handler_write	请求向表中插入一行的次数.</li>
<li>Key_blocks_used	用于关键字缓存的块的数量.</li>
<li>Key_read_requests	请求从缓存读入一个键值的次数.</li>
<li>Key_reads	从磁盘物理读入一个键值的次数.</li>
<li>Key_write_requests	请求将一个关键字块写入缓存次数.</li>
<li>Key_writes	将一个键值块物理写入磁盘的次数.</li>
<li>Max_used_connections	同时使用的连接的最大数目.</li>
<li>Not_flushed_key_blocks	在键缓存中已经改变但是还没被清空到磁盘上的键块.</li>
<li>Not_flushed_delayed_rows	在INSERT DELAY队列中等待写入的行的数量.</li>
<li>Open_tables	打开表的数量.</li>
<li>Open_files	打开文件的数量.</li>
<li>Open_streams	打开流的数量(主要用于日志记载）</li>
<li>Opened_tables	已经打开的表的数量.</li>
<li>Questions	发往服务器的查询的数量.</li>
<li>Slow_queries	要花超过long_query_time时间的查询数量.</li>
<li>Threads_connected	当前打开的连接的数量.</li>
<li>Threads_running	不在睡眠的线程数量.</li>
<li>Uptime 服务器工作了多少秒.</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>

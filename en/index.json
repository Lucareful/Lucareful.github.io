[{"content":"MCP 入门 —— （JSON-RPC 2.0 协议） 简介 ​\tJSON-RPC是一个无状态且轻量级的远程过程调用(RPC)协议**\n​\t在AI技术飞速演进的今天，底层通信协议的选择对系统效率和互操作性至关重要。新兴的AI协议如模型上下文协议（MCP）[1]和 Agent2Agent（A2A）[2]协议，都使用了 JSON-RPC 2.0 协议\n协议 1. JSON-RPC 2.0：起源与核心规范 ​\tJSON-RPC协议的诞生，源于对早期RPC协议（如XML-RPC[4]、SOAP[5]）复杂性的反思，旨在提供一种更轻量、更简洁的远程过程调用机制。其2.0版本规范（基于2009年草案，正式发布于2010年左右）更是将这一理念发扬光大。其核心设计哲学正如规范开篇所言：\u0026ldquo;It is designed to be simple!\u0026rdquo;\n核心原则 我们先来看一下JSON-RPC协议设计的几个核心原则。\nStateless (无状态): 每次请求都是独立的，服务器不保存客户端状态。 Light-weight (轻量级): 协议开销小，消息体紧凑。 JSON Data Format (JSON数据格式): 使用广泛流行、易于解析和人类可读的JSON(RFC 4627[6]) 作为数据交换格式。 Transport Agnostic (传输无关): 协议本身不限定网络传输方式，可在HTTP、WebSocket[7]、TCP、甚至进程内等多种环境使用。 请求对象 一个 JSON-RPC 2.0 请求数据是一个单一的 JSON 对象，可以包含以下成员：\njsonrpc：字符串，指定 JSON-RPC 的版本号，对于 2.0 规范来说，这个值必须是 2.0。\nmethod：字符串，指定要调用的远程方法的名称。\nparams：结构化值，可以是数组或者对象，传递给远程方法的参数。如果方法不需要参数可以省略。\nid：唯一标识符，可以是字符串或数字，用于关联请求和响应，服务端必须返回相同的值。如果请求是一个通知类型，则此参数可以被省略\n一个标准的 JSON-RPC 2.0 请求示例如下：\n1 2 3 4 5 6 { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;subtract\u0026#34;, \u0026#34;params\u0026#34;: [42, 23], \u0026#34;id\u0026#34;: 1 } 响应对象 一个 JSON-RPC 2.0 响应数据也是一个单一的 JSON 对象，可以包含以下成员：\njsonrpc：字符串，指定 JSON-RPC 的版本号，对于 2.0 规范来说，这个值必须是2.0。 result：当请求成功时，包含由远程方法返回的结果。如果请求失败，则不包含此成员。 error：当请求失败时，包含一个错误对象。如果请求成功，则不包含此成员。 id：与请求中的 id 相同，用于识别哪个请求对应的响应。 错误对象包括以下成员：\ncode：整数，用于说明错误类型。JSON-RPC 2.0 定义了一组标准的错误码。 message：字符串，提供关于错误的简短描述。 data：可选，可以包含额外的错误信息，比如堆栈信息等。 一个成功的响应示例如下：\n1 2 3 4 5 { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;result\u0026#34;: 19, \u0026#34;id\u0026#34;: 1 } 而一个异常响应示例如下：\n1 2 3 4 5 6 7 8 { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: -32601, \u0026#34;message\u0026#34;: \u0026#34;Method not found\u0026#34; }, \u0026#34;id\u0026#34;: 1 } 通知 ​\t通知是一种特殊类型的请求，没有 id 成员，因此不会得到响应。这样客户端可以向服务器发送事件或命令而无需等待回复。一个通知示例如下：\n1 2 3 4 5 { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;updateStatus\u0026#34;, \u0026#34;params\u0026#34;: [\u0026#34;online\u0026#34;] } 批量请求 ​\tJSON-RPC 2.0 支持批量请求，即可以在单个请求中发送多个 JSON-RPC 调用。每个调用都是独立的 JSON-RPC 请求对象，被放在一个数组中。服务器处理这些请求后返回一个数组，其中每个元素对应于一个调用。需要注意的是，如果其中一个调用是通知，则不会有对应的响应项。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;sum\u0026#34;, \u0026#34;params\u0026#34;: [1, 3, 5, 7, 9], \u0026#34;id\u0026#34;: \u0026#34;1\u0026#34; }, { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;notify_hello\u0026#34;, \u0026#34;params\u0026#34;: [\u0026#34;Alice\u0026#34;] }, { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;subtract\u0026#34;, \u0026#34;params\u0026#34;: [42, 23], \u0026#34;id\u0026#34;: \u0026#34;2\u0026#34; } ] 错误码 ​\tJSON-RPC 2.0 规范中定义了标准的错误码，但开发者也可以根据自己的业务逻辑添加自定义的错误码。这些自定义错误代码应该在-32000到-32099之间，以避免与标准错误码冲突。通过使用自定义错误码，可以为客户端提供更加具体的错误信息。\n​\t假如这样一个场景，应用程序需要处理用户认证失败的情况，可以定义一个特定的错误码，比如 -32001，并为这个错误码配一个说明，如 Authentication failed。示例如下：\n1 2 3 4 5 6 7 8 { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: -32001, \u0026#34;message\u0026#34;: \u0026#34;Authentication failed\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;1\u0026#34; } 此外，还可以在 error 的 data 参数中包含更多的错误细节，比如错误发生的具体位置或建议的解决方法。\nJSON-RPC 2.0 定义的标准错误码如下（自定义错误吗不要使用如下几个）：\n32700: 解析错误，服务器收到无效的 JSON。\n32600: 无效请求，发送的 JSON 不是有效的请求对象。\n32601: 方法未找到，方法不存在或无效。\n32602: 无效参数，提供的参数无效。\n32603: 内部错误，JSON-RPC 内部错误。\n2.GO实现案例——基于 http client 端\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/ybbus/jsonrpc/v3\u0026#34; ) type Person struct { ID int `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } func main() { fmt.Println(\u0026#34;Starting JSON-RPC client...\u0026#34;) rpcClient := jsonrpc.NewClient(\u0026#34;http://localhost:8080/rpc\u0026#34;) res, err := rpcClient.Call(context.Background(), \u0026#34;echo\u0026#34;, \u0026#34;JSON-RPC!\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } fmt.Println(\u0026#34;Response:{jsonrpc:\u0026#34;, res.JSONRPC, \u0026#34;, id:\u0026#34;, res.ID, \u0026#34;, result:\u0026#34;, res.Result, \u0026#34;, error:\u0026#34;, res.Error, \u0026#34;}\u0026#34;) fmt.Println(\u0026#34;==========================\u0026#34;) response, err := rpcClient.CallBatchRaw(context.Background(), []*jsonrpc.RPCRequest{ { Method: \u0026#34;echo\u0026#34;, ID: 1, Params: []interface{}{\u0026#34;JSON-RPC1!\u0026#34;}, JSONRPC: \u0026#34;2.0\u0026#34;, }, { Method: \u0026#34;echo\u0026#34;, ID: 2, Params: []interface{}{\u0026#34;JSON-RPC2!\u0026#34;}, JSONRPC: \u0026#34;2.0\u0026#34;, }, { Method: \u0026#34;echo\u0026#34;, ID: 3, Params: []interface{}{\u0026#34;JSON-RPC3!\u0026#34;}, JSONRPC: \u0026#34;2.0\u0026#34;, }, }) if err != nil { fmt.Println(\u0026#34;Error:\u0026#34;, err) return } for _, res := range response { fmt.Println(\u0026#34;Response:{jsonrpc:\u0026#34;, res.JSONRPC, \u0026#34;, id:\u0026#34;, res.ID, \u0026#34;, result:\u0026#34;, res.Result, \u0026#34;, error:\u0026#34;, res.Error, \u0026#34;}\u0026#34;) } } server 端\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; ) // JSON-RPC 请求结构 type JSONRPCRequest struct { JSONRPC string `json:\u0026#34;jsonrpc\u0026#34;` Method string `json:\u0026#34;method\u0026#34;` Params json.RawMessage `json:\u0026#34;params\u0026#34;` ID interface{} `json:\u0026#34;id\u0026#34;` } // JSON-RPC 响应结构 type JSONRPCResponse struct { JSONRPC string `json:\u0026#34;jsonrpc\u0026#34;` Result interface{} `json:\u0026#34;result,omitempty\u0026#34;` Error *RPCError `json:\u0026#34;error,omitempty\u0026#34;` ID interface{} `json:\u0026#34;id\u0026#34;` } // 错误结构 type RPCError struct { Code int `json:\u0026#34;code\u0026#34;` Message string `json:\u0026#34;message\u0026#34;` Data interface{} `json:\u0026#34;data,omitempty\u0026#34;` // 添加可选的错误数据字段 } // 标准错误代码常量 const ( ParseErrorCode = -32700 InvalidRequestCode = -32600 MethodNotFoundCode = -32601 InvalidParamsCode = -32602 InternalErrorCode = -32603 ) // 处理 JSON-RPC 方法 func handleRPCMethod(method string, params json.RawMessage) (interface{}, *RPCError) { switch method { case \u0026#34;add\u0026#34;: var numbers []int if err := json.Unmarshal(params, \u0026amp;numbers); err != nil { return nil, \u0026amp;RPCError{Code: InvalidParamsCode, Message: \u0026#34;Invalid params\u0026#34;} } if len(numbers) != 2 { return nil, \u0026amp;RPCError{Code: InvalidParamsCode, Message: \u0026#34;Expected two parameters\u0026#34;} } return numbers[0] + numbers[1], nil case \u0026#34;echo\u0026#34;: var message []string if err := json.Unmarshal(params, \u0026amp;message); err != nil { return nil, \u0026amp;RPCError{Code: InvalidParamsCode, Message: \u0026#34;Invalid params\u0026#34;} } if len(message) == 0 { return nil, \u0026amp;RPCError{Code: InvalidParamsCode, Message: \u0026#34;Expected at least one parameter\u0026#34;} } return fmt.Sprintf(\u0026#34;hello %v\u0026#34;, message[0]), nil case \u0026#34;time\u0026#34;: // 添加一个新方法，返回当前服务器时间 return time.Now().Format(time.RFC3339), nil default: return nil, \u0026amp;RPCError{Code: MethodNotFoundCode, Message: \u0026#34;Method not found\u0026#34;} } } // 处理单个JSON-RPC请求 func processRequest(req JSONRPCRequest) JSONRPCResponse { // 日志记录请求 log.Printf(\u0026#34;Processing request: method=%s, id=%v\u0026#34;, req.Method, req.ID) if req.JSONRPC != \u0026#34;2.0\u0026#34; { return JSONRPCResponse{ JSONRPC: \u0026#34;2.0\u0026#34;, Error: \u0026amp;RPCError{Code: InvalidRequestCode, Message: \u0026#34;Invalid Request: expected jsonrpc=2.0\u0026#34;}, ID: req.ID, } } result, rpcError := handleRPCMethod(req.Method, req.Params) // 日志记录响应 if rpcError != nil { log.Printf(\u0026#34;Request error: method=%s, id=%v, error=%s\u0026#34;, req.Method, req.ID, rpcError.Message) } return JSONRPCResponse{ JSONRPC: \u0026#34;2.0\u0026#34;, Result: result, Error: rpcError, ID: req.ID, } } // 请求日志中间件 func loggingMiddleware(next http.HandlerFunc) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { start := time.Now() log.Printf(\u0026#34;Received %s request from %s\u0026#34;, r.Method, r.RemoteAddr) next(w, r) log.Printf(\u0026#34;Completed in %v\u0026#34;, time.Since(start)) } } // JSON-RPC 请求处理函数 func rpcHandler(w http.ResponseWriter, r *http.Request) { w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) if r.Method != http.MethodPost { log.Printf(\u0026#34;Invalid HTTP method: %s\u0026#34;, r.Method) http.Error(w, \u0026#34;Only POST method is allowed\u0026#34;, http.StatusMethodNotAllowed) return } // 读取请求体 body, err := io.ReadAll(r.Body) if err != nil { log.Printf(\u0026#34;Error reading request body: %v\u0026#34;, err) resp := JSONRPCResponse{ JSONRPC: \u0026#34;2.0\u0026#34;, Error: \u0026amp;RPCError{Code: ParseErrorCode, Message: \u0026#34;Parse error: could not read request body\u0026#34;}, ID: nil, } json.NewEncoder(w).Encode(resp) return } // 请求体为空检查 if len(body) == 0 { log.Print(\u0026#34;Empty request body\u0026#34;) resp := JSONRPCResponse{ JSONRPC: \u0026#34;2.0\u0026#34;, Error: \u0026amp;RPCError{Code: InvalidRequestCode, Message: \u0026#34;Invalid Request: empty body\u0026#34;}, ID: nil, } json.NewEncoder(w).Encode(resp) return } // 尝试解析为批量请求 var batchReq []JSONRPCRequest if err := json.Unmarshal(body, \u0026amp;batchReq); err == nil \u0026amp;\u0026amp; len(batchReq) \u0026gt; 0 { log.Printf(\u0026#34;Processing batch request with %d items\u0026#34;, len(batchReq)) // 批量请求处理 responses := make([]JSONRPCResponse, len(batchReq)) for i, req := range batchReq { responses[i] = processRequest(req) } json.NewEncoder(w).Encode(responses) return } // 尝试解析为单个请求 var singleReq JSONRPCRequest if err := json.Unmarshal(body, \u0026amp;singleReq); err != nil { log.Printf(\u0026#34;JSON parse error: %v\u0026#34;, err) resp := JSONRPCResponse{ JSONRPC: \u0026#34;2.0\u0026#34;, Error: \u0026amp;RPCError{Code: ParseErrorCode, Message: \u0026#34;Parse error: invalid JSON\u0026#34;}, ID: nil, } json.NewEncoder(w).Encode(resp) return } // 处理单个请求 log.Print(\u0026#34;Processing single request\u0026#34;) resp := processRequest(singleReq) json.NewEncoder(w).Encode(resp) } func main() { // 添加日志配置 log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile) log.SetPrefix(\u0026#34;JSON-RPC: \u0026#34;) // 使用中间件包装处理函数 http.HandleFunc(\u0026#34;/rpc\u0026#34;, loggingMiddleware(rpcHandler)) log.Println(\u0026#34;JSON-RPC 服务端已启动，地址：http://localhost:8080/rpc\u0026#34;) if err := http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil); err != nil { log.Fatalf(\u0026#34;服务器启动失败: %v\u0026#34;, err) } } 1 2 3 4 5 6 7 8 outpu： Starting JSON-RPC client... Response:{jsonrpc: 2.0 , id: 0 , result: hello JSON-RPC! , error: \u0026lt;nil\u0026gt; } ========================== Response:{jsonrpc: 2.0 , id: 1 , result: hello JSON-RPC1! , error: \u0026lt;nil\u0026gt; } Response:{jsonrpc: 2.0 , id: 2 , result: hello JSON-RPC2! , error: \u0026lt;nil\u0026gt; } Response:{jsonrpc: 2.0 , id: 3 , result: hello JSON-RPC3! , error: \u0026lt;nil\u0026gt; } 3.使用场景 ​ JSON-RPC 2.0 的使用场景包括但不限于如下几个：\nWeb 应用程序，客户端与服务器之间的异步通信，例如浏览器与后端服务交互。 微服务之间的通信，通过 JSON-RPC 调用其他微服务的接口。 物联网设备，设备与服务器之间的通信，由于 JSON-RPC 的轻量级特性，非常适合资源受限的设备。 移动应用，移动客户端与服务器之间的交互，减少数据传输量，提高响应速度。 区块链和加密货币，节点之间的通信或客户端与节点的交互，许多区块链系统（如以太坊）使用 JSON-RPC 进行接口调用。 远程过程调用（RPC）服务，替代传统的 SOAP 或 XML-RPC，提供简单的接口调用机制。 文档和版本控制 ​ 良好的文档对于任何 API 都至关重要，尤其是像 JSON-RPC 2.0 这样依赖于明确的请求和响应格式的协议。\n编写清晰的 API 文档：详细描述每个方法的用途、参数、返回值和可能的错误情况。可以使用工具如 Swagger 或 Postman 来生成交互式的 API 文档。 保持文档更新：随着 API 的发展，确保文档始终保持最新状态，反映最新的变更和改进。 版本控制：为 API 引入版本控制，以便在不影响现有用户的情况下进行更新。可以在 URL 中或通过请求头指定 API 版本。 社区和支持 ​\tJSON-RPC 2.0 是一个开放的标准，拥有活跃的社区和丰富的资源。参与社区讨论、阅读官方文档和技术博客、关注相关论坛和社交媒体，都可以帮助更快地解决问题，并获取最新的最佳实践。\n​\t此外，很多流行的编程语言和框架都有现成的 JSON-RPC 库，可以大大简化开发过程。选择一个成熟且维护良好的库，不仅可以节省时间，还能减少出错的可能性。\n4.小结 ​\tJSON-RPC 2.0作为一种轻量级的 RPC 协议，提供了如标准化的错误处理、批量请求支持和通知机制等功能，具有简单、易用、跨语言等优点，适用于多种分布式系统场景。\n参考文章 https://mp.weixin.qq.com/s/P2uJlG21Y0C6bPn9mibSSA https://blog.csdn.net/luduoyuan/article/details/144861119 ","permalink":"https://luenci.com/en/posts/mcp%E5%85%A5%E9%97%A8%E5%8D%8F%E8%AE%AE%E7%AF%87/","summary":"\u003ch1 id=\"mcp-入门--json-rpc-20-协议\"\u003eMCP 入门 —— （JSON-RPC 2.0 协议）\u003c/h1\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e​\t\u003cem\u003eJSON-RPC是一个无状态且轻量级的远程过程调用(RPC)协议\u003c/em\u003e**\u003c/p\u003e\n\u003cp\u003e​\t在AI技术飞速演进的今天，底层通信协议的选择对系统效率和互操作性至关重要。新兴的AI协议如\u003cstrong\u003e模型上下文协议（MCP）\u003c/strong\u003e[1]和 \u003cstrong\u003eAgent2Agent（A2A）\u003c/strong\u003e[2]协议，都使用了 JSON-RPC 2.0 协议\u003c/p\u003e","title":"MCP 入门（协议篇）"},{"content":"浅析 GO 中的内存对齐 前置概念 位（bit） ​\t所谓位，是最基本的概念，在计算机中，由于只有逻辑0和逻辑1的存在，因此很多东西、动作、数字都要表示为一串二进制的字码。例如： 1001 0000 1101等等。其中每一个逻辑0或者1便是一个位。例如这个例子里的1000 1110共有八个位，它的英文名字叫（bit），是计算机中最基本的单位。\n字节(Byte) ​\t由八个位(bit)组成的一个单元，也就是8个bit组成1个Byte。在计算机科学中，用于表示ASCII字符，便是运用字节来记录表示字母和一些符号，例如字符A便用 “0100 0001”来表示。\n字（word） 表示被处理信息的单位，用来度量数据类型的宽度。\n​\t在计算机体系结构中，\u0026ldquo;字\u0026quot;是处理器可以在单个操作中处理的数据单元 - 通常是内存中可寻址的最小单位。它是固定大小的比特（二进制数字）组。处理器的字长决定了它处理数据的效率。常见的字长包括 8、16、32 和 64 比特。一些计算机处理器体系结构支持半字，即一个字中的一半比特数，以及双字，即两个相邻字。\n​\t现在最常见的架构是 32 位和 64 位。如果你有 32 位处理器，那意味着它可以一次访问 4 个字节，也就是字长为 4 个字节。如果你有 64 位处理器，那意味着它可以一次访问 8 个字节，也就是字长为 8 个字节。\n​\t将数据存储在内存中时，每个 32 位数据字都有一个唯一地址，如下所示。\nFigure. 1 - 可寻址内存\n​\t我们可以使用加载字（lw）指令读取存储在内存中的数据并将其加载到一个寄存器中。\n​\t字的位数并不是确定值，如 x86 机器将字定义为16位(汇编语言课程中)，也就是两个字节，在32位arm机器中，字定义为32位(嵌入式课程中)。\n​\t指令字长：字节的整数倍，指一个指令字中包含的二进制代码位数。\n​\t存储字长：字节的整数倍，一个存储单元存储的二进制代码的长度。\n字是单位，随系统而变，字长是同一时间处理二进制的长度。\n字符与字节对应关系 ​\t常见的编码字符与字节的对应关系如下：\n① ASCII 码中，一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数，换算为十进制。最小值0，最大值255。\n② UTF-8 编码中，一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。\n③ Unicode 编码中，一个英文等于两个字节，一个中文（含繁体）等于两个字节。 符号：英文标点占一个字节，中文标点占两个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。\n④ GBK 编码方式是中文占两个字节，英文占1个字节。\nstruct 内存对齐 结构体是一种用户定义的数据类型，它将不同类型的相关变量组合在一个名称下。\n​\tGo 使用一种称为“结构填充”的技术，以确保数据在内存中适当对齐，这可能会受到硬件和架构限制的影响，从而显著影响性能。数据填充和对齐符合系统架构的要求，主要是通过确保数据边界与字长对齐来优化 CPU 访问时间。\n1 2 3 4 5 6 type Employee struct { IsAdmin bool Id int64 Age int32 Salary float32 } ​\t一个布尔型变量占用 1 字节， int64 占用 8 字节， int32 占用 4 字节， float32 占用 4 字节，总共为 17 字节。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) type Employee struct { IsAdmin bool Id int64 Age int32 Salary float32 } func main() { var emp Employee fmt.Printf(\u0026#34;Size of Employee: %d\\n\u0026#34;, unsafe.Sizeof(emp)) } // Size of Employee: 24 报告的大小是 24 字节，而不是 17 字节。这种差异是由内存对齐引起的。\n图 未优化的内存布局\n​\tEmployee 结构将使用 8*3 = 24 字节。现在看到问题了， Employee 的布局中有很多空洞（对齐规则产生的间隙称为“填充”）。\n填充优化和性能影响 ​\t理解内存对齐和填充如何影响应用程序性能至关重要。具体来说，数据对齐会影响访问结构体中字段所需的 CPU 周期数。这种影响主要来自 CPU 缓存效应，而不是原始时钟周期本身，因为缓存行为在很大程度上取决于数据局部性和内存块内的对齐。 ​\t现代 CPU 将数据从内存提取到一个更快的中间存储器中，称为缓存，它以固定大小的块（通常为 64 字节）组织。当数据对齐良好且位于相同或更少的缓存行中时，CPU 可以更快地访问数据，因为减少了缓存加载操作。\n考虑以下 Go 结构以示出较差与最佳对齐：\n1 2 3 4 5 6 7 8 9 10 11 12 // Poorly aligned struct type Misaligned struct { Age uint8 // Uses 1 byte, followed by 7 bytes of padding to align the next field PassportId uint64 // 8-byte aligned uint64 for the passport ID Children uint16 //2-byte aligned uint16 // Well-aligned struct type Aligned struct { Age uint8 // Starting with 1 byte Children uint16 // Next, 2 bytes; all these combine into a 3-byte sequence PassportId uint64 // Finally, an 8-byte aligned uint64 without needing additional padding } 对齐方式如何影响性能 ​\tCPU 以字长而非字节大小读取数据。在 64 位系统中，一个字是 8 字节，而在 32 位系统中，一个字是 4 字节。简而言之，CPU 以其字大小的倍数来读取地址。为了获取变量 passportId，我们的 CPU 需要两个周期来访问数据，而不是一个。第一个周期将提取内存 0 到 7，随后的周期将提取其余部分。这是低效的- 我们需要数据结构对齐。通过简单地对齐数据，计算机确保 var passportId 可以在一个 CPU 周期内检索到。\n比较内存访问效率\n​\t填充是实现数据对齐的关键。填充发生是因为现代 CPU 被优化为从对齐地址的内存中读取数据。这种对齐使 CPU 能够在一次操作中读取数据。\n​\t没有填充，数据可能不对齐，导致多次内存访问和性能较慢。因此，虽然填充可能会浪费一些内存，但它确保您的程序运行高效。\n填充优化策略 ​\t对齐的结构消耗更少的内存，仅因为它具备比未对齐更好的结构字段顺序。由于填充，两个 13 字节的数据结构分别变成了 16 字节和 24 字节。因此，通过简单地重新排列您的结构字段，可以节省额外的内存。\n优化字段顺序\n​\t不正确对齐的数据可能会拖慢性能，因为 CPU 可能需要多个周期来访问未对齐的字段。相反，正确对齐的数据可减少缓存行的加载，这对性能至关重要，特别是在内存速度成为瓶颈的系统中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 // Poorly aligned struct type Misaligned struct { Age uint8 // Uses 1 byte, followed by 7 bytes of padding to align the next field PassportId uint64 // 8-byte aligned uint64 for the passport ID Children uint16 //2-byte aligned uint16 // Well-aligned struct type Aligned struct { Age uint8 // Starting with 1 byte Children uint16 // Next, 2 bytes; all these combine into a 3-byte sequence PassportId uint64 // Finally, an 8-byte aligned uint64 without needing additional padding } var AlignedArr []Aligned var MisalignedArr []Misaligned func init() { const sampleSize = 1000 AlignedArr = make([]Aligned, sampleSize) MisalignedArr = make([]Misaligned, sampleSize) for i := 0; i \u0026lt; sampleSize; i++ { AlignedArr[i] = Aligned{Age: uint8(i % 256), PassportId: uint64(i), Children: uint16(i)} MisalignedArr[i] = Misaligned{ Age: uint8(i % 256), PassportId: uint64(i), Children: uint16(i), } } } func traverseAligned() uint16 { var arbitraryNum uint16 for _, item := range AlignedArr { arbitraryNum += item.Siblings } return arbitraryNum } func traverseMisaligned() uint16 { var arbitraryNum uint16 for _, item := range MisalignedArr { arbitraryNum += item.Children } return arbitraryNum } func BenchmarkTraverseAligned(b *testing.B) { for n := 0; n \u0026lt; b.N; n++ { traverseAligned() } } func BenchmarkTraverseMisaligned(b *testing.B) { for n := 0; n \u0026lt; b.N; n++ { traverseMisaligned() } } // 插个眼： 需要禁止编译器优化，否则效果不是很明显 $ go test -gcflags=\u0026#34;-m -l\u0026#34; -v -bench=BenchmarkTraverseMisaligned -count 3 goos: windows goarch: amd64 pkg: xxx cpu: 12th Gen Intel(R) Core(TM) i5-1240P BenchmarkTraverseMisaligned BenchmarkTraverseMisaligned-16 3843603 322.5 ns/op BenchmarkTraverseMisaligned-16 3888368 318.4 ns/op BenchmarkTraverseMisaligned-16 3600476 313.6 ns/op $ go test -gcflags=\u0026#34;-m -l\u0026#34; -v -bench=BenchmarkTraverseMisaligned -count 3 goos: windows goarch: amd64 pkg: xxx cpu: 12th Gen Intel(R) Core(TM) i5-1240P BenchmarkTraverseMisaligned BenchmarkTraverseMisaligned-16 3843603 322.5 ns/op BenchmarkTraverseMisaligned-16 3888368 318.4 ns/op BenchmarkTraverseMisaligned-16 3600476 313.6 ns/op ​\t填充是为了确保每个结构字段根据其需要正确对齐在内存中，就像我们之前看到的那样。但是，虽然它可以实现高效访问，但如果字段顺序不合适，填充也可能会浪费空间。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) type PoorlyAlignedPerson struct { Active bool Salary float64 Age int32 Nickname string } type WellAlignedPerson struct { Salary float64 Nickname string Age int32 Active bool } func main() { poorlyAligned := PoorlyAlignedPerson{} wellAligned := WellAlignedPerson{} fmt.Printf(\u0026#34;Size of PoorlyAlignedPerson: %d bytes\\n\u0026#34;, unsafe.Sizeof(poorlyAligned)) fmt.Printf(\u0026#34;Size of WellAlignedPerson: %d bytes\\n\u0026#34;, unsafe.Sizeof(wellAligned)) } Output： Size of PoorlyAlignedPerson: 40 bytes Size of WellAlignedPerson: 32 bytes https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment 一个自动内存对齐的工具\n参考文章 Optimizing Memory Usage in Go: Mastering Data Structure Alignment - DEV Community ","permalink":"https://luenci.com/en/posts/%E6%B5%85%E6%9E%90-go-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/","summary":"\u003ch1 id=\"浅析-go-中的内存对齐\"\u003e浅析 GO 中的内存对齐\u003c/h1\u003e\n\u003ch2 id=\"前置概念\"\u003e前置概念\u003c/h2\u003e\n\u003ch3 id=\"位bit\"\u003e位（bit）\u003c/h3\u003e\n\u003cp\u003e​\t所谓位，是最基本的概念，在计算机中，由于只有逻辑0和逻辑1的存在，因此很多东西、动作、数字都要表示为一串二进制的字码。例如： 1001 0000 1101等等。其中每一个逻辑0或者1便是一个位。例如这个例子里的\u003ccode\u003e1000 1110\u003c/code\u003e共有八个位，它的英文名字叫（bit），是\u003cstrong\u003e计算机中最基本的单位\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"字节byte\"\u003e字节(Byte)\u003c/h3\u003e\n\u003cp\u003e​\t\u003cstrong\u003e由八个位(bit)组成的一个单元\u003c/strong\u003e，也就是8个bit组成1个Byte。在计算机科学中，\u003cstrong\u003e用于表示ASCII字符\u003c/strong\u003e，便是运用字节来记录表示字母和一些符号，例如字符A便用 “0100 0001”来表示。\u003c/p\u003e\n\u003ch3 id=\"字word\"\u003e字（word）\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e表示被处理信息的单位，用来度量数据类型的宽度\u003c/strong\u003e。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​\t在计算机体系结构中，\u0026ldquo;字\u0026quot;是处理器可以在单个操作中处理的数据单元 - 通常是内存中可寻址的最小单位。它是固定大小的比特（二进制数字）组。处理器的字长决定了它处理数据的效率。常见的字长包括 8、16、32 和 64 比特。一些计算机处理器体系结构支持半字，即一个字中的一半比特数，以及双字，即两个相邻字。\u003c/p\u003e\n\u003cp\u003e​\t现在最常见的架构是 32 位和 64 位。如果你有 32 位处理器，那意味着它可以一次访问 4 个字节，也就是字长为 4 个字节。如果你有 64 位处理器，那意味着它可以一次访问 8 个字节，也就是字长为 8 个字节。\u003c/p\u003e\n\u003cp\u003e​\t将数据存储在内存中时，每个 32 位数据字都有一个唯一地址，如下所示。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202412111819119.jpg\" alt=\"memory\"  /\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eFigure. 1 - 可寻址内存\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​\t我们可以使用加载字（lw）指令读取存储在内存中的数据并将其加载到一个寄存器中。\u003c/p\u003e\n\u003cp\u003e​\t字的位数并不是确定值，如 x86 机器将字定义为16位(汇编语言课程中)，也就是两个字节，在32位arm机器中，字定义为32位(嵌入式课程中)。\u003c/p\u003e\n\u003cp\u003e​\t指令字长：字节的整数倍，指一个指令字中包含的二进制代码位数。\u003c/p\u003e\n\u003cp\u003e​\t存储字长：字节的整数倍，一个存储单元存储的二进制代码的长度。\u003c/p\u003e\n\u003cp\u003e字是单位，随系统而变，字长是同一时间处理二进制的长度。\u003c/p\u003e\n\u003ch3 id=\"字符与字节对应关系\"\u003e字符与字节对应关系\u003c/h3\u003e\n\u003cp\u003e​\t常见的编码字符与字节的对应关系如下：\u003c/p\u003e\n\u003cp\u003e① ASCII 码中，一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数，换算为十进制。最小值0，最大值255。\u003c/p\u003e\n\u003cp\u003e② UTF-8 编码中，一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。\u003c/p\u003e\n\u003cp\u003e③ Unicode 编码中，一个英文等于两个字节，一个中文（含繁体）等于两个字节。\n符号：英文标点占一个字节，中文标点占两个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。\u003c/p\u003e\n\u003cp\u003e④ GBK 编码方式是中文占两个字节，英文占1个字节。\u003c/p\u003e","title":"浅析 GO 中的内存对齐"},{"content":"opentelemetry 入门 概念 ​\tOpenTelemetry 是一个可观测性框架和工具包， 旨在创建和管理遥测数据，如链路、 指标和日志。 重要的是，OpenTelemetry 是供应商和工具无关的，这意味着它可以与各种可观测性后端一起使用， 包括 Jaeger 和 Prometheus 这类开源工具以及商业化产品。\n​\tOpenTelemetry 不是像 Jaeger、Prometheus 或其他商业供应商那样的可观测性后端。 OpenTelemetry 专注于遥测数据的生成、采集、管理和导出。\n​\tOpenTelemetry 的一个主要目标是， 无论应用程序或系统采用何种编程语言、基础设施或运行时环境，你都可以轻松地将其仪表化。 重要的是，遥测数据的存储和可视化是有意留给其他工具处理的。\nTraces ​\t获取或初始化一个追踪器\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package main import ( \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/stdout/stdouttrace\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; sdktrace \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.19.0\u0026#34; \u0026#34;go.opentelemetry.io/otel/trace\u0026#34; ) var tracer trace.Tracer func newExporter(ctx context.Context) (sdktrace.SpanExporter, error) { // Your preferred exporter: console, jaeger, zipkin, OTLP, etc. return stdouttrace.New(stdouttrace.WithPrettyPrint()) } func newTraceProvider(exp sdktrace.SpanExporter) *sdktrace.TracerProvider { // Ensure default SDK resources and the required service name are set. r, err := resource.Merge( resource.Default(), resource.NewWithAttributes( semconv.SchemaURL, semconv.ServiceName(\u0026#34;ExampleService\u0026#34;), ), ) if err != nil { panic(err) } return sdktrace.NewTracerProvider( sdktrace.WithBatcher(exp), sdktrace.WithResource(r), ) } func main() { ctx := context.Background() exp, err := newExporter(ctx) if err != nil { log.Fatalf(\u0026#34;failed to initialize exporter: %v\u0026#34;, err) } // Create a new tracer provider with a batch span processor and the given exporter. tp := newTraceProvider(exp) // Handle shutdown properly so nothing leaks. defer func() { _ = tp.Shutdown(ctx) }() otel.SetTracerProvider(tp) // Finally, set the tracer that can be used for this package. tracer = tp.Tracer(\u0026#34;example.io/package/name\u0026#34;) } Spans ​\tspan 由 Trace 创建。一旦一个 ( span）完成，它就是不可变的，并且不能再被修改。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func httpHandler(w http.ResponseWriter, r *http.Request) { ctx, span := tracer.Start(r.Context(), \u0026#34;hello-span\u0026#34;) defer span.End() // do some work to track with hello-span } ctx := context.TODO() // 获取当前跨度、在某个时间点向当前跨度添加信息 span := trace.SpanFromContext(ctx) // 嵌套 span func parentFunction(ctx context.Context) { ctx, parentSpan := tracer.Start(ctx, \u0026#34;parent\u0026#34;) defer parentSpan.End() // call the child function and start a nested span in there childFunction(ctx) // do more work - when this function ends, parentSpan will complete. } func childFunction(ctx context.Context) { // Create a span to track `childFunction()` - this is a nested span whose parent is `parentSpan` ctx, childSpan := tracer.Start(ctx, \u0026#34;child\u0026#34;) defer childSpan.End() // do work here, when this function returns, childSpan will complete. } Span Attributes ​\t属性是作为元数据应用于跨度（span）的键和值，可用于对跟踪（trace）进行聚合、过滤和分组。可以在创建跨度时添加属性，也可以在跨度完成之前的生命周期中的任何其他时间添加\n1 2 3 4 // setting attributes at creation... ctx, span = tracer.Start(ctx, \u0026#34;attributesAtCreation\u0026#34;, trace.WithAttributes(attribute.String(\u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;))) // ... and after creation span.SetAttributes(attribute.Bool(\u0026#34;isTrue\u0026#34;, true), attribute.String(\u0026#34;stringAttr\u0026#34;, \u0026#34;hi!\u0026#34;)) Semantic Attributes ​\t语义属性是由 开放遥测规范 定义的属性，目的是为 HTTP 方法、状态码、用户代理等常见概念在多种语言、框架和运行时之间提供一组共享的属性键。这些属性在 go.opentelemetry.io/otel/semconv/v1.26.0 包中可用。\n​\t在 OpenTelemetry 中，可以自由创建跨度（span），由实现者使用特定于所表示操作的属性对其进行注释。跨度表示系统内部和系统之间的特定操作。其中一些操作表示使用诸如 HTTP 之类的知名协议的调用或数据库调用。根据协议和操作类型，需要额外信息才能在监控系统中正确表示和分析跨度。统一不同语言中的这种属性设置方式也很重要。这样，操作员将无需了解某种语言的细节，并且从多语言微服务环境中收集的遥测数据仍然可以轻松关联和交叉分析。\n例子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // HTTP 请求的语义属性 import ( \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.19.0\u0026#34; ) attributes := []attribute.KeyValue{ semconv.HTTPMethodKey.String(\u0026#34;GET\u0026#34;), // 请求方法 semconv.HTTPTargetKey.String(\u0026#34;/api/resource\u0026#34;), // 请求的目标路径 semconv.HTTPURLKey.String(\u0026#34;https://example.com/api/resource\u0026#34;), // 完整的URL semconv.HTTPStatusCodeKey.Int(200), // 响应的状态码 semconv.HTTPUserAgentKey.String(\u0026#34;Mozilla/5.0 ...\u0026#34;), // 用户代理 semconv.NetPeerIPKey.String(\u0026#34;192.168.0.1\u0026#34;), // 客户端IP地址 } // 数据库查询的语义属性 attributes := []attribute.KeyValue{ semconv.DBSystemKey.String(\u0026#34;mysql\u0026#34;), // 数据库类型（如mysql、postgresql） semconv.DBNameKey.String(\u0026#34;customer_db\u0026#34;), // 数据库名称 semconv.DBStatementKey.String(\u0026#34;SELECT * FROM users\u0026#34;), // 查询语句 semconv.DBSqlTableKey.String(\u0026#34;users\u0026#34;), // 表名 semconv.NetPeerNameKey.String(\u0026#34;db.example.com\u0026#34;), // 数据库主机名 semconv.NetPeerPortKey.Int(3306), // 数据库端口 } // 异常捕获的语义属性 attributes := []attribute.KeyValue{ semconv.ExceptionTypeKey.String(\u0026#34;java.lang.NullPointerException\u0026#34;), // 异常类型 semconv.ExceptionMessageKey.String(\u0026#34;User ID cannot be null\u0026#34;), // 异常消息 semconv.ExceptionStacktraceKey.String(\u0026#34;stacktrace here...\u0026#34;), // 堆栈跟踪 }zuida // gRPC 请求的语义属性 attributes := []attribute.KeyValue{ semconv.RPCSystemKey.String(\u0026#34;grpc\u0026#34;), // RPC 系统 semconv.RPCServiceKey.String(\u0026#34;com.example.MyService\u0026#34;), // 服务名称 semconv.RPCMethodKey.String(\u0026#34;GetUserData\u0026#34;), // 调用的方法 semconv.NetPeerIPKey.String(\u0026#34;10.0.0.1\u0026#34;), // 客户端 IP semconv.NetPeerPortKey.Int(50051), // 端口 } Events ​\t事件是跨度（span）上一种人类可读的消息，它表示在其生命周期内“正在发生的某事”。\n1 2 3 4 5 6 span.AddEvent(\u0026#34;Acquiring lock\u0026#34;) mutex.Lock() span.AddEvent(\u0026#34;Got lock, doing work...\u0026#34;) // do stuff span.AddEvent(\u0026#34;Unlocking\u0026#34;) mutex.Unlock() ​\t事件的一个有用特性是，其时间戳显示为相对于跨度开始的偏移量，这使您能够轻松查看它们之间经过了多少时间。\n​\t事件也可以有自己的属性\n1 span.AddEvent(\u0026#34;Cancelled wait due to external signal\u0026#34;, trace.WithAttributes(attribute.Int(\u0026#34;pid\u0026#34;, 4328), attribute.String(\u0026#34;signal\u0026#34;, \u0026#34;SIGHUP\u0026#34;))) span status ​\t可以在一个跨度（Span）上设置状态（Status），这通常用于指定一个跨度未成功完成——错误（Error）。默认情况下，所有跨度都是未设置（Unset），这意味着跨度无错误完成。当您需要明确将一个跨度标记为成功，而不是使用默认的未设置（Unset）（即“无错误”）时，保留正常（Ok）状态。\n​\t在跨度(Span)完成之前，可以随时设置状态\n1 2 3 4 5 6 7 8 9 10 11 12 import ( // ... \u0026#34;go.opentelemetry.io/otel/codes\u0026#34; // ... ) // ... result, err := operationThatCouldFail() if err != nil { span.SetStatus(codes.Error, \u0026#34;operationThatCouldFail failed\u0026#34;) } record errors ​\t如果您有一个失败的操作，并且希望捕获它产生的错误，则可以记录该错误。\n1 2 3 4 5 6 7 8 9 10 11 12 13 import ( // ... \u0026#34;go.opentelemetry.io/otel/codes\u0026#34; // ... ) // ... result, err := operationThatCouldFail() if err != nil { span.SetStatus(codes.Error, \u0026#34;operationThatCouldFail failed\u0026#34;) span.RecordError(err) } ​\t强烈建议在使用 RecordError 时，也将一个跨度（span）的状态设置为 Error，除非你不希望将跟踪失败操作的跨度视为错误跨度。RecordError 函数在被调用时不会自动设置跨度状态。\nPropagators and Context ​\t跟踪可以扩展到单个进程之外。这需要上下文传播，即一种将跟踪的标识符发送到远程进程的机制。为了通过网络传播跟踪上下文，必须向 OpenTelemetry API 注册一个传播器。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 package main import ( \u0026#34;context\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/prometheus/client_golang/prometheus/promhttp\u0026#34; \u0026#34;go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/baggage\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\u0026#34; prometheus \u0026#34;go.opentelemetry.io/otel/exporters/prometheus\u0026#34; \u0026#34;go.opentelemetry.io/otel/metric\u0026#34; \u0026#34;go.opentelemetry.io/otel/propagation\u0026#34; sdkmetric \u0026#34;go.opentelemetry.io/otel/sdk/metric\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; sdktrace \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.26.0\u0026#34; \u0026#34;go.opentelemetry.io/otel/trace\u0026#34; ) func initTracer() (*sdktrace.TracerProvider, error) { // Create stdout exporter to be able to retrieve // the collected spans. exporter, err := otlptracehttp.New( context.Background(), otlptracehttp.WithInsecure(), otlptracehttp.WithEndpointURL(\u0026#34;http://localhost:4318/v1/traces\u0026#34;), ) if err != nil { return nil, err } // For the demonstration, use sdktrace.AlwaysSample sampler to sample all traces. // In a production application, use sdktrace.ProbabilitySampler with a desired probability. tp := sdktrace.NewTracerProvider( sdktrace.WithSampler(sdktrace.AlwaysSample()), sdktrace.WithBatcher(exporter), sdktrace.WithResource( resource.NewWithAttributes( semconv.SchemaURL, semconv.ServiceNameKey.String(\u0026#34;ExampleService\u0026#34;), ), ), ) otel.SetTracerProvider(tp) otel.SetTextMapPropagator( propagation.NewCompositeTextMapPropagator( propagation.TraceContext{}, propagation.Baggage{}, ), ) return tp, err } func main() { tp, err := initTracer() if err != nil { log.Fatal(err) } defer func() { if err := tp.Shutdown(context.Background()); err != nil { log.Printf(\u0026#34;Error shutting down tracer provider: %v\u0026#34;, err) } }() uk := attribute.Key(\u0026#34;username\u0026#34;) helloHandler := func(w http.ResponseWriter, req *http.Request) { ctx := req.Context() span := trace.SpanFromContext(ctx) // span为Hello defer span.End() bag := baggage.FromContext(ctx) span.AddEvent( \u0026#34;handling this...\u0026#34;, trace.WithAttributes(uk.String(bag.Member(\u0026#34;username\u0026#34;).Value())), ) _, _ = io.WriteString(w, \u0026#34;Hello, world!\\n\u0026#34;) } // otelhttp.NewHandler会在处理请求的同时创建一个名为 Hello 的 span otelHandler := otelhttp.NewHandler(http.HandlerFunc(helloHandler), \u0026#34;Hello\u0026#34;) http.Handle(\u0026#34;/hello\u0026#34;, otelHandler) err = http.ListenAndServe(\u0026#34;:7777\u0026#34;, nil) if err != nil { log.Fatal(err) } } Metrics ​\t要开始生成指标，您需要有一个已初始化的计量器提供程序（MeterProvider），它允许您创建一个计量器（Meter）。计量器允许您创建可用于创建不同类型指标的工具。OpenTelemetry Go 目前支持以下工具：\nCounter 计数器，一种支持非负增量的同步工具 Asynchronous Counter 异步计数器，一种支持非负增量的异步仪器 Histogram 直方图，一种支持具有统计意义的任意值（如直方图、汇总或百分位数）的同步工具 Synchronous Gauge 同步测量仪，一种支持非累加值（如室温）的同步仪器。 Asynchronous Gauge 异步仪表，一种支持非累加值（如室温）的异步仪器 UpDownCounter 上下计数器，一种支持递增和递减的同步工具，例如活动请求的数量 Asynchronous UpDownCounter 异步可逆计数器，一种支持递增和递减操作的异步仪器 ​\topentelemetry 推荐直接 push 模式，下面这种暴露http服务指标的方式我找了看了源码，貌似是有意隐藏，提了个QA跟进：In the latest version Prometheus Exporter func (*Exporter) ServeHTTP was removed , how can i to expoter my metric use http server ? · open-telemetry/opentelemetry-go · Discussion #5974\n​\t个人感觉 metric api 不如 Prometheus方便简介，指标采集这块可以用其他方案代理，没有银弹。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 package main import ( \u0026#34;context\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/prometheus/client_golang/prometheus/promhttp\u0026#34; \u0026#34;go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/baggage\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\u0026#34; prometheus \u0026#34;go.opentelemetry.io/otel/exporters/prometheus\u0026#34; \u0026#34;go.opentelemetry.io/otel/metric\u0026#34; \u0026#34;go.opentelemetry.io/otel/propagation\u0026#34; sdkmetric \u0026#34;go.opentelemetry.io/otel/sdk/metric\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; sdktrace \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.26.0\u0026#34; \u0026#34;go.opentelemetry.io/otel/trace\u0026#34; ) func initMeter() (*prometheus.Exporter, error) { // 创建 Prometheus Exporter exporter, err := prometheus.New() if err != nil { log.Fatalf(\u0026#34;无法创建 Prometheus 导出器: %v\u0026#34;, err) } // 创建并设置 MeterProvider meterProvider := sdkmetric.NewMeterProvider(sdkmetric.WithReader(exporter)) otel.SetMeterProvider(meterProvider) return exporter, nil } func main() { if _, err := initMeter(); err != nil { log.Fatal(err) } meter := otel.Meter(\u0026#34;example.com/basic\u0026#34;) counterMeter, _ := meter.Int64Counter(\u0026#34;request_count\u0026#34;, metric.WithDescription(\u0026#34;Http request count\u0026#34;), metric.WithUnit(\u0026#34;1\u0026#34;)) uk := attribute.Key(\u0026#34;username\u0026#34;) helloHandler := func(w http.ResponseWriter, req *http.Request) { counterMeter.Add(req.Context(), 1) ctx := req.Context() span := trace.SpanFromContext(ctx) // span为Hello defer span.End() bag := baggage.FromContext(ctx) span.AddEvent( \u0026#34;handling this...\u0026#34;, trace.WithAttributes(uk.String(bag.Member(\u0026#34;username\u0026#34;).Value())), ) _, _ = io.WriteString(w, \u0026#34;Hello, world!\\n\u0026#34;) } // otelhttp.NewHandler会在处理请求的同时创建一个名为 Hello 的 span otelHandler := otelhttp.NewHandler(http.HandlerFunc(helloHandler), \u0026#34;Hello\u0026#34;) http.Handle(\u0026#34;/hello\u0026#34;, otelHandler) // 指标暴露为 Prometheus 标准的数据 http.Handle(\u0026#34;/metrics\u0026#34;, promhttp.Handler()) err = http.ListenAndServe(\u0026#34;:7777\u0026#34;, nil) if err != nil { log.Fatal(err) } } Log 截止到目前官方文档关于 log 只是一个 bate 的实验特性 ，日志与指标和跟踪的不同之处在于，没有面向用户的日志 OpenTelemetry 日志 API。相反，有一些工具可以将日志与现有日志桥接 将常用日志包（例如 slog、logrus、zap、logr）迁移到 OpenTelemetry 中生态系统。 有关此设计决策背后的基本原理，请参阅日志记录规范。\n","permalink":"https://luenci.com/en/posts/opentelemetry-%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"opentelemetry-入门\"\u003eopentelemetry 入门\u003c/h1\u003e\n\u003ch2 id=\"概念\"\u003e概念\u003c/h2\u003e\n\u003cp\u003e​\tOpenTelemetry 是一个\u003ca href=\"https://opentelemetry.io/zh/docs/concepts/observability-primer/#what-is-observability\"\u003e可观测性\u003c/a\u003e框架和工具包， 旨在创建和管理遥测数据，如\u003ca href=\"https://opentelemetry.io/zh/docs/concepts/signals/traces/\"\u003e链路\u003c/a\u003e、 \u003ca href=\"https://opentelemetry.io/zh/docs/concepts/signals/metrics/\"\u003e指标\u003c/a\u003e和\u003ca href=\"https://opentelemetry.io/zh/docs/concepts/signals/logs/\"\u003e日志\u003c/a\u003e。 重要的是，OpenTelemetry 是供应商和工具无关的，这意味着它可以与各种可观测性后端一起使用， 包括 \u003ca href=\"https://www.jaegertracing.io/\"\u003eJaeger\u003c/a\u003e 和 \u003ca href=\"https://prometheus.io/\"\u003ePrometheus\u003c/a\u003e 这类开源工具以及商业化产品。\u003c/p\u003e\n\u003cp\u003e​\tOpenTelemetry 不是像 Jaeger、Prometheus 或其他商业供应商那样的可观测性后端。 \u003cstrong\u003eOpenTelemetry 专注于遥测数据的生成、采集、管理和导出\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e​\tOpenTelemetry 的一个主要目标是， 无论应用程序或系统采用何种编程语言、基础设施或运行时环境，你都可以轻松地将其仪表化。 重要的是，遥测数据的存储和可视化是有意留给其他工具处理的。\u003c/p\u003e\n\u003ch2 id=\"traces\"\u003eTraces\u003c/h2\u003e\n\u003cp\u003e​\t获取或初始化一个追踪器\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-GO\" data-lang=\"GO\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;go.opentelemetry.io/otel/exporters/stdout/stdouttrace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;go.opentelemetry.io/otel\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tsdktrace \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tsemconv \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;go.opentelemetry.io/otel/semconv/v1.19.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;go.opentelemetry.io/otel/trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e tracer trace.Tracer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enewExporter\u003c/span\u003e(ctx context.Context) (sdktrace.SpanExporter, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Your preferred exporter: console, jaeger, zipkin, OTLP, etc.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e stdouttrace.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNew\u003c/span\u003e(stdouttrace.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWithPrettyPrint\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enewTraceProvider\u003c/span\u003e(exp sdktrace.SpanExporter) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003esdktrace.TracerProvider {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Ensure default SDK resources and the required service name are set.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr, err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e resource.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eMerge\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tresource.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDefault\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tresource.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNewWithAttributes\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tsemconv.SchemaURL,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tsemconv.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eServiceName\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;ExampleService\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(err)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e sdktrace.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNewTracerProvider\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tsdktrace.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWithBatcher\u003c/span\u003e(exp),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tsdktrace.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWithResource\u003c/span\u003e(r),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tctx \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e context.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eBackground\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\texp, err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enewExporter\u003c/span\u003e(ctx)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tlog.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;failed to initialize exporter: %v\u0026#34;\u003c/span\u003e, err)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Create a new tracer provider with a batch span processor and the given exporter.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ttp \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enewTraceProvider\u003c/span\u003e(exp)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Handle shutdown properly so nothing leaks.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() { _ = tp.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eShutdown\u003c/span\u003e(ctx) }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\totel.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSetTracerProvider\u003c/span\u003e(tp)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Finally, set the tracer that can be used for this package.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ttracer = tp.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eTracer\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;example.io/package/name\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"opentelemetry 入门"},{"content":"golang slice 并发写入 ​\t由于 slice/map 是引用类型，golang 函数是传值调用，所用参数副本依然是原来的 slice， 并发访问同一个资源会导致竟态条件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var ( slc = []int{} n = 10 wg sync.WaitGroup ) wg.Add(n) for i := 0; i \u0026lt; n; i++ { go func() { slc = append(slc, i) wg.Done() }() } wg.Wait() fmt.Println(\u0026#34;len:\u0026#34;, len(slc)) fmt.Println(\u0026#34;done\u0026#34;) } (每次执行都会有不同的结果) out: len: 3 done 加锁来解决并发 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var ( slc []int n = 10 wg sync.WaitGroup ) mutex := sync.Mutex{} wg.Add(n) for i := 0; i \u0026lt; n; i++ { go func() { mutex.Lock() slc = append(slc, i) mutex.Unlock() wg.Done() }() } wg.Wait() fmt.Println(\u0026#34;len:\u0026#34;, len(slc)) fmt.Println(\u0026#34;done\u0026#34;) } Chan 来解决并发 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main(){ var ( slc []int n = 100 wg sync.WaitGroup ) ch := make(chan int) doneCh := make(chan struct{}) go func() { for v := range ch { slc = append(slc, v) } doneCh \u0026lt;- struct{}{} }() wg.Add(n) for i := 0; i \u0026lt; n; i++ { tmp := i go func() { ch \u0026lt;- tmp wg.Done() }() } wg.Wait() close(ch) \u0026lt;-doneCh fmt.Println(\u0026#34;len:\u0026#34;, len(slc)) fmt.Println(\u0026#34;done\u0026#34;) } 基准测试 留个疑点：这里无锁方案反而性能比不过有锁的。\ngoos 操作系统，这里是windows goarch CPU架构，这里是64位X86 pkg package名，可以在测试的时候指定package cpu CPU的信息，这里可以看到是12代酷睿i5 ns/op 代表每次执行逻辑消耗的时间 B/op 代表每次执行逻辑消耗的内存 allocs/op代表每次执行逻辑申请内存的次数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import \u0026#34;testing\u0026#34; func BenchmarkLock20(b *testing.B) { b.RunParallel(func(pb *testing.PB) { for pb.Next() { Lock() } }) } func BenchmarkNoLock20(b *testing.B) { b.RunParallel(func(pb *testing.PB) { for pb.Next() { noLock() } }) } 1 2 3 4 5 6 7 8 9 10 11 12 13 $ go test -count=3 -benchtime=5s -benchmem -bench . goos: windows goarch: amd64 pkg: xxxx cpu: 12th Gen Intel(R) Core(TM) i5-1240P BenchmarkLock20-16 462022(执行次数) 12215 ns/op 6915 B/op 111 allocs/op BenchmarkLock20-16 477160(执行次数) 12997 ns/op 6909 B/op 111 allocs/op BenchmarkLock20-16 335850(执行次数) 16865 ns/op 6908 B/op 111 allocs/op BenchmarkNoLock20-16 354907(执行次数) 18361 ns/op 5585 B/op 113 allocs/op BenchmarkNoLock20-16 334875(执行次数) 18441 ns/op 5587 B/op 113 allocs/op BenchmarkNoLock20-16 317461(执行次数) 18732 ns/op 5591 B/op 113 allocs/op PASS ok xxx 37.195s ","permalink":"https://luenci.com/en/posts/golang-slice-%E5%B9%B6%E5%8F%91%E5%86%99%E5%85%A5/","summary":"\u003ch1 id=\"golang-slice-并发写入\"\u003egolang slice 并发写入\u003c/h1\u003e\n\u003cp\u003e​\t由于 slice/map 是引用类型，golang 函数是传值调用，所用参数副本依然是原来的 slice， 并发访问同一个资源会导致竟态条件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        slc = []\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        n   = \u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        wg  sync.WaitGroup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    wg.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eAdd\u003c/span\u003e(n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u0026lt; n; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            slc = append(slc, i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            wg.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDone\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    wg.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWait\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;len:\u0026#34;\u003c/span\u003e, len(slc))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;done\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(每次执行都会有不同的结果)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elen: \u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edone\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"golang slice 并发写入"},{"content":"Golang pprof 性能分析指南 pprof 是一个用于可视化和分析分析数据的工具。\n采样方式 方式名称 如何使用 优点 缺点 使用场景 runtime/pprof 手动调用【runtime.StartCPUProfile、runtime.SweightCPUProfile】等API来进行数据的采集。采集程序（非 Server）的指定区块的运行数据进行分析。 灵活性高、按需采集。 工具型应用（比如说定制化的分析小工具、集成到公司监控系统）。这种应用运行一段时间就结束。 net/http/pprof 通过http服务来获取Profile采样文件。 import _ \u0026quot;net/http/pprof\u0026quot;。基于 HTTP Server 运行，并且可以采集运行时数据进行分析。net/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来 简单易用 在线服务（一直运行着的程序） go test 通过命令go test -bench . -cpuprofile cpu.prof来进行采集数据。 针对性强、细化到函数 进行某函数的性能测试 指标解释 常用指标如下：\nallocs：所有时刻的内存使用情况，包括正在使用的及已经回收的\nblock：导致在同步原语上发生阻塞的堆栈跟踪\ncmdline： 当前程序的命令行的完整调用路径。\ngoroutine：目前的 goroutine 数量及运行情况\nheap：当前时刻的内存使用情况\nmutex：查看导致互斥锁的竞争持有者的堆栈跟踪\nprofile：默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件\nthreadcreate：查看创建新 OS 线程的堆栈跟踪。\ntrance：当前程序执行的追踪，可以在秒数的 GET 参数中指定持续时间。在获取追踪文件后，请使用 go 工具的 trace 命令来调查追踪。（深入浅出 Go trace (qq.com)）\n注意，默认情况下是不追踪block和mutex的信息的，如果想要看这两个信息，需要在代码中加上两行：\n1 2 runtime.SetBlockProfileRate(1) // 开启对阻塞操作的跟踪，block runtime.SetMutexProfileFraction(1) // 开启对锁调用的跟踪，mutex 注意，上文的所有信息都是实时的，如果你刷新一下，是可以看到数字在变化的。此时如果点击蓝色的连接，可以看到一些协程的栈信息，这些信息并不容易阅读。如果想要更加清晰的数据，需要将信息保存下来，在本地进行分析。 理解指标 flat：函数自身的运行耗时。 flat%：函数自身在 CPU 运行耗时总比例。 sum%：函数自身累积使用 CPU 总比例。 cum：函数自身及其调用函数的运行总耗时。 cum%：函数自身及其调用函数的运行耗时总比例。 flat flat% 一个函数内的 directly 操作的物理耗时。例如 flat只会记录 step2 和 step3 的时间\n1 2 3 4 5 6 7 func foo(){ a() // step1 largeArray := [math.MaxInt64]int64{} // step2 for i := 0; i \u0026lt; math.MaxInt64; i++ { // step3 c() // step4 } } flat%即是 `flat/总运行时间`。内存等参数同理。**所有的 flat 相加即是总采样时间**，所有的flat%相加应该等于100%。 flat一般是我们最关注的。其代表一个函数可能非常耗时，或者调用了非常多次，或者两者兼而有之，从而导致这个函数消耗了最多的时间。 如果是我们自己编写的代码，则很可能有一些无脑 for 循环、复杂的计算、字符串操作、频繁申请内存等等。 如果是第三方库的代码，则很可能我们过于频繁地调用了这些第三方库，或者以不正确的方式使用了这些第三方库。 cum cum% 相比 flat，cum则是这个函数内所有操作的物理耗时，比如包括了上述的 step1、2、3、4。 cum%即是`cum的时间/总运行时间`。内存等参数同理。 一般cum是我们次关注的，且需要结合flat来看。 flat 可以让我们知道哪个函数耗时多，而 cum 可以帮助我们找到是哪些函数调用了这些耗时的（flat 值大的）函数。\nsum% 其上所有行的flat%的累加。可以视为，这一行及其以上行，其所有的 directly 操作一共占了多少物理时间。 案例分析 go test cpu 使用分析：-cpuprofile=cpu.pprof 内存使用分析：-benchmem -memprofile=mem.pprof block分析：-blockprofile=block.pprof 1 2 3 4 go test -bench=. -run=none -benchmem -memprofile=mem.pprof go test -bench=. -run=none -blockprofile=block.pprof go test -bench=. -run=none -benchmem -memprofile=mem.pprof -cpuprofile=cpu.pprof s go test -bench=. -run=none -benchmem -memprofile=mem.pprof -cpuprofsile=cpu.pprof -blockprofile=block.pprof runtime/pprof 除了注入 http handler 和 go test 以外，我们还可以在程序中通过 pprof 所提供的 Lookup 方法来进行相关内容的采集和调用，其一共支持六种类型，分别是：goroutine、threadcreate、heap、block、mutex，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 type LookupType int8 const ( LookupGoroutine LookupType = iota LookupThreadcreate LookupHeap LookupAllocs LookupBlock LookupMutex ) func pprofLookup(lookupType LookupType, w io.Writer) error { var err error switch lookupType { case LookupGoroutine: p := pprof.Lookup(\u0026#34;goroutine\u0026#34;) err = p.WriteTo(w, 2) case LookupThreadcreate: p := pprof.Lookup(\u0026#34;threadcreate\u0026#34;) err = p.WriteTo(w, 2) case LookupHeap: p := pprof.Lookup(\u0026#34;heap\u0026#34;) err = p.WriteTo(w, 2) case LookupAllocs: p := pprof.Lookup(\u0026#34;allocs\u0026#34;) err = p.WriteTo(w, 2) case LookupBlock: p := pprof.Lookup(\u0026#34;block\u0026#34;) err = p.WriteTo(w, 2) case LookupMutex: p := pprof.Lookup(\u0026#34;mutex\u0026#34;) err = p.WriteTo(w, 2) } return err } 接下来我们只需要对该方法进行调用就好了，其提供了 io.Writer 接口，也就是只要实现了对应的 Write 方法，我们可以将其写到任何支持地方去，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func init() { runtime.SetMutexProfileFraction(1) runtime.SetBlockProfileRate(1) } func main() { http.HandleFunc(\u0026#34;/lookup/heap\u0026#34;, func(w http.ResponseWriter, r *http.Request) { _ = pprofLookup(LookupHeap, os.Stdout) }) http.HandleFunc(\u0026#34;/lookup/threadcreate\u0026#34;, func(w http.ResponseWriter, r *http.Request) { _ = pprofLookup(LookupThreadcreate, os.Stdout) }) http.HandleFunc(\u0026#34;/lookup/block\u0026#34;, func(w http.ResponseWriter, r *http.Request) { _ = pprofLookup(LookupBlock, os.Stdout) }) http.HandleFunc(\u0026#34;/lookup/goroutine\u0026#34;, func(w http.ResponseWriter, r *http.Request) { _ = pprofLookup(LookupGoroutine, os.Stdout) }) _ = http.ListenAndServe(\u0026#34;0.0.0.0:6060\u0026#34;, nil) } 采集CPU(CPU 占用过高) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func CollectCpu() { // 创建分析文件，在当前目录下 file, err := os.Create(\u0026#34;./cpu.prof\u0026#34;) if err != nil { fmt.Printf(\u0026#34;创建采集文件失败, err:%v\\n\u0026#34;, err) return } // 进行 cpu 数据的获取 pprof.StartCPUProfile(file) defer pprof.SweightCPUProfile() // 执行一段有问题的代码 for i := 0; i \u0026lt; 4; i++ { s go do1() } time.Sleep(10 * time.Second) } net/http/pprof 1 2 # 网页，运行该命令让程序开始半分钟（默认值）的CPU采样 服务开启了 pprof $ go tool pprof http://127.0.0.1:8080/debug/pprof/profile 扩展参数选项 选项名 作用 alloc_objects 分析应用程序的内存临时分配情况 alloc_space 查看每个函数分配的内存空间大小 inuse_space 分析应用程序的常驻内存占用情况 inuse_objects 查看每个函数所分配的对象数量 常用命令 web （连线图） 通过Web浏览器可视化图\nweb 将会生成一张svg格式的图片，并用默认打开程序打开（一般是浏览器）。渲染图片需要下载 Download | Graphviz\n节点的颜色越红，其cum和cum%越大。其颜色越灰白，则cum和cum%越小。 节点越大，其flat和flat%越大；其越小，则flat和flat%越小 线条代表了函数的调用链，线条越粗，代表指向的函数消耗了越多的资源。反之亦然。 线条的样式代表了调用关系。实线代表直接调用；虚线代表中间少了几个节点；带有inline字段表示该函数被内联进了调用方（不用在意，可以理解成实线）。 对于一些代码行比较少的函数，编译器倾向于将它们在编译期展开从而消除函数调用，这种行为就是内联。\nweight weight默认按flat排序，打印出消耗前10的函数。也可以选择消耗前N的函数，比如weight5，weight20。\nlist 当发现某个函数资源占用情况可疑时，可以通过 list 函数名 定位到具体的代码位置。比如: list Fire\n火焰图 调用顺序**由上到下**，每一块代表一个函数，越大代表占用 CPU 的时间更长。同时它也可以支持点击块深入进行分析。 代码优化建议 以下是一些从其它项目借鉴或者自己总结的实践经验，它们只是建议，而不是准则，实际项目中应该以性能分析数据来作为优化的参考，避免过早优化。\n对频繁分配的小对象，使用 sync.Pool 对象池避免分配 自动化的 DeepCopy 是非常耗时的，其中涉及到反射，内存分配，容器(如 map)扩展等，大概比手动拷贝慢一个数量级 用 atomic.Load/StoreXXX，atomic.Value, sync.Map 等代替 Mutex。(优先级递减) 使用高效的第三方库，如用fasthttp替代 net/http 在开发环境加上-race编译选项进行竞态检查 在开发环境开启 net/http/pprof，方便实时 pprof 将所有外部IO(网络IO，磁盘IO)做成异步ss 参考文章 Go 语言性能调试与分析工具：pprof 用法简介 | wxsm\u0026rsquo;s pace golang pprof实用使用指南 - 掘金 (juejin.cn) Profiling in Go: A Practical Guide | nyadgar.com golang的pprof与火焰图实战 | wish (debug-lixiwen.github.io) golang pprof 实战 | Wolfogre\u0026rsquo;s Blog Go性能分析工具 | Farmer (farmerchillax.github.io) ","permalink":"https://luenci.com/en/posts/golang-pprof-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E6%8C%87%E5%8D%97/","summary":"\u003ch1 id=\"golang-pprof-性能分析指南\"\u003eGolang pprof 性能分析指南\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003epprof 是一个用于可视化和分析分析数据的工具。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"采样方式\"\u003e采样方式\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e方式名称\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e如何使用\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e优点\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e缺点\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e使用场景\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eruntime/pprof\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e手动调用【runtime.StartCPUProfile、runtime.SweightCPUProfile】等\u003cstrong\u003eAPI\u003c/strong\u003e来进行数据的采集。采集程序（非 Server）的指定区块的运行数据进行分析。\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e灵活性高\u003c/strong\u003e、按需采集。\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e工具型应用\u003c/strong\u003e（比如说定制化的分析小工具、集成到公司监控系统）。这种应用运行一段时间就结束。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003enet/http/pprof\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e通过\u003cstrong\u003ehttp\u003c/strong\u003e服务来获取Profile采样文件。 \u003ccode\u003eimport _ \u0026quot;net/http/pprof\u0026quot;\u003c/code\u003e。基于 HTTP Server 运行，并且可以采集运行时数据进行分析。\u003ccode\u003enet/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e简单易用\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e在线服务（一直运行着的程序）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ego test\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e通过命令\u003ccode\u003ego test -bench . -cpuprofile cpu.prof\u003c/code\u003e来进行采集数据。\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e针对性强\u003c/strong\u003e、细化到函数\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e进行某函数的性能测试\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"指标解释\"\u003e指标解释\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/202410151739088.png\" alt=\"350959005-c2182bee-333f-4ec3-94cb-7a36440bb105\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e常用指标如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eallocs：所有时刻的内存使用情况，包括正在使用的及已经回收的\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eblock：导致在同步原语上发生阻塞的堆栈跟踪\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecmdline： 当前程序的命令行的完整调用路径。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003egoroutine：目前的 goroutine 数量及运行情况\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eheap：当前时刻的内存使用情况\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003emutex：查看导致互斥锁的竞争持有者的堆栈跟踪\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eprofile：默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ethreadcreate：查看创建新 OS 线程的堆栈跟踪。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003etrance：当前程序执行的追踪，可以在秒数的 GET 参数中指定持续时间。在获取追踪文件后，请使用 go 工具的 trace 命令来调查追踪。（\u003ca href=\"https://mp.weixin.qq.com/s/I9xSMxy32cALSNQAN8wlnQ\"\u003e深入浅出 Go trace (qq.com)\u003c/a\u003e）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意，默认情况下是不追踪block和mutex的信息的，如果想要看这两个信息，需要在代码中加上两行：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eruntime.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSetBlockProfileRate\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 开启对阻塞操作的跟踪，block  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eruntime.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSetMutexProfileFraction\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 开启对锁调用的跟踪，mutex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003e注意，上文的所有信息都是实时的，如果你刷新一下，是可以看到数字在变化的。此时如果点击蓝色的连接，可以看到一些协程的栈信息，这些信息并不容易阅读。如果想要更加清晰的数据，需要将信息保存下来，在本地进行分析。\n\u003c/code\u003e\u003c/pre\u003e","title":"Golang pprof 性能分析指南"},{"content":"声明式和命令式编程 声明式(declarative)是结果导向的，命令式(imperative)是过程导向的\n命令式编程：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。 声明式编程：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。 声明式编程和命令式编程的代码例子 ​\t举个简单的例子，假设我们想让一个数组里的数值翻倍。 我们用命令式编程风格实现，像下面这样：\n1 2 3 4 5 6 7 8 9 10 11 var numbers = [1,2,3,4,5] var doubled = [] for(var i = 0; i \u0026lt; numbers.length; i++) { var newNumber = numbers[i] * 2 doubled.push(newNumber) } console.log(doubled) //=\u0026gt; [2,4,6,8,10] ​\t我们直接遍历整个数组，取出每个元素，乘以二，然后把翻倍后的值放入新数组，每次都要操作这个双倍数组，直到计算完所有元素。\n而使用声明式编程方法，我们可以用 Array.map 函数，像下面这样：\n1 2 3 4 5 6 7 var numbers = [1,2,3,4,5] var doubled = numbers.map(function(n) { return n * 2 }) console.log(doubled) //=\u0026gt; [2,4,6,8,10] ​\tmap 利用当前的数组创建了一个新数组，新数组里的每个元素都是经过了传入map的函数(这里是function(n) { return n*2 })的处理。\n​\tmap函数所作的事情是将直接遍历整个数组的过程归纳抽离出来，让我们专注于描述我们想要的是什么(what)。注意，我们传入map的是一个纯函数；它不具有任何副作用(不会改变外部状态)，它只是接收一个数字，返回乘以二后的值。\n​\t在一些具有函数式编程特征的语言里，对于list数据类型的操作，还有一些其他常用的声明式的函数方法。例如，求一个list里所有值的和，命令式编程会这样做：\n1 2 3 4 5 6 7 8 9 var numbers = [1,2,3,4,5] var total = 0 for(var i = 0; i \u0026lt; numbers.length; i++) { total += numbers[i] } console.log(total) //=\u0026gt; 15 而在声明式编程方式里，我们使用 reduce 函数：\n1 2 3 4 5 6 7 var numbers = [1,2,3,4,5] var total = numbers.reduce(function(sum, n) { return sum + n }); console.log(total) //=\u0026gt; 15 ​\treduce 函数利用传入的函数把一个 list 运算成一个值。它以这个函数为参数，数组里的每个元素都要经过它的处理。每一次调用，第一个参数(这里是sum)都是这个函数处理前一个值时返回的结果，而第二个参数(n)就是当前元素。这样下来，每此处理的新元素都会合计到sum中，最终我们得到的是整个数组的和。\n​\t同样，reduce 函数归纳抽离了我们如何遍历数组和状态管理部分的实现，提供给我们一个通用的方式来把一个 list 合并成一个值。我们需要做的只是指明我们想要的是什么\n声明式编程很奇怪吗？ ​\t如果你之前没有听说过map 和 reduce 函数，你的第一感觉，我相信，就会是这样。作为程序员，我们非常习惯去指出事情应该如何运行。“去遍历这个list”，“if 这种情况 then 那样做”，“把这个新值赋给这个变量”。当我们已经知道了如何告诉机器该如何做事时，为什么我们需要去学习这种看起来有些怪异的归纳抽离出来的函数工具？\n​\t在很多情况中，命令式编程很好用。当我们写业务逻辑，我们通常必须要写命令式代码，没有可能在我们的专项业务里也存在一个可以归纳抽离的实现。\n​\t但是，如果我们花时间去学习(或发现)声明式的可以归纳抽离的部分，它们能为我们的编程带来巨大的便捷。首先，我可以少写代码，这就是通往成功的捷径。而且它们能让我们站在更高的层面是思考，站在云端思考我们想要的是什么，而不是站在泥里思考事情该如何去做。\n声明式编程语言：SQL ​\t也许你还不能明白，但有一个地方，你也许已经用到了声明式编程，那就是SQL。\n​\t你可以把SQL当做一个处理数据的声明式查询语言。完全用SQL写一个应用程序？这不可能。但如果是处理相互关联的数据集，它就显的无比强大了。\n像下面这样的查询语句：\n1 2 3 4 SELECT * from dogs INNER JOIN owners WHERE dogs.owner_id = owners.id 如果我们用命令式编程方式实现这段逻辑：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 //dogs = [{name: \u0026#39;Fido\u0026#39;, owner_id: 1}, {...}, ... ] //owners = [{id: 1, name: \u0026#39;Bob\u0026#39;}, {...}, ...] var dogsWithOwners = [] var dog, owner for(var di=0; di \u0026lt; dogs.length; di++) { dog = dogs[di] for(var oi=0; oi \u0026lt; owners.length; oi++) { owner = owners[oi] if (owner \u0026amp;\u0026amp; dog.owner_id == owner.id) { dogsWithOwners.push({ dog: dog, owner: owner }) } }} } ​\t我可没说SQL是一种很容易懂的语言，也没说一眼就能把它们看明白，但基本上还是很整洁的。\n​\tSQL代码不仅很短，不不仅容易读懂，它还有更大的优势。因为我们归纳抽离了how，我们就可以专注于what，让数据库来帮我们优化how.\n​\t我们的命令式编程代码会运行的很慢，因为需要遍历所有 list 里的每个狗的主人。\n​\t而SQL例子里我们可以让数据库来处理how，来替我们去找我们想要的数据。如果需要用到索引(假设我们建了索引)，数据库知道如何使用索引，这样性能又有了大的提升。如果在此不久之前它执行过相同的查询，它也许会从缓存里立即找到。通过放手how，让机器来做这些有难度的事，我们不需要掌握数据库原理就能轻松的完成任务。\n声明式编程：d3.js ​\t另外一个能体现出声明式编程的真正强大之处地方是用户界面、图形、动画编程。\n​\t开发用户界面是有难度的事。因为有用户交互，我们希望能创建漂亮的动态用户交互方式，通常我们会用到大量的状态声明和很多相同作用的代码，这些代码实际上是可以归纳提炼出来的。\n​\td3.js 里面一个非常好的声明时归纳提炼的例子就是它的一个工具包，能够帮助我们使用JavaScript和SVG来开发交互的和动画的数据可视化模型。\n​\t第一次(或第5次，甚至第10次)你开发d3程序时可能会头大。跟SQL一样，d3是一种可视化数据操作的强大通用工具，它能提供你所有how方法，让你只需要说出你想要什么。\n​\t下面是一个例子(我建议你看一下这个演示)。这是一个d3可视化实现，它为data数组里的每个对象画一个圆。为了演示这个过程，我们每秒增加一个圆。\n里面最有趣的一段代码是：\n1 2 3 4 5 6 7 8 9 10 11 //var data = [{x: 5, y: 10}, {x: 20, y: 5}] var circles = svg.selectAll(\u0026#39;circle\u0026#39;) .data(data) circles.enter().append(\u0026#39;circle\u0026#39;) .attr(\u0026#39;cx\u0026#39;, function(d) { return d.x }) .attr(\u0026#39;cy\u0026#39;, function(d) { return d.y }) .attr(\u0026#39;r\u0026#39;, 0) .transition().duration(500) .attr(\u0026#39;r\u0026#39;, 5) 没有必要完全理解这段代码都干了什么(你需要一段时间去领会)，但关键点是：\n​\t首先我们收集了svg里所有的圆，然后把data数组数据绑定到对象里。\n​\tD3 对每个圆都绑定了那些点数据有一个关系表。最初我们只有两个点，没有圆，我们使用.enter()方法获取数据点。这里，我们的意图是画一个圆，中心是x 和 y，初始值是 0 ，半秒后变换成半径为 5。\n为什么我说这很有意思？ ​\t从头再看一遍代码，想一想，我们是在声明我们想要的图案是什么样子，还是在说如何作图。你会发现这里根本没有关于how的代码。我们只是在一个相当高的层面描述我们想要的是什么：\n我要画圆，圆心在data数据里，当增加新圆时，用动画表示半径的增加。\n​\t这太神奇了，我们没有写任何循环，这里没有状态管理。画图操作通常是很难写，很麻烦，很让人讨厌，但这里，d3归纳提取了一些常用的操作，让我们专注于描述我们想要的是什么。\n​\t现在再看，d3.js 很容易理解吗？不是，它绝对需要你花一段时间去学习。而学习的过程基本上需要你放弃去指明如何做事的习惯，而去学会如何描述我想要的是什么。\n​\t最初，这可能是很困难的事，但经过一些时间的学习后，一些神奇的事情发生了——你变得非常非常有效率了。通过归纳提取how，d3.js 能让你真正的专注说明你想要看到的是什么，让你在一个个更高的层面解决问题，解放你的创作力。\n声明式编程的总结 ​\t声明式编程让我们去描述我们想要的是什么，让底层的软件/计算机/等去解决如何去实现它们。\n​\t在很多情况中，就像我们看到的一样，声明式编程能给我们的编程带来真正的提升，通过站在更高层面写代码，我们可以更多的专注于what，而这正是我们开发软件真正的目标。\n​\t问题是，程序员习惯了去描述how，这让我们感觉很好很舒服——强力——能够控制事情的发生发展，不放走任何我们不能看见不能理解的处理过程。\n​\t有时候这种紧盯着how不放的做法是没问题的。如果我需要对代码进行更高性能的优化，我需要对what进行更深一步的描述来指导how。有时候对于某个业务逻辑没有任何可以归纳提取的通用实现，我们只能写命令式编程代码。\n​\t但大多数时候，我们可以、而且应该寻求声明式的写代码方式，如果没有发现现成的归纳提取好的实现，我们应该自己去创建。起初这会很难，必定的，但就像我们使用SQL和D3.js， 我们会长期从中获得巨大的回报！\n小结 ​\t声明式和命令式并不指编程语言，而是想法的实现。你可以理解为对一段代码的封装，抽象，然后进行组合拼成你的结果。这里有一点很容易让人混淆也是我一直有些困惑的点，就在代码封装，抽象，拼接的过程不就是编程中命令式的how么？是这样理解没错，因为机器最终执行的还是一行一行的代码，就是在一步步执行你的代码逻辑，所以命令式和声明式都是相互依存的。只不过声明式是让我们关注结果，复用逻辑，和工具。代码具备抽象和复用能力就为以后的声明式编程做好了基石。是一个先鸡后蛋的问题，我们不用纠结其中一种，两个融合贯通才是最好的实践。\n参考文章 声明式(declarative) vs 命令式(imperative) | 三点水 (lotabout.me) https://developer.aliyun.com/article/342208 ","permalink":"https://luenci.com/en/posts/%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%92%8C%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%BC%96%E7%A8%8B/","summary":"\u003ch1 id=\"声明式和命令式编程\"\u003e声明式和命令式编程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e声明式(declarative)是结果导向的，命令式(imperative)是过程导向的\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e命令式编程：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。\u003c/li\u003e\n\u003cli\u003e声明式编程：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"声明式编程和命令式编程的代码例子\"\u003e声明式编程和命令式编程的代码例子\u003c/h2\u003e\n\u003cp\u003e​\t举个简单的例子，假设我们想让一个数组里的数值翻倍。 我们用命令式编程风格实现，像下面这样：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e numbers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e doubled \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e numbers.length; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e newNumber \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e numbers[i] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  doubled.push(newNumber)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(doubled) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//=\u0026gt; [2,4,6,8,10]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t我们直接遍历整个数组，取出每个元素，乘以二，然后把翻倍后的值放入新数组，每次都要操作这个双倍数组，直到计算完所有元素。\u003c/p\u003e\n\u003cp\u003e而使用声明式编程方法，我们可以用 \u003ccode\u003eArray.map\u003c/code\u003e 函数，像下面这样：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e numbers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e doubled \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e numbers\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003emap(function(n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e n \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003elog(doubled) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e//=\u0026gt;\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e8\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t\u003ccode\u003emap\u003c/code\u003e 利用当前的数组创建了一个新数组，新数组里的每个元素都是经过了传入\u003ccode\u003emap\u003c/code\u003e的函数(这里是\u003ccode\u003efunction(n) { return n*2 }\u003c/code\u003e)的处理。\u003c/p\u003e\n\u003cp\u003e​\t\u003ccode\u003emap\u003c/code\u003e函数所作的事情是将直接遍历整个数组的过程归纳抽离出来，让我们专注于描述我们想要的是什么(what)。注意，我们传入map的是一个纯函数；它不具有任何副作用(不会改变外部状态)，它只是接收一个数字，返回乘以二后的值。\u003c/p\u003e\n\u003cp\u003e​\t在一些具有函数式编程特征的语言里，对于list数据类型的操作，还有一些其他常用的声明式的函数方法。例如，求一个list里所有值的和，命令式编程会这样做：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e numbers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e total \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e numbers\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003elength; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  total \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+=\u003c/span\u003e numbers[i]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003elog(total) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e//=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e而在声明式编程方式里，我们使用 \u003ccode\u003ereduce\u003c/code\u003e 函数：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e numbers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e total \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e numbers\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereduce(function(sum, n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e sum \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e n\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003elog(total) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e//=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e15\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t\u003ccode\u003ereduce\u003c/code\u003e 函数利用传入的函数把一个 list 运算成一个值。它以这个函数为参数，数组里的每个元素都要经过它的处理。每一次调用，第一个参数(这里是\u003ccode\u003esum\u003c/code\u003e)都是这个函数处理前一个值时返回的结果，而第二个参数(\u003ccode\u003en\u003c/code\u003e)就是当前元素。这样下来，每此处理的新元素都会合计到\u003ccode\u003esum\u003c/code\u003e中，最终我们得到的是整个数组的和。\u003c/p\u003e\n\u003cp\u003e​\t同样，\u003ccode\u003ereduce\u003c/code\u003e 函数归纳抽离了我们如何遍历数组和状态管理部分的实现，提供给我们一个通用的方式来把一个 list 合并成一个值。我们需要做的只是指明我们想要的是什么\u003c/p\u003e","title":"声明式和命令式编程"},{"content":"core dump 概念 ​\tcore dump文件实际上是进程在某个时间点时的内存映像，当时进程使用的内存是啥样就会被原样保存下来存在文件系统的某个位置上，这个时间点一般是触发了SIGSEGV或者SIGABRT这两个信号的时候，当进程的内存映像保存完毕后进程就会异常终止，也就是大家喜闻乐见的“程序崩了”和“段错误：核心已转储”。\n​\t因此 coredump 就像是程序出错崩溃后的“第一现场”，是用来排查错误的主要资源。\ngolang 程序生成 coredump 方法 设置环境变量和在代码里调用相关的标准库接口\n​ 在这之前先用ulimit命令检测下系统当前能不能生成coredump：\n1 2 $ ulimit -c unlimited ​\t如果是unlimited就表示可以，如果是0那就不会生成，需要修改ulimit的设置。\n修改GOTRACEBACK环境变量 ​\tGOTRACEBACK是用来控制panic发生时golang程序行为的，值是字符串，具体内容如下：\n值 行为 none 不打印任何堆栈跟踪信息，不过崩溃的原因和哪行代码触发的panic还是会打印 single 只打印当前正在运行的触发panic的goroutine的堆栈以及runtime的堆栈；如果panic是runtime里发出的，则打印所有goroutine的堆栈跟踪信息 all 打印所有用户创建的goroutine的堆栈信息（不包含runtime的） system 在前面all的基础上把runtime相关的所有协程的堆栈信息也一起打印出来 crash 打印的内容和前面system一样，但还会额外生成对应操作系统上的 coredump 文件 ​\t将这个环境变量设置成crash就可以获得信息最全面的coredump文件。\n设置编译参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; ) func main() { arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} for { index := rand.Intn(11) fmt.Println(arr[index]) } } 1 go build -gcflags=\u0026#34;all=-N -l\u0026#34; main.go 运行程序生成 coredump 临时修改 1 GOTRACEBACK=crash ./main 永久修改(设置环境变量) 1 2 # 修改 /etc/profile 新增一行 export GOTRACEBACK=crash 修改core dump文件路径 ps: 如果是容器启动的程序，可设置挂载卷将coredump生成到挂载目录中，这样就可以防止程序panic，容器退出丢失 coredump 文件\n默认路径 1 cat /proc/sys/kernel/core_pattern 临时修改 ​\t修改 /proc/sys/kernel/core_pattern 文件，但/proc目录本身是动态加载的，每次系统重启都会重新加载，因此这种方法只能作为临时修改。例如：\n1 #echo ‘/var/log/%e.core.%p’ \u0026gt; /proc/sys/kernel/core_pattern 永久修改 ​\t使用 sysctl -w name=value 命令。例如：\n1 #sysctl -w kernel.core_pattern=/var/log/%e.core.%p ​\t另外，为了更详尽的记录core dump当时的系统状态，可通过以下参数来丰富core文件的命名：\n1 2 3 4 5 6 7 8 %% 单个%字符 %p 所dump进程的进程ID %u 所dump进程的实际用户ID %g 所dump进程的实际组ID %s 导致本次core dump的信号 %t core dump的时间 (由1970年1月1日计起的秒数) %h 主机名 %e 程序文件名 调试 coredump 文件 ​\t上述步骤会在获取到的 coredump 文件，使用 dlv（golang debug工具）调试。\ndlv 安装 go 版本在1.6之前\n1 2 3 $ git clone https://github.com/go-delve/delve $ cd delve $ go install github.com/go-delve/delve/cmd/dlv 1.6之后的版本\n1 2 3 4 5 6 7 8 9 # Install the latest release: $ go install github.com/go-delve/delve/cmd/dlv@latest # Install at tree head: $ go install github.com/go-delve/delve/cmd/dlv@master # Install at a specific version or pseudo-version: $ go install github.com/go-delve/delve/cmd/dlv@v1.7.3 $ go install github.com/go-delve/delve/cmd/dlv@v1.7.4-0.20211208103735-2f13672765fe 开始调试 按下面的步骤查看信息： bt，查看当前的调用堆栈，找到触发panic的那行代码在哪个frame（栈帧）里 看到是编号为10的frame，使用frame 10进入这个栈帧 使用locals查看当前栈帧内变量的值 p \u0026lt;变量名/表达式\u0026gt;查看变量的具体内容，或者执行一些简单的表达式 还可以修改变量的值，设置断点后再次运行查看结果，不过例子里的问题到第四步就已经明了了。（数组索引为10，越界访问） 参考文章 [转帖]CoreDump设置方式_51CTO博客_coredump 配置 Golang 程序 crash 的时候自动 core dump | 卡瓦邦噶！ (kawabangga.com) 让golang程序生成coredump文件并进行调试 - apocelipes - 博客园 (cnblogs.com) 尝试使用 dlv (delve) 查看 go 程序产生的 core dump · Issue #22 · binderclip/clip · GitHub ","permalink":"https://luenci.com/en/posts/golang%E7%9A%84coredump%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"core-dump-概念\"\u003ecore dump 概念\u003c/h1\u003e\n\u003cp\u003e​\t\u003ccode\u003ecore dump\u003c/code\u003e文件实际上是进程在某个时间点时的内存映像，当时进程使用的内存是啥样就会被原样保存下来存在文件系统的某个位置上，这个时间点一般是触发了\u003ccode\u003eSIGSEGV\u003c/code\u003e或者\u003ccode\u003eSIGABRT\u003c/code\u003e这两个信号的时候，当进程的内存映像保存完毕后进程就会异常终止，也就是大家喜闻乐见的“程序崩了”和“段错误：核心已转储”。\u003c/p\u003e\n\u003cp\u003e​\t因此 \u003ccode\u003ecoredump\u003c/code\u003e 就像是程序出错崩溃后的“第一现场”，是用来排查错误的主要资源。\u003c/p\u003e\n\u003ch1 id=\"golang-程序生成-coredump-方法\"\u003egolang 程序生成 coredump 方法\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e设置环境变量和在代码里调用相关的标准库接口\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​    在这之前先用ulimit命令检测下系统当前能不能生成coredump：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ulimit -c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eunlimited\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t如果是unlimited就表示可以，如果是0那就不会生成，需要修改ulimit的设置。\u003c/p\u003e\n\u003ch2 id=\"修改gotraceback环境变量\"\u003e修改GOTRACEBACK环境变量\u003c/h2\u003e\n\u003cp\u003e​\t\u003ccode\u003eGOTRACEBACK\u003c/code\u003e是用来控制panic发生时golang程序行为的，值是字符串，具体内容如下：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e值\u003c/th\u003e\n          \u003cth\u003e行为\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003enone\u003c/td\u003e\n          \u003ctd\u003e不打印任何堆栈跟踪信息，不过崩溃的原因和哪行代码触发的panic还是会打印\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esingle\u003c/td\u003e\n          \u003ctd\u003e只打印当前正在运行的触发panic的goroutine的堆栈以及runtime的堆栈；如果panic是runtime里发出的，则打印所有goroutine的堆栈跟踪信息\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eall\u003c/td\u003e\n          \u003ctd\u003e打印所有用户创建的goroutine的堆栈信息（不包含runtime的）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esystem\u003c/td\u003e\n          \u003ctd\u003e在前面\u003ccode\u003eall\u003c/code\u003e的基础上把runtime相关的所有协程的堆栈信息也一起打印出来\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ecrash\u003c/td\u003e\n          \u003ctd\u003e打印的内容和前面\u003ccode\u003esystem\u003c/code\u003e一样，但还会额外生成对应操作系统上的 coredump 文件\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e​\t将这个环境变量设置成\u003ccode\u003ecrash\u003c/code\u003e就可以获得信息最全面的coredump文件。\u003c/p\u003e\n\u003ch2 id=\"设置编译参数\"\u003e设置编译参数\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;math/rand\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tarr \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tindex \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e rand.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eIntn\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tfmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(arr[index])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego build -gcflags\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;all=-N -l\u0026#34;\u003c/span\u003e main.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"golang的coredump调试入门"},{"content":"我的编程、热爱、生活 ​ 2016年八月份的一个下午，高考选完专业（计算机科学与技术）后，我在笔记本上敲下了第一个 “九九乘法表” 的 c 语言程序。当控制台输出熟悉的点阵数字的时候，我的编程生涯从就这一刻就开始了。\n​ 我自己都不知道，我是什么时候对这些电子器件感兴趣的。也许是拆了很多的电子玩具，也许是帮村里人“修”了很多电视，又或许是红白机上的像素人物让我沉迷。我从小就不是一个很安分的小朋友，打架、捣乱、放火烧山等。只要有我在的地方都是不得安宁，属于是过街老鼠人人喊打的那种。这种疯疯癫癫的性格一直到高中才有所缓和。我很幸运出生在一个父母都很开明的家庭，我的母亲给予了我所有的爱和耐心，我的父亲则是默默承受着家庭的开销，我的姐姐也给了我无私的关照和支持（ps：我的第一台电脑就是我姐姐给我偷偷补贴才买到的中意的电脑）。\n​ 说回编程，我好像也没有什么异于常人之处。学习方法就是很多大佬们分享的那样，多看（阅读源码）、多练（写）、多想（反思总结源码中可取之处），多学（多看技术文章，多看技术书籍）。最后可能就是要有一些敬业精神，保持良好的代码品味。我很感激第一份工作中的领导和同事，大家都是精益求精的代码工匠，在这种环境的熏陶中，我养成了一个好的代码习惯和原则，并因此获益终生。在后来的工作中，大大小小的项目我都经历过，我见到很多人的代码，有的写的“糟糕至极”，有的写的“随心所欲”，有的写的像诗歌（like poetry）。刚开始的时候我看见一些“无规范”的代码时候，总会去diss，想着去改变别人。并且搞技术的时间久了都或许会变成固执和偏见，你很难去把你脑子里的东西放到别人脑子里。我有很多朋友不止一次的在群里吐槽过这些问题，有些人写的东西看的就让人火冒三丈，我开始的时候也是疯狂在骂，痛苦了很久，后面也是慢慢想通了这点：“好的习惯和规则是用来约束自己的，不是用来约束他人”。我觉得很难用代码的好坏来去评价一个人，也许是他在一个很短的deadline下，用最省时间的方法写下的这些。毕竟老板们看的是产出，看功能实现，不会去看代码。我理解那些人，但我并不苟同。“严以律己，宽以待人”就行。\n​\t那么现在谈下第二，和第三个主题，热爱和生活。我曾经说：“编程是我一生最热爱的东西，并且是我最喜欢的事业”。这句话现在来看，可能要变成：“编程是我一生最热爱的东西之一，并且是我谋生的事业”。自从工作迁移到苏州之后，也开始去结交一些新的朋友，开始尝试新的事物，徒步，骑行，滑板等，为什么没有游戏呢？（因为我菜的抠脚，算是因为菜给我戒掉了网瘾）。疫情封闭的那几年，我觉得应该很多人都或多或少的对人生的有一些思考。生命短暂，那么应该在有限的生命中去追逐更多有趣新鲜的事情，而不要一直把自己锁在工作的方格里。但是转念一想，现在大环境卷的这么厉害，再不卷不就要被裁了么？这个确实是这样，但是看每个人怎么对待这个事情，工作哪有不卷的，但是我关注的一些大佬，卷归卷但是也会有自己的生活。卷可能是一时的，如果一个工作长期让你失去了个人时间，并且没有给予足够的回报，那么确实要考虑这份工作是不是很“值”。我觉得这里有个“真卷”和“假卷”之分，如果一个人天天在群里，朋友圈叫工作累，破事一堆，那么这个是假卷（暂时卷），有空发牢骚说明还是没到那种弹尽粮绝的地步，大家只是想发泄下压抑的情绪。同“真正离开的那次，关门声最小”是一个道理。真卷的是那种闷头干一到家倒头睡，累的不想说一句话。\n​\t我们内部有个系统叫 “balance”，登录的首页是一张动态gif图，画的是一杆秤，左边放置的是life，右边是work，中间站着一个人，在左右摇晃，想让左右两边的（work）和（life）保持平衡（balance）。我很喜欢这个gif，非常有意思。（这可能就是程序员的浪漫吧，加个狗头🐶）。work，和 life 肯定就是不平衡的，我们要做的就是在之中周旋斟酌，保持平衡。\n最后小结一下：认真工作，严以律己，持续学习，享受生活。\n","permalink":"https://luenci.com/en/posts/%E6%88%91%E7%9A%84%E7%BC%96%E7%A8%8B%E7%83%AD%E7%88%B1%E7%94%9F%E6%B4%BB/","summary":"\u003ch1 id=\"我的编程热爱生活\"\u003e我的编程、热爱、生活\u003c/h1\u003e\n\u003cp\u003e​    2016年八月份的一个下午，高考选完专业（计算机科学与技术）后，我在笔记本上敲下了第一个 “九九乘法表” 的 c 语言程序。当控制台输出熟悉的点阵数字的时候，我的编程生涯从就这一刻就开始了。\u003c/p\u003e","title":"我的编程、热爱、生活"},{"content":" 对上层保持简洁，对下层保持抽象\n概念 接口 ​\t在 Golang 中，接口是一组方法签名。 当类型为接口中的所有方法提供定义时，它被称为实现接口。 它与 OOP(面向对象编程) 非常相似。 接口指定了类型应该具有的方法，类型决定了如何实现这些方法。\n结构体\n结构体 ​\tGolang 提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称 struct\n传入接口 ​\t传入接口意味着，可以使调用方更加具有灵活性、可扩展、且更易于编写单元测试.\n可扩展性 ​\t如下面这个例子,UserService需要一个存储对象完成一些操作，如果传入db struct 实例的话，意味着如果下次新增了redis store 那么UserService的逻辑需要进行修改，如果传入接口，只要相关的store实现了接口中定义的方法即可为UserService使用，不需要额外修改代码\n（推荐） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // db.go mysql package db type Store struct { db *sql.DB } func NewDB() *Store { ... } // func to initialise DB func (s *Store) Insert(item interface{}) error { ... } // insert item func (s *Store) Get(id int) error { ... }\t// get item by id ------------------------------------------------------------------------------ // user.go package user type UserStore interface { Insert(item interface{}) error Get(id int) error } type UserService struct { store UserStore } // 接受接口 func NewUserService(s UserStore) *UserService { return \u0026amp;UserService{ store: s, } } func (u *UserService) CreateUser() { ... } func (u *UserService) RetrieveUser(id int) User { ... } （不推荐，扩展性差） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 //postgres.go package db type Store interface { Insert(item interface{}) error Get(id int) error } type MyStore struct { db *sql.DB } func InitDB() Store { ... } //func to initialise DB func (s *Store) Insert(item interface{}) error { ... } //insert item func (s *Store) Get(id int) error { ... } //get item by id ---------------------------------------------------------------- //user.go package user type UserService struct { store db.Store } func NewUserService(s db.Store) *UserService { return \u0026amp;UserService{ store: s, } } func (u *UserService) CreateUser() { ... } func (u *UserService) RetrieveUser(id int) User { ... } 可测试 1 2 3 4 5 6 7 8 //user_test.go func TestCreateUser(t *testing.T) { s := new(inMemStore) //\t实现了接口方法的mock实例 service := NewUserService(s) //... test the CreateUser() function } 返回结构体 ​\t该 NewPerson 函数返回一个 Person 表示个人信息的结构。通过直接返回结构，我们可以在调用代码中显式访问其字段 （ ， Name ， Age Email ）。这种明确性使我们能够轻松检索和利用所需的特定数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type Person struct { Name string Age int Email string } func NewPerson(name string, age int, email string) Person { return Person{ Name: name, Age: age, Email: email, } } func main() { person := NewPerson(\u0026#34;John Doe\u0026#34;, 30, \u0026#34;john.doe@example.com\u0026#34;) fmt.Println(\u0026#34;Name:\u0026#34;, person.Name) fmt.Println(\u0026#34;Age:\u0026#34;, person.Age) fmt.Println(\u0026#34;Email:\u0026#34;, person.Email) } 简洁性 ​\t在定义特定行为和方法时，结构返回提供了无与伦比的控制和灵活性。您可以自由地设计具有所需确切功能的结构。这种根据您的特定要求定制结构的能力可以产生更简洁、更集中的代码，从而精确地满足您的应用程序需求\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 type Person struct { Name string Age int Email string } func (p Person) Greet() { fmt.Println(\u0026#34;Hello, my name is\u0026#34;, p.Name) } func main() { person := Person{ Name: \u0026#34;John Doe\u0026#34;, Age: 30, Email: \u0026#34;john.doe@example.com\u0026#34;, } person.Greet() } ​\t在此更新的示例中，我们向结构中 Person 添加了一个 Greet 方法。通过返回结构，我们能够直接在结构类型上定义特定行为。该 Greet 方法利用 Person 结构的 Name 字段来个性化问候语。这种灵活性使我们能够将相关行为封装在结构本身中，从而促进更简洁、更易于维护的代码。\n耦合性高(注意) ​\t虽然从函数返回结构类型提供了显式、灵活性和控制性，但重要的是要意识到调用代码和特定结构实现之间紧密耦合的潜在挑战。当对结构的实现细节进行修改或引入新功能时，也可能需要更新调用代码。这种紧密耦合增加了代码维护，并给应用程序随时间推移的发展带来了挑战。\n​\t为了减轻紧密耦合的影响，在结构设计中采用良好的实践是必不可少的。仔细考虑并记录结构的预期行为和契约，以管理期望并降低中断性变更的风险。通过提前规划未来的更改，您可以在返回结构的优点和最小化紧密耦合的潜在缺点之间取得平衡。\n返回接口 抽象化 ​\t返回接口通过隐藏底层结构的实现细节来实现更高级别的抽象。返回接口时，会显示对象所遵循的明确协定或行为集，而不会暴露内部工作原理。这种抽象有助于分离关注点并促进更简洁的代码结构。通过针对接口进行编程，您可以专注于对象可以做什么，而不是它如何做。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 type Shape interface { Area() float64 } type Circle struct { Radius float64 } func (c Circle) Area() float64 { return math.Pi * c.Radius * c.Radius } type Rectangle struct { Width float64 Height float64 } func (r Rectangle) Area() float64 { return r.Width * r.Height } func GetShape() Shape { if someCondition { return Circle{Radius: 5} } else { return Rectangle{Width: 10, Height: 5} } } ​\t在此示例中 Shape ，我们使用 Area 方法定义接口。我们有两个结构类型，和 Rectangle ， Circle 用于实现此接口。该 GetShape 函数返回一个 Shape ，根据某些条件，它可以是 a 或 a Circle Rectangle 。通过返回接口，调用代码可以将返回的对象视为 Shape ，专注于它所保证的行为（ Area 方法），而不关心每个形状的具体实现细节。\n多态性 ​\t接口的强大功能之一是它们能够实现多态性。接口允许多个结构类型根据它们对接口协定的遵守来互换使用。这意味着可以通过接口统一处理不同的结构实现，从而提供灵活性和代码可重用性。\n1 2 3 4 5 6 7 8 9 10 11 12 // 接受 Shape 接口 func PrintArea(s Shape) { fmt.Println(\u0026#34;Area:\u0026#34;, s.Area()) } func main() { circle := Circle{Radius: 5} rectangle := Rectangle{Width: 10, Height: 5} PrintArea(circle) // Polymorphically treat Circle as Shape PrintArea(rectangle) // Polymorphically treat Rectangle as Shape } ​\t在这个扩展的示例中，我们有一个 PrintArea 接受 Shape 接口作为参数的函数。我们可以将 Circle 和 Rectangle 结构体传递给这个函数，将它们多态地视为 Shape 。这允许我们编写可重用的代码，这些代码对接口定义的常见行为进行操作，而不是为每个特定的结构类型复制逻辑。\n松耦合 ​\t返回接口会促进代码库不同部分之间的松散耦合。调用代码只需要知道接口中定义的方法，而不需要知道实现它的特定结构。这种松散耦合允许在不影响调用代码的情况下更轻松地交换不同的实现。它实现了模块化、可测试性和更好的关注点分离。\n​\t相反，返回结构会在调用代码和特定结构实现之间创建更紧密的耦合。如果对结构的实现细节进行了更改或引入了新功能，则可能还需要修改调用代码。这种紧密耦合会使代码更加僵化，对更改的适应性降低。\n​\t总而言之，返回接口提供了更高级别的抽象，允许分离关注点和更简洁的代码结构。它支持多态性，促进代码的可重用性和灵活性。此外，返回接口会促进松耦合，从而可以更轻松地交换不同的实现，而不会影响调用代码。这使您能够构建模块化且可维护的代码，这些代码可以轻松适应不断变化的需求。\n总结 ​\t构造函数传入接口能让你的代码具有灵活性和可测试性，但是返回接口还是结构体完全取决你自己对项目的把控。一般对于底层的 store 层和 usecase 层我偏向传入接口返回接口，因为这样可以是扩展性更好，并且不需要做大改动，至于偏上的启动层和controller层可以返回结构体，因为更加清晰明了的。总结起来就是一句话：对上层保持简洁，对下层保持抽象。\n参考文章 Between Returning Structs and Interfaces in Go | by Mou Sam Dahal | Medium “Accept interfaces, return structs” in Go | by Bryan F Tan | Medium Should my methods return structs or interfaces in Go? - DEV Community ","permalink":"https://luenci.com/en/posts/golang-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%85%A5%E5%8F%82%E5%87%BA%E5%8F%82%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","summary":"\u003cblockquote\u003e\n\u003cp\u003e对上层保持简洁，对下层保持抽象\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"概念\"\u003e概念\u003c/h2\u003e\n\u003ch3 id=\"接口\"\u003e接口\u003c/h3\u003e\n\u003cp\u003e​\t在 Golang 中，接口是\u003cstrong\u003e一组方法签名\u003c/strong\u003e。 当类型为接口中的所有方法提供定义时，它被称为实现接口。 它与 OOP(面向对象编程) 非常相似。 接口指定了类型应该具有的方法，类型决定了如何实现这些方法。\u003c/p\u003e","title":"golang 构造方法入参出参最佳实践"},{"content":" 目前垃圾回收比较通用的解决办法有三种，引用计数，标记清除以及分代回收。 引用计数 引用计数也是一种最直观，最简单的垃圾收集技术。 在 Python 中，大多数对象的生命周期都是通过对象的引用计数来管理的。 其原理非常简单，我们为每个对象维护一个 ref 的字段用来记录对象被引用的次数，每当对象被创建或者被引用时将该对象的引用次数加一，当对象的引用被销毁时该对象的引用次数减一，当对象的引用次数减到零时说明程序中已经没有任何对象持有该对象的引用，换言之就是在以后的程序运行中不会再次使用到该对象了，那么其所占用的空间也就可以被释放了了。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import os import psutil def print_memory_info(name): \u0026#34;\u0026#34;\u0026#34; 内存计算函数 \u0026#34;\u0026#34;\u0026#34; pid = os.getpid() p = psutil.Process(pid) info = p.memory_full_info() MB = 1024 * 1024 memory = info.uss / MB print(\u0026#39;%s used %d MB\u0026#39; % (name, memory)) def test(): print_memory_info(\u0026#39;test start\u0026#39;) length = 1000 * 1000 list1 = [i for i in range(length)] print_memory_info(\u0026#39;test end\u0026#39;) return list1 res = test() print_memory_info(\u0026#34;main end\u0026#34;) out: test start used 4 MB test end used 23 MB main end used 23 MB 由上述例子：如下情况会存在引用计数加一\n对象被创建（num=2） 对象被引用（count=num） 对象作为参数传递到函数内部 对象作为一个元素添加到容器中 而如下情况会导致引用次数减一：\n对象的别名被显式销毁（del num） 对象的别名被赋予新的对象（num=30） 对象离开它的作用域（函数局部变量） 从容器中删除对象，或者容器被销毁 引用计数的不足：\n1 2 3 4 5 6 7 8 9 10 11 12 13 def test(): print_memory_info(\u0026#34;foo start\u0026#34;) length = 1000 * 1000 list_a = [i for i in range(length)] list_b = [i for i in range(length)] list_a.append(list_b) list_b.append(list_a) print_memory_info(\u0026#34;foo end\u0026#34;) out: test start used 4 MB test end used 42 MB main end used 42 MB 分析：\n在函数 test内部生成了两个列表 list_a 和 list_b，然后将两个列表分别添加到另外一个中。由结果可以看出，即使 foo 函数结束之后其所占用的内存空间依然未被释放。这是因为对于 list_a 和 list_b 来说虽然没有被任何外部对象引用，但因为二者之间交叉引用，以至于每个对象的引用计数都不为零，这也就造成了其所占用的空间永远不会被回收的尴尬局面。这个缺点是致命的。\n为了解决交叉引用的问题，Python 引入了标记清除算法和分代回收算法。\n标记清除 由上，可以包含其他对象引用的容器对象都有可能产生交叉引用问题，而标记清除算法就是为了解决交叉引用的问题的。\n标记清除（Mark—Sweep）算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：\n第一阶段是标记阶段，GC会把所有的活动对象打上标记 第二阶段是把那些没有标记的对象非活动对象进行回收。 对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。\n在上图中，可以从程序变量直接访问块1，并且可以间接访问块2和3。程序无法访问块4和5。第一步将标记块1，并记住块2和3以供稍后处理。第二步将标记块2，第三步将标记块3，但不记得块2，因为它已被标记。扫描阶段将忽略块1，2和3，因为它们已被标记，但会回收块4和5。\n标记清除算法作为Python的辅助垃圾收集技术，主要处理的是一些容器对象，比如list、dict、tuple等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。\n不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。\n分代回收 分代回收是建立在标记清除技术基础之上的，是一种以空间换时间的操作方式。\n由于标记清除算法需要扫描整个堆的所有对象导致其性能有所损耗，而且当可以回收的对象越少时性能损耗越高。因此 Python 引入了分代回收算法，将系统中存活时间不同的对象划分到不同的内存区域，共三代，分别是 0 代，1 代 和 2 代。新生成的对象是 0 代，经过一次垃圾回收之后，还存活的对象将会升级到 1 代，以此类推，2 代中的对象是存活最久的对象。 那么什么时候触发进行垃圾回收算法呢 ?\n事实上随着程序的运行会不断的创建新的对象，同时也会因为引用计数为零而销毁大部分对象，Python 会保持对这些对象的跟踪，由于交叉引用的存在，以及程序中使用了长时间存活的对象，这就造成了新生成的对象的数量会大于被回收的对象数量，一旦二者之间的差值达到某个阈值就会启动垃圾回收机制，使用标记清除算法将死亡对象进行清除，同时将存活对象移动到 1 代。 以此类推，当二者的差值再次达到阈值时又触发垃圾回收机制，将存活对象移动到 2 代。\n这样通过对不同代的阈值做不同的设置，就可以做到在不同代使用不同的时间间隔进行垃圾回收，以追求性能最大。\n事实上，所有的程序都有一个相同的现象，那就是大部分的对象生存周期都是相当短的，只有少量对象生命周期比较长，甚至会常驻内存，从程序开始运行持续到程序结束。而通过分代回收算法，做到了针对不同的区域采取不同的回收频率，节约了大量的计算从而提高 Python 的性能。\n除了上面所说的差值达到一定阈值会触发垃圾回收之外，我们还可以显式的调用 gc.collect() 来触发垃圾回收，最后当程序退出时也会进行垃圾回收。\npython的gc模块 gc \u0026mdash; 垃圾回收器接口 此模块提供可选的垃圾回收器的接口，提供的功能包括： 关闭收集器、调整收集频率、设置调试选项。 它同时提供对回收器找到但是无法释放的不可达对象的访问。由于 Python 使用了带有引用计数的回收器，如果你确定你的程序不会产生循环引用，你可以关闭回收器。可以通过调用 gc.disable() 关闭自动垃圾回收。若要调试一个存在内存泄漏的程序，调用 gc.set_debug(gc.DEBUG_LEAK) ；需要注意的是，它包含 gc.DEBUG_SAVEALL ，使得被垃圾回收的对象会被存放在 gc.garbage 中以待检查。 gc 模块提供下列函数：\ngc.enable()\n启用自动垃圾回收\ngc.disable()\n停用自动垃圾回收\ngc.isenabled()\n如果启用了自动回收则返回 True。\ngc.collect(generation=2)\n若被调用时不包含参数，则启动完全的垃圾回收。可选的参数 generation 可以是一个整数，指明需要回收哪一代（从 0 到 2 ）的垃圾。当参数 generation 无效时，会引发 ValueError 异常。返回发现的不可达对象的数目。每当运行完整收集或最高代 (2) 收集时，为多个内置类型所维护的空闲列表会被清空。 由于特定类型特别是 float 的实现，在某些空闲列表中并非所有项都会被释放。\ngc.set_debug(flags)\n设置垃圾回收器的调试标识位。调试信息会被写入 sys.stderr 。此文档末尾列出了各个标志位及其含义；可以使用位操作对多个标志位进行设置以控制调试器。\ngc.get_debug()\n返回当前调试标识位。\ngc.get_objects(generation=None)\n返回一个收集器所跟踪的所有对象的列表，所返回的列表除外。 如果 generation 不为 None，则只返回收集器所跟踪的属于该生成的对象。在 3.8 版更改: 新的 generation 形参。\ngc.get_stats()\n返回一个包含三个字典对象的列表，每个字典分别包含对应代的从解释器开始运行的垃圾回收统计数据。字典的键的数目在将来可能发生改变，目前每个字典包含以下内容：collections 是该代被回收的次数；collected 是该代中被回收的对象总数；uncollectable 是在这一代中被发现无法收集的对象总数 （因此被移动到 garbage 列表中）。3.4 新版功能.\ngc.set_threshold(threshold0[, threshold1[, threshold2]])\n设置垃圾回收阈值（收集频率）。 将 threshold0 设为零会禁用回收。垃圾回收器把所有对象分类为三代，取决于对象幸存于多少次垃圾回收。新创建的对象会被放在最年轻代（第 0 代）。如果一个对象幸存于一次垃圾回收，则该对象会被放入下一代。第 2 代是最老的一代，因此这一代的对象幸存于垃圾回收后，仍会留在第 2 代。为了判定何时需要进行垃圾回收，垃圾回收器会跟踪上一次回收后，分配和释放的对象的数目。当分配对象的数量减去释放对象的数量大于阈值 threshold0 时，回收器开始进行垃圾回收。起初只有第 0 代会被检查。当上一次第 1 代被检查后，第 0 代被检查的次数多于阈值 threshold1 时，第 1 代也会被检查。相似的， threshold2 设置了触发第 2 代被垃圾回收的第 1 代被垃圾回收的次数。\ngc.get_count()\n将当前回收计数以形为 (count0, count1, count2) 的元组返回。\ngc.get_threshold()\n将当前回收阈值以形为 (threshold0, threshold1, threshold2) 的元组返回。\ngc.get_referrers(*objs)\n返回直接引用任意一个 ojbs 的对象列表。这个函数只定位支持垃圾回收的容器；引用了其它对象但不支持垃圾回收的扩展类型不会被找到。需要注意的是，已经解除对 objs 引用的对象，但仍存在于循环引用中未被回收时，仍然会被作为引用者出现在返回的列表当中。若要获取当前正在引用 objs 的对象，需要调用 collect() 然后再调用 get_referrers() 。在使用 get_referrers() 返回的对象时必须要小心，因为其中一些对象可能仍在构造中因此处于暂时的无效状态。不要把 get_referrers() 用于调试以外的其它目的。\ngc.get_referents(*objs)\n返回被任意一个参数中的对象直接引用的对象的列表。返回的被引用对象是被参数中的对象的C语言级别方法（若存在） tp_traverse 访问到的对象，可能不是所有的实际直接可达对象。只有支持垃圾回收的对象支持 tp_traverse 方法，并且此方法只会在需要访问涉及循环引用的对象时使用。因此，可以有以下例子：一个整数对其中一个参数是直接可达的，这个整数有可能出现或不出现在返回的结果列表当中。\ngc.is_tracked(obj)\n当对象正在被垃圾回收器监控时返回 True ，否则返回 False 。一般来说，原子类的实例不会被监控，而非原子类（如容器、用户自定义的对象）会被监控。然而，会有一些特定类型的优化以便减少垃圾回收器在简单实例（如只含有原子性的键和值的字典）上的消耗。\u0026raquo;\u0026gt;\u0026gt;\u0026gt;\u0026gt; gc.is_tracked(0) False \u0026gt;\u0026gt;\u0026gt; gc.is_tracked(\u0026quot;a\u0026quot;) False \u0026gt;\u0026gt;\u0026gt; gc.is_tracked([]) True \u0026gt;\u0026gt;\u0026gt; gc.is_tracked({}) False \u0026gt;\u0026gt;\u0026gt; gc.is_tracked({\u0026quot;a\u0026quot;: 1}) False \u0026gt;\u0026gt;\u0026gt; gc.is_tracked({\u0026quot;a\u0026quot;: []}) True 3.1 新版功能.\ngc.freeze()\n冻结 gc 所跟踪的所有对象 —— 将它们移至永久代并忽略所有未来的集合。 这可以在 POSIX fork() 调用之前使用以便令对写入复制保持友好或加速收集。 并且在 POSIX fork() 调用之前的收集也可以释放页面以供未来分配，这也可能导致写入时复制，因此建议在主进程中禁用 gc 并在 fork 之前冻结，而在子进程中启用 gc。3.7 新版功能.\ngc.unfreeze()\n解冻永久代中的对象，并将它们放回到年老代中。3.7 新版功能.\ngc.get_freeze_count()\n返回永久代中的对象数量。3.7 新版功能.\n提供以下变量仅供只读访问（你可以修改但不应该重绑定它们）：\ngc.garbage\n一个回收器发现不可达而又无法被释放的对象（不可回收对象）列表。 从 Python 3.4 开始，该列表在大多数时候都应该是空的，除非使用了含有非 NULL tp_del 空位的 C 扩展类型的实例。如果设置了 DEBUG_SAVEALL ，则所有不可访问对象将被添加至该列表而不会被释放。在 3.2 版更改: 当 interpreter shutdown 即解释器关闭时，若此列表非空，会产生 ResourceWarning ，即资源警告，在默认情况下此警告不会被提醒。如果设置了 DEBUG_UNCOLLECTABLE ，所有无法被回收的对象会被打印。在 3.4 版更改: 根据 PEP 442 ，带有 __del__() 方法的对象最终不再会进入 gc.garbage 。\ngc.callbacks\n在垃圾回收器开始前和完成后会被调用的一系列回调函数。这些回调函数在被调用时使用两个参数： phase 和 info 。phase 可为以下两值之一：\u0026ldquo;start\u0026rdquo;: 垃圾回收即将开始。\u0026ldquo;sweight\u0026rdquo;: 垃圾回收已结束。info is a dict providing more information for the callback. The following keys are currently defined:\u0026ldquo;generation\u0026rdquo;（代） ：正在被回收的最久远的一代。\u0026ldquo;collected\u0026rdquo;（已回收的 ）: 当phase 为 \u0026ldquo;sweight\u0026rdquo; 时，被成功回收的对象的数目。\u0026ldquo;uncollectable\u0026rdquo;（不可回收的）: 当 phase 为 \u0026ldquo;sweight\u0026rdquo; 时，不能被回收并被放入 garbage 的对象的数目。应用程序可以把他们自己的回调函数加入此列表。主要的使用场景有：统计垃圾回收的数据，如：不同代的回收频率、回收所花费的时间。使应用程序可以识别和清理他们自己的在 garbage 中的不可回收类型的对象。3.3 新版功能.\n以下常量被用于 set_debug() ：\ngc.DEBUG_STATS\n在回收完成后打印统计信息。当回收频率设置较高时，这些信息会比较有用。\ngc.DEBUG_COLLECTABLE\n当发现可回收对象时打印信息。\ngc.DEBUG_UNCOLLECTABLE\n打印找到的不可回收对象的信息（指不能被回收器回收的不可达对象）。这些对象会被添加到 garbage 列表中。在 3.2 版更改: 当 interpreter shutdown 时，即解释器关闭时，若 garbage 列表中存在对象，这些对象也会被打印输出。\ngc.DEBUG_SAVEALL\n设置后，所有回收器找到的不可达对象会被添加进 garbage 而不是直接被释放。这在调试一个内存泄漏的程序时会很有用。\ngc.DEBUG_LEAK\n调试内存泄漏的程序时，使回收器打印信息的调试标识位。（等价于 DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL ）。\n参考文章：\nhttps://docs.python.org/zh-cn/3/library/gc.html\nhttp://www.ityouknow.com/python/2020/01/06/python-gc-111.html\nhttp://www.bieryun.com/5338.html\n","permalink":"https://luenci.com/en/posts/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/","summary":"\u003cul\u003e\n\u003cli\u003e目前垃圾回收比较通用的解决办法有三种，引用计数，标记清除以及分代回收。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"引用计数\"\u003e引用计数\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e引用计数也是一种最直观，最简单的垃圾收集技术。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e在 Python 中，大多数对象的生命周期都是通过对象的引用计数来管理的。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e其原理非常简单，我们为每个对象维护一个 ref 的字段用来记录对象被引用的次数，每当对象被创建或者被引用时将该对象的引用次数加一，当对象的引用被销毁时该对象的引用次数减一，当对象的引用次数减到零时说明程序中已经没有任何对象持有该对象的引用，换言之就是在以后的程序运行中不会再次使用到该对象了，那么其所占用的空间也就可以被释放了了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003epsutil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprint_memory_info\u003c/span\u003e(name):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e    内存计算函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pid \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003egetpid()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    p \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e psutil\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eProcess(pid)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    info \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e p\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ememory_full_info()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    MB \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1024\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    memory \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e info\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003euss \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e MB\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e used \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e MB\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e (name, memory))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etest\u003c/span\u003e(): \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print_memory_info(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;test start\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    length \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1000\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    list1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [i \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e range(length)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print_memory_info(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;test end\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e list1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eres \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e test()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint_memory_info(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;main end\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    test start used \u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e MB\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ttest end used \u003cspan style=\"color:#a5d6ff\"\u003e23\u003c/span\u003e MB\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tmain end used \u003cspan style=\"color:#a5d6ff\"\u003e23\u003c/span\u003e MB\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e由上述例子：如下情况会存在引用计数加一\u003c/p\u003e","title":"浅谈Python垃圾回收机制"},{"content":"VictoriaMetricsn 原理入门 简介 VictoriaMetrics，是一个快速高效、经济并且可扩展的监控解决方案和时序数据库。\n​\t谈到VictoriaMetrics就必须要提到Prometheus，VictoriaMetrics是一个新兴的监控解决方案。它借助Prometheus强大的exporter生态、成熟的规范、服务发现等优点等，融入到Prometheus生态中。VictoriaMetrics官网很多兼容Prometheus参数解释都是直接跳转到Prometheus官网。\n​\tVictoriaMetrics可以作为Prometheus的长期远程存储方案，当然 VictoriaMetrics 也可以完全取代 Prometheus，因为 VictoriaMetrics 基本支持 Prometheus配置文件、PromQL、各类API、数据格式等等。\nVictoriaMetrics 优点 远程存储：可作为单一或多个Prometheus的远程存储 安装简单：单节点架构一条命令就可以部署完毕（集群方式稍微复杂一些，但也很好理解） 兼容性：PromQL兼容和增强的MetricsQL Grafana兼容：VM可替换Grafana的Prometheus数据源（经测试，线上数据源直接替换后100%兼容） 低内存：更低的内存占用，官方对比Prometheus，可以释放7倍左右内存空间（线上对比大概4倍） 高压缩比：提供存储数据高压缩，官方说可以比Prometheus减少7倍的存储空间（线上对比大概是4~5倍） 高性能：查询性能比Prometheus更快 支持水平扩容\u0026amp;HA：基于VM集群版实现 支持多租户：主要针对集群版 VictoriaMetrics 缺点 图形化做的不好，虽然有vmui，但功能很少 告警功能需要单独配置vmalert，而且vmalert只有api管理和查看，暂时没用图形界面 没有类似Prometheus的WAL日志，突然故障可能会丢失部分数据 VictoriaMetrics 分类 ​\tVM分为，单节点(single-node)版和集群(cluster)版，两套方案，根据业务需求选择即可。\n单节点版：直接运行一个二进制文件，既可以运行，官方建议采集数据点(data points)低于100w/s，推荐VM单节点版，简单好维护，但不支持告警。\n集群版：支持数据水平拆分，把功能拆分为vmstorage、 vminsert、vmselect，如果要替换Prometheus，还需要vmagent、vmalert。\n每个服务都可以进行独立扩展，vmstorage 节点之间互不了解、互不通信，并且不共享任何数据。这样可以增加集群的可用性，并且简化了集群的维护和扩展。 VictoriaMetrics 架构 ​\tVM 分为单节点和集群两个方案，根据业务需求选择即可。单节点版直接运行一个二进制文件既，官方建议采集数据点(data points)低于 100w/s，推荐 VM 单节点版，简单好维护，但不支持告警。集群版支持数据水平拆分。下图是 VictoriaMetrics 集群版官方的架构图。\n主要包含以下几个组件：\nvmstorage：数据存储以及查询结果返回，默认端口为 8482。 vminsert：数据录入，可实现类似分片、副本功能，默认端口 8480。 vmselect：数据查询，汇总和数据去重，默认端口 8481。 vmagent：数据指标抓取，支持多种后端存储，会占用本地磁盘缓存，默认端口 8429。 vmalert：报警相关组件，不如果不需要告警功能可以不使用该组件，默认端口为 8880。 ​\t集群方案把功能拆分为 vmstorage、 vminsert、vmselect 组件，如果要替换 Prometheus，还需要使用 vmagent、vmalert。从上图也可以看出 vminsert 以及 vmselect 都是无状态的，所以扩展很简单，只有 vmstorage 是有状态的。\nvmagent 的主要目的是用来收集指标数据然后存储到 VM 以及 Prometheus 兼容的存储系统中(支持 remote_write 协议即可)。\n下图是 vmagent 的一个简单架构图，可以看出该组件也实现了 metrics 的 push 功能，此外还有很多其他特性：\nvmagent：主要负责数据指标的抓取，并将它们存储在VictoriaMetrics或其他支持remote write协议的Prometheus兼容的存储系统中，会占用本地磁盘缓存。它是一个可选组件，位于图1的Writers那层Load balancer与各个采集源之间，类似于Prometheus中pushgateway的地位。是一个可选组件，默认占用端口8429。其组件作用如图2所示：\n替换 prometheus 的 scraping target 支持基于 prometheus relabeling 的模式添加、移除、修改 labels，可以方便在数据发送到远端存储之前进行数据的过滤 支持多种数据协议，influx line 协议，graphite 文本协议，opentsdb 协议，prometheus remote write 协议，json lines 协议，csv 数据 支持收集数据的同时，并复制到多种远端存储系统 支持不可靠远端存储(通过本地存储 -remoteWrite.tmpDataPath )，同时支持最大磁盘占用相比 prometheus 使用较少的内存、cpu、磁盘 io 以及网络带宽 VictoriaMetrics 单机版安装 1 2 3 4 5 6 7 8 9 10 11 12 mkdir -p /opt/vm \u0026amp;\u0026amp; cd /opt/vm wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.94.0/victoria-metrics-linux-amd64-v1.94.0.tar.gz tar zxvf victoria-metrics-linux-amd64-v1.94.0.tar.gz # 启动 mkdir /data ./victoria-metrics-prod -storageDataPath /data # 访问地址为 http://127.0.0.1:8428/ 平替 prometheus 1 sudo ./victoria-metrics-prod -storageDataPath /data --promscrape.config \u0026#34;你的prometheus配置文件\u0026#34;-promscrape.config.strictParse=false 树莓派指标监控案例 导入VictoriaMetrics 服务地址\nPush gateway 简介 ​\tPush gateway 为 Prometheus 整体监控方案的功能组件之一，并做为一个独立的工具存在。\n​\t它主要用于 Prometheus 无法直接拿到监控指标的场景，如监控源位于防火墙之后，Prometheus 无法穿透防火墙；目标服务没有可抓取监控数据的端点等多种情况。在类似场景中，可通过部署 Pushgateway 的方式解决问题。\n​\t当部署该组件后，监控源通过主动发送监控数据到Pushgateway，再由Prometheus定时获取信息，实现资源的状态监控。\n工作流程：\n监控源通过Post方式，发送数据到Pushgateway，路径为/metrics。 Prometheus服务端设置任务，定时获取Pushgateway上面的监控指标。 Prometheus获取监控指标后，会根据告警规则进行计算，如果匹配将触发告警到Alertmanager；同时，Grafana可配置数据源调用Prometheus数据，做为数据展示。 注意事项 ​\t通过Pushgateway方式，Prometheus无法直接检测到监控源服务的状态，故此种方式不适用于监控服务的存活状态等场景。\n​\tPushgateway属于静态代理，它接收的指标不存在过期时间，故会一直保留直到该指标被更新或删除。此种情况下，不再使用的指标可能存在于网关中。\n如上所言，Pushgateway并不算是完美的解决方案，在监控中更多做为辅助方案存在，用于解决Prometheus无法直接获取数据的场景。\n参考文章 一文搞懂 VictoriaMetrics 的使用-阳明的博客|Kubernetes|Istio|Prometheus|Python|Golang|云原生 (qikqiak.com) 一. Pushgateway简介 | mafeifan 的编程技术分享 VictoriaMetrics原理及实践-腾讯云开发者社区-腾讯云 (tencent.com) ","permalink":"https://luenci.com/en/posts/victoriametricsn-%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"victoriametricsn-原理入门\"\u003eVictoriaMetricsn 原理入门\u003c/h1\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eVictoriaMetrics，是一个快速高效、经济并且可扩展的监控解决方案和时序\u003ca href=\"https://cloud.tencent.com/solution/database?from_column=20065\u0026amp;from=20065\"\u003e数据库\u003c/a\u003e。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​\t谈到VictoriaMetrics就必须要提到Prometheus，VictoriaMetrics是一个新兴的监控解决方案。它借助Prometheus强大的exporter生态、成熟的规范、服务发现等优点等，融入到Prometheus生态中。VictoriaMetrics官网很多兼容Prometheus参数解释都是直接跳转到Prometheus官网。\u003c/p\u003e\n\u003cp\u003e​\tVictoriaMetrics可以作为Prometheus的长期远程存储方案，当然 VictoriaMetrics 也可以完全取代 Prometheus，因为 VictoriaMetrics 基本支持 Prometheus配置文件、PromQL、各类API、数据格式等等。\u003c/p\u003e\n\u003ch3 id=\"victoriametrics-优点\"\u003eVictoriaMetrics 优点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e远程存储：可作为单一或多个Prometheus的远程存储\u003c/li\u003e\n\u003cli\u003e安装简单：单节点架构一条命令就可以部署完毕（集群方式稍微复杂一些，但也很好理解）\u003c/li\u003e\n\u003cli\u003e兼容性：PromQL兼容和增强的MetricsQL\u003c/li\u003e\n\u003cli\u003eGrafana兼容：VM可替换Grafana的Prometheus数据源（经测试，线上数据源直接替换后100%兼容）\u003c/li\u003e\n\u003cli\u003e低内存：更低的内存占用，官方对比Prometheus，可以释放7倍左右内存空间（线上对比大概4倍）\u003c/li\u003e\n\u003cli\u003e高压缩比：提供存储数据高压缩，官方说可以比Prometheus减少7倍的存储空间（线上对比大概是4~5倍）\u003c/li\u003e\n\u003cli\u003e高性能：查询性能比Prometheus更快\u003c/li\u003e\n\u003cli\u003e支持水平扩容\u0026amp;HA：基于VM集群版实现\u003c/li\u003e\n\u003cli\u003e支持多租户：主要针对集群版\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"victoriametrics-缺点\"\u003eVictoriaMetrics 缺点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e图形化做的不好，虽然有vmui，但功能很少\u003c/li\u003e\n\u003cli\u003e告警功能需要单独配置vmalert，而且vmalert只有api管理和查看，暂时没用图形界面\u003c/li\u003e\n\u003cli\u003e没有类似Prometheus的WAL日志，突然故障可能会丢失部分数据\u003c/li\u003e\n\u003c/ul\u003e","title":"VictoriaMetricsn 原理入门"},{"content":"Redis五个使用场景 原文转自：https://www.jdon.com/69107.html\n1.缓存 最常见的用例是利用 Redis 进行缓存。这有助于保护数据库层不超载。Redis 可为缓存数据提供快速查找时间，有助于提高应用程序性能。\n2.会话存储 使用 Redis 在无状态服务器之间共享用户会话数据。Redis 提供了一个集中存储会话数据的地方，并可轻松扩展服务器。\n3.分布式锁 使用 Redis 分布式锁来授予对共享资源的互斥访问权限。这可以防止分布式系统中的竞赛条件。Redis 锁易于实现，并能自动过期。\n4.计数器和速率限制器 使用 Redis 来跟踪社交媒体应用程序上的点赞数、浏览数等。Redis 计数器提供原子增量/减量。我们还使用 Redis 对 API 端点执行速率限制。这有助于防止滥用。\n5.排行榜 排序集让 Redis 可以轻松实现游戏排行榜。可以从排行榜中添加、更新或删除用户，并高效地查询范围。\n","permalink":"https://luenci.com/en/posts/redis%E4%BA%94%E4%B8%AA%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/","summary":"\u003ch1 id=\"redis五个使用场景\"\u003eRedis五个使用场景\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文转自：https://www.jdon.com/69107.html\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"1缓存\"\u003e1.缓存\u003c/h2\u003e\n\u003cp\u003e最常见的用例是利用 Redis 进行缓存。这有助于保护数据库层不超载。Redis 可为缓存数据提供快速查找时间，有助于提高应用程序性能。\u003c/p\u003e","title":"Redis五个使用场景"},{"content":"what-happens-when（浏览器一次请求的历程） 原文来自：alex/what-happens-when: An attempt to answer the age old interview question \u0026ldquo;What happens when you type google.com into your browser and press enter?\u0026rdquo; \u0026mdash; 亚历克斯/什么时候会发生什么：试图回答古老的面试问题“当你在浏览器中输入 google.com 并按回车键时会发生什么？ (github.com)\n接下来的内容介绍了物理键盘和系统中断的工作原理，但是有一部分内容却没有设计\n按下\u0026quot;g\u0026quot;键 ​\t当你按下“g”键，浏览器接收到这个消息之后，会触发自动完成机制。浏览器根据自己的算法，以及你是否处于隐私浏览模式，会在浏览器的地址框下方给出输入建议。大部分算法会优先考虑根据你的搜索历史和书签等内容给出建议。你打算输入 \u0026ldquo;google.com\u0026rdquo;，因此给出的建议并不匹配。\n​\t但是输入过程中仍然有大量的代码在后台运行，你的每一次按键都会使得给出的建议更加准确。甚至有可能在你输入之前，浏览器就将 \u0026ldquo;google.com\u0026rdquo; 建议给你。\n回车键按下 ​\t为了从零开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接地或者通过电容器间接地闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。\nUSB键盘：\n键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压 键码值存储在键盘内部电路一个叫做\u0026quot;endpoint\u0026quot;的寄存器内 USB控制器大概每隔10ms便查询一次\u0026quot;endpoint\u0026quot;以得到存储的键码值数据，这个最短时间间隔由键盘提供 键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包 这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb/s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成\u0026quot;低速设备\u0026quot;（USB 2.0 compliance） 这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层 虚拟键盘（触屏设备）：\n在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标 然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮 虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息 这个消息又返回来向当前活跃的应用通知一个“按键按下”事件 产生中断[非USB键盘] ​\t键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数 。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中断处理器，然后操作系统内核出场了。\n(Window 操作系统)一个 WM_KEYDOWN 消息被发往应用程序 ​\tHID把键盘按下的事件传送给 KBDHID.sys 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 VK_RETURN(0x0d)。 KBDHID.sys 驱动和 KBDCLASS.sys (键盘类驱动,keyboard class driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 Win32K.sys ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。\nWin32K.sys 通过 GetForegroundWindow() API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的\u0026quot;message pump\u0026quot;机制调用 SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam) 函数， lParam 是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 VK_RETURN ），功能键（alt, shift, ctrl）是否被按下（在这里没有），以及一些其他状态。\n​\tWindows的 SendMessage API直接将消息添加到特定窗口句柄 hWnd 的消息队列中，之后赋给 hWnd 的主要消息处理函数 WindowProc 将会被调用，用于处理队列中的消息。\n​\t当前活跃的句柄 hWnd 实际上是一个edit control控件，这种情况下，WindowProc 有一个用于处理 WM_KEYDOWN 消息的处理器，这段代码会查看 SendMessage 传入的第三个参数 wParam ，因为这个参数是 VK_RETURN ，于是它知道用户按下了回车键。\n(Mac OS X操作系统上)一个 KeyDown NSEvent被发往应用程序 ​\t中断信号引发了I/O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 WindowServer 进程。然后， WindowServer 将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 mach_ipc_dispatch 函数读取到。这个过程通常是由 NSApplication 主事件循环产生并且处理的，通过 NSEventType 为 KeyDown 的 NSEvent 。\n(GNU/Linux)Xorg 服务器监听键码值 ​\t当使用图形化的 X Server 时，X Server 会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity, i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。\n解析URL 浏览器通过 URL 能够知道下面的信息：\nProtocol \u0026ldquo;http\u0026rdquo;\n使用HTTP协议\nResource \u0026ldquo;/\u0026rdquo;\n请求的资源是主页(index)\n输入的是 URL 还是搜索的关键字？ ​\t当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。\n转换非 ASCII 的 Unicode 字符 浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符 这里主机名是 google.com ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码 检查 HSTS 列表 浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站 HSTS是国际互联网工程组织 IETF 正在推行一种新的 Web 安全协议，网站采用 HSTS 后，用户访问时无需手动在地址栏中输入 HTTPS，浏览器会自动采用 HTTPS 访问网站地址，从而保证用户始终访问到网站的加密链接，保护数据传输安全。 服务器通过一个名为“ Strict-Transport-Security ”的HTTPS响应标头字段将HSTS策略传达给用户代理。HSTS策略指定用户代理只能以安全方式访问服务器的时间段。使用HSTS的网站通常不接受明文HTTP，会拒绝通过HTTP的连接，或者将HTTP连接跳转到HTTPS。 如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送 注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。用户对网站的第一个 HTTP 请求将收到请求用户仅发送 HTTPS 请求的响应。但是，这个单一的HTTP请求可能会使用户容易受到降级攻击，这就是为什么HSTS列表包含在现代Web浏览器中的原因。 DNS 查询 浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome://net-internals/#dns）。 如果缓存中没有，就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询。 gethostbyname 函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，Hosts 的位置 不同的操作系统有所不同 如果 gethostbyname 没有这个域名的缓存记录，也没有在 hosts 里找到，它将会向 DNS 服务器发送一条 DNS 查询请求。DNS 服务器是由网络通信栈提供的，通常是本地路由器或者 ISP 的缓存 DNS 服务器。 查询本地 DNS 服务器 如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询 如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询 ARP 过程 ​\t要想发送 ARP（地址解析协议）广播，我们需要有一个目标 IP 地址，同时还需要知道用于发送 ARP 广播的接口的 MAC 地址。\n首先查询 ARP 缓存，如果缓存命中，我们返回结果：目标 IP = MAC 如果缓存没有命中：\n查看路由表，看看目标 IP 地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。 查询选择的网络接口的 MAC 地址 我们发送一个二层（ OSI 模型 中的数据链路层）ARP 请求： ARP Request:\n1 2 3 4 Sender MAC: interface:mac:address:here Sender IP: interface.ip.goes.here Target MAC: FF:FF:FF:FF:FF:FF (Broadcast) Target IP: target.ip.goes.here 根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：\n直连：\n如果我们和路由器是直接连接的，路由器会返回一个 ARP Reply （见下面）。 集线器：\n如果我们连接到一个集线器，集线器会把 ARP 请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 ARP Reply 。 交换机：\n如果我们连接到了一个交换机，交换机会检查本地 CAM/MAC 表，看看哪个端口有我们要找的那个 MAC 地址，如果没有找到，交换机会向所有其它端口广播这个 ARP 请求。 如果交换机的 MAC/CAM 表中有对应的条目，交换机会向有我们想要查询的 MAC 地址的那个端口发送 ARP 请求 如果路由器也“连接”在其中，它会返回一个 ARP Reply ARP Reply:\n1 2 3 4 Sender MAC: target:mac:address:here Sender IP: target.ip.goes.here Target MAC: interface:mac:address:here Target IP: interface.ip.goes.here 现在我们有了 DNS 服务器或者默认网关的 IP 地址，我们可以继续 DNS 请求了：\n使用 53 端口向 DNS 服务器发送 UDP 请求包，如果响应包太大，会使用 TCP 协议 如果本地/ISP DNS 服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层 DNS 服务器做查询，直到查询到起始授权机构，如果找到会把结果返回 使用套接字 ​\t当浏览器得到了目标服务器的 IP 地址，以及 URL 中给出来端口号（http 协议默认端口号是 80， https 默认端口号是 443），它会调用系统库函数 socket ，请求一个 TCP流套接字，对应的参数是 AF_INET/AF_INET6 和 SOCK_STREAM 。\n这个请求首先被交给传输层，在传输层请求被封装成 TCP segment。目标端口会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range) TCP segment 被送往网络层，网络层会在其中再加入一个 IP 头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个IP packet。 这个 TCP packet 接下来会进入链路层，链路层会在封包中加入 frame 头部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的 MAC 地址。像前面说的一样，如果内核不知道网关的 MAC 地址，它必须进行 ARP 广播来查询其地址。 到了现在，TCP 封包已经准备好了，可以使用下面的方式进行传输：\n以太网 WiFi 蜂窝数据网络 ​\t对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个 网络节点 处理。节点的目标地址和源地址将在后面讨论。\n​\t大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 网络节点 进行处理。\n​\t最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域(autonomous system, 缩写 AS)的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部 time to live (TTL) 域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。\n上面的发送和接受过程在 TCP 连接期间会发生很多次：\n客户端选择一个初始序列号(ISN)，将设置了 SYN 位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号\n服务器端接收到 SYN 包，如果它可以建立连接：\n服务器端选择它自己的初始序列号服务器端设置 SYN 位，表明自己选择了一个初始序列号服务器端把 (客户端ISN + 1) 复制到 ACK 域，并且设置 ACK 位，表明自己接收到了客户端的第一个封包\n客户端通过发送下面一个封包来确认这次连接：\n自己的序列号+1接收端 ACK+1设置 ACK 位\n数据通过下面的方式传输：\n当一方发送了N个 Bytes 的数据之后，将自己的 SEQ 序列号也增加N另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个 ACK 包，ACK 的值设置为接收到的数据包的最后一个序列号\n关闭连接时：\n要关闭连接的一方发送一个 FIN 包另一方确认这个 FIN 包，并且发送自己的 FIN 包要关闭的一方使用 ACK 包来确认接收到了 FIN\nTLS 握手 客户端发送一个 ClientHello 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。 服务器端向客户端返回一个 ServerHello 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥 客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥 服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥 客户端发送一个 Finished 消息给服务器端，使用对称密钥加密这次通讯的一个散列值 服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 Finished 消息，也使用协商好的对称密钥加密 从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容 如果数据包被丢弃 ​\t有时，由于网络拥塞或不稳定的硬件连接，TLS 数据包将在到达最终目的地之前被丢弃。然后，发件人必须决定如何反应。这种算法称为 TCP 拥塞控制。这因发件人而异;最常见的算法在较新的操作系统上是TCP New Reno，在几乎所有其他操作系统上都是新的。\n客户端根据连接的最大段大小 （MSS） 选择拥塞窗口。 对于确认的每个数据包，窗口的大小都会加倍，直到达到“慢启动阈值”。在某些实现中，此阈值是自适应的。 达到慢启动阈值后，对于确认的每个数据包，窗口会累加增加。如果丢弃一个数据包，窗口将呈指数级减小，直到确认另一个数据包。 HTTP 协议 ​\t如果浏览器是 Google 出品的，它不会使用 HTTP 协议来获取页面信息，而是会与服务器端发送请求，商讨使用 SPDY 协议。\n​\t如果浏览器使用 HTTP 协议而不支持 SPDY 协议，它会向服务器发送这样的一个请求:\n1 2 3 4 GET / HTTP/1.1 Host: google.com Connection: close [其他头部] ​\t“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。（这里我们假设浏览器没有违反HTTP协议标准的bug，同时假设浏览器使用 HTTP/1.1 协议，不然的话头部可能不包含 Host 字段，同时 GET 请求中的版本号会变成 HTTP/1.0 或者 HTTP/0.9 。）\nHTTP/1.1 定义了“关闭连接”的选项 \u0026ldquo;close\u0026rdquo;，发送者使用这个选项指示这次连接在响应结束之后会断开。例如：\nConnection:close\n不支持持久连接的 HTTP/1.1 应用必须在每条消息中都包含 \u0026ldquo;close\u0026rdquo; 选项。\n​\t在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。\n​\t服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:\n1 2 200 OK [响应头部] ​\t然后是一个换行，接下来有效载荷(payload)，也就是 www.google.com 的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供之后的请求重用。\n​\t如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部），以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:\n1 2 304 Not Modified [响应头部] ​\t这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。\n​\t在解析完 HTML 之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 GET / HTTP/1.1 会变成 GET /$(相对www.google.com的URL) HTTP/1.1 。\n​\t如果HTML引入了 www.google.com 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 Host 头部会变成另外的域名。\nHTTP 服务器请求处理 ​\tHTTPD(HTTP Daemon)在服务器端处理请求/响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。\nHTTPD 接收请求\n服务器把请求拆分为以下几个参数：\nHTTP 请求方法(GET, POST, HEAD, PUT, DELETE, CONNECT, OPTIONS, 或者 TRACE)。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法域名：google.com请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)\n服务器验证其上已经配置了 google.com 的虚拟主机\n服务器验证 google.com 接受 GET 方法\n服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)\n如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求\n服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 \u0026ldquo;/\u0026rdquo; ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。\n服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者\n浏览器背后的故事 当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：\n解析 —— HTML，CSS，JS 渲染 —— 构建 DOM 树 -\u0026gt; 渲染 -\u0026gt; 布局 -\u0026gt; 绘制 浏览器 ​\t浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource Identifier) 来确定。\n​\t浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。\n不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：\n一个地址栏 后退和前进按钮 书签选项 刷新和停止按钮 主页按钮 浏览器高层架构\n组成浏览器的组件有：\n用户界面 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分 浏览器引擎 浏览器引擎负责让 UI 和渲染引擎协调工作 渲染引擎 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上 网络组件 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现 UI后端 UI 后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现 Javascript 引擎 Javascript 引擎用于解析和执行 Javascript 代码 数据存储 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL 和 FileSystem 之类的存储机制 HTML 解析 ​\t浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成 8kB 大小的分块传输。\n​\tHTML 解析器的主要工作是对 HTML 文档进行解析，生成解析树。\n​\t解析树是以 DOM 元素以及属性为节点的树。DOM是文档对象模型(Document Object Model)的缩写，它是 HTML 文档的对象表示，同时也是 HTML 元素面向外部(如Javascript)的接口。树的根部是\u0026quot;Document\u0026quot;对象。整个 DOM 和 HTML 文档几乎是一对一的关系。\n解析算法\n​\tHTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:\n语言本身的“宽容”特性 HTML 本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们 解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于 HTML 来说，动态代码，例如脚本元素中包含的 document.write() 方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容 ​\t由于不能使用常用的解析技术，浏览器创造了专门用于解析 HTML 的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。\n解析结束之后\n​\t浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。\n​\t此时浏览器把文档标记为可交互的（interactive），浏览器开始解析处于“推迟（deferred）”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成（complete）”，浏览器会触发“加载（load）”事件。\n​\t注意解析 HTML 网页时永远不会出现“无效语法（Invalid Syntax）”错误，浏览器会修复所有错误内容，然后继续解析。\nCSS 解析 根据 CSS词法和句法 分析CSS文件和 \u0026lt;style\u0026gt; 标签包含的内容以及 style 属性的值 每个CSS文件都被解析成一个样式表对象（StyleSheet object），这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象 CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器 页面渲染 通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值\n通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算\u0026quot;Frame 树\u0026quot;中每个节点的首选(preferred)宽度\n通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度\n通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度\n使用上面的计算结果构建每个节点的坐标\n当存在元素使用 floated，位置有 absolutely 或 relatively 属性的时候，会有更多复杂的计算，详见http://dev.w3.org/csswg/css2/ 和 http://www.w3.org/Style/CSS/current-work\n创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层\n页面上的每个层都被分配了纹理(?)\n每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制\n上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量\n计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。\nGPU 渲染 在渲染过程中，图形处理层可能使用通用用途的 CPU，也可能使用图形处理器 GPU 当使用 GPU 用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用 GPU 强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。 Window Server 后期渲染与用户引发的处理 ​\t渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google Doodle动画)或与用户交互(在搜索栏输入关键字获得搜索建议)。类似Flash和Java的插件也会运行，尽管Google主页里没有。这些脚本可以触发网络请求，也可能改变网页的内容和布局，产生又一轮渲染与绘制。\n","permalink":"https://luenci.com/en/posts/what-happens-when/","summary":"\u003ch1 id=\"what-happens-when浏览器一次请求的历程\"\u003ewhat-happens-when（浏览器一次请求的历程）\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文来自：\u003ca href=\"https://github.com/alex/what-happens-when\"\u003ealex/what-happens-when: An attempt to answer the age old interview question \u0026ldquo;What happens when you type google.com into your browser and press enter?\u0026rdquo; \u0026mdash; 亚历克斯/什么时候会发生什么：试图回答古老的面试问题“当你在浏览器中输入 google.com 并按回车键时会发生什么？ (github.com)\u003c/a\u003e\u003c/p\u003e","title":"what-happens-when（浏览器一次请求的历程）"},{"content":"Prometheus 概念入门 数据模型 ​\tPrometheus 所有采集的监控数据均以指标（metric）的形式保存在内置的时间序列数据库当中（TSDB）：属于同一指标名称，同一标签集合的、有时间戳标记的数据流。除了存储的时间序列，Prometheus 还可以根据查询请求产生临时的、衍生的时间序列作为返回结果。\n指标名称和标签 每一条时间序列由指标名称（Metrics Name）以及一组标签（键值对）唯一标识。其中指标的名称（metric name）可以反映被监控样本的含义（例如，http_requests_total — 表示当前系统接收到的 HTTP 请求总量），指标名称只能由 ASCII 字符、数字、下划线以及冒号组成，同时必须匹配正则表达式 [a-zA-Z_:][a-zA-Z0-9_:]*。\n[info] 注意\n冒号用来表示用户自定义的记录规则，不能在 exporter 中或监控对象直接暴露的指标中使用冒号来定义指标名称。\n通过使用标签，Prometheus 开启了强大的多维数据模型：对于相同的指标名称，通过不同标签列表的集合，会形成特定的度量维度实例（例如：所有包含度量名称为 /api/tracks 的 http 请求，打上 method=POST 的标签，就会形成具体的 http 请求）。该查询语言在这些指标和标签列表的基础上进行过滤和聚合。改变任何度量指标上的任何标签值（包括添加或删除指标），都会创建新的时间序列。\n标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式 [a-zA-Z_][a-zA-Z0-9_]*。其中以 __ 作为前缀的标签，是系统保留的关键字，只能在系统内部使用。标签的值则可以包含任何 Unicode 编码的字符。\n样本 在时间序列中的每一个点称为一个样本（sample），样本由以下三部分组成：\n指标（metric）：指标名称和描述当前样本特征的 labelsets； 时间戳（timestamp）：一个精确到毫秒的时间戳； 样本值（value）： 一个 folat64 的浮点型数据表示当前样本的值。 表示方式 通过如下表达方式表示指定指标名称和指定标签集合的时间序列：\n1 \u0026lt;metric name\u0026gt;{\u0026lt;label name\u0026gt;=\u0026lt;label value\u0026gt;, ...} 例如，指标名称为 api_http_requests_total，标签为 method=\u0026quot;POST\u0026quot; 和 handler=\u0026quot;/messages\u0026quot; 的时间序列可以表示为：\n1 api_http_requests_total{method=\u0026#34;POST\u0026#34;, handler=\u0026#34;/messages\u0026#34;} 这与 OpenTSDB 中使用的标记法相同。\n指标类型 ​\tPrometheus 的客户端库中提供了四种核心的指标类型。但这些类型只是在客户端库（客户端可以根据不同的数据类型调用不同的 API 接口）和在线协议中，实际在 Prometheus server 中并不对指标类型进行区分，而是简单地把这些指标统一视为无类型的时间序列。不过，将来我们会努力改变这一现状的\nCounter（计数器） ​\tCounter 类型代表一种样本数据单调递增的指标，即只增不减，除非监控系统发生了重置。例如，你可以使用 counter 类型的指标来表示服务的请求数、已完成的任务数、错误发生的次数等。counter 主要有两个方法：\n1 2 3 4 //将counter值加1. Inc() // 将指定值加到counter值上，如果指定值是0会 panic. Add(float64) ​\tCounter 类型数据可以让用户方便的了解事件产生的速率的变化，在 PromQL 内置的相关操作函数可以提供相应的分析，比如以 HTTP 应用请求量来进行说明：\n1 2 3 4 //通过rate()函数获取HTTP请求量的增长率 rate(http_requests_total[5m]) //查询当前系统中，访问量前10的HTTP地址 weightk(10, http_requests_total) ​\t不要将 counter 类型应用于样本数据非单调递增的指标，例如：当前运行的进程数量（应该用 Gauge 类型）。\nGauge（仪表盘） ​\tGauge 类型代表一种样本数据可以任意变化的指标，即可增可减。Gauge 通常用于像温度或者内存使用率这种指标数据，也可以表示能随时增加或减少的“总数”，例如：当前并发请求的数量。\n​\t对于 Gauge 类型的监控指标，通过 PromQL 内置函数 delta() 可以获取样本在一段时间内的变化情况，例如，计算 CPU 温度在两小时内的差异：\n1 dalta(cpu_temp_celsius{host=\u0026#34;zeus\u0026#34;}[2h]) ​\t你还可以通过PromQL 内置函数 predict_linear() 基于简单线性回归的方式，对样本数据的变化趋势做出预测。例如，基于 2 小时的样本数据，来预测主机可用磁盘空间在 4 个小时之后的剩余情况：\n1 predict_linear(node_filesystem_free{job=\u0026#34;node\u0026#34;}[2h], 4 * 3600) \u0026lt; 0 Histogram（直方图） ​\t在大多数情况下人们都倾向于使用某些量化指标的平均值，例如 CPU 的平均使用率、页面的平均响应时间。这种方式的问题很明显，以系统 API 调用的平均响应时间为例：如果大多数 API 请求都维持在 100ms 的响应时间范围内，而个别请求的响应时间需要 5s，那么就会导致某些 WEB 页面的响应时间落到中位数的情况，而这种现象被称为长尾问题。\n​\t为了区分是平均的慢还是长尾的慢，最简单的方式就是按照请求延迟的范围进行分组。例如，统计延迟在 010ms 之间的请求数有多少而 1020ms 之间的请求数又有多少。通过这种方式可以快速分析系统慢的原因。Histogram 和 Summary 都是为了能够解决这样问题的存在，通过 Histogram 和 Summary 类型的监控指标，我们可以快速了解监控样本的分布情况。\n​\tHistogram 在一段时间范围内对数据进行采样（通常是请求持续时间或响应大小等），并将其计入可配置的存储桶（bucket）中，后续可通过指定区间筛选样本，也可以统计样本总数，最后一般将数据展示为直方图。\nHistogram 类型的样本会提供三种指标（假设指标名称为 \u0026lt;basename\u0026gt;）：\n样本的值分布在 bucket 中的数量，命名为 \u0026lt;basename\u0026gt;_bucket{le=\u0026quot;\u0026lt;上边界\u0026gt;\u0026quot;}。解释的更通俗易懂一点，这个值表示指标值小于等于上边界的所有样本数量。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // 在总共2次请求当中。http 请求响应时间 \u0026lt;=0.005 秒 的请求次数为0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.005\u0026#34;,} 0.0 // 在总共2次请求当中。http 请求响应时间 \u0026lt;=0.01 秒 的请求次数为0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.01\u0026#34;,} 0.0 // 在总共2次请求当中。http 请求响应时间 \u0026lt;=0.025 秒 的请求次数为0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.025\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.05\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.075\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.1\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.25\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.5\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;0.75\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;1.0\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;2.5\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;5.0\u0026#34;,} 0.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;7.5\u0026#34;,} 2.0 // 在总共2次请求当中。http 请求响应时间 \u0026lt;=10 秒 的请求次数为 2 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;10.0\u0026#34;,} 2.0 io_namespace_http_requests_latency_seconds_histogram_bucket{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,le=\u0026#34;+Inf\u0026#34;,} 2.0 所有样本值的大小总和，命名为 \u0026lt;basename\u0026gt;_sum。\n1 2 // 实际含义： 发生的2次 http 请求总的响应时间为 13.107670803000001 秒 io_namespace_http_requests_latency_seconds_histogram_sum{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,} 13.107670803000001 样本总数，命名为 \u0026lt;basename\u0026gt;_count。值和 \u0026lt;basename\u0026gt;_bucket{le=\u0026quot;+Inf\u0026quot;} 相同。\n1 2 // 实际含义： 当前一共发生了 2 次 http 请求 io_namespace_http_requests_latency_seconds_histogram_count{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,} 2.0 [info] 注意\nbucket 可以理解为是对数据指标值域的一个划分，划分的依据应该基于数据值的分布。注意后面的采样点是包含前面的采样点的，假设 xxx_bucket{...,le=\u0026quot;0.01\u0026quot;} 的值为 10，而 xxx_bucket{...,le=\u0026quot;0.05\u0026quot;} 的值为 30，那么意味着这 30 个采样点中，有 10 个是小于 10 ms 的，其余 20 个采样点的响应时间是介于 10 ms 和 50 ms 之间的。\n​\t可以通过 histogram_quantile() 函数来计算 Histogram 类型样本的分位数。分位数可能不太好理解，你可以理解为分割数据的点。我举个例子，假设样本的 9 分位数（quantile=0.9）的值为 x，即表示小于 x 的采样值的数量占总体采样值的 90%。Histogram 还可以用来计算应用性能指标值（Apdex score）。\nSummary（摘要） ​\t与 Histogram 类型类似，用于表示一段时间内的数据采样结果（通常是请求持续时间或响应大小等），但它直接存储了分位数（通过客户端计算，然后展示出来），而不是通过区间来计算。\n​\tSummary 类型的样本也会提供三种指标（假设指标名称为 ）：\n样本值的分位数分布情况，命名为 \u0026lt;basename\u0026gt;{quantile=\u0026quot;\u0026lt;φ\u0026gt;\u0026quot;}。\n1 2 3 4 5 // 含义：这 12 次 http 请求中有 50% 的请求响应时间是 3.052404983s io_namespace_http_requests_latency_seconds_summary{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,quantile=\u0026#34;0.5\u0026#34;,} 3.052404983 // 含义：这 12 次 http 请求中有 90% 的请求响应时间是 8.003261666s io_namespace_http_requests_latency_seconds_summary{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,quantile=\u0026#34;0.9\u0026#34;,} 8.003261666 所有样本值的大小总和，命名为 \u0026lt;basename\u0026gt;_sum。\n1 2 // 含义：这12次 http 请求的总响应时间为 51.029495508s io_namespace_http_requests_latency_seconds_summary_sum{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,} 51.029495508 样本总数，命名为 \u0026lt;basename\u0026gt;_count。\n1 2 // 含义：当前一共发生了 12 次 http 请求 io_namespace_http_requests_latency_seconds_summary_count{path=\u0026#34;/\u0026#34;,method=\u0026#34;GET\u0026#34;,code=\u0026#34;200\u0026#34;,} 12.0 现在可以总结一下 Histogram 与 Summary 的异同：\n它们都包含了 \u0026lt;basename\u0026gt;_sum 和 \u0026lt;basename\u0026gt;_count 指标\nHistogram 需要通过 \u0026lt;basename\u0026gt;_bucket 来计算分位数，而 Summary 则直接存储了分位数的值。\n关于 Summary 与 Histogram 的详细用法，请参考 histograms and summaries。\n参考文章 第1节：数据模型 - Prometheus 中文文档 (fuckcloudnative.io)\n","permalink":"https://luenci.com/en/posts/prometheus-%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"prometheus-概念入门\"\u003ePrometheus 概念入门\u003c/h1\u003e\n\u003ch1 id=\"数据模型\"\u003e数据模型\u003c/h1\u003e\n\u003cp\u003e​\tPrometheus 所有采集的监控数据均以指标（metric）的形式保存在内置的\u003ca href=\"https://www.wikiwand.com/zh/%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97\"\u003e时间序列\u003c/a\u003e数据库当中（TSDB）：属于同一指标名称，同一标签集合的、有时间戳标记的数据流。除了存储的时间序列，Prometheus 还可以根据查询请求产生临时的、衍生的时间序列作为返回结果。\u003c/p\u003e\n\u003ch2 id=\"指标名称和标签\"\u003e指标名称和标签\u003c/h2\u003e\n\u003cp\u003e每一条时间序列由指标名称（Metrics Name）以及一组标签（键值对）唯一标识。其中指标的名称（metric name）可以反映被监控样本的含义（例如，\u003ccode\u003ehttp_requests_total\u003c/code\u003e — 表示当前系统接收到的 HTTP 请求总量），指标名称只能由 ASCII 字符、数字、下划线以及冒号组成，同时必须匹配正则表达式 \u003ccode\u003e[a-zA-Z_:][a-zA-Z0-9_:]*\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e[info] 注意\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e冒号用来表示用户自定义的记录规则，不能在 exporter 中或监控对象直接暴露的指标中使用冒号来定义指标名称。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e通过使用标签，Prometheus 开启了强大的多维数据模型：对于相同的指标名称，通过不同标签列表的集合，会形成特定的度量维度实例（例如：所有包含度量名称为 \u003ccode\u003e/api/tracks\u003c/code\u003e 的 http 请求，打上 \u003ccode\u003emethod=POST\u003c/code\u003e 的标签，就会形成具体的 http 请求）。该查询语言在这些指标和标签列表的基础上进行过滤和聚合。改变任何度量指标上的任何标签值（包括添加或删除指标），都会创建新的时间序列。\u003c/p\u003e\n\u003cp\u003e标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式 \u003ccode\u003e[a-zA-Z_][a-zA-Z0-9_]*\u003c/code\u003e。其中以 \u003ccode\u003e__\u003c/code\u003e 作为前缀的标签，是系统保留的关键字，只能在系统内部使用。标签的值则可以包含任何 \u003ccode\u003eUnicode\u003c/code\u003e 编码的字符。\u003c/p\u003e\n\u003ch2 id=\"样本\"\u003e样本\u003c/h2\u003e\n\u003cp\u003e在时间序列中的每一个点称为一个样本（sample），样本由以下三部分组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e指标（metric）：指标名称和描述当前样本特征的 labelsets；\u003c/li\u003e\n\u003cli\u003e时间戳（timestamp）：一个精确到毫秒的时间戳；\u003c/li\u003e\n\u003cli\u003e样本值（value）： 一个 folat64 的浮点型数据表示当前样本的值。\u003c/li\u003e\n\u003c/ul\u003e","title":"Prometheus 概念入门"},{"content":"引子 监控系统必要性 ​ 作为运维者，第一个接触的基本上是监控平台，各种各样的监控，看各种各样的指标，好像没有监控就觉得不正常，那么为什么需要监控呢？\n预防故障，例如当磁盘空间增长到一定的程度的时候，就会产生故障，这个时候监控系统的作用就是当达到一个阀值的时候，发出告警，然后进行处理。 预测变化趋势，例如我的分布式文件系统，每天数据增长1T空间，那么我总共有多少空间，剩余空间大小，是否要进行扩容等操作。 当故障发生的时候，能提供给我基本信息给与我排查的思路，例如redis不可读，是否能看到是哪个实例，能看到相关的日志信息，能测试是否刻读写，能查看哪个是master。 监控系统关键指标，例如对于web服务器来说，响应速度，来判断是否中间件有问题，是否数据库有问题，还是网络有问题；活跃的用户数，每天我的网站有多少用户访问；有多少新注册的用户。 简介 ​\t夜莺监控（ Nightingale ）是一款国产、开源云原生监控分析系统，采用 All-In-One 的设计，集数据采集、可视化、监控告警、数据分析于一体。于 2020 年 3 月 20 日，在 github 上发布 v1 版本，已累计迭代 60 多个版本。从 v5 版本开始与 Prometheus、VictoriaMetrics、Grafana、Telegraf、Datadog 等生态紧密协同集成，提供开箱即用的企业级监控分析和告警能力，已有众多企业选择将 Prometheus + AlertManager + Grafana 的组合方案升级为使用夜莺监控。夜莺监控，由滴滴开发和开源，并于 2022 年 5 月 11 日，捐赠予中国计算机学会开源发展委员会（CCF ODC），为 CCF ODC 成立后接受捐赠的第一个开源项目。夜莺监控的核心开发团队，也是Open-Falcon项目原核心研发人员。\n产品介绍 开箱即用：支持 Docker、Helm Chart、云服务等多种部署方式；集数据采集、监控告警、可视化为一体；内置多种监控仪表盘、快捷视图、告警规则模板，导入即可快速使用；大幅降低云原生监控系统的建设成本、学习成本、使用成本 云原生：以交钥匙的方式快速构建企业级的云原生监控体系，支持 Categraf、Telegraf、Grafana-agent 等多种采集器，支持 Prometheus、VictoriaMetrics、M3DB、ElasticSearch 等多种数据库，兼容支持导入 Grafana 仪表盘，与云原生生态无缝集成 专业告警：可视化的告警配置和管理，支持丰富的告警规则，提供屏蔽规则、订阅规则的配置能力，支持告警多种送达渠道，支持告警自愈、告警事件管理等 灵活扩展、中心化管理：夜莺监控，可部署在 1 核 1G 的云主机，可在上百台机器集群化部署，可运行在 K8s 中；也可将时序库、告警引擎等组件下沉到各机房、各 Region，兼顾边缘部署和中心化统一管理，解决数据割裂，缺乏统一视图的难题 高性能、高可用：得益于夜莺的多数据源管理引擎，和夜莺引擎侧优秀的架构设计，借助于高性能时序库，可以满足数亿时间线的采集、存储、告警分析场景，节省大量成本；夜莺监控组件均可水平扩展，无单点，已在上千家企业部署落地，经受了严苛的生产实践检验 ​\tNightingale 可以接收各种采集器上报的监控数据，转存到时序库（可以支持Prometheus、M3DB、VictoriaMetrics、Thanos等），并提供告警规则、屏蔽规则、订阅规则的配置能力，提供监控数据的查看能力，提供告警自愈机制（告警触发之后自动回调某个webhook地址或者执行某个脚本），提供历史告警事件的存储管理、分组查看的能力。\n架构设计（V6） ​\t上图是画了4个Region，Beijing 这个区域部署了中心的 n9e-center、MySQL，还有中心的时序库 VictoriaMetrics，Beijing和Shanghai网络链路比较好，Shanghai部署了CK、ES、Jaeger，Beijing 的n9e-center 会直连读取 Shanghai 区的数据，对 Shanghai 区的数据做告警判断，Beijing和Sgp的两个机房链路不好，告警引擎n9e-alerting-engine下沉到了Sgp的两个机房，只对本机房的数据做告警判断。n9e-pushgateway 只是下沉到了 Sgp02，没有部署在 Sgp01，是因为 Sgp01 是用 Prometheus 拉取各个 Exporter 的数据，走的 PULL 模型，Sgp02 才是用的各种 PUSH 型 agent。\n​\tregister targets 这个表示设备注册，这个是可以没有的，比如已有的一个 Prometheus，通过 PULL 的方式拉取监控数据，拉到数据之后直接存入时序库了，数据没有流经 n9e-pushgateway，这个影响不大，不影响看图也不影响告警。但是对于 PUSH 型架构，需要对 agent 是否存活做告警，这个注册 target 的逻辑就很关键了。回头单独写个文章来分享这块逻辑如何改造优化。\n​\t总结这个架构，如果公司的网络环境比较简单，多个机房相互之间有很好的连通性，就只需要在中心部署一个 n9e-center，对接多个数据源就好了。如果某个地域的机房网络链路不好，就需要在这个地域单独搭建时序库 + 告警引擎 + Pushgateway(可选)。\n产品对比 Zabbix 优势 丰富的插件。Zabbix拥有丰富的MiB库资源以及模版等850多个插件； 易用性、依赖少。基于PHP与MySQL搭建，可用性比较强； 可进行一定颗粒度的权限控制； 文档完善。Zabbix本身定位为企业级分布式监控系统，故拥有完善的文档，活跃的官方社区，且本身也更新得比较频繁，开发比较积极； 国内市场有相关的商业支持。 不足 zabbix 使用mysql存储的，有性能瓶颈，容量有限，监控大盘不足，配置麻烦，服务器较多的话，很卡。 zabbix 需要部署多套，没办法用一套前端 一般应用场景 监控基础设施。主机、网络设备监控等； 中小规模监控； 对于大型场景的监控来说仍需注意数据问题。 Nagios（2002） ​\tNagios是一个主要用于监控系统运行状态和网络信息的监控系统。Nagios能监控所指定的本地或远程主机以及服务，同时提供异常通知等功能。Nagios拥有4000多个插件，且在很早之前就开始拥有自己的官方插件社区。这里面包括很多应用级别的监控插件。此外，Nagios的通知虽然简单但能覆盖所有场景，以及本身拥有强大的监控任务调度的能力。\n优势 功能简单易用，主要的功能是主动检测。 劣势 功能过于单一，只能通过主动检测告知结果是否匹配，被动检测功能原生功能较弱； 配置复杂，配置修改主机、报警、阈值等时，在原生Nagios中只能通过修改配置文件来实现，操作较为复杂。 使用场景 小场景简单监控。对于一些网站、端口等可进行简单监控； 大型场景需要各种花式Hack，需要借助很多第三方的插件进行效率的提升和分布式的扩展。 Centreon（2005） ​\tCentreon是一款开源的软件，主要用于对Nagios的一些功能增强。可通过页面管理Nagios，通过第三方插件实现对网络，操作系统，应用程序的监控。\n优势 界面友好 维护方便 统一管理 性能数据可追溯 劣势 修改配置需要重启或者重载Nagios主进程\nMySQL依然存在数据问题\n文档资料较少\n使用场景分析 适用于百台规模的中等监控\n仍需要解决原生Nagios的一些弊端\nCheck_MK ​\tCheck_MK是一款通用的Nagios/Icinga增强工具集。其插件有着相当成熟的检测机制和对硬件服务器的检测手段。非常适合对硬件服务器进行“体检”。\n优势 界面友好 维护方便 统一管理 性能数据可追溯 劣势 增加变更需要重启Nagios主进程。 因后端存储使用RRD，导致分布式扩展较为困难。 文档资料较少。 使用场景分析 适用于百台到千台以内中等规模监控，需要解决Nagios的一些弊端\nCacti（2001） ​\tCacti是用PHP语言实现的一个监控软件，它的主要功能是用SNMP服务获取数据，然后用RRD储存和更新数据，当用户需要查看数据的时候用RRD生成图表呈现给用户。\n优势 网络设备支持好 有权限控制 有汉化版 早期在IDC覆盖广 劣势 SNMP依赖只适合特性场景 资料老旧 使用场景分析 简单的IDC托管 网络运维 Ganglia（2001） Ganglia是UC Berkeley发起的一个开源集群监视项目，设计用于测量数以千计的节点。主要是用来监控系统性能，如：CPU 、内存、硬盘利用率， I/O负载、网络流量情况等。\n优势 数据集中，部署分布式 适合大规模部署 对集群热点观测性支持较好 劣势 无告警 集群内UDP广播问题多 使用场景分析 大数据应用 集群较多，关注整体资源使用率 Graphite（2008） ​\tGraphite是一个开源实时的、显示时间序列度量数据的图形系统，通过其后端接收度量数据，然后以实时方式查询、转换、组合这些度量数据。\n优势 指标点分概念引入 Grafana支持较早的协议之一 统计函数支持（140+） 劣势 指标无Label支持 使用场景分析 在做好数据归并时可用于大规模场景 安装部署架构 ​\t首先我们来看下面的架构图，夜莺的服务端有两个模块：n9e-webapi 和 n9e-server，n9e-webapi 用于提供 API 给前端 JavaScript 使用，n9e-server 的职责是告警引擎和数据转发器。依赖的组件有 MySQL、Redis、时序库，时序库我们这里使用 Prometheus。\n采集器（数据源） ​\tCategraf 是一款 all-in-one 的采集器，由 快猫团队 开源，代码托管在两个地方：\ngitlink: https://www.gitlink.org.cn/flashcat/categraf github: https://github.com/flashcatcloud/categraf ​\tCategraf 不但可以采集 OS、MySQL、Redis、Oracle 等常见的监控对象，也准备提供日志采集能力和 trace 接收能力，这是夜莺主推的采集器，相关信息请查阅项目 README\n​\tCategraf 采集到数据之后，通过 remote write 协议推给远端存储，Nightingale 恰恰提供了 remote write 协议的数据接收接口，所以二者可以整合在一起，重点是配置 Categraf 的 conf/config.toml 中的 writer 部分，其中 url 部分配置为 n9e-server 的 remote write 接口\n对比 categraf 和 telegraf、exporters、grafana-agent、datadog-agent 等的关系是什么？\n​\ttelegraf 是 influxdb 生态的产品，因为 influxdb 是支持字符串数据的，所以 telegraf 采集的很多 field 是字符串类型，另外 influxdb 的设计，允许 labels 是非稳态结构，比如 result_code 标签，有时其 value 是 0，有时其 value 是 1，在 influxdb 中都可以接受。但是上面两点，在类似 prometheus 的时序库中，处理起来就很麻烦。\n​\tprometheus 生态有各种 exporters，但是设计逻辑都是一个监控类型一个 exporter，甚至一个实例一个 exporter，生产环境可能会部署特别多的 exporters，管理起来略麻烦。\n​\tgrafana-agent import 了大量 exporters 的代码，没有裁剪，没有优化，没有最佳实践在产品上的落地，有些中间件，仍然是一个 grafana-agent 一个目标实例，管理起来也很不方便。\n​\tdatadog-agent确实是集大成者，但是大量代码是 python 的，整个发布包也比较大，有不少历史包袱，而且生态上是自成一派，和社区相对割裂。\n一般直接采用社区的采集器可能无法涵盖公司内部所以场景，这时候根据公司监控业务的需求，可自行开发 agent 采集器上报数据\n告警（重要） 根据采集的数据，编写一些策略（如：cpu使用率大于90%，发送告警信息提醒相关人员进行相关操作，来维护系统的稳定可用性）\n​\t当监控到异常指标的时候（根据预先定义的策略模版）就通过，企业微信，钉钉飞书机器人，邮件，电话等。告知相关人员，推送告警的信息，让大家知道采取什么措施及时止损。\n参考文章 夜莺监控（ Nightingale ） - 追梦nan - 博客园 (cnblogs.com)\n最详细的开源监控系统对比分析！建议收藏_51CTO博客_监控系统 开源\n一篇文章全面了解监控知识体系 - 知乎 (zhihu.com)\n【滴滴开源运维监控系统】夜莺V5版本部署实践-阿里云开发者社区 (aliyun.com)\n夜莺监控(Nightingale)6.x版本整体架构设计思考 - 快猫星云 (flashcat.cloud)\n如何解决Prometheus的存储容量问题？ | Redian新闻\n聊聊监控系统-腾讯云开发者社区-腾讯云 (tencent.com)\n","permalink":"https://luenci.com/en/posts/%E5%A4%9C%E8%8E%BA%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"引子\"\u003e引子\u003c/h1\u003e\n\u003ch2 id=\"监控系统必要性\"\u003e监控系统必要性\u003c/h2\u003e\n\u003cp\u003e​    作为运维者，第一个接触的基本上是监控平台，各种各样的监控，看各种各样的指标，好像没有监控就觉得不正常，那么为什么需要监控呢？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e预防故障，例如当磁盘空间增长到一定的程度的时候，就会产生故障，这个时候监控系统的作用就是当达到一个阀值的时候，发出告警，然后进行处理。\u003c/li\u003e\n\u003cli\u003e预测变化趋势，例如我的分布式文件系统，每天数据增长1T空间，那么我总共有多少空间，剩余空间大小，是否要进行扩容等操作。\u003c/li\u003e\n\u003cli\u003e当故障发生的时候，能提供给我基本信息给与我排查的思路，例如redis不可读，是否能看到是哪个实例，能看到相关的日志信息，能测试是否刻读写，能查看哪个是master。\u003c/li\u003e\n\u003cli\u003e监控系统关键指标，例如对于web服务器来说，响应速度，来判断是否中间件有问题，是否数据库有问题，还是网络有问题；活跃的用户数，每天我的网站有多少用户访问；有多少新注册的用户。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"简介\"\u003e简介\u003c/h1\u003e\n\u003cp\u003e​\t夜莺监控（ Nightingale ）是一款国产、开源云原生监控分析系统，采用 All-In-One 的设计，集数据采集、可视化、监控告警、数据分析于一体。于 2020 年 3 月 20 日，在 github 上发布 v1 版本，已累计迭代 60 多个版本。从 v5 版本开始与 Prometheus、VictoriaMetrics、Grafana、Telegraf、Datadog 等生态紧密协同集成，提供开箱即用的企业级监控分析和告警能力，已有众多企业选择将 Prometheus + AlertManager + Grafana 的组合方案升级为使用夜莺监控。夜莺监控，由滴滴开发和开源，并于 2022 年 5 月 11 日，捐赠予中国计算机学会开源发展委员会（CCF ODC），为 CCF ODC 成立后接受捐赠的第一个开源项目。夜莺监控的核心开发团队，也是Open-Falcon项目原核心研发人员。\u003c/p\u003e\n\u003ch2 id=\"产品介绍\"\u003e产品介绍\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/arch-product.png\" alt=\"img\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e开箱即用：支持 Docker、Helm Chart、云服务等多种部署方式；集数据采集、监控告警、可视化为一体；内置多种监控仪表盘、快捷视图、告警规则模板，导入即可快速使用；大幅降低云原生监控系统的建设成本、学习成本、使用成本\u003c/li\u003e\n\u003cli\u003e云原生：以交钥匙的方式快速构建企业级的云原生监控体系，支持 Categraf、Telegraf、Grafana-agent 等多种采集器，支持 Prometheus、VictoriaMetrics、M3DB、ElasticSearch 等多种数据库，兼容支持导入 Grafana 仪表盘，与云原生生态无缝集成\u003c/li\u003e\n\u003cli\u003e专业告警：可视化的告警配置和管理，支持丰富的告警规则，提供屏蔽规则、订阅规则的配置能力，支持告警多种送达渠道，支持告警自愈、告警事件管理等\u003c/li\u003e\n\u003cli\u003e灵活扩展、中心化管理：夜莺监控，可部署在 1 核 1G 的云主机，可在上百台机器集群化部署，可运行在 K8s 中；也可将时序库、告警引擎等组件下沉到各机房、各 Region，兼顾边缘部署和中心化统一管理，解决数据割裂，缺乏统一视图的难题\u003c/li\u003e\n\u003cli\u003e高性能、高可用：得益于夜莺的多数据源管理引擎，和夜莺引擎侧优秀的架构设计，借助于高性能时序库，可以满足数亿时间线的采集、存储、告警分析场景，节省大量成本；夜莺监控组件均可水平扩展，无单点，已在上千家企业部署落地，经受了严苛的生产实践检验\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e​\tNightingale 可以接收各种采集器上报的监控数据，转存到时序库（可以支持Prometheus、M3DB、VictoriaMetrics、Thanos等），并提供告警规则、屏蔽规则、订阅规则的配置能力，提供监控数据的查看能力，提供告警自愈机制（告警触发之后自动回调某个webhook地址或者执行某个脚本），提供历史告警事件的存储管理、分组查看的能力。\u003c/p\u003e","title":"夜莺监控入门"},{"content":"Etcd 储存核心实现 ​\tEted 集群是分布式KV存储集群，提供了可靠的强一致性服务发现。Etcd 集群存储 Kubernetes 系统的集群状态和元数据，其中包括所有 Kubemetes 资源对象信息、 资源对象状态、集群节点信息等。Kubernetes 将所有数据存储至 Etcd 集群前缀为 /registry 的目录下。\nEtcd 存储架构设计 ​\tKuberetes 系统对Etcd 存储进行了大量封装，其架构是分层的，而每一层的封 装设计又拥有高度的可扩展性。\n1. RESTStorage ​\t实现了RESTful 风格的对外资源存储服务的 API 接口。\n2. RegistryStore ​\t实现了资源存储的通用操作，例如，在存储资源对象之前执行某个函数( 即BeforeFunc ) ，在存储资源对象之后执行某个函数 (即 After Func ) 。\n3. Storage.Intertace ​\t通用存储接口，该接口定义了资源的操作方法 (即 Create 、Delete 、Watch 、WatchList.Get、GetToList 、List、GuaranteedUpdate、Count 、Versioner 等方法)。\n4. CacherStorage ​\t带有缓存功能的资源存储对象，它是 Storage.Interface 通用存储接又的实现。 CacherStorage 缓存层的设计有利于 Eted 集群中的数据能够获得快速的响应，并与 Etcd 集群数据保持一致。\n5. UnderlyingStorage ​\t底层存储，也被称为 BackendStorage (后端存储)，是真正与 Etcd 集群交互的资源存储对象，CacherStorage 相当 UnderlyingStorage 的缓存层。UnderlyingStorage 同样也是 Storage.Interface 通用存储接又的实现。\nKube-apiserver 架构设计详解 kube-apiserver 组件负责将 Kubernetes 的 “资源组、资源版本、资源” 以 RESTful 风格的形式对外暴露并提供服务。该组件Kubernetes 系统集群中所有组件沟通的桥梁, 例如在创建Pod 资源对象时，所有组件都需要与kube-apiserver组件进行交互。下图是pod资源对象创建流程。\n​\tkube-apiserver 为丰富周边工具和库生态系统，提供了三种HTTP Server 服务，用于将庞大的kube-apiserver 组件功能进行解耦，这了种HTTPServer 分别是 APIExtensionsServer、KubeAPIServer 、AggregatorServer。不同服务的应用场景不同， 提供的资源也不同，但它们都可以通过 kubectl 工具或接又进行资源管理。\nAPIExtensionsServer: API 扩展服务(扩展器)。该服务提供了CRD (CustomResourceDefinitions )自定义资源服务，开发者可通过CRD 对Kubernetes资源进行扩展，例如，通过 crd-example 扩展 Kubernetes 资源。 该服务通过 CustomResourceDefinitions 对象进管理， 并通过 extensionsapiserver.Scheme 资源注册表管理CRD相关资源。 Aggregatorserver: API 聚合服务(聚合器)。该服务提供了AA (APIAggregator )聚合服务，开发者可通过AA对Kubernetes聚合服务进 行扩展，例如，metrics-server是Kubernetes 系统集群的核心监控数据的聚 合器，它是AggregatorServer 服务的扩展实现。API 聚合服务通过 APIAggregator 对象进行管理，并通过 aggregatorscheme.Scheme 资源注册表管理AA 相关资源 KubeAPIServer: API 核心服务。该服务提供了 Kubernetes 内置核心资源服务， 不允许开发者随意更改相关资源，例如，Pod、Service 等内置核心资源会由 Kubernetes 官方维护。API 核心服务通过Master 对象进行管理，并通过 legacyscheme. Scheme 资源注册表管理Master 相关资源。 ","permalink":"https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%80/","summary":"\u003ch1 id=\"etcd-储存核心实现\"\u003eEtcd 储存核心实现\u003c/h1\u003e\n\u003cp\u003e​\tEted 集群是分布式KV存储集群，提供了可靠的强一致性服务发现。Etcd 集群存储 Kubernetes 系统的集群状态和元数据，其中包括所有 Kubemetes 资源对象信息、 资源对象状态、集群节点信息等。Kubernetes 将所有数据存储至 Etcd 集群前缀为 /registry 的目录下。\u003c/p\u003e","title":"k8s 核心组件介绍"},{"content":"kustomize 介绍 kustomize 是一个通过 kustomization 文件定制 kubernetes 对象的工具，它可以通过一些资源生成一些新的资源，也可以定制不同的资源的集合。\nkustomize 术语 kustomization kustomization 指的是 kustomization.yaml 文件，或者指的是包含 kustomization.yaml 文件的目录以及它里面引用的所有相关文件路径\nbase base 指的是一个 kustomization , 任何的 kustomization 包括 overlay (后面提到)，都可以作为另一个 kustomization 的 base (简单理解为基础目录)。base 中描述了共享的内容，如资源和常见的资源配置\noverlay overlay 是一个 kustomization, 它修改(并因此依赖于)另外一个 kustomization. overlay 中的 kustomization指的是一些其它的 kustomization, 称为其 base. 没有 base, overlay 无法使用，并且一个 overlay 可以用作 另一个 overlay 的 base(基础)。简而言之，overlay 声明了与 base 之间的差异。通过 overlay 来维护基于 base 的不同 variants(变体)，例如开发、QA 和生产环境的不同 variants\nvariant variant 是在集群中将 overlay 应用于 base 的结果。例如开发和生产环境都修改了一些共同 base 以创建不同的 variant。这些 variant 使用相同的总体资源，并与简单的方式变化，例如 deployment 的副本数、ConfigMap使用的数据源等。简而言之，variant 是含有同一组 base 的不同 kustomization\nresource 在 kustomize 的上下文中，resource 是描述 k8s API 对象的 YAML 或 JSON 文件的相对路径。即是指向一个声明了 kubernetes API 对象的 YAML 文件\npatch 修改文件的一般说明。文件路径，指向一个声明了 kubernetes API patch 的 YAML 文件\nkustomization.yml 一个常见的 kustomization.yml 如下所示，一般包含 apiVsersion 和 kind 两个固定字段\n1 2 3 4 5 6 7 8 9 10 apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - manager.yaml configMapGenerator: - files: - controller_manager_config.yaml name: manager-config kustomize 提供了比较丰富的字段选择，除此之外还可以自定义插件，下面会大概列举一下每个字段的含义，当我们需要用到的时候知道有这么个能力，然后再去 Kustomize 官方文档 查找对应的 API 文档就行了\nresources 表示 k8s 资源的位置，这个可以是一个文件，也可以指向一个文件夹，读取的时候会按照顺序读取，路径可以是相对路径也可以是绝对路径，如果是相对路径那么就是相对于 kustomization.yml的路径\ncrds 和 resources 类似，只是 crds 是我们自定义的资源\nnamespace 为所有资源添加 namespace\nimages 修改镜像的名称、tag 或 image digest ，而无需使用 patches\nreplicas 修改资源副本数\nnamePrefix 为所有资源和引用的名称添加前缀\nnameSuffix 为所有资源和引用的名称添加后缀\npatches 在资源上添加或覆盖字段，Kustomization 使用 patches 字段来提供该功能。\npatchesJson6902 列表中的每个条目都应可以解析为 kubernetes 对象和将应用于该对象的 JSON patch。\npatchesStrategicMerge 使用 strategic merge patch 标准 Patch resources.\nvars 类似指定变量\ncommonAnnotations 为所有资源加上 annotations 如果对应的 key 已经存在值，这个值将会被覆盖\n1 2 3 4 5 commonAnnotations: app.lailin.xyz/inject: agent resources: - deploy.yaml commonLabels 为所有资源的加上 label 和 label selector 注意：这个操作会比较危险\n1 2 3 4 5 apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization commonLabels: app: bingo configMapGenerator 可以生成 config map，列表中的每一条都会生成一个 configmap\nsecretGenerator 用于生成 secret 资源\ngeneratorOptions 用于控制 configMapGenerator 和 secretGenerator 的行为\nkustomize 示例 一个比较典型的场景是我们有一个应用，在不同的环境例如生产环境和测试环境，它的 yaml 配置绝大部分都是相同的，只有个别的字段不同，这时候就可以利用 kustomize 来解决，kustomize 也比较适合用于 giweights 工作流。 1 2 3 4 5 6 7 8 9 10 11 [root@dev-01 sammy-app]# tree . ├── base │ ├── configmap.yml │ ├── deployment.yml │ ├── kustomization.yaml │ └── service.yml └── overlays └── production ├── kustomization.yml └── map.yaml ​\t如上图所示，有一个 sammy-app 的应用，/base目录保存的是基本的配置，/overlays里放置的不同环境的配置，例如 /dev、/staging，/prod这些就是不同环境的配置，/base等文件夹下都有一个 kustomization .yml 文件，用于配置。\n执行 kustomize build dir的方式就可以生成我们最后用于部署的 yaml 文件，也就是进行到了我们上图的第四步，然后通过 kubectl apply -f命令进行部署。\nworkflows 工作流 ​ kustomize 将对 Kubernetes 应用的管理转换成对 Kubernetes manifests YAML 文件的管理，而对应用的修改也通过 YAML 文件来修改。这种修改变更操作可以通过 Git 版本控制工具进行管理维护, 因此用户可以使用 Git 风格的流程来管理应用。 workflows 是使用并配置应用所使用的一系列 Git 风格流程步骤。官网提供了两种方式，一种是定制配置，另一种是现成配置。\n定制配置 在这个工作流中，所有的配置（YAML 文件）都属于用户所有。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 定制工作流步骤如下： 1、创建一个目录用于版本管理 git init ~/ldap 2、创建一个 base mkdir -p ~/ldap/base # 在这个目录中创建并提交 kustomization.yaml 文件和一组资源，例如 deployment、service 3、创建 overlays mkdir -p ~/ldap/overlays/staging mkdir -p ~/ldap/overlays/production 4、生成 variants kustomize build ~/ldap/overlays/staging | kubectl apply -f - kustomize build ~/ldap/overlays/production | kubectl apply -f - kubectl v1.14 版使用下面： kubectl apply -k ~/ldap/overlays/staging kubectl apply -k ~/ldap/overlays/production 现成配置 在这个工作流方式中，可从别人的 repo 中 fork kustomize 配置，并根据自己的需求来配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 现成配置工作流步骤如下： 1、通过 fork 方式获得现成配置 2、clone 作为你的 base mkdir ~/ldap git clone https://github.com/$USER/ldap ~/ldap/base cd ~/ldap/base git remote add upstream git@github.com:$USER/ldap 3、创建并填充 overlays mkdir -p ~/ldap/overlays/staging mkdir -p ~/ldap/overlays/production 4、生成 variants kustomize build ~/ldap/overlays/staging | kubectl apply -f - kustomize build ~/ldap/overlays/production | kubectl apply -f - 5、(可选)更新上游配置，用户可以定期更新他的 base, 以更新上游所做的修改 cd ~/ldap/base git fetch upstream git rebase upstream/master通过上面两种工作流方式，可以实现自定义管理应用的声明式资源文件，或者基于别人的应用声明式资源进行自定义修改 总结 总的来说 kustomize 更适合 giweights 模式，相比于 helm ，kustomize更加轻量，原生的yaml模版，不必学习新语法。而 helm 支持 GoTemplate，组件上也要多一些，并且 helm 通过 chart 包来进行发布相对来说还是要重量级一些。\n参考文章 4. kustomize 简明教程 - Mohuishou (lailin.xyz) [kustomize 最简实践 - 知乎 (zhihu.com)]( ","permalink":"https://luenci.com/en/posts/kustomize%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"kustomize-介绍\"\u003ekustomize 介绍\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003ekustomize 是一个通过 kustomization 文件定制 kubernetes 对象的工具，它可以通过一些资源生成一些新的资源，也可以定制不同的资源的集合。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"kustomize-术语\"\u003ekustomize 术语\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ekustomization\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ekustomization 指的是 kustomization.yaml 文件，或者指的是包含 kustomization.yaml 文件的目录以及它里面引用的所有相关文件路径\u003c/p\u003e","title":"kustomize 介绍"},{"content":"Prometheus 入门实操 参考文章：Prometheus监控Linux主机 - 吕振江 - 博客园 (cnblogs.com)\n安装 1 2 3 4 5 6 7 8 9 # 下载 wget https://github.com/prometheus/prometheus/releases/download/v2.44.0/prometheus-2.44.0.linux-amd64.tar.gz # 解压 tar zxf prometheus-2.44.0.linux-amd64.tar.gz # 移动 mv prometheus-2.24.1.linux-amd64/* /usr/local/prometheus # 将本机上报 sed -i \u0026#39;s/localhost/你的主机ip/g\u0026#39; /usr/local/prometheus/prometheus.yml 启动(systemed，守护进程) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cat \u0026lt;\u0026lt;EOF \u0026gt; /usr/lib/systemd/system/prometheus.service [Unit] Description=prometheus After=network.target [Service] Type=simple ExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/usr/local/prometheus/data/ --web.enable-lifecycle --storage.tsdb.retention.time=30d\tRestart=on-failure [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl start prometheus systemctl status prometheus \u0026amp;\u0026amp; systemctl enable prometheus 访问 Ip:9090\n管理接口 1 2 3 4 5 6 7 8 9 10 11 12 $ curl http://ip:9090/-/healthy Prometheus is Healthy. # 健康检查 $ curl http://ip:9090/-/ready Prometheus is Ready. # 检查Prometheus是否启动 $ curl -XPOST http://ip:9090/-/reload # 通过web接口重载，启动时需增加选项 --web.enable-lifecycle $ curl -XPUT http://ip:9090/-/quit $ curl -XPOST http://ip:9090/-/quit # 停止Prometheus # 同样需启动时增加--web.enable-lifecycle选项 grafana安装（centos） 安装连接参考：Install Grafana on Red Hat, RHEL, or Fedora | Grafana documentation\n1 2 3 4 5 sudo yum install -y https://dl.grafana.com/oss/release/grafana-9.5.2-1.x86_64.rpm systemctl daemon-reload systemctl enable grafana-server \u0026amp;\u0026amp; systemctl start grafana-server ss -lnput | grep 3000 tcp LISTEN 0 128 [::]:3000 [::]:* users:((\u0026#34;grafana\u0026#34;,pid=1194,fd=10)) 访问 http://ip:3000/\n导入 Prometheus 数据 实战 - 监控主机节点信息 node_exporter 配置 node_exporter用于收集主机运行信息，比如CPU、内存、磁盘等资源使用情况。\n1 2 3 4 5 6 7 8 # 下载 wget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz # 解压 tar zxf node_exporter-1.0.1.linux-amd64.tar.gz # 移动 mv node_exporter-1.0.1.linux-amd64/* /usr/local/node_exporter/ 设置 systemd 启动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat \u0026gt; /usr/lib/systemd/system/node_exporter.service \u0026lt;\u0026lt;EOF [Unit] Description=node_exporter After=network.target [Service]\\nType=simple User=node_exporter ExecStart=/usr/local/node_exporter/node_exporter Restart=on-failure [Install] WantedBy=multi-user.target EOF 启动服务 1 2 3 4 5 6 7 systemctl daemon-reload systemctl enable node_exporter \u0026amp;\u0026amp; systemctl start node_exporter ss -lnput | grep 9100 tcp LISTEN 0 128 [::]:9100 [::]:* users:((\u0026#34;node_exporter\u0026#34;,pid=1155,fd=3)) 配置 prometheus 监控 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ $ vim /usr/local/prometheus/prometheus.yml - job_name: \u0026#39;prometheus\u0026#39; # metrics_path defaults to \u0026#39;/metrics\u0026#39; # scheme defaults to \u0026#39;http\u0026#39;. static_configs: - targets: [\u0026#39;ip:9090\u0026#39;] # 增加以下配置，其中job_name为自定义 - job_name: \u0026#39;agent1\u0026#39; static_configs: - targets: [\u0026#39;ip:9100\u0026#39;] # 重载Prometheus配置文件 $ curl -XPOST http://ip:9090/-/reload 查看node上报状态 配置 grafana 展示 选择 9276 模版号\nload 之后选择数据源 prometheus\n查看效果\n","permalink":"https://luenci.com/en/posts/prometheus-%E5%85%A5%E9%97%A8%E5%AE%9E%E6%93%8D/","summary":"\u003ch1 id=\"prometheus-入门实操\"\u003ePrometheus 入门实操\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考文章：\u003ca href=\"https://www.cnblogs.com/lvzhenjiang/p/14377577.html\"\u003ePrometheus监控Linux主机 - 吕振江 - 博客园 (cnblogs.com)\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 下载\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://github.com/prometheus/prometheus/releases/download/v2.44.0/prometheus-2.44.0.linux-amd64.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 解压\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etar zxf prometheus-2.44.0.linux-amd64.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 移动\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emv prometheus-2.24.1.linux-amd64/* /usr/local/prometheus\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 将本机上报\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esed -i \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;s/localhost/你的主机ip/g\u0026#39;\u003c/span\u003e /usr/local/prometheus/prometheus.yml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"启动systemed守护进程\"\u003e启动(systemed，守护进程)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat \u003cspan style=\"color:#a5d6ff\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; /usr/lib/systemd/system/prometheus.service\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e[Unit]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eDescription=prometheus\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eAfter=network.target\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e[Service]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eType=simple\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\t--storage.tsdb.path=/usr/local/prometheus/data/ --web.enable-lifecycle \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\t--storage.tsdb.retention.time=30d\t\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eRestart=on-failure\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e[Install]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eWantedBy=multi-user.target\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esystemctl daemon-reload\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esystemctl start prometheus\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esystemctl status prometheus \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e systemctl enable prometheus\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"访问\"\u003e访问\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIp:9090\u003c/p\u003e","title":"Prometheus 入门实操"},{"content":"K8s 核心数据结构（2） 参考书籍：《Kubernetes源码剖析-郑旭东著》\nKubernetes 内置资源概览 资源组 资源种类 说明 apiextensions.k8s.io CustomResourceDefinition 自定义资源类型 ， 由 APIExtensions Server 负责管理该资源类型 apiregistration.k8s.io APIService 聚合资源类型，由 AggregatorServer 负责管理该资源类 admissionregistration.k8s.io MutatingWebhookConfiguration 变更准入控制器资源类型( Webhook) ValidatingWebhookConfiguration 验证准入控制器资源类型 ( Webhook) apps ControllerRevision 记录资源对象所有的历史版本的资源类型 DaemonSet 在 Pod 资源对象的基础上提供守护进程的资源类型 Deployment 在 Pod资源对象的基础上提供支持无状态服务的资源类型 ReplicaSet 在 Pod 资源对象的基础上提供一组 Pod 副本的资源类型 StatefulSet 在 Pod资源对象的基础上提供支持有状态服务的资源类型 auditregistration.k8s.io AuditSink 审计资源类型 authentication.k8s.io TokenReview 认证资源类型 authorization.k8s.io LocalSubjectAccessReview 授权检查用户是否可以在指定的命名空间中执行操作 SelfSubjectAccessReview 授权检查用户是否可以执行操作(若不指定 spec.namespace，则在所有的命名空间中执行操作） SelfSubjectRulesReview 授权枚举用户可以在指定的命名空间中执行一组操作 SubjectAccessReview 授 权检查用户是否可以执行操作 autoscaling HorizontalPodAutoscaler 在 Pod 资源对象的基础上提供水平自动伸缩资源类型 batch Job 提供一次性任务的资源类型 CronJob 提供定时任务的资源类型 certificates.k8s.io CertificateSigningRequest 提供证书管理的资源类型 coordination.k8s.io Leases 提供领导者选举机制的资源类型 core ComponentStatus 该资源类型已被奔用，其用于提供获取 Kuberetes 组件运行状况的资源类型 ConfigMap 提供容器内应用程序配置管理的资源类型 Endpoints 提供将外部服务器映射为内部服务的资源类型 Event 提供 Kubernetes 集群事件管理的资源类型 LimitRange 为命名空间中的每种资源对象设置资源(硬件资源)使 用限制 Namespace 提供资源对象所在的命名空间的资源类型 Node 提供 Kubernetes 集群中管理工作节点的资源类型。每个节点都有一个唯一标识符 PersistentVolume 提供 PV 存储的资源类型 PersistentVolumeClaim 提供 PVC 存储的资源类型 Pod 提供容器集合管理的资源类型 PodTemplate 提供用于描述预定义 Pod 资源对象副本数模板的资源类型 ReplicationController 在 Pod资源对象的基础上提供副本数保持不变的资源类型 ResourceQuota 提供每个命名空间配额限制的资源类型 Secret 提供存储密码 、Token 、密钥等敏感数据的资源类型 Service 提供负载均衡器为 Pod 资源对象的代理服务的资源类型 ServiceAccount 提供 ServiceAccount 认证的资源类型 events.k8s.io Event 提供Kuberetes集群事件管理的资源类型 networking.k8s.io RuntimeClass 提供容器运行时功能的资源类型 Ingress 提供 从Kubernetes 集群外部访问集群内部服务管理的资源类型 node.k8s.io RuntimeClass 提供容器运行时功能的资源类型 policy Evictions 在 Pod 资源对象的基础上提供驱逐策略的资源类型 PodDisruptionBudget 提供限制同时中断 Pod 的数量 ，以保证集群的高可用性 PodSecurityPolicy 提供控制 Pod 资源安全相关策略的资源类型 rbac.authorization.k8s.io ClusterRole 提供 RBAC 集群角色的资源类型 ClusterRoleBinding 提供 RBAC 集群角色鄉定的资源类型 Role 提供 RBAC 角色的资源类型 RoleBinding 提供 RBAC 角色绑定的资源类型 scheduling.k8s.io PriorityClass 提供 Pod 资源对象优先级管理的资源类型 settings.k8s.10 PodPreset 在创建 Pod 资源对象时，可以将特定信息注入 Pod 资源对象中 storage.k8s.io StorageClass 提供动态设置PV存储参数的资源类 VolumeAttachment 供触发 CSI ControllerPublish 和 ControllerUnpublish 操作的资源类型 runtime.Object 类型基石 ​\truntime.Object 是Kubernetes 类型系统的基石。Kubernetes 上的所有资源对象 ( Resource 0bject ) 实际上就是一种 Go 语言的 Struct 类型 ， 相当于一种数据结构 ，它们都有一个共同的结构叫runtime.Object。runtime.Object 被设计为 Interface 接口类型， 作为资源对象的通用资源对象，runtime.Obejct 类型基石如图\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 对象接口必须被在 Scheme 注册的所有 API 类型支持。由于方案中的对象是 // 预期被序列化到线路，对象必须提供给 Scheme 的接口允许 // 用于设置对象表示的种类、版本和组的序列化程序。对象可以选择 // 在不希望序列化的情况下返回无操作 ObjectKindAccessor。 type Object interface { GetObjectKind() schema.ObjectKind DeepCopyObject() Object } type ObjectKind interface { // SetGroupVersionKind sets or clears the intended serialized kind of an object. Passing kind nil // should clear the current setting. SetGroupVersionKind(kind GroupVersionKind) // GroupVersionKind returns the stored group, version, and kind of an object, or an empty struct // if the object does not expose or provide these fields. GroupVersionKind() GroupVersionKind } runtime.Object 提供了两个方法 ，分别是 GetObjectKind 和 DeepCopyObject。\nGetObjectKind : 用于设置并返回 GroupVersionKind。\nDeepCopyObject: 用于深复制当前资源对象并返回 。\n深复制相当于将数据结构克隆一份，因此它不与原始对象共享任何内容。它使代码在不修改原始对象的情况下可以改变克隆对象的任何属性。\n那么，如何确认一个资源对象是否可以转换成runtime.Object 通用资源对象呢?\n这时需要确认该资源对象是否拥有 GetobjectKind 和 DeepCopyobjeot 方法。Kubernetes 的每一个资源对象都嵌入了metav1.TypeMeta 类型，metav1.TypeMeta 类型实现了GetObjectkind 方法，所以资源对象拥有该方法。 另外，Kubernetes 的每一 个资源对象都实现了 DeepCopyobject 方法，该方法一般被定义在 zz_generated.deepcopy.go 文件中。因此，可以认为该资源对象能够转换成 runtime.Object 通用资源对象。\n​\t所以，Kubernetes 的任意资源对象都可以通过 runtime.Object 存储它的类型并允许深复制操作。通过 runtime.Object Example 代码示例，可以将资源对象转换成通用资源对象并再次转换回资源对象。runtime.Object Example 代码示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/apimachinery/pkg/runtime\u0026#34; \u0026#34;k8s.io/kubernetes/pkg/apis/core\u0026#34; \u0026#34;reflect\u0026#34; ) func main() { pod := \u0026amp;core.Pod{ TypeMeta: metav1.TypeMeta{ Kind: \u0026#34;Pod\u0026#34;, }, ObjectMeta: metav1.ObjectMeta{ Labels: map[string]string{\u0026#34;name\u0026#34;: \u0026#34;foo\u0026#34;}, }, } obj := runtime.Object(pod) pod2, ok := obj.(*core.Pod) if !ok { panic(\u0026#34;unexpected\u0026#34;) } if !reflect.DeepEqual(pod, pod2) { panic(\u0026#34;unexpected\u0026#34;) } } ​\t在以上代码示例中，首先实例化 Pod 资源, 得到 Pod 资源对象, 通过 runtime.object 将 Pod 资源对象转换成通用资源对象(得到 obj )。然后通过断言的方式，将obj 通用资源对象转换成 Pod 资源对象(得到 pod2 )。最终通过 reflect (反射，来验证转换之前和转换之后的资源对象是否相等。\nUnstructured数据 ​\t数据可以分为结构化数据 (StructuredData )和非结构化数据 ( Unstructured Data ) 。 Kubernetes 内部会经常处理这两种数据。\n1. 结构化数据 预先知道数据结构的数据类型是结构化数据。例如，JSON 数据: 1 2 3 4 { \u0026#34;id\u0026#34;: 1 \u0026#34;name\u0026#34;: \u0026#34;Derek\u0026#34; } 要使用这种数据，需要创建一个struct 数据结构，其具有id 和name 属性:\n1 2 3 4 type Student struct{ ID int Name string } 2. 非结构化数据 ​\t无法预知数据结构的数据类型或属性名称不确定的数据类型是非结构化数据， 其无法通过构建预定的struct 数据结构来序列化或反序列化数据。例如\n1 2 3 4 5 { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Derek\u0026#34;, \u0026#34;description\u0026#34;: ... } ​\t我们无法事先得知description 的数据类型，它可能是字符串，也可能是数组嵌套等。原因在于Go 语言是强类型语言，它需要预先知道数据类型，Go 语言在处理JSON 数据时 不如动态语言那样便捷。 当无法预知数据结构的数据类型或属性名称不确定时，通过如 下结构来解决问题\n1 var result map[string]interface{} ​\t每个字符串对应一 JSON 属性，其映射 interface{} 类型对应值 ，可以是任何类型。使用 interface 字段时，通过 Go 语言断言的方式进行类型转换:\n1 2 3 if description, ok := result[\u0026#34;description\u0026#34;].(string);ok{ fmt.Println(description) } 3. Kubernetes 非结构化数据处理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // staging/src/k8s.io/apimachinery/pkg/runtime/interfaces.go // Unstructured objects store values as map[string]interface{}, with only values that can be serialized // to JSON allowed. type Unstructured interface { Object // NewEmptyInstance returns a new instance of the concrete type containing only kind/apiVersion and no other data. // This should be called instead of reflect.New() for unstructured types because the go type alone does not preserve kind/apiVersion info. NewEmptyInstance() Unstructured // UnstructuredContent returns a non-nil map with this object\u0026#39;s contents. Values may be // []interface{}, map[string]interface{}, or any primitive type. Contents are typically serialized to // and from JSON. SetUnstructuredContent should be used to mutate the contents. UnstructuredContent() map[string]interface{} // SetUnstructuredContent updates the object content to match the provided map. SetUnstructuredContent(map[string]interface{}) // IsList returns true if this type is a list or matches the list convention - has an array called \u0026#34;items\u0026#34;. IsList() bool // EachListItem should pass a single item out of the list as an Object to the provided function. Any // error should terminate the iteration. If IsList() returns false, this method should return an error // instead of calling the provided function. EachListItem(func(Object) error) error } // staging/src/k8s.io/apimachinery/pkg/apis/meta/v1/unstructured/unstructured.go type Unstructured struct { // Object is a JSON compatible map with string, float, int, bool, []interface{}, or // map[string]interface{} // children. Object map[string]interface{} } ​\t在上述代码中，Kubernetes 非结构化数据通过 map[string]interface{} 表达，并提供接口。在 client-go 编程式交互的 DynamicClient 内部，实现了 Unstructured 类型， 用于处理非结构化数据。\nScheme 资源注册表 ​\t大家在使用Windows 操作系统时都应该听说过， 当在操作系统上安装应用程序 时， 该程序 的一些信息会注册到注册表中; 当从操作系统 上卸载应用程序时， 会从 注册表中删除该程序的相关信息。而 KubernetesScheme 资源注册表类似于Windows 操作系统上的注册表，只不过注册的是资源类型。\n​\tKuberetes 系统拥有众多资源，每一种资源就是一个资源类型，这些资源类型需要有统一的注册 、 存储 、 查询 、 管理等机制 。目前 Kuberetes 系统中的所有资源类型都已注册到 Scheme 资源注册表中，其是 一个内存型的资源注册表，拥有如下特点。\n支持注册多种资源类型，包括内部版本和外部版本。 支持多种版 本转换机制。 支持不同资源的序列化/反序列化机制。 ​\tScheme 资源注册表支持两种资源类型( Type )的注册，分别是 UnversionedType 和KnownType 资源类型，分别介绍如下\nUnversionedType: 无版本资源类型，这是一个早期 Kubernetes 系统中的概 念， 它主要应用于某些没有版本的资源类型，该类型的资源对象并不需要进行转换。在目前的 Kubernetes 发行版本中，无版本类型已被弱化，几乎所有的资源对象都拥有版本， 但在 metav1 元数据中还有部分类型 ，它们既属于 meta.k8s.io/v1 又属于 UnversionedType 无版本资源类型，例如 metav1.Status, metav1.APIVersions、metav1.APIGroupList、metavI.APIGroup、metav1.APIResourceList. KnownType: 是目前Kubernetes 最常用的资源类型，也可称其为“ 拥有版本的资源类型” Schema 资源注册表数据结构 ​\tScheme资源注册表数据结构主要由4 个map结构组成，它们分别是. gvkToType、typeToGVK、unversionedTypes、unversionedKinds.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 eme struct { // gvkToType allows one to figure out the go type of an object with // the given version and name. gvkToType map[schema.GroupVersionKind]reflect.Type // typeToGVK allows one to find metadata for a given go object. // The reflect.Type we index by should *not* be a pointer. typeToGVK map[reflect.Type][]schema.GroupVersionKind // unversionedTypes are transformed without conversion in ConvertToVersion. unversionedTypes map[reflect.Type]schema.GroupVersionKind // unversionedKinds are the names of kinds that can be created in the context of any group // or version // TODO: resolve the status of unversioned types. unversionedKinds map[string]reflect.Type ... } ​\tScheme 资源注册表结构字段说明如下。\ngVkToType: 存储 GVK 与 Type 的映射关系。\ntypeToGVK: 存储 Type 与 GVK 的映射关系,一个 Type 会对应一个或多个 GVK。\nunversionedTypes: 存储 UnversionedType 与 GVK 的映射关系。\nunversionedKinds: 存储 Kind (资源种类)名称与UnversionedType 的映射关系。\nScheme 资源注册表通过Go 语言的map结构实现映射关系，这些映射关系可以 实现高效的正向和反向检索，从 Scheme 资源注册表中检索某个 GVK 的Type， 它的时间复杂度为O（1）。\n​\tScheme 资源注册表在 Kubernetes 系统体系中属于非常核心的数据结构。示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import ( appsv1 \u0026#34;k8s.io/api/apps/v1\u0026#34; corev1 \u0026#34;k8s.io/api/core/v1\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/apimachinery/pkg/runtime\u0026#34; \u0026#34;k8s.io/apimachinery/pkg/runtime/schema\u0026#34; ) func main() { // KnownType external coreGV := schema.GroupVersion{Group: \u0026#34;\u0026#34;, Version: \u0026#34;v1\u0026#34;} extensionsGV := schema.GroupVersion{Group: \u0026#34;extensions\u0026#34;, Version: \u0026#34;v1beta1\u0026#34;} // KnownType internal coreInternalGV := schema.GroupVersion{Group: \u0026#34;\u0026#34;, Version: runtime.APIVersionInternal} // UnversionedType Unversioned := schema.GroupVersion{Group: \u0026#34;\u0026#34;, Version: \u0026#34;v1\u0026#34;} scheme := runtime.NewScheme() scheme.AddKnownTypes(coreGV, \u0026amp;corev1.Pod{}) scheme.AddKnownTypes(extensionsGV, \u0026amp;appsv1.DaemonSet{}) scheme.AddKnownTypes(coreInternalGV, \u0026amp;corev1.Pod{}) scheme.AddUnversionedTypes(Unversioned, \u0026amp;metav1.Status{}) } ​\t在上述代码中，首先定义了两种类型的GV( 资源组、资源版本)，KnownType 类型有 coreGV、extensionsGV、coreInternalGV 对象，其中 corelnternalGV 对象属于内部版本(即runtime.APIVersioninternal )，而 UnversionedType 类型有 Unversioned 对象。 ​\t通过 runtime.NewScheme 实例化一个新的Scheme资源注册表。注册资源类型到 Scheme 资源注册表有两种方式，第一种通过scheme.AddKnownTypes 方法注册 KnownType 类型的对象，第二种通过 scheme. AddUnversionedTypes 方法注册 UnversionedType 类型的对象。\n​\t在 Scheme Example 代码示例中，我们往 Scheme 资源注册表中分别注册了Pod、 DaemonSet、Pod ( 内部版本)及 Status (无版本资源类型)类型对象，那么这些资源的映射关系，如图\n​\tGVK(资源组、资源版本、资源种类)在Scheme资源注册表中以\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;, Kind =\u0026lt;kind\u0026gt;的形式存在，其中对于 Kind ( 资源种类)字段，在注册时如果不指定该 字段的名称，那么默认使用类型的名称，例如corev1.Pod 类型，通过reflect 机制获 取资源类型的名称，那么它的资源种类 Kind-Pod。 ​\t资源类型在Scheme 资源注册表中以 Go Type (通过 reflect 机制获取)形式存在。\n​\t另外， 需要注意的是，UnversionedType 类型的对象在通过 scheme.AddUnversionedTypes 方法注册时，会同时存在于4个map 结构中，代码示例如\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* AddUnversionedTypes 将提供的类型注册为“未版本化”，这意味着它们遵循特殊规则。 每当序列化此类型的对象时，它都会使用提供的组版本进行序列化，而不是 转换。因此，未版本化的对象应该永远保持向后兼容，就好像它们在一个永远不会更新的 API 组和版本。 */ func (s *Scheme) AddUnversionedTypes(version schema.GroupVersion, types ...Object) { s.addObservedVersion(version) s.AddKnownTypes(version, types...) for _, obj := range types { t := reflect.TypeOf(obj).Elem() gvk := version.WithKind(t.Name()) s.unversionedTypes[t] = gvk if old, ok := s.unversionedKinds[gvk.Kind]; ok \u0026amp;\u0026amp; t != old { panic(fmt.Sprintf(\u0026#34;%v.%v has already been registered as unversioned kind %q - kind name must be unique in scheme %q\u0026#34;, old.PkgPath(), old.Name(), gvk, s.schemeName)) } s.unversionedKinds[gvk.Kind] = t } } 资源注册表注册方法 ​\t在Scheme 资源 注册表中，不同的资源类型使用的注册方法不同，分别介绍如下。\nscheme. AddUnversionedTypes: 注册 UnversionedType 资源类型。 scheme. AddKnownTypes: 注册 KnownType 资源类型。 scheme. AddKnownTypewithName: 注册KnownType 资源类型，须指定资源的 Kind 资源种类名 ​ 以 scheme. AddKnownTypes 方法为例，在注册资源类型时，无须指定 Kind 名称， 而是通过 reflect 机制获取资源类型的名称作为资源种类名称，代码示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /* AddKnownTypes 将“types”中传递的所有类型注册为版本“version”的成员。 传递给类型的所有对象都应该是指向结构的指针。去报道的名字 该结构在编码时成为“种类”字段。版本不能为空 - 使用 APIVersionInternal 常数，如果你有一个没有正式版本的类型 */ func (s *Scheme) AddKnownTypes(gv schema.GroupVersion, types ...Object) { s.addObservedVersion(gv) for _, obj := range types { t := reflect.TypeOf(obj) if t.Kind() != reflect.Pointer { panic(\u0026#34;All types must be pointers to structs.\u0026#34;) } t = t.Elem() s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj) } } 资源注册表查询方法 ​\t在运行过程中，kube-apiserver 组件常对 Scheme 资源注册表进行查询，它提供了如下方法。\nscheme.KnownTypes: 查询注册表中指定GV 下的资源类型。 scheme. AlKnownTypes: 查询注册表中所有GVK 下的资源类型。 scheme.ObjectKinds: 查询资源对象所对应的GVK， 一个资源对象可能存在多个GVK。 scheme.New: 查询GVK 所对应的资源对象。 scheme.IsGroupRegistered: 判断指定的资源组是否已经注册。 scheme.IsVersionRegistered : 判断指定的 G V 是否己经注册。 scheme.Recognizes: 判断指定的GVK 是否己经注册。 scheme.IsUnversioned: 判断指定的资源对象是否属于 UnversionedType 类型。 Codec 编解码器 ​\t在详解 Codec 编解码器之前，先认识下 Codec 编解码器与 Serializer 序列化器之间的差异。\nSerializer: 序列化器，包含序列化操作与反序列化操作。序列化操作是将数据 (例如数组 、对象或结构体等 ) 转换为宇符串的过程 ， 反序列化操作是将字符串转换为数据的过程，因此可以轻松地维护数据结构 并存储或传输数据\nCodee: 编解码器，包含编码器与解码器。编解码器是一个通用术语，指的是可以表示数据的任何格式，或者将数据转换为特定格式的过程。所以，可以将 Serializer 序列化器也理解为 Codec 编解码器的一种 。\nCodec 编解码器通用接又定义如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 type Decoder interface { Decode(data []byte, defaults *schema.GroupVersionKind, into Object) (Object, *schema.GroupVersionKind, error) } type Encoder interface { Encode(obj Object, w io.Writer) error Identifier() Identifier } type Serializer interface { Encoder Decoder } // Codec is a Serializer that deals with the details of versioning objects. It offers the same // interface as Serializer, so this is a marker to consumers that care about the version of the objects // they receive. type Codec Serializer ​\t从Codec 编解码器通用接又的定义可以看出，Serializer 序列化器属于Codec 编解码器的一种，这是因为每种序列化器都实现了Encoder 与 Decoder 方法。我们可以认为，只要实现了Encoder 与Decoder 方法的数据结构，就是序列化器。Kubernetes 目前支持 3 种主要的序列化器。Codec 编解码器如图\n​\tCodec 编解码器包含了种序列化器 ， 在进行编解码操作时 ，每一种序列化器都对资源对象的 metav1.TypeMeta (即 APIVersion 和Kind 字段)进行验证，如果资源对象未提供这些字段，就会返回错误。每种序列化器分别实现了 Encode 序列化方法与 Decode 反序列化方法 ，分别介绍如下\njsonSerializer: JSON 格式序列化/反序列化器。它使用 application/json的 ContentType 作为标识 yamlSerializer: YAML 格式化格式序列化/反序列化器。它使用 application/yaml的 ContentType 作为标识 protobufSerializer： Protobuf 格式化格式序列化/反序列化器。它使用 application/vnd.kubernetes.protobuf的 ContentType 作为标识 Codec 编解码器将 Eted 集群中的数据进行编解码操作。\nCodec 编解码实例化 ​\tCodec 编码器通过 NewCodecFactory 函数实例化，在实例化的过程中会将 jsonSerializer、yamlSerializer、protobufSerializer 序列化器全部实例化，NewCodecFactory -\u0026gt; newSerializersForScheme ，示例代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 func newSerializersForScheme(scheme *runtime.Scheme, mf json.MetaFactory, options CodecFactoryOptions) []serializerType { jsonSerializer := json.NewSerializerWithOptions( mf, scheme, scheme, json.SerializerOptions{Yaml: false, Pretty: false, Strict: options.Strict}, ) jsonSerializerType := serializerType{ AcceptContentTypes: []string{runtime.ContentTypeJSON}, ContentType: runtime.ContentTypeJSON, FileExtensions: []string{\u0026#34;json\u0026#34;}, EncodesAsText: true, Serializer: jsonSerializer, Framer: json.Framer, StreamSerializer: jsonSerializer, } if options.Pretty { jsonSerializerType.PrettySerializer = json.NewSerializerWithOptions( mf, scheme, scheme, json.SerializerOptions{Yaml: false, Pretty: true, Strict: options.Strict}, ) } strictJSONSerializer := json.NewSerializerWithOptions( mf, scheme, scheme, json.SerializerOptions{Yaml: false, Pretty: false, Strict: true}, ) jsonSerializerType.StrictSerializer = strictJSONSerializer yamlSerializer := json.NewSerializerWithOptions( mf, scheme, scheme, json.SerializerOptions{Yaml: true, Pretty: false, Strict: options.Strict}, ) strictYAMLSerializer := json.NewSerializerWithOptions( mf, scheme, scheme, json.SerializerOptions{Yaml: true, Pretty: false, Strict: true}, ) protoSerializer := protobuf.NewSerializer(scheme, scheme) protoRawSerializer := protobuf.NewRawSerializer(scheme, scheme) serializers := []serializerType{ jsonSerializerType, { AcceptContentTypes: []string{runtime.ContentTypeYAML}, ContentType: runtime.ContentTypeYAML, FileExtensions: []string{\u0026#34;yaml\u0026#34;}, EncodesAsText: true, Serializer: yamlSerializer, StrictSerializer: strictYAMLSerializer, }, { AcceptContentTypes: []string{runtime.ContentTypeProtobuf}, ContentType: runtime.ContentTypeProtobuf, FileExtensions: []string{\u0026#34;pb\u0026#34;}, Serializer: protoSerializer, // note, strict decoding is unsupported for protobuf, // fall back to regular serializing StrictSerializer: protoSerializer, Framer: protobuf.LengthDelimitedFramer, StreamSerializer: protoRawSerializer, }, } for _, fn := range serializerExtensions { if serializer, ok := fn(scheme); ok { serializers = append(serializers, serializer) } } return serializers } ​\tjsonSerializer 与 yamlSerializer 分别通过json.NewSerializer 和 json.NewYAMLSerializer 函数进行实例化，jsonSerializer通过 application/json 的ContentType 标识， 文件扩展名为 json，而yamlSerializer 通过application/yaml 的 ContentType 标识，文件扩展名 为 yaml。protobufserializer 通过 protobuf.NewSerializer 函数进行实例化，它通过 application/ vnd.kubernetes.protobuf 的ContentType 标识，文件扩展名为pb\njsonSerializer 与 yamlSerializer 序列化器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 // staging/src/k8s.io/apimachinery/pkg/runtime/serializer/json/json.go func (s *Serializer) Decode(originalData []byte, gvk *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) { data := originalData if s.options.Yaml { altered, err := yaml.YAMLToJSON(data) if err != nil { return nil, nil, err } data = altered } actual, err := s.meta.Interpret(data) if err != nil { return nil, nil, err } if gvk != nil { *actual = gvkWithDefaults(*actual, *gvk) } if unk, ok := into.(*runtime.Unknown); ok \u0026amp;\u0026amp; unk != nil { unk.Raw = originalData unk.ContentType = runtime.ContentTypeJSON unk.GetObjectKind().SetGroupVersionKind(*actual) return unk, actual, nil } if into != nil { _, isUnstructured := into.(runtime.Unstructured) types, _, err := s.typer.ObjectKinds(into) switch { case runtime.IsNotRegisteredError(err), isUnstructured: strictErrs, err := s.unmarshal(into, data, originalData) if err != nil { return nil, actual, err } // when decoding directly into a provided unstructured object, // extract the actual gvk decoded from the provided data, // and ensure it is non-empty. if isUnstructured { *actual = into.GetObjectKind().GroupVersionKind() if len(actual.Kind) == 0 { return nil, actual, runtime.NewMissingKindErr(string(originalData)) } // TODO(109023): require apiVersion here as well once unstructuredJSONScheme#Decode does } if len(strictErrs) \u0026gt; 0 { return into, actual, runtime.NewStrictDecodingError(strictErrs) } return into, actual, nil case err != nil: return nil, actual, err default: *actual = gvkWithDefaults(*actual, types[0]) } } if len(actual.Kind) == 0 { return nil, actual, runtime.NewMissingKindErr(string(originalData)) } if len(actual.Version) == 0 { return nil, actual, runtime.NewMissingVersionErr(string(originalData)) } // use the target if necessary obj, err := runtime.UseOrCreateObject(s.typer, s.creater, *actual, into) if err != nil { return nil, actual, err } strictErrs, err := s.unmarshal(obj, data, originalData) if err != nil { return nil, actual, err } else if len(strictErrs) \u0026gt; 0 { return obj, actual, runtime.NewStrictDecodingError(strictErrs) } return obj, actual, nil } ​\tDecode 两数支持两种格式的反序列化操作 ，分别是 YAML 格式和 JSON格式。\n​\t如果是 YAML 格式，则通过 yaml.YAMLTOJSON 两数将 JSON 格式数据转换为资源对象并填充到data 字段中。此时，无论反序列化操作的是YAML格式还是JSON 格式，data 字段中都是JSON格式数据。按着通过s.meta.Interpret 函数从JSON格式 数据中提取出资源对象的metav1.TypeMeta (即 APIVersion 和Kind 字段)。最后通过 caseSensitiveJsonlterator.Unmarshal 函数 (即json-iterator )将JSON 数据反序列化并返回。\nprotobufSerializer 序列化器 ​\tProtobuf (Google Protocol Buffer )是Google 公司内部的混合语言数据标准， Protocol Buffers是一种轻便、高效的结构化数据存储格式，可以用于结构化数据序列 化。它很适合做数据存储或成为 RPC 数据交换格式。它可用于通信协议、数据存储等领域，与语言无关、与平台无关、可扩展的序列化结构数据格式。\n1 2 3 4 5 6 7 8 package lm; message helloworld { required int32 id = 1; required string str = 2; optional int32 opt = 3; } ​\tProtobuf 序列化器使用 proto 库来实现序列化和反序列操作\n1. 序列化操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 func (s *Serializer) doEncode(obj runtime.Object, w io.Writer, memAlloc runtime.MemoryAllocator) error { if memAlloc == nil { klog.Error(\u0026#34;a mandatory memory allocator wasn\u0026#39;t provided, this might have a negative impact on performance, check invocations of EncodeWithAllocator method, falling back on runtime.SimpleAllocator\u0026#34;) memAlloc = \u0026amp;runtime.SimpleAllocator{} } prefixSize := uint64(len(s.prefix)) var unk runtime.Unknown switch t := obj.(type) { case *runtime.Unknown: estimatedSize := prefixSize + uint64(t.Size()) data := memAlloc.Allocate(estimatedSize) i, err := t.MarshalTo(data[prefixSize:]) if err != nil { return err } copy(data, s.prefix) _, err = w.Write(data[:prefixSize+uint64(i)]) return err default: kind := obj.GetObjectKind().GroupVersionKind() unk = runtime.Unknown{ TypeMeta: runtime.TypeMeta{ Kind: kind.Kind, APIVersion: kind.GroupVersion().String(), }, } } switch t := obj.(type) { case bufferedMarshaller: // this path performs a single allocation during write only when the Allocator wasn\u0026#39;t provided // it also requires the caller to implement the more efficient Size and MarshalToSizedBuffer methods encodedSize := uint64(t.Size()) estimatedSize := prefixSize + estimateUnknownSize(\u0026amp;unk, encodedSize) data := memAlloc.Allocate(estimatedSize) i, err := unk.NestedMarshalTo(data[prefixSize:], t, encodedSize) if err != nil { return err } copy(data, s.prefix) _, err = w.Write(data[:prefixSize+uint64(i)]) return err case proto.Marshaler: // this path performs extra allocations data, err := t.Marshal() if err != nil { return err } unk.Raw = data estimatedSize := prefixSize + uint64(unk.Size()) data = memAlloc.Allocate(estimatedSize) i, err := unk.MarshalTo(data[prefixSize:]) if err != nil { return err } copy(data, s.prefix) _, err = w.Write(data[:prefixSize+uint64(i)]) return err default: // TODO: marshal with a different content type and serializer (JSON for third party objects) return errNotMarshalable{reflect.TypeOf(obj)} } } ​\tEncode 函数首先验证资源对象 proto.Marshaler类型，proto.Marshaler是一个interface接又类型，该接又专门留给对象自定义实现的序列化操作。如果资源对象为proto.Marshaler类型，则通过t.Marshal序列化函数进行编码。 ​\t而且，通过unk.MarshalTo两数在编码后的数据前加上protoEncodingPrefix前缀，前缀为magic-number特殊标识，其用于标识一个包的完整性。所有通过protobufSerializer序列化器编码的数据都会有前缀。前缀数据共4字节，分别是0x6b、0x38、0x73、0x00，其中第4个字节是为编码样式保留的。\n2. 反序列化操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 func (s *Serializer) Decode(originalData []byte, gvk *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) { prefixLen := len(s.prefix) switch { case len(originalData) == 0: // TODO: treat like decoding {} from JSON with defaulting return nil, nil, fmt.Errorf(\u0026#34;empty data\u0026#34;) case len(originalData) \u0026lt; prefixLen || !bytes.Equal(s.prefix, originalData[:prefixLen]): return nil, nil, fmt.Errorf(\u0026#34;provided data does not appear to be a protobuf message, expected prefix %v\u0026#34;, s.prefix) case len(originalData) == prefixLen: // TODO: treat like decoding {} from JSON with defaulting return nil, nil, fmt.Errorf(\u0026#34;empty body\u0026#34;) } data := originalData[prefixLen:] unk := runtime.Unknown{} if err := unk.Unmarshal(data); err != nil { return nil, nil, err } actual := unk.GroupVersionKind() copyKindDefaults(\u0026amp;actual, gvk) if intoUnknown, ok := into.(*runtime.Unknown); ok \u0026amp;\u0026amp; intoUnknown != nil { *intoUnknown = unk if ok, _, _ := s.RecognizesData(unk.Raw); ok { intoUnknown.ContentType = runtime.ContentTypeProtobuf } return intoUnknown, \u0026amp;actual, nil } if into != nil { types, _, err := s.typer.ObjectKinds(into) switch { case runtime.IsNotRegisteredError(err): pb, ok := into.(proto.Message) if !ok { return nil, \u0026amp;actual, errNotMarshalable{reflect.TypeOf(into)} } if err := proto.Unmarshal(unk.Raw, pb); err != nil { return nil, \u0026amp;actual, err } return into, \u0026amp;actual, nil case err != nil: return nil, \u0026amp;actual, err default: copyKindDefaults(\u0026amp;actual, \u0026amp;types[0]) // if the result of defaulting did not set a version or group, ensure that at least group is set // (copyKindDefaults will not assign Group if version is already set). This guarantees that the group // of into is set if there is no better information from the caller or object. if len(actual.Version) == 0 \u0026amp;\u0026amp; len(actual.Group) == 0 { actual.Group = types[0].Group } } } if len(actual.Kind) == 0 { return nil, \u0026amp;actual, runtime.NewMissingKindErr(fmt.Sprintf(\u0026#34;%#v\u0026#34;, unk.TypeMeta)) } if len(actual.Version) == 0 { return nil, \u0026amp;actual, runtime.NewMissingVersionErr(fmt.Sprintf(\u0026#34;%#v\u0026#34;, unk.TypeMeta)) } return unmarshalToObject(s.typer, s.creater, \u0026amp;actual, into, unk.Raw) } ​\tDecode两数首先验证protoEncodingPrefix前缀，前级为magic-number特殊标识，其用于标识一个包的完整性，然后验证资源对象是否为proto.Mesage类型，最后通过 proto.Unmarshal 反序列化函数进行解码。\nConverter 资源版本转换器 ​\t在Kubernetes 系统中，同一资源拥有多个资源版本，Kubernetes 系统允许同一资 源的不同资源版本进行转换，例如Deployment 资源对象， 当前运行的是v1beta1 资 源版本，但vlbetal 资源版本的某些功能或字段不如v1资源版本完善，则可以将 Deployment 资源对象的v1beta1 资源版本转换为 v1 版本。可通过kubectl convert 命 令进行资源版本转换，执行命令如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 apiVersion: apps/v1beta1 kind: Deployment metadata: name:nginx-deployment spec: replicas: 1 template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.7.9 ports: - containerPort:80 1 kubectl convert -f vlbeta1Deployment.yami --output-version=apps/v1 ​\t首先，定义一个 YAML Manifest File 资源描述文件，该文件中定义Deployment 资源版本为v1beta1。通过执行kubect convert 命令，\u0026ndash;output -ver sion 将 资源版本转换 为指定的资源版本v1。如果指定的资源版本不在Scheme 资源注册表中，则会报错。 如果不指定资源版本，则默认转换为资源的首选版本。\n​\tConverter 资源版本转换器主要用于解决多资源版本转换问题，Kubernetes 系统 中的一 个资源支持多个资源版本，如果要在每个资源版本之间转换，最直接的方式是，每个资源版本都支持其他资源版本的转换，但这样处理起来非常麻烦。例如，某个资源对象支持 3 个资源版本，那么就需要提前定义一个资源版本转换到其他两个资源版本(vI\u0026ndash; vlalphal,vI- vlbetal)、(vlalphal-v1,vlalphal-v1beta1)及( v1beta1-v1, vlbetal\u0026ndash;vlalphal)，随着资源版本的增加，资源版本转换的定义会越来越多。\n​\t为了解决这个问题，Kubernetes通过内部版本(InternalVersion)机制实现资源版本转换，Converter 资源版本转换过程如图\n​\t当需要在两个资源版本之间转换时，例如 vlalphal\u0026ndash;vlbetal 或 vlalphal\u0026ndash;v1。 Converter 资源版本转换器先将第 一个资源版本转换为_ internal 内部版本，再转换为相应的资源版本。每个资源只要能支持内部版本，就能与其他任何资源版本进行间接的资源版本转换\nConverter 转换器数据结构 ​\tConverter转换器数据结构主要存放转换函数(即Conversion Funcs)。Converter 转换器数据结构代码示例如下\n1 2 3 4 5 6 7 8 9 10 // Converter knows how to convert one type to another. type Converter struct { // Map from the conversion pair to a function which can // do the conversion. conversionFuncs ConversionFuncs generatedConversionFuncs ConversionFuncs // Set of conversions that should be treated as a no-op ignoredUntypedConversions map[typePair]struct{} } conversionFuncs: 默认转换两数。这些转换西数 一般定义在资源目录下的 conversion.go 代码文件中。 generatedConversionFuncs: 自动生成的转换两数。这些转换函数 一般定 义在资源目录下的 zz_generated.conversion.go 代码文件中，是由代码生成器自动生成的转换函数。 ignoredConversions: 若资源对象注册到此字段，则忽略此资源对象的转换操作。 ​ Converter转换器数据结构中存放的转换两数(即ConversionFuncs)可以分为两类，分别为默认的转换两数(即conversionFuncs字段)和自动生成的转换函数(即generatedConversionFuncs字段)。它们都通过ConversionFuncs来管理转换函数，代码示例如下\n1 2 3 4 5 6 7 8 9 10 11 type ConversionFuncs struct { untyped map[typePair]ConversionFunc } type typePair struct { source reflect.Type dest reflect.Type } type ConversionFunc func(a, b interface{}, scope Scope) error ​\tConversionFunc 类型函数(即Type Function )定义了转换函数实现的结构，将资 源对象a转换为资源对象b。a 参数定义了转换源(即source)的资源类型，b 参数定义 了转换目标(即dest)的资源类型。scope 定义了多次转换机制(即递归调用转换函数)。\nConversionFunc 类型函数的资源对象传参必须是指针，否则无法进 行转换并抛出异常\nConverter 注册转换函数 ​\tConverter 转换函数需要通过注册才能在Kubernetes 内部使用，目前 Kubernetes 支持 5 个注册转换西数，分别介绍如下。\nscheme. AddlgnoredConversionType :注册忽略的资源类型，不会执行转换操作，忽略资源对象的转换操作。 scheme. AddConversionFuncs: 注册多个Conversion Func 转换函数 scheme.AddConversionFunc: 注册单个Conversion Func转换函数 scheme. AddGeneratedConversionFunc: 注册自动生成的转换函数 scheme.AddFieldLabelConversionFune: 注册字段标签 ( FieldLabel )的转换函数 ​ 以apps/v1资源组、资源版本为例，通过scheme.AddConversionFuncs函数注册所有资源的转换函数，代码示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // v1版本好像已经弃用了 func addConversionFuncs(scheme *runtime.Scheme) error { // Add field label conversions for kinds having selectable nothing but ObjectMeta fields. if err := scheme.AddFieldLabelConversionFunc(SchemeGroupVersion.WithKind(\u0026#34;StatefulSet\u0026#34;), func(label, value string) (string, string, error) { switch label { case \u0026#34;metadata.name\u0026#34;, \u0026#34;metadata.namespace\u0026#34;, \u0026#34;status.successful\u0026#34;: return label, value, nil default: return \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, fmt.Errorf(\u0026#34;field label not supported for appsv1beta2.StatefulSet: %s\u0026#34;, label) } }); err != nil { return err } return nil } Converter 资源版本转换原理 ​\tConverter 转换器在 Kubernetes 源码中实际应用非常广泛，例如 Deployment 资源对象，起初使用 v1beta1 资源版本，而 v1 资源版本更稳定，则会将 v1beta1 资源版本转换为v1资源版本 。Converter 资源版本转换过程如图\n代码示例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // ! 版本转换在1.7中废弃，此代码在最新版本中转换失败 package main import ( \u0026#34;fmt\u0026#34; appsv1 \u0026#34;k8s.io/api/apps/v1\u0026#34; appsv1beta1 \u0026#34;k8s.io/api/apps/v1beta1\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/apimachinery/pkg/runtime\u0026#34; \u0026#34;k8s.io/kubernetes/pkg/apis/apps\u0026#34; ) func main() { // KnownType external scheme := runtime.NewScheme() scheme.AddKnownTypes(appsv1beta1.SchemeGroupVersion, \u0026amp;appsv1beta1.Deployment{}) scheme.AddKnownTypes(appsv1.SchemeGroupVersion, \u0026amp;appsv1.Deployment{}) scheme.AddKnownTypes(apps.SchemeGroupVersion, \u0026amp;appsv1.Deployment{}) metav1.AddToGroupVersion(scheme, appsv1beta1.SchemeGroupVersion) metav1.AddToGroupVersion(scheme, appsv1.SchemeGroupVersion) v1betalDeployment := \u0026amp;appsv1beta1.Deployment{TypeMeta: metav1.TypeMeta{Kind: \u0026#34;Deployment\u0026#34;, APIVersion: \u0026#34;apps/v1beta1\u0026#34;}} // v1beta1 - internal objInternal, err := scheme.ConvertToVersion(v1betalDeployment, apps.SchemeGroupVersion) if err != nil { panic(err) } fmt.Println(\u0026#34;GVK:\u0026#34;, objInternal.GetObjectKind().GroupVersionKind().String()) // internal - v1 objV1, err := scheme.ConvertToVersion(objInternal, appsv1.SchemeGroupVersion) if err != nil { panic(err) } v1Deployment, ok := objV1.(*appsv1.Deployment) if !ok { panic(\u0026#34;not a Deployment\u0026#34;) } fmt.Println(\u0026#34;GVK:\u0026#34;, v1Deployment.GetObjectKind().GroupVersionKind().String()) } 代码分析：\n第 1 部分 ： 实例化一个空的 scheme 资源注册表 ， 将 v1beta1 资源版本 、 v1 资源版本及内部版本 （ internal ） 的 Deployment 资源注册到 scheme 资源注册表中 。\n第 2 部分 ： 实例化 v1beta1 Deployment 资源对象 ， 通过 scheme.ConvefiToVersion 将其转换为目标资源版本（ 即 internale 版本 ），得到 objlnternal资源对象 ， objlnternal 资源对象的 GVK 输出为 “ / ， Kind= ”\n第 3 部分 ： 将 obj lnternal 资源对象通过 scheme.ConvertToVersion 转换为目标资源版本 （ 即 v1 资源版本 ） ， 得到 objV1资源对象 ， 并通过断言的方式来验证是否转换成功 ， objV1 资源对象的 GVK 输出为 “ apps/v 1 ， Kind=Deployment \u0026quot; 。\n在 converter Example 代码示例的第 2 部分中 ， 将 vlbetal 资源版本转换为内部版本 （ 即 internal 版本 ） ， 得到转换后资源对象的 GVK 为 “ / ， Kind= ” 。 在这里 ， 读者肯定会产生疑问 ， 为什么 vlbetal 资源版本转换为内部版本以后得到的 GVK 为 “ / ，Kind= ” 而不是 “ apps/__internal ， Kmd=Deployment ” 。 下面带着疑问来看看 Kubernetes源码实现 。 scheme 资源注册表可以通过两种方式进行版本转换 ， 分别介绍如下 。 scheme.ConvertToVersion ： 将传入的 (in) 资源对象转换成目标 （ target ）资源版本 ，在版本转换之前 ，会将资源对象深复制一份后再执行转换操作 ，相当于安全的内存对象转换操作 。与 scheme.ConvertToVersion 功能相同 ， scheme.UnsafeConvcrtToVersion ：但在转换过程中不会深复制资源对象 ， 而是直接对原资源对象进行转换操作 ， 尽可能高效地实现转换 。但该操作是非安全的内存对象转换操作 。 scheme.ConvertToVersion 与 scheme.UnsafeConveftToVersion 资源版本转换功能都依赖于 s.convertToVersion 函数来实现 ， Converter 转换器流程图如图\n1.获取传入的资源对象的反射类型 ​\t资源版本转换的类型可以是 runtime.ObJect 或 runtime.Unstructured ， 它们都属于Go 语言里的 struct 数据结构 ， 通过 Go 语言标准库 reflect 机制获取该资源类型的反射类型 ， 因为在 scheme 资源注册表中是以反射类型注册资源的 。 获取传入的资源对象的反射类型 。\n2.从资源注册表中查找到传入的资源对象的 GVK 从 scheme 资源注册表中查找到传入的资源对象的所有 GVK ， 验证传入的资源对象是否己经注册 ， 如果未曾注册 ， 则返回错误.\n3.从个 GVK 中选出与目标资源对象相匹配的 GVK ​\ttarget.KindForGroupVersionKinds 函数从多个可转换的 GVK 中选出与目标资源对象相匹配的 GVK 。 这里有一个优化点 ， 转换过程是相对耗时的 ， 大量的相同资源之间进行版本转换的耗时会比较长 。 在 Kubemetes 源码中判断 ， 如果目标资源对象的 GVK 在可转换的 G VK 列表中 ， 则直接将传入的资源对象的 G VK 设置为目标资源对象的 GVK ， 而无须执行转换操作 ， 缩短部分耗时 。\n4.判断传入的资源对象是否属于 Unversioned 类型 ​\t对于 Unversioned 类型 ， 前面曾介绍过 ， 即无版本类型 （ UnversionedType) 。 属于该类型的资源对象并不需要进行转换操作 ， 而是直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK 。\n5.执行转换操作 在执行转换操作之前 ， 先判断是否需要对传入的资源对象执行深复制操作 ， 然后通过 s.converter.Convert 转换函数执行转换操作.\n​\t实际的转换函数是通过 doconversion 函数执行的 ， 执行过程如下 。\n从默认转换函数列表 （ 即 c.conversionFuncs ） 中查找出 pair 对应的转换函数 ， 如果存在则执行该转换函数 （ 即fn ） 并返回 。 从自动生成的转换函数列表 （ 即 generatedConversionFuncs ） 中查找出 pair 对应的转换函数 ， 如果存在则执行该转换函数 （ 即fn ） 并返回 。 如果默认转换函数列表和自动生成的转换函数列表中都不存在当前资源对象的转换函数 ， 则使用 doconversion 函数传入的转换函数 （ 即 f) 。 调用 f 之前 ， 需要将 s rc 与 dest 资源对象通过 EnforcePtr 函数取指针的值 ， 因为函数传入的转换函数接收的是非指针资源对象 。 6.设置转换后资源对象的 GVK ​\t在代码示例的第 2 部分中 ， 将 v1beta1 资源版本转换为内部版本 （ 即 internal 版本 ），得到转换后资源对象的 GVK 为 “ / ， Kind= ” 。 原因在于 setTargetKind 函数 ， 转换操作执行完成以后 ， 通过 setTargetKind 函数设置转换后资源对象的 GVK ， 判断当前资源对象是否为内部版本 （ 即 APIVersion1nternal) ， 是内部版本则设置 GVK 为 schema.GroupVersionKind{}\n","permalink":"https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/","summary":"\u003ch1 id=\"k8s-核心数据结构2\"\u003eK8s 核心数据结构（2）\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考书籍：《Kubernetes源码剖析-郑旭东著》\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"kubernetes-内置资源概览\"\u003eKubernetes 内置资源概览\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e资源组\u003c/th\u003e\n          \u003cth\u003e资源种类\u003c/th\u003e\n          \u003cth\u003e说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eapiextensions.k8s.io\u003c/td\u003e\n          \u003ctd\u003eCustomResourceDefinition\u003c/td\u003e\n          \u003ctd\u003e自定义资源类型 ， 由 APIExtensions Server 负责管理该资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eapiregistration.k8s.io\u003c/td\u003e\n          \u003ctd\u003eAPIService\u003c/td\u003e\n          \u003ctd\u003e聚合资源类型，由 AggregatorServer 负责管理该资源类\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eadmissionregistration.k8s.io\u003c/td\u003e\n          \u003ctd\u003eMutatingWebhookConfiguration\u003c/td\u003e\n          \u003ctd\u003e变更准入控制器资源类型( Webhook)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eValidatingWebhookConfiguration\u003c/td\u003e\n          \u003ctd\u003e验证准入控制器资源类型 ( Webhook)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eapps\u003c/td\u003e\n          \u003ctd\u003eControllerRevision\u003c/td\u003e\n          \u003ctd\u003e记录资源对象所有的历史版本的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eDaemonSet\u003c/td\u003e\n          \u003ctd\u003e在 Pod 资源对象的基础上提供守护进程的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eDeployment\u003c/td\u003e\n          \u003ctd\u003e在 Pod资源对象的基础上提供支持无状态服务的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eReplicaSet\u003c/td\u003e\n          \u003ctd\u003e在 Pod 资源对象的基础上提供一组 Pod 副本的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eStatefulSet\u003c/td\u003e\n          \u003ctd\u003e在 Pod资源对象的基础上提供支持有状态服务的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eauditregistration.k8s.io\u003c/td\u003e\n          \u003ctd\u003eAuditSink\u003c/td\u003e\n          \u003ctd\u003e审计资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eauthentication.k8s.io\u003c/td\u003e\n          \u003ctd\u003eTokenReview\u003c/td\u003e\n          \u003ctd\u003e认证资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eauthorization.k8s.io\u003c/td\u003e\n          \u003ctd\u003eLocalSubjectAccessReview\u003c/td\u003e\n          \u003ctd\u003e授权检查用户是否可以在指定的命名空间中执行操作\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eSelfSubjectAccessReview\u003c/td\u003e\n          \u003ctd\u003e授权检查用户是否可以执行操作(若不指定 spec.namespace，则在所有的命名空间中执行操作）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eSelfSubjectRulesReview\u003c/td\u003e\n          \u003ctd\u003e授权枚举用户可以在指定的命名空间中执行一组操作\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eSubjectAccessReview\u003c/td\u003e\n          \u003ctd\u003e授 权检查用户是否可以执行操作\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eautoscaling\u003c/td\u003e\n          \u003ctd\u003eHorizontalPodAutoscaler\u003c/td\u003e\n          \u003ctd\u003e在 Pod 资源对象的基础上提供水平自动伸缩资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebatch\u003c/td\u003e\n          \u003ctd\u003eJob\u003c/td\u003e\n          \u003ctd\u003e提供一次性任务的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eCronJob\u003c/td\u003e\n          \u003ctd\u003e提供定时任务的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ecertificates.k8s.io\u003c/td\u003e\n          \u003ctd\u003eCertificateSigningRequest\u003c/td\u003e\n          \u003ctd\u003e提供证书管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ecoordination.k8s.io\u003c/td\u003e\n          \u003ctd\u003eLeases\u003c/td\u003e\n          \u003ctd\u003e提供领导者选举机制的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ecore\u003c/td\u003e\n          \u003ctd\u003eComponentStatus\u003c/td\u003e\n          \u003ctd\u003e该资源类型已被奔用，其用于提供获取 Kuberetes 组件运行状况的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eConfigMap\u003c/td\u003e\n          \u003ctd\u003e提供容器内应用程序配置管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eEndpoints\u003c/td\u003e\n          \u003ctd\u003e提供将外部服务器映射为内部服务的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eEvent\u003c/td\u003e\n          \u003ctd\u003e提供 Kubernetes 集群事件管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eLimitRange\u003c/td\u003e\n          \u003ctd\u003e为命名空间中的每种资源对象设置资源(硬件资源)使 用限制\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eNamespace\u003c/td\u003e\n          \u003ctd\u003e提供资源对象所在的命名空间的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eNode\u003c/td\u003e\n          \u003ctd\u003e提供 Kubernetes 集群中管理工作节点的资源类型。每个节点都有一个唯一标识符\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003ePersistentVolume\u003c/td\u003e\n          \u003ctd\u003e提供 PV 存储的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003ePersistentVolumeClaim\u003c/td\u003e\n          \u003ctd\u003e提供 PVC 存储的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003ePod\u003c/td\u003e\n          \u003ctd\u003e提供容器集合管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003ePodTemplate\u003c/td\u003e\n          \u003ctd\u003e提供用于描述预定义 Pod 资源对象副本数模板的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eReplicationController\u003c/td\u003e\n          \u003ctd\u003e在 Pod资源对象的基础上提供副本数保持不变的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eResourceQuota\u003c/td\u003e\n          \u003ctd\u003e提供每个命名空间配额限制的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eSecret\u003c/td\u003e\n          \u003ctd\u003e提供存储密码 、Token 、密钥等敏感数据的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eService\u003c/td\u003e\n          \u003ctd\u003e提供负载均衡器为 Pod 资源对象的代理服务的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eServiceAccount\u003c/td\u003e\n          \u003ctd\u003e提供 ServiceAccount 认证的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eevents.k8s.io\u003c/td\u003e\n          \u003ctd\u003eEvent\u003c/td\u003e\n          \u003ctd\u003e提供Kuberetes集群事件管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003enetworking.k8s.io\u003c/td\u003e\n          \u003ctd\u003eRuntimeClass\u003c/td\u003e\n          \u003ctd\u003e提供容器运行时功能的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eIngress\u003c/td\u003e\n          \u003ctd\u003e提供 从Kubernetes 集群外部访问集群内部服务管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003enode.k8s.io\u003c/td\u003e\n          \u003ctd\u003eRuntimeClass\u003c/td\u003e\n          \u003ctd\u003e提供容器运行时功能的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003epolicy\u003c/td\u003e\n          \u003ctd\u003eEvictions\u003c/td\u003e\n          \u003ctd\u003e在 Pod 资源对象的基础上提供驱逐策略的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003ePodDisruptionBudget\u003c/td\u003e\n          \u003ctd\u003e提供限制同时中断 Pod 的数量 ，以保证集群的高可用性\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003ePodSecurityPolicy\u003c/td\u003e\n          \u003ctd\u003e提供控制 Pod 资源安全相关策略的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003erbac.authorization.k8s.io\u003c/td\u003e\n          \u003ctd\u003eClusterRole\u003c/td\u003e\n          \u003ctd\u003e提供 RBAC 集群角色的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eClusterRoleBinding\u003c/td\u003e\n          \u003ctd\u003e提供 RBAC 集群角色鄉定的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eRole\u003c/td\u003e\n          \u003ctd\u003e提供 RBAC 角色的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eRoleBinding\u003c/td\u003e\n          \u003ctd\u003e提供 RBAC 角色绑定的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003escheduling.k8s.io\u003c/td\u003e\n          \u003ctd\u003ePriorityClass\u003c/td\u003e\n          \u003ctd\u003e提供 Pod 资源对象优先级管理的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esettings.k8s.10\u003c/td\u003e\n          \u003ctd\u003ePodPreset\u003c/td\u003e\n          \u003ctd\u003e在创建 Pod 资源对象时，可以将特定信息注入 Pod 资源对象中\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003estorage.k8s.io\u003c/td\u003e\n          \u003ctd\u003eStorageClass\u003c/td\u003e\n          \u003ctd\u003e提供动态设置PV存储参数的资源类\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eVolumeAttachment\u003c/td\u003e\n          \u003ctd\u003e供触发 CSI ControllerPublish 和 ControllerUnpublish 操作的资源类型\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"k8s核心数据结构（2）"},{"content":"Kubernetes 核心数据结构（1） 参考书籍：《Kubernetes源码剖析-郑旭东著》\nK8s 是一个完全以资源为中心的系统\nGroup、Version、Resource 核心数据结构 ​\tKuberetes 系统虽然有相当复杂和众多的 功能，但它本质 上是一个资源控制系统——注册、管理、调度资源 并维护资源的状态。\n​\tKuberetes 将资源再次分组和版本化，形成 Group（资源组）、Version（资源版本）、Resource（资源）\nGroup: 被称为资源组，在Kubernetes API Server 中也可称其为 APIGroup。 Version: 被称为资源版本，在Kubernetes API Server 中也可称其为 APIVersions。 Resource: 被称为资源，在Kubernetes API Server 中也可称其为 APIResource。 Kind: 资源种类，描述 Resource 的种类，与 Resource 为同一级别。 ​\n​\tKubernetes 系统支持多个Group，每个Group 支持多个Version，每个Version 支 持多个Resource，其中部分资源同时会拥有自己的子资源(即SubResource )。例如， Deployment资源拥有Status 子资源。 ​\t资源组、资源版本、资源、子资源的完整表现形式\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;/\u0026lt;resource\u0026gt;/ \u0026lt;subresource\u0026gt;。以常用的 Deployment 资源为例，其完整表现形式为apps/v1/deployments/status\n​\t另外资源对象(Resource Object )在本书中也是 一个常用概念，由“ 资源组+ 资源版本+资源种类” 组成，并在实例化后表达一个资源对象，例如 Deployment 资源实例化后拥有资源组、资源版本及资源种类，其表现形式为\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;, Kind=\u0026lt;kind\u0026gt;，例如apps/v1, Kind=Deployment.\n​\t每一个资源都拥有一定数量的资源操作方法(即 Verbs )，资源操作方法用于 Etcd 集群存储中对资源对象的增、删、改、查操作。目前 Kubemetes 系统支持8 种资源操作方法，分别是 create、delete、delete、collection、get、list、patch、update、watch 操作方法。\n​\t每一个资源都至少有两个版本，分别是外部版本(External Version)和内部版本 ( Internal Version )。外部版本用于对外暴露给用户请求的接又所使用的资源对象。内部版本不对外暴露，仅在Kubernetes API Server 内部使用。\n​\tKubernetes 资源也可分为两种， 分别是Kubernetes Resource (Kubermetes 内罝资源 ) 和 Custom Resource( 自 定 义 资 源 )。 开 发 者 通 过 C R D ( 即 Custom Resource Definitions )可实现自定义资源，它允许用户将自己定义的资源添加到 Kubernetes 系统中，并像使用 Kubernetes 内置资源 一样使用它们。\nResourceList ​\tKubernetes Group、 Version、Resource 等核心数据结构存放在staging/src/k8s.io/apimachinery/pkg/apis/meta/v1 目录中。它包含了Kubernetes 集群中所有组件使用的通 用核心数据结构，例如APIGroup、APIVersions、APIResource 等。其 中，我们可以 通过 APIResourceList 数据结构描述所有Group、Version、Resource 的结构。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 type APIResourceList struct { TypeMeta `json:\u0026#34;,inline\u0026#34;` // groupVersion is the group and version this APIResourceList is for. GroupVersion string `json:\u0026#34;groupVersion\u0026#34;` // resources contains the name of the resources and if they are namespaced. APIResources []APIResource `json:\u0026#34;resources\u0026#34;` } type TypeMeta struct { Kind string `json:\u0026#34;kind,omitempty\u0026#34;` APIVersion string `json:\u0026#34;apiVersion,omitempty\u0026#34;` } type APIResource struct { // name is the plural name of the resource. Name string `json:\u0026#34;name\u0026#34;` // singularName is the singular name of the resource. This allows clients to handle plural and singular opaquely. // The singularName is more correct for reporting status on a single item and both singular and plural are allowed // from the kubectl CLI interface. SingularName string `json:\u0026#34;singularName\u0026#34;` // namespaced indicates if a resource is namespaced or not. Namespaced bool `json:\u0026#34;namespaced\u0026#34;` // group is the preferred group of the resource. Empty implies the group of the containing resource list. // For subresources, this may have a different value, for example: Scale\u0026#34;. Group string `json:\u0026#34;group,omitempty\u0026#34;` // version is the preferred version of the resource. Empty implies the version of the containing resource list // For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource\u0026#39;s group)\u0026#34;. Version string `json:\u0026#34;version,omitempty\u0026#34;` // kind is the kind for the resource (e.g. \u0026#39;Foo\u0026#39; is the kind for a resource \u0026#39;foo\u0026#39;) Kind string `json:\u0026#34;kind\u0026#34;` // verbs is a list of supported kube verbs (this includes get, list, watch, create, // update, patch, delete, deletecollection, and proxy) Verbs Verbs `json:\u0026#34;verbs\u0026#34;` // shortNames is a list of suggested short names of the resource. ShortNames []string `json:\u0026#34;shortNames,omitempty\u0026#34;` // categories is a list of the grouped resources this resource belongs to (e.g. \u0026#39;all\u0026#39;) Categories []string `json:\u0026#34;categories,omitempty\u0026#34;` StorageVersionHash string `json:\u0026#34;storageVersionHash,omitempty\u0026#34;` } ​\tKubernetes的每个资源可使用metav1.APIResource 结构进行描述，它描述资源的基本信息，例如资源名称 (即 Name 字段)、资源所属的命名空间(即 Namespaced 字段)、资源种类(即 Kind 字段)、资源可操作的方法列表(即 Verbs 字段)。\n​\t每一个资源都属于一个或多个资源版本， 资源所属的版本通过 metavl.APIVersions 结构描述，一个或多个资源版本通过Versions []string 字符串数组进行存储。\nGroup ​\tGroup ( 资源组)，在Kubernetes API Server 中也可称其为 APIGroup。Kubernetes 系统中定义了许多资源组，这些资源组按照不同功能将资源进行了划分，资源组特点如下。\n将众多资源按照功能划分成不同的资源组，并允许单独启用/ 禁用资源组。 当然也可以单独启用/禁用资源组中的资源。 支持不同资源组中拥有不同的资源版本。这方便组内的资源根据版本进行迭代升级。 支持同名的资源种类 (即 Kind ) 存在于不同的资源组内 。 资源组与资源版本通过 Kubernetes API Server 对外暴露，允许开发者通过 HTTP 协议进行交互并通过动态客户端( 即 DynamicClient )进行资源发现。 支持CRD 自定 义资源扩展。 用户交互简单，例如在使用kubectl 命令行工具时，可以不填写资源组名称 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 type APIGroup struct { TypeMeta `json:\u0026#34;,inline\u0026#34;` // name is the name of the group. Name string `json:\u0026#34;name\u0026#34;` // 资源组下所支持的资源版本. Versions []GroupVersionForDiscovery `json:\u0026#34;versions\u0026#34;` // 首选版本。 当一个资源组内存在多个资源版本时， Kubernetes API Server 在使用资源时会选择一 个首选版本作为当前版本 PreferredVersion GroupVersionForDiscovery `json:\u0026#34;preferredVersion,omitempty\u0026#34;` // a map of client CIDR to server address that is serving this group. // This is to help clients reach servers in the most network-efficient way possible. // Clients can use the app ropriate server address as per the CIDR that they match. // In case of multiple matches, clients should use the longest matching CIDR. // The server returns only those CIDRs that it thinks that the client can match. // For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. // Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP. ServerAddressByClientCIDRs []ServerAddressByClientCIDR `json:\u0026#34;serverAddressByClientCIDRs,omitempty\u0026#34;` } ​\t在当前的Kubernetes 系统中，支持两类资源组，分别是拥有组名的资源组和没有组名的资源组。\n拥有组名的资源组: 其表现形式为\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;/\u0026lt;resource\u0026gt;，例如 apps/v1/deployments\n没有组名的资源组: 被称为 Core Groups ( 即核心资源组)或 Legacy Groups , 也可被称为 Group Less ( 即无组 )。 其表现形式为 /\u0026lt;version\u0026gt;/\u0026lt;resource\u0026gt; ， 例 如 /v1/pods\n两类资源组表现形式不同， 形成的 HTTP PATH 路径也不同。 拥有组名的资源组的 HTTP PATH 以/apis 为前缀，其表现形式为/apis/\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;/\u0026lt;resource\u0026gt;，例如 http://localhost:8080/apis/apps/v1/deployments。没有组名的资源组的 HTTP PATH 以 api 为前缀，其表现形式为/api/\u0026lt;version\u0026gt;/\u0026lt;resource\u0026gt;，例如 http://localhost:8080/api/vl/pods.\nVersion ​\tKubernetes 的资源版本控制可分为了种，分别是 Alpha、Beta、Stable，它们之间的迭代顺序为Alpha -\u0026gt; Beta -\u0026gt; Stable，其通常用来表示软件测试过程中的 了个阶段。 Alpha是第1个阶段，一般用于内部测试; Beta 是第2 个阶段，该版本已经修复了大 部分不完善之处，但仍有可能存在缺陷和漏洞， 一般由特定的用户群来进行测试; Stable 是第了个阶段，此时基本形成了产品并达到了一定的成熟度，可稳定运行。 Kubernetes 资源版本控制详情如下:\nAlpha 版本 ​ Alpha 版本为内部测试版本，用于Kubernetes 开发者内部测试，该版本是不稳定的，可能存在很多缺陷和漏洞，官方随时可能会放弃支持该版本。在默认的情况下， 处于Alpha 版本的功能会被禁用。Alpha 版本名称一般为 vlalphal、vlalpha2、v2alphal 等。\nBeta 版本 ​ Beta 版本为相对稳定的版本， Beta 版本经过官方和社区很多次测试 ， 当功能迭代时，该版本会有较小的改变，但不会被删除。在默认的情况下，处于Beta 版本的功能是开启状态的。Beta 版本命名一般为 v1betal、v1beta2、v2betal。\nStable 版本 ​ Stable 版本为正式发布的版本, Stable 版本基本形成了产品 ，该版本不会被删除。 在默认的情况下 ，处于 stable 版本的功能全部处于开启状态 。Stable 版本命名一般为 v1、v2、 v3。\n1 2 3 4 5 6 7 8 9 10 11 12 13 type APIVersions struct { TypeMeta `json:\u0026#34;,inline\u0026#34;` // 所支持的资源版本列表. Versions []string `json:\u0026#34;versions\u0026#34;` // a map of client CIDR to server address that is serving this group. // This is to help clients reach servers in the most network-efficient way possible. // Clients can use the appropriate server address as per the CIDR that they match. // In case of multiple matches, clients should use the longest matching CIDR. // The server returns only those CIDRs that it thinks that the client can match. // For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. // Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP. ServerAddressByClientCIDRs []ServerAddressByClientCIDR `json:\u0026#34;serverAddressByClientCIDRs\u0026#34;` } CIDR（Classless Inter-Domain Routing）是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。与传统的A类、B类和C类寻址模式相比，CIDR在IP地址分配方面更为高效。CIDR采用斜线记法，表示为：IP地址/网络ID的位数。\n示例一：CIDR格式换算为IP地址网段\n例如10.0.0.0/8，换算为32位二进制地址：00001010.00000000.00000000.00000000。其中/8表示8位网络ID，即32位二进制地址中前8位是固定不变的，对应网段为：00001010.00000000.00000000.0000000000001010.11111111.11111111.11111111。则换算为十进制后，10.0.0.0/8表示：子网掩码为255.0.0.0，对应网段为10.0.0.010.255.255.255。\n示例二：IP地址网段换算为CIDR格式\n例如192.168.0.0192.168.31.255，后两段IP换算为二进制地址：00000000.0000000000011111.11111111，可以得出前19位（8*2+3）是固定不变的，则换算为CIDR格式后，表示为：192.168.0.0/19\nResource ​\t一 个资源被实例化后会表达为一 个资源对象(即Resource Object )。在 Kuberetes 系统中定义并运行着各式各样的资源对象，Kubernetes 资源对象如图所示。所有资源对象都是 Entity 。 Entity 翻译成中 文为 “ 实 体” ，Kubernetes 使用这些 Entity 来表示当前状态。可以通过 Kubernetes API Server 进行查询和更新每一个资源对象。 Kubernetes 目前支持两种 Entity，分别介绍如下\n持久性实体(Persistent Entity): 在资源对象被创建后，Kubernetes 会持久确保该资源对象存在。大部分资源对象属于持久性实体，例如 Deployment 资源对象\n短暂性实体(Ephemeral Entity): 也可称其为非持久性实体(Non-Persistent Entity ) 。 在资源对象被创建后，如果出现故障或调度失败 ，不会重新创建该资源对象，例如 Pod 资源对象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 type APIResource struct { // name is the plural name of the resource. Name string `json:\u0026#34;name\u0026#34; protobuf:\u0026#34;bytes,1,opt,name=name\u0026#34;` // 资源的单数名称，它必须由小写字母组成，默认使用资源种类(Kind)的小写形式进行命名。例如，Pod 资源的单数名称为pod, 复数名称为pods SingularName string `json:\u0026#34;singularName\u0026#34;` // 资源是否拥有所属命名空间 Namespaced bool `json:\u0026#34;namespaced\u0026#34;` // 资源所在的资源组名称 Group string `json:\u0026#34;group,omitempty\u0026#34;` // 资源所在的资源版本 Version string `json:\u0026#34;version,omitempty\u0026#34;` // 资源种类 Kind string `json:\u0026#34;kind\u0026#34; ` // 资源可操作的方法列表，例如get 、list、delete、create、update 等 Verbs Verbs `json:\u0026#34;verbs\u0026#34;` // 资源的简称，例如 Pod 资源的简称为 po ShortNames []string `json:\u0026#34;shortNames,omitempty\u0026#34;` // 该资源所属的分组资源列表（例如“全部”) Categories []string `json:\u0026#34;categories,omitempty\u0026#34;` ...\t} 资源外部版本与内部版本 ​\tKubernetes 资源代码定义在 pkg/apis 目录下， 在详解资源代码定义之前， 先来了解一下资源的外部版本(ExternalVersion )与内部版本(Internal Version )。在 Kubernetes 系统中，同 一资源对应着两个版本，分别是外部版本和内部版本。例如，Deployment 资源，它所属的外部版本表现形式为apps/ v1，内部版本表现形式为apps/_internal'\nExternalObject: 外部版本资源对象，也称为 Versioned Object ( 即拥有资源版本的资源对象)。外部版本用于对外暴露给用户请求的接又所使用的资源对象，例如，用户在通过 YAML 或 JSON 格式的描述文件创建资源对象时，所使用的是外部版本的资源对象。外部版本的资源对象通过资源版本( Alpha 、Beta 、Stable )进行标识\nInternal Object: 内部版本资源对象。内部版本不对外暴露，仅在 Kubernetes API Server 内部使用。内部版本用于多资源版本的转换，例如将 v1betal 版本转换为 v1 版本，其过程为 v1betal--internal - v1，即先将 v1betal 转换为内部版本(internal )，再由内部版本(internal)转换为V1版本。内部版本资源对象通过 runtime. APIVersionlnternal (即 internal )进行标识。\n资源的外部版本代码定义在 pkg/apis/\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;/目录下，资源的内部版本代码定义在 pkg/apis/\u0026lt;group\u0026gt;/日 录 下。 例 如 ， Deployment 资源 ，它的外部版本定义在 pkg/apis/apps/{v1,V1betal, v1beta2}/ 目录下， 它的内部版本定义在pkg/apis/apps/目录下(内部版本一般与资源组在同一级目录下)。资源的外部版本与内部版本如图所示。\n资源的外部版本和内部版本是需要相互转换的，而用于转换的函数需要事先初始化到资源注册表 (Scheme) 中 。 多个外部版本 ( External Version ) 之间的资源进行相互转换，都需要通过内部版本 (Internal Version )进行中转。这也是Kubernetes 能实现多资源版本转换的关键.\n​\t资源的外部版本与内部版本的代码定义也不太一样，外部版本的资源需要对外暴露给用户请求的接又，所以资源代码定义了 JSONTags 和 Proto Tags，用于请求的序列化和反序列化操作。内部版本的资源不对外暴露，所以没有任何的 JSON Tags 和ProtoTags定义。以Pod 资源代码定义为例，代码示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // staging/src/k8s.io/api/core/v1/types.go 外部使用 type Pod struct { metav1.TypeMeta `json:\u0026#34;,inline\u0026#34;` // Standard object\u0026#39;s metadata. // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata // +optional metav1.ObjectMeta `json:\u0026#34;metadata,omitempty\u0026#34; protobuf:\u0026#34;bytes,1,opt,name=metadata\u0026#34;` // Specification of the desired behavior of the pod. // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status // +optional Spec PodSpec `json:\u0026#34;spec,omitempty\u0026#34; protobuf:\u0026#34;bytes,2,opt,name=spec\u0026#34;` // Most recently observed status of the pod. // This data may not be up to date. // Populated by the system. // Read-only. // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status // +optional Status PodStatus `json:\u0026#34;status,omitempty\u0026#34; protobuf:\u0026#34;bytes,3,opt,name=status\u0026#34;` } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // pkg/apis/core/types.go 内部使用 type Pod struct { metav1.TypeMeta // +optional metav1.ObjectMeta // Spec defines the behavior of a pod. // +optional Spec PodSpec // Status represents the current information about a pod. This data may not be up // to date. // +optional Status PodStatus } 资源代码定义 ​ Kubernetes资源代码定义在pkg/apis目录下，同一资源对应着内部版本和外部版本，内部版本和外部版本的资源代码结构并不相同。\n​\t资源的内部版本定义了所支持的资源类型 ( types.go)、资源验证方法( validation.go )、资源注册至资源注册表的方法 ( install/install.go) 等 。 而资源的外部版本定义了资源的转换方法 (conversion.go )、资源的默认值 (defaults.go) 等。\n​\t以 Deployment 资源为例，它的内部版本定义在 pkg/apis/apps/目录下，其资源代码结构为\n1 2 3 4 5 6 7 8 9 10 11 12 . ├── OWNERS ├── doc.go ├── fuzzer ├── install ├── register.go ├── types.go ├── v1 ├── v1beta1 ├── v1beta2 ├── validation └── zz_generated.deepcopy.go doc.go: GoDoc 文件，定义了当前包的注释信息。在 Kubernetes 资源包中， 它还担当了代码生成器的全局 Tags 描述文件 register. go : 定义了资源组、资源版本及资源的注册信息 。 types.go: 定义了在当前资源组、资源版本下所支持的资源类型。 v1、v1betal 、v1beta2 : 定义了资源组下拥有的资源版本的资源 (即外部版本)。 install : 把当前资源组下的所有资源注册到资源注册表中。 validation: 定义了资源的验证方法。 zz_generated.deepcopy-go: 定义了资源的深复制操作，该文件由代码生成器自动生成 ​ 每一个 Kubernetes 资源目录，都通过 register.go 代码文件定义所属的资源组和资源版本，内部版本资源对象通过runtime.APIVersionInternal (即 _internal ) 标识 ，代码示例如下:\n1 2 3 4 5 // pkg/apis/apps/types.go type Deployment struct{ ... } type DeploymentSpec struct {...} ... ​\t以 Deployment 资源为例，它的外部版本定义在 pkg/apis/apps/{vl,v1betal, v1beta2 } 目录下，其资源代码结构如下:\n1 2 3 4 5 6 7 8 9 . ├── conversion.go ├── conversion_test.go ├── defaults.go ├── defaults_test.go ├── doc.go ├── register.go ├── zz_generated.conversion.go └── zz_generated.defaults.go conversion.go : 定义了资源的转换函数 (默认转换函数 )，并将默认转换函数注册到资源注册表中。 zz_generated.conversion.go: 定义了资源的转换西数(自动生成的转换函 数)，并将生成的转换两数注册到资源注册表中。该文件由代码生成器自 动生成。 defaults.go: 定义了资源的默认值函 数 ，并将默认值函数注册到资源注册表中 zz_generated.defaults.go: 定义了资源的默认值函数(自动生成的默认值函数 )，并将生成的默认值两数注册到资源注册表中。该文件由代码生成器自动生成 ​ 外部版本与内部版本资源类型相同，都通过 register.go代码文件定义所属的资源组和资源版本，外部版本资源对象通过资源版本( Alpha、Beta、Stable)标识，代码\n示例如下\n1 2 3 4 5 // GroupName is the group name use in this package const GroupName = \u0026#34;apps\u0026#34; // SchemeGroupVersion is group version used to register these objects var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: \u0026#34;v1\u0026#34;} 将资源注册到资源注册表中 ​\t在每一个Kubernetes资源组目录中，都拥有一个instal/install.go 代码文件，它负责将资源信息注册到资源注册表(Scheme)中。以 core 核心资源组为例，代码示例如下:\n1 2 3 4 5 6 7 8 9 10 11 12 // pkg/apis/core/install/install.go func init() { Install(legacyscheme.Scheme) } // Install registers the API group and adds types to a scheme func Install(scheme *runtime.Scheme) { utilruntime.Must(core.AddToScheme(scheme)) utilruntime.Must(v1.AddToScheme(scheme)) utilruntime.Must(scheme.SetVersionPriority(v1.SchemeGroupVersion)) } ​ legacyscheme.Scheme 是kube-apiserver 组件的全局资源注册表，Kubernetes 的所有资源信息都交给资源注册表统一管理。core. AddToScheme函数注册core资源组内部版本的资源。v1.AddToScheme 函数注册 core 资源组外部版本的资源。 scheme.SetVersionPriority两数注册资源组的版本顺序，如有多个资源版本，排在最前面的为资源首选版本。\n资源首选版本 ​ 首选版本( Preferred Version )，也称优选版本( Priority Version)，一个资源组下拥有多个资源版本，例如，apps资源组拥有v1、v1betal、v1beta2 等资源版本。当我们使用 apps 资源组下的Deployment 资源时，在一些场景下，如不指定资源版本，则使用该资源的首选版本。\n​\t以apps 资源组为例，注册资源时会注册多个资源版本，分别是v1、v1beta2、 v1betal ，代码示例如下：\n1 2 3 4 5 6 7 8 9 // pkg/apis/apps/install/install.go func Install(scheme *runtime.Scheme) { utilruntime.Must(apps.AddToScheme(scheme)) utilruntime.Must(v1beta1.AddToScheme(scheme)) utilruntime.Must(v1beta2.AddToScheme(scheme)) utilruntime.Must(v1.AddToScheme(scheme)) utilruntime.Must(scheme.SetVersionPriority(v1.SchemeGroupVersion, v1beta2.SchemeGroupVersion, v1beta1.SchemeGroupVersion)) } ​\tscheme.SetVersionPriority 注册版本顺序很重要，apps 资源组的注册版本顺序为 v1 、v1beta2 、v1betal ，那么在资源注册表的 version Priority 结构中 ，资源的首选版本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func (s *Scheme) SetVersionPriority(versions ...schema.GroupVersion) error { groups := sets.String{} order := []string{} for _, version := range versions { if len(version.Version) == 0 || version.Version == APIVersionInternal { return fmt.Errorf(\u0026#34;internal versions cannot be prioritized: %v\u0026#34;, version) } groups.Insert(version.Group) order = append(order, version.Version) } if len(groups) != 1 { return fmt.Errorf(\u0026#34;must register versions for exactly one group: %v\u0026#34;, strings.Join(groups.List(), \u0026#34;, \u0026#34;)) } s.versionPriority[groups.List()[0]] = order return nil } 资源操作方法 ​\t在 Kubernetes 系统中 ，针对每一个资源都有一定的操作方法 ( 即 Verbs )，例如 ，对于 Pod 资源对象，可以通过kubectl 命令行工具对其执行 create、delete、get 等操 作。Kubernetes 系统所支持的操作方法目前有8 种操作，分别是 create、delete、 deletecollection、get、list、patch、update、watch。这些操作方法可分为四大类，分别属于增、删、改、查，对资源进行创建、删除、更新和查询。资源操作方法如图\n​\t资源操作方法可以通过metav1.Verbs 数据结构进行描述，代码示例如下:\n1 2 3 4 5 type Verbs []string func (vs Verbs) String() string { return fmt.Sprintf(\u0026#34;%v\u0026#34;, []string(vs)) } ​\t不同资源拥有不同的操作方法，例如，针对 Pod 资源对象与 pod logs 子资源对象，Pod 资源对象拥有create、delete、deletecollection、get、list、patch、update、watch 等操作方法，pod/logs 子资源对象只拥有get操作方法，因为日志只需要执行查看操作。Pod 资源对象与pod/ logs 子资源对象的操作方法分别通过 metav1. Verbs 进行描述。\n​\t资源对象的操作方法与存储 (Storage )相关联，增、删、改、查实际上都是针对存储的操作。如何解 一个资源对象拥有哪些可操作的方法呢 ?\n​\t需要查看与存储相关联的源码包 registry ，其定义在 vendor/k8s.io/apiserver/pkg/registry/ 目录下。 每种操作方法对应一个操作方法接又 (Interface)，资源对象操作方法接口说明：\n资源与命名空间 ​\tKubernetes 系统支持命名空间(Namespace)，其用来解決Kubernetes 集群中资源对象过多导致管理复杂的问题 。 每个命名空间相当于一个 “ 虚 拟 集 群 ” ，不同命名空间之间可以进行隔离，当然也可以通过某种方式跨命名空间通信。\n​\tKubernetes 系统中默认内置了4个命名空间 ，分别介绍如下。\ndefault: 所有未指定命名空间的资源对象都会被分配给该命名空间\nkube-system: 所有由 Kubernetes 系统创建的资源对象都会被分配给该命名空间\nkube-public: 此命名空间下的资源对象可以被所有人访问 (包括未认证用户)\nkube-node-lease: 此命名空间下存放来自节点的心跳记录(节点租约信息)\n通过运行 kubectl get namespace 命令查看 Kubernetes 系统上所有的命名空间信息 。另外，在Kubernetes 系统中，大部分资源对象都存在于某些命名空间中(例如Pod 资源对象)。但并不是所有的资源对象都存在于某个命名空间中(例如 Node 资源对象)。决定资源对象属于哪个命名空间，可通过资源对象的 ObjectMeta.Namespace描述\n自定义资源 ​\tKubenetes 系统拥有强大的高扩展功能 ，其中自定义资源 (CustomResource ) 就是一种常见的扩展方式，即可将自己定义的资源添加到 Kubemetes 系统中。Kubernetes 系统附带了许多内置资源，但是仍有些需求需要使用自定义资源来扩展 Kubernetes 的功能。\n​\t开发者通过 CRD 可以实现自定义资源，它允许用户将自己定义的资源添加到 Kubernetes 系统中，并像使用 Kubernetes 内置资源一样使用 这些资源，例如，在 YAML/JSON 文件中带有 Spec 的资源定义都是对 Kubernetes 中的资源对象的定义，所有的自定义资源都可以与 Kubernetes 系统中的内置资源一样使用 kubectl 或 client- go 进行操作\n资源对象描述文件定义 ​\tKubernetes 资源可分为内置资源(Kubernetes Resources )和自定义资源(Custom Resources)，它们都通过资源对象描述文件(Manifest File)进行定义，资源对象描述文件如图\n​\t一个资源对象需要用5 个字段来描述它分别是Group/Version、KindMetaData、 Spec、Status。这些字段定义在YAML或JSON 文件中。Kubernetes系统中的所有的 资源对象都可以采用YAML或JSON格式的描述文件来定义，下面是某个Pod 文件的资源对象描述文件 。 YAML Manifest File Example 代码示例如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment spec: selector: matchLabels: app: nginx replicas: 2 # 告知 Deployment 运行 2 个与该模板匹配的 Pod template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 apiversion: 指定创建资源对象的资源组和资源版本， 其表现形式为 \u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;， 若是core资源组 (即核心资源组 ) 下的资源对象 ，其表现形式为\u0026lt;version\u0026gt; kind: 指定创建资源对象的种类 metadata: 描述创建资源对象的元数据信息，例如名称、命名空间等 spee: 包含有关Deployment 资源对象的核心信息，告诉Kubernetes 期望的资源状态、副本数量、环境变量、 卷等信息 status: 包含有关正在运行的 Deployment 资源对象的信息 ​\t每一个Kubernetes 资源对象都包含两个嵌套字段，即 spec 字段和 status 字段。 其中spec 字段是必需的，它描述了资源对象的“期望状态”(DesiredState)，而status 字段用于描述资源对象的“ 实际状态” (Actual State) ，它是由Kubernetes 系统提供 和更新的。在任何时刻，Kubernetes控制器一直努力地管理着对象的实际状态以与期望状态相匹配。\n","permalink":"https://luenci.com/en/posts/k8s%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/","summary":"\u003ch1 id=\"kubernetes-核心数据结构1\"\u003eKubernetes 核心数据结构（1）\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考书籍：《Kubernetes源码剖析-郑旭东著》\u003c/p\u003e\n\u003cp\u003eK8s 是一个完全以资源为中心的系统\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"groupversionresource-核心数据结构\"\u003eGroup、Version、Resource 核心数据结构\u003c/h2\u003e\n\u003cp\u003e​\tKuberetes 系统虽然有相当复杂和众多的 功能，但它本质 上是一个资源控制系统——注册、管理、调度资源 并维护资源的状态。\u003c/p\u003e\n\u003cp\u003e​\tKuberetes 将资源再次分组和版本化，形成 Group（资源组）、Version（资源版本）、Resource（资源）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGroup: 被称为资源组，在Kubernetes API Server 中也可称其为 APIGroup。\u003c/li\u003e\n\u003cli\u003eVersion: 被称为资源版本，在Kubernetes API Server 中也可称其为 APIVersions。\u003c/li\u003e\n\u003cli\u003eResource: 被称为资源，在Kubernetes API Server 中也可称其为 APIResource。\u003c/li\u003e\n\u003cli\u003eKind: 资源种类，描述 Resource 的种类，与 Resource 为同一级别。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230410172134645.png\" alt=\"image-20230410172134645\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e​\u003c/p\u003e\n\u003cp\u003e​\tKubernetes 系统支持多个Group，每个Group 支持多个Version，每个Version 支 持多个Resource，其中部分资源同时会拥有自己的子资源(即SubResource )。例如， Deployment资源拥有Status 子资源。\n​\t资源组、资源版本、资源、子资源的完整表现形式\u003ccode\u003e\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;/\u0026lt;resource\u0026gt;/ \u0026lt;subresource\u0026gt;\u003c/code\u003e。以常用的 Deployment 资源为例，其完整表现形式为\u003ccode\u003eapps/v1/deployments/status\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t另外资源对象(Resource Object )在本书中也是 一个常用概念，由“ 资源组+ 资源版本+资源种类” 组成，并在实例化后表达一个资源对象，例如 Deployment 资源实例化后拥有资源组、资源版本及资源种类，其表现形式为\u003ccode\u003e\u0026lt;group\u0026gt;/\u0026lt;version\u0026gt;, Kind=\u0026lt;kind\u0026gt;\u003c/code\u003e，例如\u003ccode\u003eapps/v1, Kind=Deployment\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e​\t每一个资源都拥有一定数量的资源操作方法(即 Verbs )，资源操作方法用于 Etcd 集群存储中对资源对象的增、删、改、查操作。目前 Kubemetes 系统支持8 种资源操作方法，分别是 create、delete、delete、collection、get、list、patch、update、watch 操作方法。\u003c/p\u003e\n\u003cp\u003e​\t每一个资源都至少有两个版本，分别是外部版本(External Version)和内部版本 ( Internal Version )。外部版本用于对外暴露给用户请求的接又所使用的资源对象。内部版本不对外暴露，仅在Kubernetes API Server 内部使用。\u003c/p\u003e\n\u003cp\u003e​\tKubernetes 资源也可分为两种， 分别是Kubernetes Resource (Kubermetes 内罝资源 ) 和 Custom Resource( 自 定 义 资 源 )。 开 发 者 通 过 C R D ( 即 Custom Resource Definitions )可实现自定义资源，它允许用户将自己定义的资源添加到 Kubernetes 系统中，并像使用 Kubernetes 内置资源 一样使用它们。\u003c/p\u003e","title":"k8s核心数据结构（1）"},{"content":"K8s 架构 参考文章：Kubernetes源码剖析\n架构概览 ​\tKubernetes 系统架构遵循客户端 / 服务端 （ C/S ） 架构 ， 系统架构分为 Master 和 Node 两部分 ， Master 作为服务端 ， Node 作为客户端 。 Kubernetes 系统具有多个 Master 服务端 ， 可以实现高可用 。 在默认的情况下 ， 一个 Master 服务端即可完成所有工作 。\n服务端也被称为主控节点 ， 它在集群中主要负责如下任务 。\n集群的 “ 大脑 ” ， 负责管理所有节点 (Node）。 负责调度 Pod 在哪些节点上运行 。 负责控制集群运行过程中的所有状态 。 Node 客户端也被称为工作节点 ， 它在集群中主要负责如下任务 。\n负责管理所有容器 （ container ) 。 负责监控 / 上报所有 Pod 的运行状态 。 组件概览 控制平面组件（Control Plane Components） 控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。 控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器 kube-apiserver ​\tAPI 服务器是 Kubernetes 控制面的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。Kubernetes API 服务器的主要实现是 kube-apiserver。 kube-apiserver 设计上考虑了水平伸缩，也就是说，它可通过部署多个实例进行伸缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。\nkube-apiserver 属于核心组件 ， 对于整个集群至关重要 ， 它具有以下重要特性 。\n将 Kubernetes 系统中的所有资源对象都封装成 RESTful 风格的 AP I 接口进 行管理 。 可进行集群状态管理和数据管理 ， 是唯一与 Etcd 集群交互的组件 。 拥有丰富的集群安全访问机制 ， 以及认证 、 授权及准入控制器 。 提供了集群各组件的通信和交互功能 。 etcd etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。 您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。 ​\tEtcd 集群是分布式键值存储集群 ， 其提供了可靠的强一致性服务发现 。 Etcd 集群存储 Kubernetes 系统集群的状态和元数据 ， 其中包括所有 Kubernetes 资源对象信息 、 集群节点信息等 。 Kubemetes 将所有数据存储至 Etcd 集群中前缀为 /regis 叮的目录下 。\nkube-scheduler 控制平面组件，负责监视新创建的、未指定运行节点（node）的 Pods，选择节点让 Pod 在上面运行。 调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。 ​\tkube-scheduler 组件 ， 也被称为调度器 ， 目前是 Kubernetes 集群的默认调度器 。它负责在 Kubernetes 集群中为一个 Pod 资源对象找到合适的节点并在该节点上运行 。调度器每次只调度一个 Pod 资源对象 ， 为每一个 Pod 资源对象寻找合适节点的过程是一个调度周期 。\n​\tkube-scheduler 组件监控整个集群的 Pod 资源对象和 Node 资源对象 ， 当监控到新的 Pod 资源对象时 ， 会通过调度算法为其选择最优节点 。 调度算法分为两种 ， 分别为预选调度算法和优选调度算法 。 除调度策略外 ， Kubernetes 还支持优先级调度 、抢占机制及亲和性调度等功能 。\n​\tkube-scheduler 组件支持高可用性 （ 即多实例同时运行 ） ， 即基于 Etcd 集群上的分布式锁实现领导者选举机制 ， 多实例同时运行 ， 通过 kube-apiserver 提供的资源锁进行选举竞争 。 抢先获取锁的实例被称为 Leader 节点 （ 即领导者节点 ） ， 并运行kube-scheduler 组件的主逻辑 ； 而未获取锁的实例被称为 candidate 节点 （ 即候选节点 ） ，运行时处于阻塞状态 。 在 Leader 节点因某些原因退出后 ， Candidate 节点则通过领导者选举机制参与竞选 ， 成为 Leader 节点后接替 kube-scheduler 的工作 。\nkube-controller-manager 运行控制器进程的控制平面组件。\n​ kube-controller-manager 组件 ， 也被称为 Controller Manager （ 管理控制器 ） ， 它负责管理 Kubernetes 集群中的节点 （ Node ） 、 Pod 副本 、 服务 端点 （ Endpoint ） 、 命名空间 （ Namespace ） 、 服务账户 （ ServiceAccount ） 、 资源定额 （ ResourceQuota ） 等 。例如 ， 当某个节点意外宕机时 ， Controller Manager 会及时发现并执行自动化修复流程 ， 确保集群始终处于预期的工作状态 。\n​\tController Manager 负责确保 Kub ernete s 系统的实际状态收敛到所需状态 ， 其默认提供了一些控制器 （ Controller) ， 例如 DeploymentControllers 控制器 、 StatefulSet控制器 、 Namespace 控制器及 PersistentVolume 控制器等 ， 每个控制器通过 kube-apiserver 组件提供的接口实时监控整个集群每个资源对象的当前状态 ， 当因发生各种故障而导致系统状态出现变化时 ， 会尝试将系统状态修复到 “ 期望状态 ” 。从逻辑上讲，每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。\n​\t控制器还包括:\n节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应 任务控制器（Job controller）: 监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成 端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod) 服务帐户和令牌控制器（Service Account \u0026amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌 ​\tcontroller Manager 具备高可用性 （ 即多实例同时运行 ） ， 即基于 Etcd 集群上的分布式锁实现领导者选举机制 ， 多实例同时运行 ， 通过 kube-apiserver 提供的资源锁进行选举竞争 。 抢先获取锁的实例被称为 Leader 节点 （ 即领导者节点 ） ， 并运行kub e-controller-manager 组件的主逻辑 ： 而未获取锁的实例被称为 candidate 节点 （ 即候选节点 ） ， 运行时处于阻塞状态 。 在 Leader 节点因某些原因退出后 ， candidate 节点则通过领导者选举机制参与竞选 ， 成为 Leader 节点后接替 kube-controller-manager的工作 。\nkubelet kubelet 进程用于处理master 下发的任务, 管理pod 中的容器, 注册自身所在的节点.\n​\tkubelet 组件 ， 用于管理节点 ， 运行在每个 Kubernete s 节点上 。 kube let 组件用来接收 、 处理 、 上报 kub e-ap i s erver 组件下发的任务 。 kubelet 进程启动时会向kube-apiserver 注册节点自身信息 。 它主要负责所在节点 （ Node ） 上的 Pod 资源对象的管理 ， 例如 Pod 资源对象的创建 、 修改 、 监控 、 删除 、 驱逐及 pod 生命周期管理等 。\n​\tkubelet 组件会定期监控所在节点的资源使用状态并上报给 kube-apiserver 组件 ，这些资源数据可以帮助 kube-scheduler 调度器为 Pod 资源对象预选节点 。 kubelet 也会对所在节点的镜像和容器做清理工作 ， 保证节点上的镜像不会占满磁盘空间 、 删除的容器释放相关资源 。 kubelet 组件实现了 3 种开放接口 ， 如图所示 。\nContainer Runtime lnterface ： 简称 CRI （ 容器运行时接口 ） ， 提供容器运行时通用插件接口服务定义了容器和镜像服务的接口 。 CRI 将 kubelet组件与容器运行时进行解耦 ， 将原来完全面向 Pod 级别的内部接口拆分成面向 sandbox 和 container 的 gRPC 接口 ， 并将镜像管理和容器管理分离给 不同的服务 。 Container Network lnterface ： 简称 CNI （ 容器网络接口 ） ， 提供网络通用插件接口服务 。 CN I 定义了 Kubernete s 网络插件的基础 ， 容器创建时通过 CNI 插件配置网络 。 Container Storage lnterface ： 简称 CSI （ 容器存储接口 ） ， 提供存储通用插件接口服务 。 CSI 定义了容器存储卷标准规范 ， 容器创建时通过 CSI 插件配置存储卷 。 kube-proxy kube-proxy 本质上,类似一个反向代理. 我们可以把每个节点上运行的 kube-proxy 看作 service 的透明代理兼LB.\n​\tkube-proxy 组件 ， 作为节点上的网络代理 ， 运行在每个 Kubernetes 节点上 。 它监控 kube-ap iserver 的服务和端点资源变化 ， 并通过 iptables/ipvs 等配置负载均衡器 ，为一组 Pod 提供统一的 TC P/UDP 流量转发和负载均衡功能 。kube-proxy 组件是参与管理 Pod-to-Service 和 Extemal-to-Service 网络的最重要的节点组件之一 。 kube-proxy 组件相当于代理模型 ， 对于某个 iP:Port 的请求 ， 负责将其转发给专用网络上的相应服务或应用程序 。 但是 ， kube-proxy 组件与其他负载均衡服务的区别在于 ， kube-proxy 代理只向 Kubernetes 服务及其后端 Pod 发出请求 。\ncloud-controller-manager ​\t云控制器管理器是指嵌入特定云的控制逻辑的控制平面组件。 云控制器管理器使得你可以将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。\n​\tcloud-controller-manager 仅运行特定于云平台的控制回路。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的环境中不需要云控制器管理器。\n​\t与 kube-controller-manager 类似，cloud-controller-manager 将若干逻辑上独立的 控制回路组合到同一个可执行文件中，供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。\n下面的控制器都包含对云平台驱动的依赖：\n节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除 路由控制器（Route Controller）: 用于在底层云基础架构中设置路由 服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器 项目目录结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 . ├── CHANGELOG # 版本更新log ├── CHANGELOG.md -\u0026gt; CHANGELOG/README.md ├── CONTRIBUTING.md ├── LICENSE ├── LICENSES ├── Makefile -\u0026gt; build/root/Makefile ├── OWNERS ├── OWNERS_ALIASES ├── README.md ├── SECURITY_CONTACTS ├── SUPPORT.md ├── api\t# 存放 OpenAPI/Swagger 的 spec 文件，包括 JSON 、 Protocol 的定义等 ├── build\t# 存放与构建相关脚本 ├── cluster\t# 存放集群相关配置 ├── cmd\t# 存放可执行文件的入口代码 ， 每个可执行文件都会对应一个函数 ├── code-of-conduct.md ├── docs ├── go.mod ├── go.sum ├── hack ├── logo ├── pkg\t# 存放核心库代码，可被项目内部或外部直接引用 ├── plugin\t# 存放 Kubernetes 插件代码目录 ，例如认证 、授权等相关插件 ├── staging\t# 存放部分核心库的暂存目录 ├── test ├── third_party\t# 存放第三方工具 、代码或其他组件 └── vendor 组件文件启动流程 kube-apiserver启动流程 （ 1 ） rand.seed ： 组件中的全局随机数生成对象 。 （ 2 ） app.NewCommand ： 实例化命令行参数 。 通过 flags 对命令行参数进行解析并存储至 0ptions 对象中 。 （ 3 ） logs.initLogs ： 实例化日志对象 ， 用于日志管理 。 （ 4 ） command.Execute ： 组件进程运行的逻辑 。 运行前通过 Complete 函数填充默认参数 ， 通过 validate 函数验证所有参数 ， 最后通过 Run 函数持久运行 。 只有当进程收到退出信号时 ， 进程才会退出 。 ","permalink":"https://luenci.com/en/posts/k8s%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"k8s-架构\"\u003eK8s 架构\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考文章：Kubernetes源码剖析\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"架构概览\"\u003e架构概览\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/architecture.png\" alt=\"Kubernetes（k8s）中文文档 Kubernetes设计架构_Kubernetes中文社区\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e​\tKubernetes 系统架构遵循客户端 / 服务端 （ C/S ） 架构 ， 系统架构分为 Master 和 Node 两部分 ， Master 作为服务端 ， Node 作为客户端 。 Kubernetes 系统具有多个 Master 服务端 ， 可以实现高可用 。 在默认的情况下 ， 一个 Master 服务端即可完成所有工作 。\u003c/p\u003e\n\u003cp\u003e服务端也被称为主控节点 ， 它在集群中主要负责如下任务 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e集群的 “ 大脑 ” ， 负责管理所有节点 (Node）。\u003c/li\u003e\n\u003cli\u003e负责调度 Pod 在哪些节点上运行 。\u003c/li\u003e\n\u003cli\u003e负责控制集群运行过程中的所有状态 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNode 客户端也被称为工作节点 ， 它在集群中主要负责如下任务 。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e负责管理所有容器 （ container ) 。\u003c/li\u003e\n\u003cli\u003e负责监控 / 上报所有 Pod 的运行状态 。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"组件概览\"\u003e组件概览\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230402142654737.png\" alt=\"image-20230402142654737\"  /\u003e\n\u003c/p\u003e","title":"k8s架构介绍"},{"content":"GO 三方库源码阅读姿势 参考内容：极客专栏：手把手带你写一个web框架\n阅读顺序 库函数 \u0026gt; 结构定义 \u0026gt; 结构函数。\n​\t简单来说，就是当你在阅读一个代码库的时候，不应该从上到下阅读整个代码文档，而应 该先阅读整个代码库提供的对外库函数(function)，再读这个库提供的结构 (struct/class)，最后再阅读每个结构函数(method)\n查看库函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 go doc net/http(三方库名称) | grep \u0026#34;^func\u0026#34; func CanonicalHeaderKey(s string) string func DetectContentType(data []byte) string func Error(w ResponseWriter, error string, code int) func Get(url string) (resp *Response, err error) func Handle(pattern string, handler Handler) func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) func Head(url string) (resp *Response, err error) func ListenAndServe(addr string, handler Handler) error func ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser func NewRequest(method, url string, body io.Reader) (*Request, error) func NewRequestWithContext(ctx context.Context, method, url string, body io.Reader) (*Request, error) func NotFound(w ResponseWriter, r *Request) func ParseHTTPVersion(vers string) (major, minor int, ok bool) func ParseTime(text string) (t time.Time, err error) func Post(url, contentType string, body io.Reader) (resp *Response, err error) func PostForm(url string, data url.Values) (resp *Response, err error) func ProxyFromEnvironment(req *Request) (*url.URL, error) func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error) func ReadRequest(b *bufio.Reader) (*Request, error) func ReadResponse(r *bufio.Reader, req *Request) (*Response, error) func Redirect(w ResponseWriter, r *Request, url string, code int) func Serve(l net.Listener, handler Handler) error func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, ...) func ServeFile(w ResponseWriter, r *Request, name string) func ServeTLS(l net.Listener, handler Handler, certFile, keyFile string) error func SetCookie(w ResponseWriter, cookie *Cookie) func StatusText(code int) string ​\t在这个库提供的方法中，我们去掉一些 New 和 Set 开头的函数，因为你从命名上可以看出，这些函数是对某个对象或者属性的设置。\n剩下的函数大致可以分成三类:\n为服务端提供创建 HTTP 服务的函数，名字中一般包含 Serve 字样，比如 Serve、 ServeFile、ListenAndServe 等。\n为客户端提供调用 HTTP 服务的类库，以 HTTP 的 method 同名，比如 Get、Post、 Head 等。\n提供中转代理的一些函数，比如 ProxyURL、ProxyFromEnvironment 等。\n查看结构定义(模块) ​\t我们过一遍这个库提供的所有 struct，看看核心模块有哪些，同样使用 go doc:\n1 go doc net/http | grep \u0026#34;^type\u0026#34;| grep struct ​\t可以看到整个库最核心的几个结构:\n1 2 3 4 5 6 7 8 9 10 type Client struct{ ... } type Cookie struct{ ... } type MaxBytesError struct{ ... } type ProtocolError struct{ ... } type PushOptions struct{ ... } type Request struct{ ... } type Response struct{ ... } type ServeMux struct{ ... } type Server struct{ ... } type Transport struct{ ... } 看结构的名字或者 go doc 查看结构说明文档，能逐渐了解它们的功能:\nClient 负责构建 HTTP 客户端;\nServer 负责构建 HTTP 服务端;\nServerMux 负责 HTTP 服务端路由;\nTransport、Request、Response、Cookie 负责客户端和服务端传输对应的不同模块。\n​\t现在通过库方法(function)和结构体(struct)，我们对整个库的结构和功能有大致印象 了。整个库承担了两部分功能，一部分是构建 HTTP 客户端，一部分是构建 HTTP 服务 端。\n​\t构建的 HTTP 服务端除了提供真实服务之外，也能提供代理中转服务，它们分别由 Client 和 Server 两个数据结构负责。除了这两个最重要的数据结构之外，HTTP 协议的每个部 分，比如请求、返回、传输设置等都有具体的数据结构负责。\n结构函数(能力) ​\t阅读具体的代码逻辑用 go doc 命令明显就不够了，你需要两个东西:\n​\t一个是可以灵活进行代码跳转的 IDE，VS Code 和 GoLand 都是非常好的工具。以我们现 在要查看的 http.ListenAndServe 这个函数为例，我们可以从上面的例子代码中，直接通 过 IDE 跳转到这个函数的源码中阅读，有一个能灵活跳转的 IDE 工具是非常必要的。\n​\t具体方法是将要分析的代码从入口处一层层记录下来，每个函数，我们只记录其核心代码，然后对每个核心代码一层层解析。记得把思维导图的结构设置为右侧分布，这样更直观。\n","permalink":"https://luenci.com/en/posts/go%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%A7%BF%E5%8A%BF/","summary":"\u003ch1 id=\"go-三方库源码阅读姿势\"\u003eGO 三方库源码阅读姿势\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考内容：极客专栏：\u003ca href=\"https://time.geekbang.org/column/intro/100090601\"\u003e手把手带你写一个web框架\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"阅读顺序\"\u003e阅读顺序\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e库函数 \u0026gt; 结构定义 \u0026gt; 结构函数\u003c/strong\u003e。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​\t简单来说，就是当你在阅读一个代码库的时候，不应该从上到下阅读整个代码文档，而应 该先阅读整个代码库提供的对外库\u003ccode\u003e函数(function)\u003c/code\u003e，再读这个库提供的\u003ccode\u003e结构 (struct/class)\u003c/code\u003e，最后再阅读每个\u003ccode\u003e结构函数(method)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230222160216925.png\" alt=\"image-20230222160216925\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"查看库函数\"\u003e查看库函数\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e doc net\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehttp\u003c/span\u003e(三方库名称) | grep \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;^func\u0026#34;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eCanonicalHeaderKey\u003c/span\u003e(s \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDetectContentType\u003c/span\u003e(data []\u003cspan style=\"color:#ff7b72\"\u003ebyte\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eError\u003c/span\u003e(w ResponseWriter, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, code \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eGet\u003c/span\u003e(url \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) (resp \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eResponse, err \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eHandle\u003c/span\u003e(pattern \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, handler Handler)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eHandleFunc\u003c/span\u003e(pattern \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, handler \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e(ResponseWriter, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eHead\u003c/span\u003e(url \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) (resp \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eResponse, err \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eListenAndServe\u003c/span\u003e(addr \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, handler Handler) \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eListenAndServeTLS\u003c/span\u003e(addr, certFile, keyFile \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, handler Handler) \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eMaxBytesReader\u003c/span\u003e(w ResponseWriter, r io.ReadCloser, n \u003cspan style=\"color:#ff7b72\"\u003eint64\u003c/span\u003e) io.ReadCloser\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNewRequest\u003c/span\u003e(method, url \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, body io.Reader) (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNewRequestWithContext\u003c/span\u003e(ctx context.Context, method, url \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, body io.Reader) (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNotFound\u003c/span\u003e(w ResponseWriter, r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eParseHTTPVersion\u003c/span\u003e(vers \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) (major, minor \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e, ok \u003cspan style=\"color:#ff7b72\"\u003ebool\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eParseTime\u003c/span\u003e(text \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) (t time.Time, err \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePost\u003c/span\u003e(url, contentType \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, body io.Reader) (resp \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eResponse, err \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePostForm\u003c/span\u003e(url \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, data url.Values) (resp \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eResponse, err \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eProxyFromEnvironment\u003c/span\u003e(req \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest) (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eurl.URL, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eProxyURL\u003c/span\u003e(fixedURL \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eurl.URL) \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest) (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eurl.URL, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eReadRequest\u003c/span\u003e(b \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003ebufio.Reader) (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eReadResponse\u003c/span\u003e(r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003ebufio.Reader, req \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest) (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eResponse, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eRedirect\u003c/span\u003e(w ResponseWriter, r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest, url \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, code \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eServe\u003c/span\u003e(l net.Listener, handler Handler) \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eServeContent\u003c/span\u003e(w ResponseWriter, req \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest, name \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e, modtime time.Time, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eServeFile\u003c/span\u003e(w ResponseWriter, r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRequest, name \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eServeTLS\u003c/span\u003e(l net.Listener, handler Handler, certFile, keyFile \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSetCookie\u003c/span\u003e(w ResponseWriter, cookie \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eCookie)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eStatusText\u003c/span\u003e(code \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t在这个库提供的方法中，我们去掉一些 \u003ccode\u003eNew\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e 开头的函数，因为你从命名上可以看出，这些函数是对某个对象或者属性的设置。\u003c/p\u003e\n\u003cp\u003e剩下的函数大致可以分成三类:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e为服务端提供创建 HTTP 服务的函数，名字中一般包含 Serve 字样，比如 Serve、 ServeFile、ListenAndServe 等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e为客户端提供调用 HTTP 服务的类库，以 HTTP 的 method 同名，比如 Get、Post、 Head 等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e提供中转代理的一些函数，比如 ProxyURL、ProxyFromEnvironment 等。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"查看结构定义模块\"\u003e查看结构定义(模块)\u003c/h2\u003e\n\u003cp\u003e​\t我们过一遍这个库提供的所有 struct，看看核心模块有哪些，同样使用 go doc:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e doc net\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003ehttp | grep \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;^type\u0026#34;\u003c/span\u003e| grep \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t可以看到整个库最核心的几个结构:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Client \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Cookie \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e MaxBytesError \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e ProtocolError \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e PushOptions \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Request \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Response \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e ServeMux \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Server \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Transport \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e看结构的名字或者 go doc 查看结构说明文档，能逐渐了解它们的功能:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eClient 负责构建 HTTP 客户端;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eServer 负责构建 HTTP 服务端;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eServerMux 负责 HTTP 服务端路由;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTransport、Request、Response、Cookie 负责客户端和服务端传输对应的不同模块。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e​\t现在通过库方法(function)和结构体(struct)，我们对整个库的结构和功能有大致印象 了。整个库承担了两部分功能，一部分是构建 HTTP 客户端，一部分是构建 HTTP 服务 端。\u003c/p\u003e\n\u003cp\u003e​\t构建的 HTTP 服务端除了提供真实服务之外，也能提供代理中转服务，它们分别由 Client 和 Server 两个数据结构负责。除了这两个最重要的数据结构之外，HTTP 协议的每个部 分，比如请求、返回、传输设置等都有具体的数据结构负责。\u003c/p\u003e","title":"GO 三方库源码阅读姿势"},{"content":"K8s创建Pod的历程 参考原文：https://icloudnative.io/posts/what-happens-when-k8s/#span-idinline-toc1span-kubectl\n1. kubectl 验证和生成器 ​\t当敲下回车键以后，kubectl 首先会执行一些客户端验证操作，以确保不合法的请求（例如，创建不支持的资源或使用格式错误的镜像名称）将会快速失败，也不会发送给 kube-apiserver。通过减少不必要的负载来提高系统性能。\n​\t验证通过之后， kubectl 开始将发送给 kube-apiserver 的 HTTP 请求进行封装。kube-apiserver 与 etcd 进行通信，所有尝试访问或更改 Kubernetes 系统状态的请求都会通过 kube-apiserver 进行，kubectl 也不例外。kubectl 使用生成器（ generators）来构造 HTTP 请求。生成器是一个用来处理序列化的抽象概念。\n​\t通过 kubectl run 不仅可以运行 deployment，还可以通过指定参数 --generator 来部署其他多种资源类型。如果没有指定 --generator 参数的值，kubectl 将会自动判断资源的类型。\n​\t例如，带有参数 --restart-policy=Always 的资源将被部署为 Deployment，而带有参数 --restart-policy=Never 的资源将被部署为 Pod。同时 kubectl 也会检查是否需要触发其他操作，例如记录命令（用来进行回滚或审计）。\n​\t在 kubectl 判断出要创建一个 Deployment 后，它将使用 DeploymentV1Beta1 生成器从我们提供的参数中生成一个 运行时对象。\nAPI 版本协商与 API 组 ​\t为了更容易地消除字段或者重新组织资源结构，Kubernetes 支持多个 API 版本，每个版本都在不同的 API 路径下，例如 /api/v1 或者 /apis/extensions/v1beta1。不同的 API 版本表明不同的稳定性和支持级别，更详细的描述可以参考 Kubernetes API 概述。\n​\tAPI 组旨在对类似资源进行分类，以便使得 Kubernetes API 更容易扩展。API 的组名在 REST 路径或者序列化对象的 apiVersion 字段中指定。例如，Deployment 的 API 组名是 apps，最新的 API 版本是 v1beta2，这就是为什么你要在 Deployment manifests 顶部输入 apiVersion: apps/v1beta2。\n​\tkubectl 在生成运行时对象后，开始为它 找到适当的 API 组和 API 版本，然后 组装成一个版本化客户端，该客户端知道资源的各种 REST 语义。该阶段被称为版本协商，kubectl 会扫描 remote API 上的 /apis 路径来检索所有可能的 API 组。由于 kube-apiserver 在 /apis 路径上公开了 OpenAPI 格式的规范文档， 因此客户端很容易找到合适的 API。\n​\t为了提高性能，kubectl 将 OpenAPI 规范缓存到了 ~/.kube/cache 目录。如果你想了解 API 发现的过程，请尝试删除该目录并在运行 kubectl 命令时将 -v 参数的值设为最大值，然后你将会看到所有试图找到这些 API 版本的HTTP 请求。参考 kubectl 备忘单。\n​\t最后一步才是真正地发送 HTTP 请求。一旦请求发送之后获得成功的响应，kubectl 将会根据所需的输出格式打印 success message。\n客户端身份认证 在发送 HTTP 请求之前还要进行客户端认证，这是之前没有提到的，现在可以来看一下。\n为了能够成功发送请求，kubectl 需要先进行身份认证。用户凭证保存在 kubeconfig 文件中，kubectl 通过以下顺序来找到 kubeconfig 文件：\n如果提供了 --kubeconfig 参数， kubectl 就使用 –kubeconfig 参数提供的 kubeconfig 文件。 如果没有提供 –kubeconfig 参数，但设置了环境变量 $KUBECONFIG，则使用该环境变量提供的 kubeconfig 文件。 如果 –kubeconfig 参数和环境变量 $KUBECONFIG 都没有提供，kubectl 就使用默认的 kubeconfig 文件 $HOME/.kube/config。 解析完 kubeconfig 文件后，kubectl 会确定当前要使用的上下文、当前指向的群集以及与当前用户关联的任何认证信息。如果用户提供了额外的参数（例如 –username），则优先使用这些参数覆盖 kubeconfig 中指定的值。一旦拿到这些信息之后， kubectl 就会把这些信息填充到将要发送的 HTTP 请求头中：\nx509 证书使用 tls.TLSConfig 发送（包括 CA 证书）。 bearer tokens 在 HTTP 请求头 Authorization 中 发送。 用户名和密码通过 HTTP 基本认证 发送。 OpenID 认证过程是由用户事先手动处理的，产生一个像 bearer token 一样被发送的 token。 小结补充 ​\t如果要对k8s的部署文件进行进一步正确性校验，可以参看这个Kubeval\n2. kube-apiserver 认证 ​\t现在我们的请求已经发送成功了，接下来将会发生什么？这时候就该 kube-apiserver 闪亮登场了！kube-apiserver 是客户端和系统组件用来保存和检索集群状态的主要接口。为了执行相应的功能，kube-apiserver 需要能够验证请求者是合法的，这个过程被称为认证。\n​\t那么 apiserver 如何对请求进行认证呢？当 kube-apiserver 第一次启动时，它会查看用户提供的所有 CLI 参数，并组合成一个合适的令牌列表。\n举个例子 : 如果提供了 --client-ca-file 参数，则会将 x509 客户端证书认证添加到令牌列表中；如果提供了 --token-auth-file 参数，则会将 breaer token 添加到令牌列表中。\n每次收到请求时，apiserver 都会 通过令牌链进行认证，直到某一个认证成功为止：\nx509 处理程序将验证 HTTP 请求是否是由 CA 根证书签名的 TLS 密钥进行编码的。 bearer token 处理程序将验证 --token-auth-file 参数提供的 token 文件是否存在。 基本认证处理程序确保 HTTP 请求的基本认证凭证与本地的状态匹配。 ​\t如果 认证失败，则请求失败并返回相应的错误信息；如果验证成功，则将请求中的 Authorization 请求头删除，并 将用户信息添加到其上下文中。这给后续的授权和准入控制器提供了访问之前建立的用户身份的能力。\n授权 ​\tOK，现在请求已经发送，并且 kube-apiserver 已经成功验证我们是谁，终于解脱了！\n​\t然而事情并没有结束，虽然我们已经证明了我们是合法的，但我们有权执行此操作吗？毕竟身份和权限不是一回事。为了进行后续的操作，kube-apiserver 还要对用户进行授权。\n​\tkube-apiserver 处理授权的方式与处理身份验证的方式相似：通过 kube-apiserver 的启动参数 --authorization_mode 参数设置。它将组合一系列授权者，这些授权者将针对每个传入的请求进行授权。如果所有授权者都拒绝该请求，则该请求会被禁止响应并且 不会再继续响应。如果某个授权者批准了该请求，则请求继续。\nkube-apiserver 目前支持以下几种授权方法：\nwebhook: 它与集群外的 HTTP(S) 服务交互。 ABAC: 它执行静态文件中定义的策略。 RBAC: 它使用 rbac.authorization.k8s.io API Group实现授权决策，允许管理员通过 Kubernetes API 动态配置策略。 Node: 它确保 kubelet 只能访问自己节点上的资源。 准入控制 ​\t突破了之前所说的认证和授权两道关口之后，客户端的调用请求就能够得到 API Server 的真正响应了吗？答案是：不能！\n​\t从 kube-apiserver 的角度来看，它已经验证了我们的身份并且赋予了相应的权限允许我们继续，但对于 Kubernetes 而言，其他组件对于应不应该允许发生的事情还是很有意见的。所以这个请求还需要通过 Admission Controller 所控制的一个 准入控制链 的层层考验，官方标准的 “关卡” 有近十个之多，而且还能自定义扩展！\n​\t虽然授权的重点是回答用户是否有权限，但准入控制器会拦截请求以确保它符合集群的更广泛的期望和规则。它们是资源对象保存到 etcd 之前的最后一个堡垒，封装了一系列额外的检查以确保操作不会产生意外或负面结果。不同于授权和认证只关心请求的用户和操作，准入控制还处理请求的内容，并且仅对创建、更新、删除或连接（如代理）等有效，而对读操作无效。\n准入控制器的工作方式与授权者和验证者的工作方式类似，但有一点区别：与验证链和授权链不同，如果某个准入控制器检查不通过，则整个链会中断，整个请求将立即被拒绝并且返回一个错误给终端用户。\n​\t准入控制器设计的重点在于提高可扩展性，某个控制器都作为一个插件存储在 plugin/pkg/admission 目录中，并且与某一个接口相匹配，最后被编译到 kube-apiserver 二进制文件中。\n​\t大部分准入控制器都比较容易理解，接下来着重介绍 SecurityContextDeny、ResourceQuota 及 LimitRanger 这三个准入控制器。\nSecurityContextDeny 该插件将禁止创建设置了 Security Context 的 Pod。 ResourceQuota 不仅能限制某个 Namespace 中创建资源的数量，而且能限制某个 Namespace 中被 Pod 所请求的资源总量。该准入控制器和资源对象 ResourceQuota 一起实现了资源配额管理。 LimitRanger 作用类似于上面的 ResourceQuota 控制器，针对 Namespace 资源的每个个体（Pod 与 Container 等）的资源配额。该插件和资源对象 LimitRange 一起实现资源配额管理。 3. etcd 到现在为止，Kubernetes 已经对该客户端的调用请求进行了全面彻底地审查，并且已经验证通过，运行它进入下一个环节。下一步 kube-apiserver 将对 HTTP 请求进行反序列化，然后利用得到的结果构建运行时对象（有点像 kubectl 生成器的逆过程），并保存到 etcd 中。下面我们将这个过程分解一下。\n当收到请求时，kube-apiserver 是如何知道它该怎么做的呢？事实上，在客户端发送调用请求之前就已经产生了一系列非常复杂的流程。我们就从 kube-apiserver 二进制文件首次运行开始分析吧：\n当运行 kube-apiserver 二进制文件时，它会 创建一个允许 apiserver 聚合的服务链。这是一种对 Kubernetes API 进行扩展的方式。 同时会创建一个 generic apiserver 作为默认的 apiserver。 然后利用 生成的 OpenAPI 规范来填充 apiserver 的配置。 然后 kube-apiserver 遍历数据结构中指定的所有 API 组，并将每一个 API 组作为通用的存储抽象保存到 etcd 中。当你访问或变更资源状态时，kube-apiserver 就会调用这些 API 组。 每个 API 组都会遍历它的所有组版本，并且将每个 HTTP 路由 映射到 REST 路径中。 当请求的 METHOD 是 POST 时，kube-apiserver 就会将请求转交给 资源创建处理器。 现在 kube-apiserver 已经知道了所有的路由及其对应的 REST 路径，以便在请求匹配时知道调用哪些处理器和键值存储。多么机智的设计！现在假设客户端的 HTTP 请求已经被 kube-apiserver 收到了：\n如果处理链可以将请求与已经注册的路由进行匹配，就会将该请求交给注册到该路由的 专用处理器来处理；如果没有任何一个路由可以匹配该请求，就会将请求转交给 基于路径的处理器（比如当调用 /apis 时）；如果没有任何一个基于路径的处理器注册到该路径，请求就会被转交给 not found 处理器，最后返回 404。 幸运的是，我们有一个名为 createHandler 的注册路由！它有什么作用呢？首先它会解码 HTTP 请求并进行基本的验证，例如确保请求提供的 json 与 API 资源的版本相匹配。 接下来进入 审计和准入控制阶段。 然后资源将会通过 storage provider 保存 到 etcd 中。默认情况下保存到 etcd 中的键的格式为 \u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;，你也可以自定义。 资源创建过程中出现的任何错误都会被捕获，最后 storage provider 会执行 get 调用来确认该资源是否被成功创建。如果需要额外的清理工作，就会调用后期创建的处理器和装饰器。 最后构造 HTTP 响应并返回给客户端。 原来 apiserver 做了这么多的工作，以前竟然没有发现呢！到目前为止，我们创建的 Deployment 资源已经保存到了 etcd 中，但 apiserver 仍然看不到它。\n4. 初始化 ​\t在一个资源对象被持久化到数据存储之后，apiserver 还无法完全看到或调度它，在此之前还要执行一系列 Initializers。Initializers是一种与资源类型相关联的控制器，它会在资源对外可用之前执行某些逻辑。如果某个资源类型没有Initializers，就会跳过此初始化步骤立即使资源对外可见。\n​\t正如 大佬的博客指出的那样，Initializers是一个强大的功能，因为它允许我们执行通用引导操作。例如：\n将代理边车容器注入到暴露 80 端口的 Pod 中，或者加上特定的 annotation。 将保存着测试证书的 volume 注入到特定命名空间的所有 Pod 中。 如果 Secret 中的密码小于 20 个字符，就组织其创建。 initializerConfiguration 资源对象允许你声明某些资源类型应该运行哪些Initializers。如果你想每创建一个 Pod 时就运行一个自定义Initializers，你可以这样做：\n1 2 3 4 5 6 7 8 9 10 11 12 13 apiVersion: admissionregistration.k8s.io/v1alpha1 kind: InitializerConfiguration metadata: name: custom-pod-initializer initializers: - name: podimage.example.com rules: - apiGroups: - \u0026#34;\u0026#34; apiVersions: - v1 resources: - pods ​\t通过该配置创建资源对象 InitializerConfiguration 之后，就会在每个 Pod 的 metadata.initializers.pending 字段中添加 custom-pod-initializer 字段。该初始化控制器会定期扫描新的 Pod，一旦在 Pod 的 pending 字段中检测到自己的名称，就会执行其逻辑，执行完逻辑之后就会将 pending 字段下的自己的名称删除。\n​\t只有在 pending 字段下的列表中的第一个Initializers可以对资源进行操作，当所有的Initializers执行完成，并且 pending 字段为空时，该对象就会被认为初始化成功。\n​\t你可能会注意到一个问题：如果 kube-apiserver 不能显示这些资源，那么用户级控制器是如何处理资源的呢？\n​\t为了解决这个问题，kube-apiserver 暴露了一个 ?includeUninitialized 查询参数，它会返回所有的资源对象（包括未初始化的）。\n5. 控制循环 Deployments controller ​\t到了这个阶段，我们的 Deployment 记录已经保存在 etcd 中，并且所有的初始化逻辑都执行完成，接下来的阶段将会涉及到该资源所依赖的拓扑结构。在 Kubernetes 中，Deployment 实际上只是一系列 Replicaset 的集合，而 Replicaset 是一系列 Pod 的集合。那么 Kubernetes 是如何从一个 HTTP 请求按照层级结构依次创建这些资源的呢？其实这些工作都是由 Kubernetes 内置的 Controller(控制器) 来完成的。\n​\tKubernetes 在整个系统中使用了大量的 Controller，Controller 是一个用于将系统状态从“当前状态”修正到“期望状态”的异步脚本。所有 Controller 都通过 kube-controller-manager 组件并行运行，每种 Controller 都负责一种具体的控制流程。首先介绍一下 Deployment Controller：\n​\t将 Deployment 记录存储到 etcd 并初始化后，就可以通过 kube-apiserver 使其可见，然后 Deployment Controller 就会检测到它（它的工作就是负责监听 Deployment 记录的更改）。在我们的例子中，控制器通过一个 Informer 注册一个创建事件的特定回调函数（更多信息参加下文）。\n当 Deployment 第一次对外可见时，该 Controller 就会 将该资源对象添加到内部工作队列，然后开始处理这个资源对象：\n通过使用标签选择器查询 kube-apiserver 来 检查该 Deployment 是否有与其关联的 ReplicaSet 或 Pod 记录。\n有趣的是，这个同步过程是状态不可知的，它核对新记录与核对已经存在的记录采用的是相同的方式。\n在意识到没有与其关联的 ReplicaSet 或 Pod 记录后，Deployment Controller 就会开始执行 弹性伸缩流程：\n创建 ReplicaSet 资源，为其分配一个标签选择器并将其版本号设置为 1。\nReplicaSet 的 PodSpec 字段从 Deployment 的 manifest 以及其他相关元数据中复制而来。有时 Deployment 记录在此之后也需要更新（例如，如果设置了 process deadline）。\n​\t当完成以上步骤之后，该 Deployment 的 status 就会被更新，然后重新进入与之前相同的循环，等待 Deployment 与期望的状态相匹配。由于 Deployment Controller 只关心 ReplicaSet，因此需要通过 ReplicaSet Controller 来继续协调。\nReplicaSets controller ​\t在前面的步骤中，Deployment Controller 创建了第一个 ReplicaSet，但仍然还是没有 Pod，这时候就该 ReplicaSet Controller 登场了！ReplicaSet Controller 的工作是监视 ReplicaSets 及其相关资源（Pod）的生命周期。和大多数其他 Controller 一样，它通过触发某些事件的处理器来实现此目的。\n​\t当创建 ReplicaSet 时（由 Deployment Controller 创建），RS Controller 检查新 ReplicaSet 的状态，并检查当前状态与期望状态之间存在的偏差，然后通过 调整 Pod 的副本数来达到期望的状态。\n​\tPod 的创建也是批量进行的，从 SlowStartInitialBatchSize 开始，然后在每次成功的迭代中以一种 slow start 操作加倍。这样做的目的是在大量 Pod 启动失败时（例如，由于资源配额），可以减轻 kube-apiserver 被大量不必要的 HTTP 请求吞没的风险。如果创建失败，最好能够优雅地失败，并且对其他的系统组件造成的影响最小！\n​\tKubernetes 通过 Owner References（在子级资源的某个字段中引用其父级资源的 ID） 来构造严格的资源对象层级结构。这确保了一旦 Controller 管理的资源被删除（级联删除），子资源就会被垃圾收集器删除，同时还为父级资源提供了一种有效的方式来避免他们竞争同一个子级资源（想象两对父母都认为他们拥有同一个孩子的场景）。\n​\tOwner References 的另一个好处是：它是有状态的。如果有任何 Controller 重启了，那么由于资源对象的拓扑关系与 Controller 无关，该操作不会影响到系统的稳定运行。这种对资源隔离的重视也体现在 Controller 本身的设计中：Controller 不能对自己没有明确拥有的资源进行操作，它们应该选择对资源的所有权，互不干涉，互不共享。\n有时系统中也会出现孤儿（orphaned）资源，通常由以下两种途径产生：\n父级资源被删除，但子级资源没有被删除 垃圾收集策略禁止删除子级资源 ​\t当发生这种情况时，Controller 将会确保孤儿资源拥有新的 Owner。多个父级资源可以相互竞争同一个孤儿资源，但只有一个会成功（其他父级资源会收到验证错误）。\nInformers 你可能已经注意到，某些 Controller（例如 RBAC 授权器或 Deployment Controller）需要先检索集群状态然后才能正常运行。拿 RBAC 授权器举例，当请求进入时，授权器会将用户的初始状态缓存下来，然后用它来检索与 etcd 中的用户关联的所有 角色（Role）和 角色绑定（RoleBinding）。那么问题来了，Controller 是如何访问和修改这些资源对象的呢？事实上 Kubernetes 是通过 Informer 机制来解决这个问题的。\nInfomer 是一种模式，它允许 Controller 查找缓存在本地内存中的数据(这份数据由 Informer 自己维护)并列出它们感兴趣的资源。\n虽然 Informer 的设计很抽象，但它在内部实现了大量的对细节的处理逻辑（例如缓存），缓存很重要，因为它不但可以减少对 Kubenetes API 的直接调用，同时也能减少 Server 和 Controller 的大量重复性工作。通过使用 Informer，不同的 Controller 之间以线程安全（Thread safety）的方式进行交互，而不必担心多个线程访问相同的资源时会产生冲突。\n有关 Informer 的更多详细解析，请参考这篇文章： Kubernetes: Controllers, Informers, Reflectors and Stores\nScheduler 当所有的 Controller 正常运行后，etcd 中就会保存一个 Deployment、一个 ReplicaSet 和 三个 Pod 资源记录，并且可以通过 kube-apiserver 查看。然而，这些 Pod 资源现在还处于 Pending 状态，因为它们还没有被调度到集群中合适的 Node 上运行。这个问题最终要靠调度器（Scheduler）来解决。\nScheduler 作为一个独立的组件运行在集群控制平面上，工作方式与其他 Controller 相同：监听实际并将系统状态调整到期望的状态。具体来说，Scheduler 的作用是将待调度的 Pod 按照特定的算法和调度策略绑定（Binding）到集群中某个合适的 Node 上，并将绑定信息写入 etcd 中（它会过滤其 PodSpec 中 NodeName 字段为空的 Pod），默认的调度算法的工作方式如下：\n当 Scheduler 启动时，会 注册一个默认的预选策略链，这些 预选策略 会对备选节点进行评估，判断备选节点是否 满足备选 Pod 的需求。例如，如果 PodSpec 字段限制了 CPU 和内存资源，那么当备选节点的资源容量不满足备选 Pod 的需求时，备选 Pod 就不会被调度到该节点上（资源容量=备选节点资源总量-节点中已存在 Pod 的所有容器的需求资源（CPU 和内存）的总和） 一旦筛选出符合要求的候选节点，就会采用 优选策略 计算出每个候选节点的积分，然后对这些候选节点进行排序，积分最高者胜出。例如，为了在整个系统中分摊工作负载，这些优选策略会从备选节点列表中选出资源消耗最小的节点。每个节点通过优选策略时都会算出一个得分，计算各项得分，最终选出分值大的节点作为优选的结果。 一旦找到了合适的节点，Scheduler 就会创建一个 Binding 对象，该对象的 Name 和 Uid 与 Pod 相匹配，并且其 ObjectReference 字段包含所选节点的名称，然后通过 POST 请求 发送给 apiserver。\n当 kube-apiserver 接收到此 Binding 对象时，注册吧会将该对象反序列化并更新 Pod 资源中的以下字段：\n将 NodeName 的值设置为 ObjectReference 中的 NodeName。 添加相关的注释。 将 PodScheduled 的 status 值设置为 True。可以通过 kubectl 来查看： 1 $ kubectl get \u0026lt;PODNAME\u0026gt; -o go-template=\u0026#39;{{range .status.conditions}}{{if eq .type \u0026#34;PodScheduled\u0026#34;}}{{.status}}{{end}}{{end}}\u0026#39; 一旦 Scheduler 将 Pod 调度到某个节点上，该节点的 Kubelet 就会接管该 Pod 并开始部署。\n预选策略和优选策略都可以通过 –policy-config-file 参数来扩展，如果默认的调度器不满足要求，还可以部署自定义的调度器。如果 podSpec.schedulerName 的值设置为其他的调度器，则 Kubernetes 会将该 Pod 的调度转交给那个调度器。\n6. Kubelet Pod 同步 现在，所有的 Controller 都完成了工作，我们来总结一下：\nHTTP 请求通过了认证、授权和准入控制阶段。 一个 Deployment、ReplicaSet 和三个 Pod 资源被持久化到 etcd 存储中。 然后运行了一系列Initializers。 最后每个 Pod 都被调度到合适的节点。 然而到目前为止，所有的状态变化仅仅只是针对保存在 etcd 中的资源记录，接下来的步骤涉及到运行在工作节点之间的 Pod 的分布状况，这是分布式系统（比如 Kubernetes）的关键因素。这些任务都是由 Kubelet 组件完成的，让我们开始吧！\n在 Kubernetes 集群中，每个 Node 节点上都会启动一个 Kubelet 服务进程，该进程用于处理 Scheduler 下发到本节点的任务，管理 Pod 的生命周期，包括挂载卷、容器日志记录、垃圾回收以及其他与 Pod 相关的事件。\n如果换一种思维模式，你可以把 Kubelet 当成一种特殊的 Controller，它每隔 20 秒（可以自定义）向 kube-apiserver 通过 NodeName 获取自身 Node 上所要运行的 Pod 清单。一旦获取到了这个清单，它就会通过与自己的内部缓存进行比较来检测新增加的 Pod，如果有差异，就开始同步 Pod 列表。我们来详细分析一下同步过程：\n如果 Pod 正在创建， Kubelet 就会 记录一些在 Prometheus 中用于追踪 Pod 启动延时的指标。 然后生成一个 PodStatus 对象，它表示 Pod 当前阶段的状态。Pod 的状态(Phase) 是 Pod 在其生命周期中的最精简的概要，包括 Pending，Running，Succeeded，Failed 和 Unkown 这几个值。状态的产生过程非常过程，所以很有必要深入了解一下背后的原理： 首先串行执行一系列 Pod 同步处理器（PodSyncHandlers），每个处理器检查检查 Pod 是否应该运行在该节点上。当所有的处理器都认为该 Pod 不应该运行在该节点上，则 Pod 的 Phase 值就会变成 PodFailed，并且将该 Pod 从该节点上驱逐出去。例如当你创建一个 Job 时，如果 Pod 失败重试的时间超过了 spec.activeDeadlineSeconds 设置的值，就会将 Pod 从该节点驱逐出去。\n接下来，Pod 的 Phase 值由 init 容器 和应用容器的状态共同来决定。因为目前容器还没有启动，容器被视为 处于等待阶段，如果 Pod 中至少有一个容器处于等待阶段，则其 Phase 值为 Pending。\n最后，Pod 的 Condition 字段由 Pod 内所有容器的状态决定。现在我们的容器还没有被容器运行时创建，所以 PodReady 的状态被设置为 False。可以通过 kubectl 查看：\n1 $ kubectl get \u0026lt;PODNAME\u0026gt; -o go-template=\u0026#39;{{range .status.conditions}}{{if eq .type \u0026#34;Ready\u0026#34;}}{{.status}}{{end}}{{end}}\u0026#39; 生成 PodStatus 之后（Pod 中的 status 字段），Kubelet 就会将它发送到 Pod 的状态管理器，该管理器的任务是通过 apiserver 异步更新 etcd 中的记录。 接下来运行一系列准入处理器来确保该 Pod 是否具有相应的权限（包括强制执行 AppArmor 配置文件和 NO_NEW_PRIVS），被准入控制器拒绝的 Pod 将一直保持 Pending 状态。 如果 Kubelet 启动时指定了 cgroups-per-qos 参数，Kubelet 就会为该 Pod 创建 cgroup 并进行相应的资源限制。这是为了更方便地对 Pod 进行服务质量（QoS）管理。 然后为 Pod 创建相应的目录，包括 Pod 的目录（/var/run/kubelet/pods/\u0026lt;podID\u0026gt;），该 Pod 的卷目录（\u0026lt;podDir\u0026gt;/volumes）和该 Pod 的插件目录（\u0026lt;podDir\u0026gt;/plugins）。 卷管理器会 挂载 Spec.Volumes 中定义的相关数据卷，然后等待是否挂载成功。根据挂载卷类型的不同，某些 Pod 可能需要等待更长的时间（比如 NFS 卷）。 从 apiserver 中检索 Spec.ImagePullSecrets 中定义的所有 Secret，然后将其注入到容器中。 最后通过容器运行时接口（Container Runtime Interface（CRI））开始启动容器（下面会详细描述）。 CRI 与 pause 容器 到了这个阶段，大量的初始化工作都已经完成，容器已经准备好开始启动了，而容器是由容器运行时（例如 Docker 和 Rkt）启动的。\n为了更容易扩展，Kubelet 从 1.5.0 开始通过容器运行时接口与容器运行时（Container Runtime）交互。简而言之，CRI 提供了 Kubelet 和特定的运行时之间的抽象接口，它们之间通过 协议缓冲区（它像一个更快的 JSON）和 gRPC API（一种非常适合执行 Kubernetes 操作的 API）。这是一个非常酷的想法，通过使用 Kubelet 和运行时之间定义的契约关系，容器如何编排的具体实现细节已经变得无关紧要。由于不需要修改 Kubernetes 的核心代码，开发者可以以最小的开销添加新的运行时。\n不好意思有点跑题了，让我们继续回到容器启动的阶段。第一次启动 Pod 时，Kubelet 会通过 Remote Procedure Command(RPC) 协议调用 RunPodSandbox。sandbox 用于描述一组容器，例如在 Kubernetes 中它表示的是 Pod。sandbox 是一个很宽泛的概念，所以对于其他没有使用容器的运行时仍然是有意义的（比如在一个基于 hypervisor 的运行时中，sandbox 可能指的就是虚拟机）。\n我们的例子中使用的容器运行时是 Docker，创建 sandbox 时首先创建的是 pause 容器。pause 容器作为同一个 Pod 中所有其他容器的基础容器，它为 Pod 中的每个业务容器提供了大量的 Pod 级别资源，这些资源都是 Linux 命名空间（包括网络命名空间，IPC 命名空间和 PID 命名空间）。\npause 容器提供了一种方法来管理所有这些命名空间并允许业务容器共享它们，在同一个网络命名空间中的好处是：同一个 Pod 中的容器可以使用 localhost 来相互通信。pause 容器的第二个功能与 PID 命名空间的工作方式相关，在 PID 命名空间中，进程之间形成一个树状结构，一旦某个子进程由于父进程的错误而变成了“孤儿进程”，其便会被 init 进程进行收养并最终回收资源。关于 pause 工作方式的详细信息可以参考： The Almighty Pause Container。\n一旦创建好了 pause 容器，下面就会开始检查磁盘状态然后开始启动业务容器。\nCNI 和 Pod 网络 现在我们的 Pod 已经有了基本的骨架：一个共享所有命名空间以允许业务容器在同一个 Pod 里进行通信的 pause 容器。但现在还有一个问题，那就是容器的网络是如何建立的？\n当 Kubelet 为 Pod 创建网络时，它会将创建网络的任务交给 CNI 插件。CNI 表示容器网络接口（Container Network Interface），和容器运行时的运行方式类似，它也是一种抽象，允许不同的网络提供商为容器提供不同的网络实现。通过将 json 配置文件（默认在 /etc/cni/net.d 路径下）中的数据传送到相关的 CNI 二进制文件（默认在 /opt/cni/bin 路径下）中，cni 插件可以给 pause 容器配置相关的网络，然后 Pod 中其他的容器都使用 pause 容器的网络。下面是一个简单的示例配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \u0026#34;cniVersion\u0026#34;: \u0026#34;0.3.1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;bridge\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bridge\u0026#34;, \u0026#34;bridge\u0026#34;: \u0026#34;cnio0\u0026#34;, \u0026#34;isGateway\u0026#34;: true, \u0026#34;ipMasq\u0026#34;: true, \u0026#34;ipam\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;host-local\u0026#34;, \u0026#34;ranges\u0026#34;: [ [{\u0026#34;subnet\u0026#34;: \u0026#34;${POD_CIDR}\u0026#34;}] ], \u0026#34;routes\u0026#34;: [{\u0026#34;dst\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34;}] } } CNI 插件还会通过 CNI_ARGS 环境变量为 Pod 指定其他的元数据，包括 Pod 名称和命名空间。\n下面的步骤因 CNI 插件而异，我们以 bridge 插件举例：\n该插件首先会在根网络命名空间（也就是宿主机的网络命名空间）中设置本地 Linux 网桥，以便为该主机上的所有容器提供网络服务。 然后它会将一个网络接口（veth 设备对的一端）插入到 pause 容器的网络命名空间中，并将另一端连接到网桥上。你可以这样来理解 veth 设备对：它就像一根很长的管道，一端连接到容器，一端连接到根网络命名空间中，数据包就在管道中进行传播。 接下来 json 文件中指定的 IPAM Plugin 会为 pause 容器的网络接口分配一个 IP 并设置相应的路由，现在 Pod 就有了自己的 IP。 IPAM Plugin 的工作方式和 CNI Plugin 类似：通过二进制文件调用并具有标准化的接口，每一个 IPAM Plugin 都必须要确定容器网络接口的 IP、子网以及网关和路由，并将信息返回给 CNI 插件。最常见的 IPAM Plugin 是 host-local，它从预定义的一组地址池中为容器分配 IP 地址。它将地址池的信息以及分配信息保存在主机的文件系统中，从而确保了同一主机上每个容器的 IP 地址的唯一性。 最后 Kubelet 会将集群内部的 DNS 服务器的 Cluster IP 地址传给 CNI 插件，然后 CNI 插件将它们写到容器的 /etc/resolv.conf 文件中。 一旦完成了上面的步骤，CNI 插件就会将操作的结果以 json 的格式返回给 Kubelet。\n跨主机容器网络 到目前为止，我们已经描述了容器如何与宿主机进行通信，但跨主机之间的容器如何通信呢？\n​\t通常情况下使用 overlay 网络来进行跨主机容器通信，这是一种动态同步多个主机间路由的方法。 其中最常用的 overlay 网络插件是 flannel，flannel 具体的工作方式可以参考 CoreOS 的文档。\n容器启动 所有网络都配置完成后，接下来就开始真正启动业务容器了！\n一旦 sanbox 完成初始化并处于 active 状态，Kubelet 就可以开始为其创建容器了。首先 启动 PodSpec 中定义的 init 容器，然后再启动业务容器。具体过程如下：\n首先拉取容器的镜像。如果是私有仓库的镜像，就会利用 PodSpec 中指定的 Secret 来拉取该镜像。 然后通过 CRI 接口创建容器。Kubelet 向 PodSpec 中填充了一个 ContainerConfig 数据结构（在其中定义了命令，镜像，标签，挂载卷，设备，环境变量等待），然后通过 protobufs 发送给 CRI 接口。对于 Docker 来说，它会将这些信息反序列化并填充到自己的配置信息中，然后再发送给 Dockerd 守护进程。在这个过程中，它会将一些元数据标签（例如容器类型，日志路径，dandbox ID 等待）添加到容器中。 接下来会使用 CPU 管理器来约束容器，这是 Kubelet 1.8 中新添加的 alpha 特性，它使用 UpdateContainerResources CRI 方法将容器分配给本节点上的 CPU 资源池。 最后容器开始真正 启动。 如果 Pod 中配置了容器生命周期钩子（Hook），容器启动之后就会运行这些 Hook。Hook 的类型包括两种：Exec（执行一段命令） 和 HTTP（发送HTTP请求）。如果 PostStart Hook 启动的时间过长、挂起或者失败，容器将永远不会变成 running 状态。 总结 ","permalink":"https://luenci.com/en/posts/k8s%E5%88%9B%E5%BB%BApod%E5%8E%86%E7%A8%8B/","summary":"\u003ch1 id=\"k8s创建pod的历程\"\u003eK8s创建Pod的历程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考原文：https://icloudnative.io/posts/what-happens-when-k8s/#span-idinline-toc1span-kubectl\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"1-kubectl\"\u003e1. kubectl\u003c/h2\u003e\n\u003ch3 id=\"验证和生成器\"\u003e验证和生成器\u003c/h3\u003e\n\u003cp\u003e​\t当敲下回车键以后，\u003ccode\u003ekubectl\u003c/code\u003e 首先会执行一些客户端验证操作，以确保不合法的请求（例如，创建不支持的资源或使用格式错误的镜像名称）将会快速失败，也不会发送给 \u003ccode\u003ekube-apiserver\u003c/code\u003e。通过减少不必要的负载来提高系统性能。\u003c/p\u003e\n\u003cp\u003e​\t验证通过之后， kubectl 开始将发送给 kube-apiserver 的 HTTP 请求进行封装。\u003ccode\u003ekube-apiserver\u003c/code\u003e 与 etcd 进行通信，所有尝试访问或更改 Kubernetes 系统状态的请求都会通过 kube-apiserver 进行，kubectl 也不例外。kubectl 使用生成器（ \u003ca href=\"https://kubernetes.io/docs/user-guide/kubectl-conventions/#generators\"\u003egenerators\u003c/a\u003e）来构造 HTTP 请求。生成器是一个用来处理序列化的抽象概念。\u003c/p\u003e\n\u003cp\u003e​\t通过 \u003ccode\u003ekubectl run\u003c/code\u003e 不仅可以运行 \u003ccode\u003edeployment\u003c/code\u003e，还可以通过指定参数 \u003ccode\u003e--generator\u003c/code\u003e 来部署其他多种资源类型。如果没有指定 \u003ccode\u003e--generator\u003c/code\u003e 参数的值，kubectl 将会自动判断资源的类型。\u003c/p\u003e\n\u003cp\u003e​\t例如，带有参数 \u003ccode\u003e--restart-policy=Always\u003c/code\u003e 的资源将被部署为 Deployment，而带有参数 \u003ccode\u003e--restart-policy=Never\u003c/code\u003e 的资源将被部署为 Pod。同时 kubectl 也会检查是否需要触发其他操作，例如记录命令（用来进行回滚或审计）。\u003c/p\u003e\n\u003cp\u003e​\t在 kubectl 判断出要创建一个 Deployment 后，它将使用 \u003ccode\u003eDeploymentV1Beta1\u003c/code\u003e 生成器从我们提供的参数中生成一个 \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/run.go#L59\"\u003e运行时对象\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"api-版本协商与-api-组\"\u003eAPI 版本协商与 API 组\u003c/h3\u003e\n\u003cp\u003e​\t为了更容易地消除字段或者重新组织资源结构，Kubernetes 支持多个 API 版本，每个版本都在不同的 API 路径下，例如 \u003ccode\u003e/api/v1\u003c/code\u003e 或者 \u003ccode\u003e/apis/extensions/v1beta1\u003c/code\u003e。不同的 API 版本表明不同的稳定性和支持级别，更详细的描述可以参考 \u003ca href=\"https://k8smeetup.github.io/docs/reference/api-overview/\"\u003eKubernetes API 概述\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e​\tAPI 组旨在对类似资源进行分类，以便使得 Kubernetes API 更容易扩展。API 的组名在 REST 路径或者序列化对象的 \u003ccode\u003eapiVersion\u003c/code\u003e 字段中指定。例如，Deployment 的 API 组名是 \u003ccode\u003eapps\u003c/code\u003e，最新的 API 版本是 \u003ccode\u003ev1beta2\u003c/code\u003e，这就是为什么你要在 Deployment manifests 顶部输入 \u003ccode\u003eapiVersion: apps/v1beta2\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e​\tkubectl 在生成运行时对象后，开始为它 \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/run.go#L580-L597\"\u003e找到适当的 API 组和 API 版本\u003c/a\u003e，然后 \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/run.go#L598\"\u003e组装成一个版本化客户端\u003c/a\u003e，该客户端知道资源的各种 REST 语义。该阶段被称为版本协商，kubectl 会扫描 \u003ccode\u003eremote API\u003c/code\u003e 上的 \u003ccode\u003e/apis\u003c/code\u003e 路径来检索所有可能的 API 组。由于 kube-apiserver 在 \u003ccode\u003e/apis\u003c/code\u003e 路径上公开了 OpenAPI 格式的规范文档， 因此客户端很容易找到合适的 API。\u003c/p\u003e\n\u003cp\u003e​\t为了提高性能，kubectl \u003ca href=\"https://github.com/kubernetes/kubernetes/blob/7650665059e65b4b22375d1e28da5306536a12fb/pkg/kubectl/cmd/util/factory_client_access.go#L117\"\u003e将 OpenAPI 规范缓存\u003c/a\u003e到了 \u003ccode\u003e~/.kube/cache\u003c/code\u003e 目录。如果你想了解 API 发现的过程，请尝试删除该目录并在运行 kubectl 命令时将 \u003ccode\u003e-v\u003c/code\u003e 参数的值设为最大值，然后你将会看到所有试图找到这些 API 版本的HTTP 请求。参考 \u003ca href=\"https://k8smeetup.github.io/docs/reference/kubectl/cheatsheet/\"\u003ekubectl 备忘单\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e​\t最后一步才是真正地发送 HTTP 请求。一旦请求发送之后获得成功的响应，kubectl 将会根据所需的输出格式打印 success message。\u003c/p\u003e\n\u003ch3 id=\"客户端身份认证\"\u003e客户端身份认证\u003c/h3\u003e\n\u003cp\u003e在发送 HTTP 请求之前还要进行客户端认证，这是之前没有提到的，现在可以来看一下。\u003c/p\u003e\n\u003cp\u003e为了能够成功发送请求，kubectl 需要先进行身份认证。用户凭证保存在 \u003ccode\u003ekubeconfig\u003c/code\u003e 文件中，kubectl 通过以下顺序来找到 kubeconfig 文件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果提供了 \u003ccode\u003e--kubeconfig\u003c/code\u003e 参数， kubectl 就使用 –kubeconfig 参数提供的 kubeconfig 文件。\u003c/li\u003e\n\u003cli\u003e如果没有提供 –kubeconfig 参数，但设置了环境变量 \u003ccode\u003e$KUBECONFIG\u003c/code\u003e，则使用该环境变量提供的 kubeconfig 文件。\u003c/li\u003e\n\u003cli\u003e如果 –kubeconfig 参数和环境变量 \u003ccode\u003e$KUBECONFIG\u003c/code\u003e 都没有提供，kubectl 就使用默认的 kubeconfig 文件 \u003ccode\u003e$HOME/.kube/config\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e解析完 kubeconfig 文件后，kubectl 会确定当前要使用的上下文、当前指向的群集以及与当前用户关联的任何认证信息。如果用户提供了额外的参数（例如 –username），则优先使用这些参数覆盖 kubeconfig 中指定的值。一旦拿到这些信息之后， kubectl 就会把这些信息填充到将要发送的 HTTP 请求头中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ex509 证书使用 \u003ca href=\"https://github.com/kubernetes/client-go/blob/82aa063804cf055e16e8911250f888bc216e8b61/rest/transport.go#L80-L89\"\u003etls.TLSConfig\u003c/a\u003e 发送（包括 CA 证书）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebearer tokens\u003c/code\u003e 在 HTTP 请求头 \u003ccode\u003eAuthorization\u003c/code\u003e 中 \u003ca href=\"https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/transport/round_trippers.go#L314\"\u003e发送\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e用户名和密码通过 HTTP 基本认证 \u003ca href=\"https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/transport/round_trippers.go#L223\"\u003e发送\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eOpenID\u003c/code\u003e 认证过程是由用户事先手动处理的，产生一个像 bearer token 一样被发送的 token。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"小结补充\"\u003e小结补充\u003c/h3\u003e\n\u003cp\u003e​\t如果要对k8s的部署文件进行进一步正确性校验，可以参看这个\u003ca href=\"https://github.com/instrumenta/kubeval\"\u003eKubeval\u003c/a\u003e\u003c/p\u003e","title":"K8s的Pod创建历程"},{"content":"Tekton 入门 术语解释 Cloud Native ​\t云原生是一种软件开发方法，其中应用程序被分解为微服务，这些微服务被打包到容器中，容器在云中动态编排以优化资源利用\nContinuous Delivery ​\t持续交付是一种软件开发实践，团队可以安全、快速、可持续地向用户发布软件变更。\nTekton ​\tTekton 是一个用于创建持续交付系统的开源 kubernetes 原生的框架。你可以使用 tekton 跨多个云提供商或混合环境构建，测试和部署。Tekton 通过抽象出复杂的kubenetes概念和实现细节来简化应用程序管理。它提供了用于声明持续交付管道的 Kubernetes 自定义资源。\n基本构建块 其中Task、TaskRun、Pipeline、PipelineRun、PipelineResource、Condition作为其核心CRD，这里主要介绍它们。\nTask： 定义构建任务，它由一系列有序steps构成。每个step可以定义输入和输出，且可以将上一个step的输出作为下一个step的输入。每个step都会由一个container来执行。\n是 Tekton 中不可分割的最小单位，正如同 Pod 在 Kubernetes 中的概念一样 TaskRun： Task用于定义具体要做的事情，并不会真正的运行，而TaskRun就是真正的执行者，并且会提供执行所需需要的参数，一个TaskRun就是一个Pod。\nPipeline： 顾名思义就是流水线，它由一系列Tasks组成。就像Task中的step一样，上一个Task的输出可以作为下一个Task的输入。\nPipelineRun： Pipeline的实际执行，创建后会创建Pod来执行Task，一个PipelineRun中有多个Task。\nPipelineResource： 主要用于定义Pipeline的资源，常见的如Git地址、Docker镜像等。\nCondition： 它主要是在Pipeline中用于判断的，Task的执行与否通过Condition的判断结果来决定。\nTips： PipelineResource和Condition都会被废弃。但是在低版本中还是会继续使用，所以这里会简单介绍一下。\nStep Step 是 tekton中最小的单元 step = Container\n​\t它相当一个容器在它指定的输入上执行，以产生输出\n1 2 3 4 5 6 7 8 9 10 11 steps: - name: deploy-app image: foo/base-image:2.7 env: - name: API_KEY valueFrom: secretKeyRef: name:\tsecure-properties key: apiKey script: | cloud login -a $(params.api-url) Task 运行一系列容器的一系列步骤 task = pod（k8s）是存在 k8s 中一种自定义资源\n​\t它在 kubernetes 集群上向上执行， Task 中的所有 Step 都可以访问共享工作区。该工作区作为隐式卷安装到端口。Task使用TaskRun执行,TaskRun提供 Task所需要的参数和其他资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 apiVersion: tekton.dev/v1beta1 kind: Task metadata: name: deploy-to-my-awesome-cloud spec: params: - name: api-url default: cloud.con steps: - name: deploy-app image: foo/base-image:2.7 script: | cloud login -a $(params.api-url) 1 2 3 4 5 6 7 8 9 10 apiVersion: tekton.dev/v1beta1 kind: TaskRun metadata: generateName: deploy-to-my-awesome-cloud- spec: params: - name: api-url default: gcp.com taskRef: - name: deploy-to-my-awesome-cloud Pipelines ​\t运行一组 Kuberbetes pod 的 Tekton Task的集合\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 apiVersion: tekton.dev/v1beta1 kind: Pipeline metadata: name: project-pipeline spec: params: - name: api-url - name: cloud-region tasks: - name: clone taskRef: name: git-clone - name: build taskRef: - build runAfter: - clone - name: deploy taskRef: name: deploy runAfter: - build script: | cloud login -a $(params.api-url) -r $(params.cloud-region) 1 2 3 4 5 6 7 8 9 10 11 12 apiVersion: tekton.dev/v1beta1 kind: PipelineRun metadata: generateName: project-pipeline-run- spec: params: - name: api-url value: gcp.com - name: cloud-region value: us-east pipelineRef: - name: project-pipeline Triggers 触发自动调用 pipeline ：如在推送代码 ，提交或创建拉取请求时触发\nTrigger Template（触发器模版） 1 2 3 4 5 6 7 8 9 10 11 apiVersion: triggers.tekton.dev/v1beta1 kind: TriggerTemplate metadata: name: trigger-template spec: resourcetemplates: - apiVersion: tekton.dev/v1beta1 kind: PipelineRun spec: pipelineRef: name: trigger-pipeline Trigger Binding（触发器绑定） 1 2 3 4 5 6 7 8 apiVersion: triggers.tekton.dev/v1beta1 kind: TriggerBinding metadata: name: trigger-binding spec: params: - name: git-repo-url value: $(event.repository.git-repo-url) Event Listeners（事件侦听器） 1 2 3 4 5 6 7 8 9 10 11 12 apiVersion: triggers.tekton.dev/v1beta1 kind: EventListener metadata: name: event-listener spec: serviceAccountName: tekton-robot triggers: - name: event-trigger bindings: - ref: trigger-binding template: ref: trigger-template Tekton 如何运作 ​\t粗略地说，在其核心，Tekton Pipelines 通过包装每个你的Step。更具体地说，Tekton Pipelines 在步骤容器中注入一个二进制文件，该二进制文件在以下情况下执行您指定的命令 系统已准备就绪。\n​\tTekton Pipelines 使用 Kubernetes 注释跟踪管道的状态。 这些注释以表单的形式投影在每个步骤容器内 使用 Kubernetes 向下 API 的文件。 二进制文件密切监视投影文件，并且只会 如果特定批注显示为文件，请启动提供的命令。为 例如，当您要求 Tekton 在一个任务中连续运行两个步骤时， 注入第二步容器的二进制文件将 闲置地等待，直到注释报告第一步容器 已成功完成。\n​\t此外，Tekton Pipelines 会安排一些容器自动运行。 步骤前后的容器，以便支持特定的内置 功能，例如检索输入资源和上传 输出到 Blob 存储解决方案。您可以将他们的运行状态跟踪为 通过任务运行和管道运行。该系统还执行一个数字 在运行步骤之前设置环境的其他操作\n小结 Task- 适用于更简单的工作负载，例如运行测试、lint 或构建 Kaniko 缓存。单个执行在单个中执行 Kubernetes Pod，使用单个磁盘，通常保持简单。Task Pipeline- 适用于复杂的工作负载，例如静态分析，以及测试、构建和部署复杂的项目。 ","permalink":"https://luenci.com/en/posts/tekton-%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"tekton-入门\"\u003eTekton 入门\u003c/h1\u003e\n\u003ch2 id=\"术语解释\"\u003e术语解释\u003c/h2\u003e\n\u003ch3 id=\"cloud-native\"\u003eCloud Native\u003c/h3\u003e\n\u003cp\u003e​\t云原生是一种软件开发方法，其中应用程序被分解为微服务，这些微服务被打包到容器中，容器在云中动态编排以优化资源利用\u003c/p\u003e\n\u003ch3 id=\"continuous-delivery\"\u003eContinuous Delivery\u003c/h3\u003e\n\u003cp\u003e​\t持续交付是一种软件开发实践，团队可以安全、快速、可持续地向用户发布软件变更。\u003c/p\u003e\n\u003ch3 id=\"tekton\"\u003eTekton\u003c/h3\u003e\n\u003cp\u003e​\tTekton 是一个用于创建持续交付系统的开源 kubernetes 原生的框架。你可以使用 tekton 跨多个云提供商或混合环境构建，测试和部署。Tekton 通过抽象出复杂的kubenetes概念和实现细节来简化应用程序管理。它提供了用于声明持续交付管道的 Kubernetes 自定义资源。\u003c/p\u003e\n\u003ch2 id=\"基本构建块\"\u003e基本构建块\u003c/h2\u003e\n\u003cp\u003e    其中Task、TaskRun、Pipeline、PipelineRun、PipelineResource、Condition作为其核心CRD，这里主要介绍它们。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTask：\u003c/strong\u003e 定义构建任务，它由一系列有序steps构成。每个step可以定义输入和输出，且可以将上一个step的输出作为下一个step的输入。每个step都会由一个container来执行。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e是 Tekton 中不可分割的最小单位，正如同 Pod 在 Kubernetes 中的概念一样\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTaskRun：\u003c/strong\u003e Task用于定义具体要做的事情，并不会真正的运行，而TaskRun就是真正的执行者，并且会提供执行所需需要的参数，一个TaskRun就是一个Pod。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePipeline：\u003c/strong\u003e 顾名思义就是流水线，它由一系列Tasks组成。就像Task中的step一样，上一个Task的输出可以作为下一个Task的输入。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePipelineRun：\u003c/strong\u003e Pipeline的实际执行，创建后会创建Pod来执行Task，一个PipelineRun中有多个Task。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePipelineResource：\u003c/strong\u003e 主要用于定义Pipeline的资源，常见的如Git地址、Docker镜像等。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCondition：\u003c/strong\u003e 它主要是在Pipeline中用于判断的，Task的执行与否通过Condition的判断结果来决定。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTips：\u003c/strong\u003e PipelineResource和Condition都会被废弃。但是在低版本中还是会继续使用，所以这里会简单介绍一下。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/image-20230301151952643.png\" alt=\"image-20230301151952643\"  /\u003e\n\u003c/p\u003e","title":"Tekton 入门"},{"content":"分布式12问 原文转载自：分布式夺命12连问 (qq.com)\n分布式理论 1. 说说CAP原则？ CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）这3个基本需求，最多只能同时满足其中的2个。\nCAP原则\n选项 描述 Consistency（一致性） 指数据在多个副本之间能够保持一致的特性（严格的一致性） Availability（可用性） Availability（可用性） 指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据） Partition tolerance（分区容错性） 分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障 2. 为什么CAP不可兼得呢？ 首先对于分布式系统，分区是必然存在的，所谓分区指的是分布式系统可能出现的字区域网络不通，成为孤立区域的的情况。\n那么分区容错性（P)就必须要满足，因为如果要牺牲分区容错性，就得把服务和资源放到一个机器，或者一个“同生共死”的集群，那就违背了分布式的初衷。\n那么满足分区容错的基础上，能不能同时满足一致性和可用性？\n假如现在有两个分区N1和N2，N1和N2分别有不同的分区存储D1和D2，以及不同的服务S1和S2。\n在满足一致性 的时候，N1和N2的数据要求值一样的，D1=D2。 在满足可用性的时候，无论访问N1还是N2，都能获取及时的响应。 假如现在有这样的场景：\n用户访问了N1，修改了D1的数据。 用户再次访问，请求落在了N2。此时D1和D2的数据不一致。 接下来：\n保证一致性：此时D1和D2数据不一致，要保证一致性就不能返回不一致的数据，可用性无法保证。 保证可用性：立即响应，可用性得到了保证，但是此时响应的数据和D1不一致，一致性无法保证。 所以，可以看出，分区容错的前提下，一致性和可用性是矛盾的。\n3. CAP对应的模型和应用？ CA without P CA without P\n理论上放弃P（分区容错性），则C（强一致性）和A（可用性）是可以保证的。实际上分区是不可避免的，严格上CA指的是允许分区后各子系统依然保持CA。\nCA模型的常见应用：\n集群数据库 xFS文件系统 CP without A CP without A\n放弃A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\nCP模型的常见应用：\n分布式数据库 分布式锁 AP wihtout C AP wihtout C\n要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。\nAP模型常见应用：\nWeb缓存 DNS 举个大家更熟悉的例子，像我们熟悉的注册中心ZooKeeper、Eureka、Nacos中：\nZooKeeper 保证的是 CP Eureka 保证的则是 AP Nacos 不仅支持 CP 也支持 AP 4. BASE理论了解吗？ BASE（Basically Available、Soft state、Eventual consistency）是基于CAP理论逐步演化而来的，核心思想是即便不能达到强一致性（Strong consistency），也可以根据应用特点采用适当的方式来达到最终一致性（Eventual consistency）的效果。\nBASE的主要含义：\nBasically Available（基本可用） Basically Available（基本可用） 什么是基本可用呢？假设系统出现了不可预知的故障，但还是能用，只是相比较正常的系统而言，可能会有响应时间上的损失，或者功能上的降级。\nSoft State（软状态） 什么是硬状态呢？要求多个节点的数据副本都是一致的，这是一种“硬状态”。\n软状态也称为弱状态，相比较硬状态而言，允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。\nEventually Consistent（最终一致性） Eventually Consistent（最终一致性） 上面说了软状态，但是不应该一直都是软状态。在一定时间后，应该到达一个最终的状态，保证所有副本保持数据一致性，从而达到数据的最终一致性。这个时间取决于网络延时、系统负载、数据复制方案设计等等因素。\n分布式锁 单体时代，可以直接用本地锁来实现对竞争资源的加锁，分布式环境下就要用到分布式锁了。\n5. 有哪些分布式锁的实现方案呢？ 常见的分布式锁实现方案有三种：MySQL分布式锁、ZooKepper分布式锁、Redis分布式锁。\n5.1 MySQL分布式锁如何实现呢？\n用数据库实现分布式锁比较简单，就是创建一张锁表，数据库对字段作唯一性约束。\n加锁的时候，在锁表中增加一条记录即可；释放锁的时候删除记录就行。\n如果有并发请求同时提交到数据库，数据库会保证只有一个请求能够得到锁。\n这种属于数据库 IO 操作，效率不高，而且频繁操作会增大数据库的开销，因此这种方式在高并发、高性能的场景中用的不多。\n5.2 ZooKeeper如何实现分布式锁？ ZooKeeper也是常见分布式锁实现方法。\nZooKeeper的数据节点和文件目录类似，例如有一个lock节点，在此节点下建立子节点是可以保证先后顺序的，即便是两个进程同时申请新建节点，也会按照先后顺序建立两个节点。\n所以我们可以用此特性实现分布式锁。以某个资源为目录，然后这个目录下面的节点就是我们需要获取锁的客户端，每个服务在目录下创建节点，如果它的节点，序号在目录下最小，那么就获取到锁，否则等待。释放锁，就是删除服务创建的节点。\nZK实际上是一个比较重的分布式组件，实际上应用没那么多了，所以用ZK实现分布式锁，其实相对也比较少。\n5.3 Redis怎么实现分布式锁？ Redis实现分布式锁，是当前应用最广泛的分布式锁实现方式。\nRedis执行命令是单线程的，Redis实现分布式锁就是利用这个特性。\n实现分布式锁最简单的一个命令：setNx(set if not exist)，如果不存在则更新：\n1 setNx resourceName value 加锁了之后如果机器宕机，那我这个锁就无法释放，所以需要加入过期时间，而且过期时间需要和setNx同一个原子操作，在Redis2.8之前需要用lua脚本，但是redis2.8之后redis支持nx和ex操作是同一原子操作。\n1 set resourceName value ex 5 n Redission Redission 当然，一般生产中都是使用Redission客户端，非常良好地封装了分布式锁的api，而且支持RedLock。\n分布式事务 6.什么是分布式事务? 分布式事务是相对本地事务而言的，对于本地事务，利用数据库本身的事务机制，就可以保证事务的ACID特性。\n而在分布式环境下，会涉及到多个数据库。\n分布式事务其实就是将对同一库事务的概念扩大到了对多个库的事务。目的是为了保证分布式系统中的数据一致性。\n分布式事务处理的关键是：\n需要记录事务在任何节点所做的所有动作； 事务进行的所有操作要么全部提交，要么全部回滚。 7.分布式事务有哪些常见的实现方案？ 分布式常见的实现方案有 2PC、3PC、TCC、本地消息表、MQ消息事务、最大努力通知、SAGA事务 等等。\n7.1 说说2PC两阶段提交？ 说到2PC，就不得先说分布式事务中的 XA 协议。\n在这个协议里，有三个角色：\nAP（Application）：应用系统（服务） TM（Transaction Manager）：事务管理器（全局事务管理） RM（Resource Manager）：资源管理器（数据库） XA协议采用两阶段提交方式来管理分布式事务。XA接口提供资源管理器与事务管理器之间进行通信的标准接口。\n两阶段提交的思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情况决定各参与者是否要提交操作还是回滚操作。\n准备阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交\n提交阶段：事务协调器要求每个数据库提交数据，或者回滚数据。 优点：尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持。\n缺点:\n单点问题：事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。 同步阻塞：在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。 数据不一致：两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。 7.2 3PC（三阶段提交）了解吗？ 三阶段提交（3PC）是二阶段提交（2PC）的一种改进版本 ，为解决两阶段提交协议的单点故障和同步阻塞问题。\n三阶段提交有这么三个阶段：CanCommit，PreCommit，DoCommit三个阶段\n![3PC](https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/640-20230221103545241.png\n)CanCommit：准备阶段。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。\nPreCommit：预提交阶段。协调者根据参与者在准备阶段的响应判断是否执行事务还是中断事务，参与者执行完操作之后返回ACK响应，同时开始等待最终指令。\nDoCommit：提交阶段。协调者根据参与者在准备阶段的响应判断是否执行事务还是中断事务：\n如果所有参与者都返回正确的ACK响应，则提交事务 如果参与者有一个或多个参与者收到错误的ACK响应或者超时，则中断事务 如果参与者无法及时接收到来自协调者的提交或者中断事务请求时，在等待超时之后，会继续进行事务提交 可以看出，三阶段提交解决的只是两阶段提交中单体故障和同步阻塞的问题，因为加入了超时机制，这里的超时的机制作用于 预提交阶段 和 提交阶段。如果等待 预提交请求 超时，参与者直接回到准备阶段之前。如果等到提交请求超时，那参与者就会提交事务了。\n无论是2PC还是3PC都不能保证分布式系统中的数据100%一致。\n7.3 TCC了解吗？ TCC（Try Confirm Cancel） ，是两阶段提交的一个变种，针对每个操作，都需要有一个其对应的确认和取消操作，当操作成功时调用确认操作，当操作失败时调用取消操作，类似于二阶段提交，只不过是这里的提交和回滚是针对业务上的，所以基于TCC实现的分布式事务也可以看做是对业务的一种补偿机制。\nTry：尝试待执行的业务。订单系统将当前订单状态设置为支付中，库存系统校验当前剩余库存数量是否大于1，然后将可用库存数量设置为库存剩余数量-1，。\nConfirm：确认执行业务，如果Try阶段执行成功，接着执行Confirm 阶段，将订单状态修改为支付成功，库存剩余数量修改为可用库存数量。 Cancel：取消待执行的业务，如果Try阶段执行失败，执行Cancel 阶段，将订单状态修改为支付失败，可用库存数量修改为库存剩余数量。 TCC 是业务层面的分布式事务，保证最终一致性，不会一直持有资源的锁。\n优点： 把数据库层的二阶段提交交给应用层来实现，规避了数据库的 2PC 性能低下问题 缺点：TCC 的 Try、Confirm 和 Cancel 操作功能需业务提供，开发成本高。TCC 对业务的侵入较大和业务紧耦合，需要根据特定的场景和业务逻辑来设计相应的操作 7.4 本地消息表了解吗？ 本地消息表的核心思想是将分布式事务拆分成本地事务进行处理。\n例如，可以在订单库新增一个消息表，将新增订单和新增消息放到一个事务里完成，然后通过轮询的方式去查询消息表，将消息推送到MQ，库存服务去消费MQ。\n执行流程：\n订单服务，添加一条订单和一条消息，在一个事务里提交 订单服务，使用定时任务轮询查询状态为未同步的消息表，发送到MQ，如果发送失败，就重试发送 库存服务，接收MQ消息，修改库存表，需要保证幂等操作 如果修改成功，调用rpc接口修改订单系统消息表的状态为已完成或者直接删除这条消息 如果修改失败，可以不做处理，等待重试 订单服务中的消息有可能由于业务问题会一直重复发送，所以为了避免这种情况可以记录一下发送次数，当达到次数限制之后报警，人工接入处理；库存服务需要保证幂等，避免同一条消息被多次消费造成数据不一致。\n本地消息表这种方案实现了最终一致性，需要在业务系统里增加消息表，业务逻辑中多一次插入的DB操作，所以性能会有损耗，而且最终一致性的间隔主要有定时任务的间隔时间决定\n7.5 MQ消息事务了解吗？ 消息事务的原理是将两个事务通过消息中间件进行异步解耦。\n订单服务执行自己的本地事务，并发送MQ消息，库存服务接收消息，执行自己的本地事务，乍一看，好像跟本地消息表的实现方案类似，只是省去 了对本地消息表的操作和轮询发送MQ的操作，但实际上两种方案的实现是不一样的。\n消息事务一定要保证业务操作与消息发送的一致性，如果业务操作成功，这条消息也一定投递成功。\n执行流程：\n发送prepare消息到消息中间件 发送成功后，执行本地事务 如果事务执行成功，则commit，消息中间件将消息下发至消费端 如果事务执行失败，则回滚，消息中间件将这条prepare消息删除 消费端接收到消息进行消费，如果消费失败，则不断重试 消息事务依赖于消息中间件的事务消息，例如我们熟悉的RocketMQ就支持事务消息（半消息），也就是只有收到发送方确定才会正常投递的消息。\n这种方案也是实现了最终一致性，对比本地消息表实现方案，不需要再建消息表，对性能的损耗和业务的入侵更小。\n7.6 最大努力通知了解吗？ ​\t最大努力通知相比实现会简单一些，适用于一些对最终一致性实时性要求没那么高的业务，比如支付通知，短信通知。\n以支付通知为例，业务系统调用支付平台进行支付，支付平台进行支付，进行操作支付之后支付平台会去同步通知业务系统支付操作是否成功，如果不成功，会一直异步重试，但是会有一个最大通知次数，如果超过这个次数后还是通知失败，就不再通知，业务系统自行调用支付平台提供一个查询接口，供业务系统进行查询支付操作是否成功。\n执行流程：\n业务系统调用支付平台支付接口， 并在本地进行记录，支付状态为支付中 支付平台进行支付操作之后，无论成功还是失败，同步给业务系统一个结果通知 如果通知一直失败则根据重试规则异步进行重试，达到最大通知次数后，不再通知 支付平台提供查询订单支付操作结果接口 业务系统根据一定业务规则去支付平台查询支付结果 8.你们用什么？能说一下Seata吗？ 我们用比较常用的是Seata——自己去实现分布式事务调度还是比较麻烦的。\nSeata 的设计目标是对业务无侵入，因此它是从业务无侵入的两阶段提交（全局事务）着手，在传统的两阶段上进行改进，他把一个分布式事务理解成一个包含了若干分支事务的全局事务。而全局事务的职责是协调它管理的分支事务达成一致性，要么一起成功提交，要么一起失败回滚。也就是一荣俱荣一损俱损~\nSeata 中存在这么几种重要角色：\nTC（Transaction Coordinator）：事务协调者。管理全局的分支事务的状态，用于全局性事务的提交和回滚。\nTM（Transaction Manager）：事务管理者。用于开启、提交或回滚事务。\nRM（Resource Manager）：资源管理器。用于分支事务上的资源管理，向 TC 注册分支事务，上报分支事务的状态，接收 TC 的命令来提交或者回滚分支事务。\nSeata整体执行流程：\n服务A中的 TM 向 TC 申请开启一个全局事务，TC 就会创建一个全局事务并返回一个唯一的 XID 服务A中的 RM 向 TC 注册分支事务，然后将这个分支事务纳入 XID 对应的全局事务管辖中 服务A开始执行分支事务 服务A开始远程调用B服务，此时 XID 会根据调用链传播 服务B中的 RM 也向 TC 注册分支事务，然后将这个分支事务纳入 XID 对应的全局事务管辖中 服务B开始执行分支事务 全局事务调用处理结束后，TM 会根据有误异常情况，向 TC 发起全局事务的提交或回滚 TC 协调其管辖之下的所有分支事务，决定是提交还是回滚 分布式一致性算法 9.分布式算法paxos了解么 ？ Paxos 有点类似前面说的 2PC，3PC，但比这两种算法更加完善。在很多多大厂都得到了工程实践，比如阿里的 OceanBase 的 分布式数据库， Google 的 chubby 分布式锁 。\nPaxos算法是什么？ Paxos 算法是 基于消息传递 且具有 高效容错特性 的一致性算法，目前公认的解决 分布式一致性问题 最有效的算法之一。\nPaxos算法的工作流程？ 角色 在Paxos中有这么几个角色：\nProposer（提议者） : 提议者提出提案，用于投票表决。 Accecptor（接受者） : 对提案进行投票，并接受达成共识的提案。 Learner（学习者） : 被告知投票的结果，接受达成共识的提案。 在实际中，一个节点可以同时充当不同角色。\n提议者提出提案，提案=编号+value，可以表示为[M,V]，每个提案都有唯一编号，而且编号的大小是趋势递增的。\n算法流程 Paxos算法包含两个阶段，第一阶段Prepare(准备)、第二阶段Accept(接受)。\nPrepare(准备)阶段\n提议者提议一个新的提案 P[Mn,?]，然后向接受者的某个超过半数的子集成员发送编号为Mn的准备请求 如果一个接受者收到一个编号为Mn的准备请求，并且编号Mn大于它已经响应的所有准备请求的编号，那么它就会将它已经批准过的最大编号的提案作为响应反馈给提议者，同时该接受者会承诺不会再批准任何编号小于Mn的提案。 总结一下，接受者在收到提案后，会给与提议者两个承诺与一个应答：\n两个承诺：\n承诺不会再接受提案号小于或等于 Mn 的 Prepare 请求 承诺不会再接受提案号小于Mn 的 Accept 请求 一个应答：\n不违背以前作出的承诺的前提下，回复已经通过的提案中提案号最大的那个提案所设定的值和提案号Mmax，如果这个值从来没有被任何提案设定过，则返回空值。如果不满足已经做出的承诺，即收到的提案号并不是决策节点收到过的最大的，那允许直接对此 Prepare 请求不予理会。 Accept(接受)阶段 如果提议者收到来自半数以上的接受者对于它发出的编号为Mn的准备请求的响应，那么它就会发送一个针对[Mn,Vn]的接受请求给接受者，注意Vn的值就是收到的响应中编号最大的提案的值，如果响应中不包含任何提案，那么它可以随意选定一个值。 如果接受者收到这个针对[Mn,Vn]提案的接受请求，只要该接受者尚未对编号大于Mn的准备请求做出响应，它就可以通过这个提案。 当提议者收到了多数接受者的接受应答后，协商结束，共识决议形成，将形成的决议发送给所有学习节点进行学习。\n所以Paxos算法的整体详细流程如下：\n算法的流程模拟，可以查看参考[13]。\nPaxos算法有什么缺点吗？怎么优化？ 前面描述的可以称之为Basic Paxos 算法，在单提议者的前提下是没有问题的，但是假如有多个提议者互不相让，那么就可能导致整个提议的过程进入了死循环。\nLamport 提出了 Multi Paxos 的算法思想。\nMulti Paxos算法思想，简单说就是在多个提议者的情况下，选出一个Leader（领导者），由领导者作为唯一的提议者，这样就可以解决提议者冲突的问题。\n10.说说Raft算法？ Raft算法是什么？ Raft 也是一个 一致性算法，和 Paxos 目标相同。但它还有另一个名字 - 易于理解的一致性算法。Paxos 和 Raft 都是为了实现 一致性 产生的。这个过程如同选举一样，参选者 需要说服 大多数选民 (Server) 投票给他，一旦选定后就跟随其操作。Paxos 和 Raft 的区别在于选举的 具体过程 不同。\nRaft算法的工作流程？ Raft算法的角色 Raft 协议将 Server 进程分为三种角色：\nLeader（领导者） Follower（跟随者） Candidate（候选人） 就像一个民主社会，领导者由跟随者投票选出。刚开始没有 领导者，所有集群中的 参与者 都是 跟随者。\n那么首先开启一轮大选。在大选期间 所有跟随者 都能参与竞选，这时所有跟随者的角色就变成了 候选人，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除 领导者 的 候选人 又变回 跟随者 服从领导者领导。\n这里提到一个概念 「任期」，用术语 Term 表达。\n三类角色的变迁图如下：\nLeader选举过程 Raft 使用心跳（heartbeat）触发Leader选举。当Server启动时，初始化为Follower。Leader向所有Followers周期性发送heartbeat。如果Follower在选举超时时间内没有收到Leader的heartbeat，就会等待一段随机的时间后发起一次Leader选举。\nFollower将其当前term加一然后转换为Candidate。它首先给自己投票并且给集群中的其他服务器发送 RequestVote RPC 。结果有以下三种情况：\n赢得了多数（超过1/2）的选票，成功选举为Leader； 收到了Leader的消息，表示有其它服务器已经抢先当选了Leader； 没有Server赢得多数的选票，Leader选举失败，等待选举时间超时（Election Timeout）后发起下一次选举。 选出 Leader 后，Leader 通过 定期 向所有 Follower 发送 心跳信息 维持其统治。若 Follower 一段时间未收到 Leader 的 心跳，则认为 Leader 可能已经挂了，然后再次发起 选举 过程。\n分布式设计 11.说说什么是幂等性？ 什么是幂等性？\n幂等性是一个数学概念，用在接口上：用在接口上就可以理解为：同一个接口，多次发出同一个请求，请求的结果是一致的。\n简单说，就是多次调用如一次。\n什么是幂等性问题？\n在系统的运行中，可能会出现这样的问题：\n用户在填写某些form表单时，保存按钮不小心快速点了两次，表中竟然产生了两条重复的数据，只是id不一样。 开发人员在项目中为了解决接口超时问题，通常会引入了重试机制。第一次请求接口超时了，请求方没能及时获取返回结果（此时有可能已经成功了），于是会对该请求重试几次，这样也会产生重复的数据。 mq消费者在读取消息时，有时候会读取到重复消息，也会产生重复的数据。 这些都是常见的幂等性问题。\n在分布式系统里，只要下游服务有写（保存、更新）的操作，都有可能会产生幂等性问题。\nPS:幂等和防重有些不同，防重强调的防止数据重复，幂等强调的是多次调用如一次，防重包含幂等。\n怎么保证接口幂等性？ insert前先select\n在保存数据的接口中，在insert前，先根据requestId等字段先select一下数据。如果该数据已存在，则直接返回，如果不存在，才执行 insert操作。\n加唯一索引\n加唯一索引是个非常简单但很有效的办法，如果重复插入数据的话，就会抛出异常，为了保证幂等性，一般需要捕获这个异常。\n如果是java程序需要捕获：DuplicateKeyException异常，如果使用了spring框架还需要捕获：MySQLIntegrityConstraintViolationException异常。\n加悲观锁\n更新逻辑，比如更新用户账户余额，可以加悲观锁，把对应用户的哪一行数据锁住。同一时刻只允许一个请求获得锁，其他请求则等待。\n1 select * from user id=123 for update; 这种方式有一个缺点，获取不到锁的请求一般只能报失败，比较难保证接口返回相同值。\n加乐观锁\n更新逻辑，也可以用乐观锁，性能更好。可以在表中增加一个timestamp或者version字段，例如version:\n在更新前，先查询一下数据，将version也作为更新的条件，同时也更新version：\n1 update user set amount=amount+100,version=version+1 where id=123 and version=1; 更新成功后，version增加，重复更新请求进来就无法更新了。\n建防重表\n有时候表中并非所有的场景都不允许产生重复的数据，只有某些特定场景才不允许。这时候，就可以使用防重表的方式。\n例如消息消费中，创建防重表，存储消息的唯一ID，消费时先去查询是否已经消费，已经消费直接返回成功。\n状态机\n有些业务表是有状态的，比如订单表中有：1-下单、2-已支付、3-完成、4-撤销等状态，可以通过限制状态的流动来完成幂等。\n分布式锁\n直接在数据库上加锁的做法性能不够友好，可以使用分布式锁的方式，目前最流行的分布式锁实现是通过Redis，具体实现一般都是使用Redission框架。\ntoken机制\n请求接口之前，需要先获取一个唯一的token，再带着这个token去完成业务操作，服务端根据这个token是否存在，来判断是否是重复的请求。\n分布式限流 12.你了解哪些限流算法？ 计数器 计数器比较简单粗暴，比如我们要限制1s能够通过的请求数，实现的思路就是从第一个请求进来开始计时，在接下来的1s内，每个请求进来请求数就+1，超过最大请求数的请求会被拒绝，等到1s结束后计数清零，重新开始计数。\n这种方式有个很大的弊端：比如前10ms已经通过了最大的请求数，那么后面的990ms的请求只能拒绝，这种现象叫做“突刺现象”。\n漏桶算法 就是桶底出水的速度恒定，进水的速度可能快慢不一，但是当进水量大于出水量的时候，水会被装在桶里，不会直接被丢弃；但是桶也是有容量限制的，当桶装满水后溢出的部分还是会被丢弃的。\n算法实现：可以准备一个队列来保存暂时处理不了的请求，然后通过一个线程池定期从队列中获取请求来执行。\n令牌桶算法\n令牌桶就是生产访问令牌的一个地方，生产的速度恒定，用户访问的时候当桶中有令牌时就可以访问，否则将触发限流。\n实现方案：Guava RateLimiter限流\nGuava RateLimiter是一个谷歌提供的限流，其基于令牌桶算法，比较适用于单实例的系统。\n参考链接： [1] . 《从Paxos到Zookeeper 分布式一致性原理与实践》 [2]. 分布式理论(一) - CAP定理：https://juejin.cn/post/6844903621490901006 [3]. 分布式理论(二) - BASE理论 ：https://juejin.cn/post/6844903621495095304 [3]. 分布式理论(二) - BASE理论 ：https://juejin.cn/post/6844903621495095304 [4]. 分布式理论(三) - 2PC协议：https://juejin.cn/post/6844903621495095309 [5] . CAP和BASE理论了解么？可以结合实际案例说下不：https://juejin.cn/post/6898288789371027470 [6] 从分布式事务解决到Seata使用，一梭子给你整明白了：https://juejin.cn/post/6944882663148748807 [7]. 高并发下如何保证接口的幂等性?：https://juejin.cn/post/6944559294939398158) [8]. 分布式理论(三) - 2PC协议 ：https://juejin.cn/post/6844903621495095309 [9]. 再有人问你分布式锁，这篇文章扔给他：https://juejin.cn/post/6844903688088059912) [10]. 分布式理论(五) - 一致性算法Paxos ：https://juejin.cn/post/6844903621499289613) [11]. 《分布式系统技术及其案例分析》 [12].不就是分布式事务，这下彻底清楚了😎：https://juejin.cn/post/7008939082579443748) [13].诸葛亮 VS 庞统，拿下 Paxos 共识算法：http://www.passjava.cn/#/03.Distributed/05.诸葛VS庞统，拿下Paxos?id=诸葛亮-vs-庞统，拿下-paxos-共识算法 [14].http://icyfenix.cn/distribution/consensus/paxos.html\n","permalink":"https://luenci.com/en/posts/%E5%88%86%E5%B8%83%E5%BC%8F12%E9%97%AE/","summary":"\u003ch1 id=\"分布式12问\"\u003e分布式12问\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文转载自：\u003ca href=\"https://mp.weixin.qq.com/s/qPUnyjXOe-4bwvwJ-PPe7A\"\u003e分布式夺命12连问 (qq.com)\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"分布式理论\"\u003e分布式理论\u003c/h1\u003e\n\u003ch2 id=\"1-说说cap原则\"\u003e1. 说说CAP原则？\u003c/h2\u003e\n\u003cp\u003eCAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）这3个基本需求，最多只能同时满足其中的2个。\u003c/p\u003e","title":"分布式12问"},{"content":"CMDB介绍 CMDB含义 CMDB代表配置管理数据库，通常被称为任何ITSM系统的心脏。\n​\t简而言之，CMDB是一个存储库，用于存储有关构成IT基础架构的组件的信息。 这些组件通常称为CI（可配置项）。 据ITIL称，CI是为交付IT服务而需要进行管理的任何资产。\n通常，CMDB包括CI的列表，它们的属性以及它们之间的关系。\nCMDB的核心功能之一是支持服务管理流程，主要包括：事件，问题，变更，发布和资产管理。\nCMDB如何工作？ 如前所述，CMDB是数据库。 它的独特之处在于它包含配置项的信息和关系，通常以列表的形式表示。\n配置管理系统（CMS）负责管理此类CI所需的技术能力，该管理系统是可以具有多个CMDB的逻辑数据模型。\n在组织中，通常发现CMDB是 ITSM解决方案，为资产和配置管理提供支持。\nCMDB提供了查看和使用资产和可配置项目的通用场所。 该信息通常与其他ITSM流程（事件，问题和变更）结合使用，以创建有意义的关系。\n使用发现和导出工具填充CMDB中的数据。 在Motadata ServiceOps ITSM平台中，我们支持无代理和基于代理的发现以填充CMDB。\n由于数据量巨大，以行的形式，很少有人直接访问CMDB。 在Motadata ServiceOps ITSM中，用户可以使用报告模块将其CMDB数据有意义地组织到报告中。\nCMDB用处 CMDB是所有IT资产的参考点 CMDB是所有硬件和软件资产的中央数据库 CMDB允许跟踪IT基础架构中的更改 如前所述，CMDB 通常作为 ITSM 解决方案的一部分存在。 在 Motadata ServiceOps ITSM 中，变更管理与 CMDB 紧密集成，允许使用变更模型跟踪变更。 CMDB允许跟踪IT基础架构中的更改 如前所述，CMDB 通常作为 ITSM 解决方案的一部分存在。 在 Motadata ServiceOps ITSM 中，变更管理与 CMDB 紧密集成，允许使用变更模型跟踪变更。 CMDB有助于知识管理过程 强大的知识管理需要高质量的数据输入。 使用适当的CMDB，可以在知识库中建立大量解决方案，因为：\nCMDB具有外来资产与事件，问题和变更管理的关系记录，允许对任何问题进行根本原因分析。 它维护对资产所做的所有更改的日志，以使技术人员能够识别不良更改。 CMDB保存资产的属性详细信息，使技术人员可以方便地访问它们。 CMDB有助于ITSM流程 当针对资产创建故障单时，通常将其与CMDB中的CI记录相关联。 该协会通过问题和变更管理继续发挥着至关重要的作用。 CMDB与资产管理 ​\t谈论CMDB和资产管理引起了很多混乱，因为这两个术语在概念上是相关的。 但是有明显的区别。\n当资产在IT环境中处于活动状态时，CMDB专注于用于管理资产的信息。 它涉及识别资产的组成，用途以及与其他资产的关联方式。\n资产管理是一组过程，例如采购管理，硬件资产管理，软件许可证管理，合同管理等，用于管理从采购到报废的资产的整个生命周期。\nCMDB与资产管理之间的主要区别在于，CMDB将资产包括为配置项（CI），而在资产管理中，资产是对企业具有潜在财务价值的单个元素。\nCMDB的目的是对组织中的所有IT资产有一个全面而正确的视图。 这使组织可以在一个地方管理所有资产，而不必分别处理每个资产。 这使CMDB成为建立有效资产管理策略的重要工具。\nCMDB管理信息的分类 固定信息 很多数据都可以通过一些程序，或者是自动化的手段进行自动的录入，几乎是不会变的，但需要有一个比较好的规范，比如像机房或者交换机这样一些信息，自动化工具是抽取不出来的，所以我们采用了一个变通的方法，统一交换机的命名规范，统一采用机房+机柜的命名规范，然后通过脚本抓包的方式把网络结构还原出来。如果主机也是基于这样的规范命名的话，甚至还可以把机柜还原出来。 可变信息 人员信息：包括像联系方式的等信息，主要是为监控系统提供相应的数据； 状态信息：包括资源上线状况、下线状况，主要是为自动化上线提供相应的信息； 环境信息：包括生产环境还是测试的环境，主要是为监控系统及自动化系统提供相应的信息； 项目信息：在跟一些业务系统做一对接时，项目信息是非常重要的，比如说业务系统需要知道某一个项目有哪一些IP都需要从这里面取数据，同时也是自动化系统的支撑，有了项目归属，服务器才知道应该去做哪些部署。 CMDB的挑战 来自各种来源的数据聚合以填充CMDB可能会非常昂贵。 由于CMDB是组织的一部分，并且组织倾向于发展和变化，因此使CMDB保持最新是一个挑战。 仅仅拥有数据是没有用的。 一个人必须获得意义。 这就是为什么CMDB通常与其他工具（如ITSM或独立的报告工具）结合使用的原因。 拥有多个工具会大大增加成本。 幸运的是，Motadata ServiceOps ITSM具有内置的报告工具，可用于分析CMDB。 CMDB的价值 按照CMDB不同层来说：\n接口层的价值 支撑整个运维平台的建设，尽量做到自动化，中心化的管理。 展示层的价值 通过一个展示就很方便地知道我现在的物理服务器，虚拟机等的比例是多少，亦或者可以知道我们每个机柜的容量是多少，只要数据是准确的，有价值的，基于这些数据，我们就可以做出非常多的组合。 按照通用的运维工作的价值维度来说：\n稳定 信息的维护越少人工干预，就越稳定。 效率 如果按照中心化的思路去做CMDB话，有很多信息就不需要多处变更了，从这个维度来说，也就提高了我们的效率，提高效率的同时也保证整个系统的稳定，因为人工操作难免都会出现一些问题的。 成本 我们可以根据CPU和内存去推算我的这个月这台服务器支出是多少，有了这些数据就可以得到每个月的机房支出，计算资源利用率。那么就可以很方便地进行。 涉及的工具 Ansible ​\t简单的自动化IT工具。这个工具的目标有这么几项：自动化部署APP；自动化管理配置项；自动化的持续交互；自动化的（AWS）云服务管理。所有的这几个目标从本质上来说都是在一个台或者几台服务器上，执行一系列的命令而已。\nSALTSTACK ​\t一种全新的基础设施管理方式，部署轻松，在几分钟内可运行起来，扩展性好，很容易管理上万台服务器，速度够快，服务器之间秒级通讯。\n底层采用动态的连接总线，使其可以用于编配，远程执行， 配置管理等等。\n参考链接 💬1 - 什么是CMDB？ | 它为什么如此重要？ | 元数据 (motadata.com) CMDB是什么 · DevOps (gitbooks.io) ","permalink":"https://luenci.com/en/posts/cmdb%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"cmdb介绍\"\u003eCMDB介绍\u003c/h1\u003e\n\u003ch2 id=\"cmdb含义\"\u003eCMDB含义\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCMDB代表配置管理数据库，通常被称为任何ITSM系统的心脏。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/CMDB-Diagram-1030x539-1.png\" alt=\"CMDB 图\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e​\t简而言之，CMDB是一个存储库，用于存储有关构成IT基础架构的组件的信息。 这些组件通常称为CI（可配置项）。 据ITIL称，CI是为交付IT服务而需要进行管理的任何资产。\u003c/p\u003e\n\u003cp\u003e通常，CMDB包括CI的列表，它们的属性以及它们之间的关系。\u003c/p\u003e\n\u003cp\u003eCMDB的\u003cstrong\u003e核心功能之一是支持服务管理流程\u003c/strong\u003e，主要包括：事件，问题，变更，发布和资产管理。\u003c/p\u003e","title":"CMDB 介绍"},{"content":"回溯算法实现（DFS） 回溯算法其实就是我们常说的 DFS 算法，本质上就是一种暴力穷举算法\n递归遍历二叉树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def back_track(nums, track, res): # 结束条件 if len(nums)== len(track): # res.extend(track) # 正常 res.append(track)# 不正常 return None # 遍历选择列表 for num in nums: if num in track: continue track.append(num) back_track(nums, track.copy(), res) track.pop() return None if __name__ == \u0026#39;__main__\u0026#39;: nums =[1, 2, 3] track =[] res =[] back_track(nums, track, res) print(res) 某种程度上说，动态规划的暴力求解阶段就是回溯算法。只是有的问题具有重叠子问题性质，可以用 dp table 或者备忘录优化，将递归树大幅剪枝，这就变成了动态规划。而今天的两个问题，都没有重叠子问题，也就是回溯算法问题了，复杂度非常高是不可避免的。 LRU（Least recently used）算法实现 LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。\n算法步骤 新数据插入到链表头部 每当缓存命中（即缓存数据被访问），则将数据移到链表头部 当链表满的时候，将链表尾部的数据丢弃。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #!/usr/bin/env python # -*- coding: utf-8 -*- # 1. 新数据插入到链表头部 # 2. 每当缓存命中（即缓存数据被访问），则将数据移到链表头部 # 3. 当链表满的时候，将链表尾部的数据丢弃 from collections import deque class Lru(object): def __init__(self, queen_length: int): self.queen_length = queen_length self.queen = deque(maxlen=self.queen_length) def get_or_put(self, element): # assert len(self.queen) == 0, \u0026#34;Queen is Empty.\u0026#34; try: # 命中元素 index = self.queen.index(element) return self.queen[index] except ValueError: self.queen = self._put(element) return self.get_or_put(element) def _put(self, element): # deque 自带了增加淘汰策略，暂不用考虑队满和队空的情况 self.queen.appendleft(element) return self.queen if __name__ == \u0026#39;__main__\u0026#39;: lru = Lru(3) res = lru.get_or_put(3) print(res) print(lru.queen) ","permalink":"https://luenci.com/en/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%92%8Clru/","summary":"\u003ch1 id=\"回溯算法实现dfs\"\u003e回溯算法实现（DFS）\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e回溯算法其实就是我们常说的 DFS 算法，本质上就是一种暴力穷举算法\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"递归遍历二叉树\"\u003e递归遍历二叉树\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eback_track\u003c/span\u003e(nums, track, res):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 结束条件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e len(nums)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e len(track):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# res.extend(track) # 正常\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eappend(track)\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 不正常\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 遍历选择列表\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e num \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e nums:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e num \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e track:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        track\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eappend(num)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tback_track(nums, track\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ecopy(), res)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\ttrack\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epop()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    nums \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\ttrack \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e[]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tres \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e[]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tback_track(nums, track, res)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tprint(res)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e某种程度上说，动态规划的暴力求解阶段就是回溯算法。只是有的问题具有重叠子问题性质，可以用 dp table 或者备忘录优化，将递归树大幅剪枝，这就变成了动态规划。而今天的两个问题，都没有重叠子问题，也就是回溯算法问题了，复杂度非常高是不可避免的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"lruleast-recently-used算法实现\"\u003eLRU（Least recently used）算法实现\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eLRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。\u003c/p\u003e","title":"回溯算法和LRU"},{"content":"linux 网络模型 概念说明 在进行解释之前，首先要说明几个概念：\n用户空间和内核空间 进程切换 进程的阻塞 文件描述符 缓存 I/O 用户空间与内核空间 ​\t现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。\n​\t针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间。\n而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。\n进程切换 ​\t为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。\n从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：\n保存处理机上下文，包括程序计数器和其他寄存器。 更新PCB信息。 把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。 选择另一个进程执行，并更新其PCB。 更新内存管理的数据结构。 恢复处理机上下文。 总而言之就是很耗资源，具体的可以参考这篇文章：进程切换\n进程的阻塞 ​\t正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。当进程进入阻塞状态，是不占用CPU资源的。\n文件描述符fd ​\t文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。\n​\t文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。\n缓存 I/O ​\t缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的**页缓存（ page cache ）**中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。\n缓存 I/O 的缺点： 数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。\nIO拷贝 DMA 负责内核间的 IO 传输，CPU 负责内核和应用间的 IO 传输。\n更多详情见：一文彻底揭秘操作系统之「零拷贝」！ - 腾讯云开发者社区-腾讯云 (tencent.com)\nCPU COPY ​\t通过计算机的组成原理我们知道, 内存的读写操作是需要 CPU 的协调数据总线,地址总线和控制总线来完成的因此在\u0026quot;拷贝\u0026quot;发生的时候,往往需要 CPU 暂停现有的处理逻辑,来协助内存的读写，这种我们称为 CPU COPY。CPU COPY 不但占用了 CPU 资源,还占用了总线的带宽。\nDMA COPY ​\tDMA(DIRECT MEMORY ACCESS) 是现代计算机的重要功能，它有一个重要特点：当需要与外设进行数据交换时, CPU 只需要初始化这个动作便可以继续执行其他指令,剩下的数据传输的动作完全由DMA来完成可以看到 DMA COPY 是可以避免大量的 CPU 中断的\nIO模式 ​\t刚才说了，对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：\n等待数据准备 (Waiting for the data to be ready) 将数据从内核拷贝到进程中 (Copying the data from the kernel to the process) 正式因为这两个阶段，linux系统产生了下面五种网络模式的方案。\n阻塞 I/O（blocking IO） 非阻塞 I/O（nonblocking IO） I/O 多路复用（ IO multiplexing） 信号驱动 I/O（ signal driven IO） 异步 I/O（asynchronous IO） 注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。\n阻塞 I/O（blocking IO） ​\t在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样： ​\t当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：\n准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。 比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。 ​\t当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。\n非阻塞 I/O（nonblocking IO） ​\tlinux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子： ​\t当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度io讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。\n所以，nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。\nI/O 多路复用（ IO multiplexing） ​\tIO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。\n​\t当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。\n​\t所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。\n​\t这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。\n​\t所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。）\n​\t在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。\nI/O 多路复用之select、poll、epoll详解 ​\tselect，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。（这里啰嗦下）\nselect 1 int select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。\nselect目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。\npoll 1 int poll (struct pollfd *fds, unsigned int nfds, int timeout); ​\t不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。\n1 2 3 4 5 struct pollfd { int fd; /* file descriptor */ short events; /* requested events to watch */ short revents; /* returned events witnessed */ }; ​\tpollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。\n​\t从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。\npoll无最大文件描述符数量的限制。\n​\tpoll和select同样存在一个缺点：包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件\t描述符是否就绪，其开销也随着文件描述符数量增加而线性增大。\n将用户态传入的数组拷贝到内核空间\n然后查询每个fd对应设备状态：\n若设备就绪 在设备等待队列中加入一项继续遍历\n若遍历完所有fd后，都没发现就绪的设备 挂起当前进程，直到设备就绪或主动超时，被唤醒后它又再次遍历fd。这个过程经历多次无意义遍历。 无最大连接数限制，因其基于链表存储，缺点：\n大量fd数组被整体复制于用户态和内核地址空间间，而不管是否有意义 若报告了fd后，没有被处理，则下次poll时会再次报告该fd epoll ​\tepoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。\nepoll操作过程 epoll操作过程需要三个接口，分别如下：\n1 2 3 int epoll_create(int size)；//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大 int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)； int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout); 1. int epoll_create(int size); 创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。 当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。\n2. int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；\n函数是对指定描述符fd执行op操作。\nepfd：是epoll_create()的返回值。 op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。 fd：是需要监听的fd（文件描述符） epoll_event：是告诉内核需要监听什么事，struct epoll_event结构如下： 1 2 3 4 struct epoll_event { __uint32_t events; /* Epoll events */ epoll_data_t data; /* User data variable */ }; events可以是以下几个宏的集合：\nEPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）； EPOLLOUT：表示对应的文件描述符可以写； EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）； EPOLLERR：表示对应的文件描述符发生错误； EPOLLHUP：表示对应的文件描述符被挂断； EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。 EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里 3. int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n等待epfd上的io事件，最多返回maxevents个事件。\n​\t参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。\n工作模式 epoll对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT模式是默认模式，LT模式与ET模式的区别如下： LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。 ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。\n1. LT模式 ​\tLT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。\n2. ET模式 ​\tET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)\n​\tET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。\n3. 总结 假如有这样一个例子：\n我们已经把一个用来从管道中读取数据的文件句柄(RFD)添加到epoll描述符 这个时候从管道的另一端被写入了2KB的数据 调用epoll_wait(2)，并且它会返回RFD，说明它已经准备好读取操作 然后我们读取了1KB的数据 调用epoll_wait(2)…… LT模式：\n​\t如果是LT模式，那么在第5步调用epoll_wait(2)之后，仍然能受到通知。\nET模式：\n​\t如果我们在第1步将RFD添加到epoll描述符的时候使用了EPOLLET标志，那么在第5步调用epoll_wait(2)之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 ET 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。\n​\t当使用epoll的ET模型来工作时，当产生了一个EPOLLIN事件后，读数据的时候需要考虑的是当recv()返回的大小如果等于请求的大小，那么很有可能是缓冲区还有数据未读完，也意味着该次事件还没有处理完，所以还需要再次读取：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 while(rs){ buflen = recv(activeevents[i].data.fd, buf, sizeof(buf), 0); if(buflen \u0026lt; 0){ // 由于是非阻塞的模式,所以当errno为EAGAIN时,表示当前缓冲区已无数据可读 // 在这里就当作是该次事件已处理处. if(errno == EAGAIN){ break; } else{ return; } } else if(buflen == 0){ // 这里表示对端的socket已正常关闭. } if(buflen == sizeof(buf){ rs = 1; // 需要再次读取 } else{ rs = 0; } } Linux中的EAGAIN含义\n​\tLinux环境下开发经常会碰到很多错误(设置errno)，其中EAGAIN是其中比较常见的一个错误(比如用在非阻塞操作中)。 ​\t从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。\n​\t例如，以 O_NONBLOCK的标志打开文件/socket/FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。 ​\t又例如，当一个系统调用(比如fork)因为没有足够的资源(比如虚拟内存)而执行失败，返回EAGAIN提示其再调用一次(也许下次就能成功)。\n代码演示 下面是一段不完整的代码且格式不对，意在表述上面的过程，去掉了一些模板代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 #define IPADDRESS \u0026#34;127.0.0.1\u0026#34; #define PORT 8787 #define MAXSIZE 1024 #define LISTENQ 5 #define FDSIZE 1000 #define EPOLLEVENTS 100 listenfd = socket_bind(IPADDRESS,PORT); struct epoll_event events[EPOLLEVENTS]; //创建一个描述符 epollfd = epoll_create(FDSIZE); //添加监听描述符事件 add_event(epollfd,listenfd,EPOLLIN); //循环等待 for ( ; ; ){ //该函数返回已经准备好的描述符事件数目 ret = epoll_wait(epollfd,events,EPOLLEVENTS,-1); //处理接收到的连接 handle_events(epollfd,events,ret,listenfd,buf); } //事件处理函数 static void handle_events(int epollfd,struct epoll_event *events,int num,int listenfd,char *buf) { int i; int fd; //进行遍历;这里只要遍历已经准备好的io事件。num并不是当初epoll_create时的FDSIZE。 for (i = 0;i \u0026lt; num;i++) { fd = events[i].data.fd; //根据描述符的类型和事件类型进行处理 if ((fd == listenfd) \u0026amp;\u0026amp;(events[i].events \u0026amp; EPOLLIN)) handle_accpet(epollfd,listenfd); else if (events[i].events \u0026amp; EPOLLIN) do_read(epollfd,fd,buf); else if (events[i].events \u0026amp; EPOLLOUT) do_write(epollfd,fd,buf); } } //添加事件 static void add_event(int epollfd,int fd,int state){ struct epoll_event ev; ev.events = state; ev.data.fd = fd; epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,\u0026amp;ev); } //处理接收到的连接 static void handle_accpet(int epollfd,int listenfd){ int clifd; struct sockaddr_in cliaddr; socklen_t cliaddrlen; clifd = accept(listenfd,(struct sockaddr*)\u0026amp;cliaddr,\u0026amp;cliaddrlen); if (clifd == -1) perror(\u0026#34;accpet error:\u0026#34;); else { printf(\u0026#34;accept a new client: %s:%d\\n\u0026#34;,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port); //添加一个客户描述符和事件 add_event(epollfd,clifd,EPOLLIN); } } //读处理 static void do_read(int epollfd,int fd,char *buf){ int nread; nread = read(fd,buf,MAXSIZE); if (nread == -1) { perror(\u0026#34;read error:\u0026#34;); close(fd); //记住close fd delete_event(epollfd,fd,EPOLLIN); //删除监听 } else if (nread == 0) { fprintf(stderr,\u0026#34;client close.\\n\u0026#34;); close(fd); //记住close fd delete_event(epollfd,fd,EPOLLIN); //删除监听 } else { printf(\u0026#34;read message is : %s\u0026#34;,buf); //修改描述符对应的事件，由读改为写 modify_event(epollfd,fd,EPOLLOUT); } } //写处理 static void do_write(int epollfd,int fd,char *buf) { int nwrite; nwrite = write(fd,buf,strlen(buf)); if (nwrite == -1){ perror(\u0026#34;write error:\u0026#34;); close(fd); //记住close fd delete_event(epollfd,fd,EPOLLOUT); //删除监听 }else{ modify_event(epollfd,fd,EPOLLIN); } memset(buf,0,MAXSIZE); } //删除事件 static void delete_event(int epollfd,int fd,int state) { struct epoll_event ev; ev.events = state; ev.data.fd = fd; epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,\u0026amp;ev); } //修改事件 static void modify_event(int epollfd,int fd,int state){ struct epoll_event ev; ev.events = state; ev.data.fd = fd; epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,\u0026amp;ev); } //注：另外一端我就省了 epoll总结 ​\t在 select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知。(此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在。)\nepoll的优点主要是以下几个方面：\n监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max查看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对 于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。\nIO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。\n如果没有大量的idle-connection或者dead-connection，epoll的效率并不会比select/poll高很多，但是当遇到大量的idle-connection，就会发现epoll的效率大大高于select/poll\n异步 I/O（asynchronous IO） Linux下的asynchronous IO其实用得很少。先看一下它的流程： ​\t用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。\n总结 blocking和non-blocking的区别 ​\t调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。\nsynchronous IO和asynchronous IO的区别 在说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。POSIX的定义是这样子的：\nA synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes; An asynchronous I/O operation does not cause the requesting process to be blocked ​\t两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。\n​\t有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。\n​\t而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。\n五种 IO 模型的比较 ​\t通过上面的图片，可以发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。\n参考链接 一文搞懂select、poll和epoll区别 - 知乎 (zhihu.com)\n一文彻底揭秘操作系统之「零拷贝」！ - 腾讯云开发者社区-腾讯云 (tencent.com)\nlinux epoll模型 | 申艳超-博客 (shenyanchao.cn)\n","permalink":"https://luenci.com/en/posts/linux-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/","summary":"\u003ch1 id=\"linux-网络模型\"\u003elinux 网络模型\u003c/h1\u003e\n\u003ch2 id=\"概念说明\"\u003e概念说明\u003c/h2\u003e\n\u003cp\u003e在进行解释之前，首先要说明几个概念：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户空间和内核空间\u003c/li\u003e\n\u003cli\u003e进程切换\u003c/li\u003e\n\u003cli\u003e进程的阻塞\u003c/li\u003e\n\u003cli\u003e文件描述符\u003c/li\u003e\n\u003cli\u003e缓存 I/O\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"用户空间与内核空间\"\u003e用户空间与内核空间\u003c/h3\u003e\n\u003cp\u003e​\t现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。\u003c/p\u003e\n\u003cp\u003e​\t针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为\u003cstrong\u003e内核空间\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为\u003cstrong\u003e用户空间\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"进程切换\"\u003e进程切换\u003c/h3\u003e\n\u003cp\u003e​\t为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。\u003c/p\u003e\n\u003cp\u003e从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e保存处理机上下文，包括程序计数器和其他寄存器。\u003c/li\u003e\n\u003cli\u003e更新PCB信息。\u003c/li\u003e\n\u003cli\u003e把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。\u003c/li\u003e\n\u003cli\u003e选择另一个进程执行，并更新其PCB。\u003c/li\u003e\n\u003cli\u003e更新内存管理的数据结构。\u003c/li\u003e\n\u003cli\u003e恢复处理机上下文。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e总而言之就是很耗资源\u003c/strong\u003e，具体的可以参考这篇文章：\u003ca href=\"http://guojing.me/linux-kernel-architecture/posts/process-switch/\"\u003e进程切换\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"进程的阻塞\"\u003e进程的阻塞\u003c/h3\u003e\n\u003cp\u003e​\t正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。\u003cstrong\u003e当进程进入阻塞状态，是不占用CPU资源的\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"文件描述符fd\"\u003e文件描述符fd\u003c/h3\u003e\n\u003cp\u003e​\t文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。\u003c/p\u003e\n\u003cp\u003e​\t文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。\u003c/p\u003e\n\u003ch3 id=\"缓存-io\"\u003e缓存 I/O\u003c/h3\u003e\n\u003cp\u003e​\t缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的**页缓存（ page cache ）**中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e缓存 I/O 的缺点：\u003c/strong\u003e\n数据在传输过程中需要在应用程序地址空间和内核进行\u003cstrong\u003e多次数据拷贝\u003c/strong\u003e操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。\u003c/p\u003e\n\u003ch3 id=\"io拷贝\"\u003eIO拷贝\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDMA 负责内核间的 IO 传输，CPU 负责内核和应用间的 IO 传输。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e更多详情见：\u003ca href=\"https://cloud.tencent.com/developer/article/1759493\"\u003e一文彻底揭秘操作系统之「零拷贝」！ - 腾讯云开发者社区-腾讯云 (tencent.com)\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"cpu-copy\"\u003eCPU COPY\u003c/h4\u003e\n\u003cp\u003e​\t通过计算机的组成原理我们知道, 内存的读写操作是需要 CPU 的协调数据总线,地址总线和控制总线来完成的因此在\u0026quot;拷贝\u0026quot;发生的时候,往往需要 CPU 暂停现有的处理逻辑,来协助内存的读写，这种我们称为 CPU COPY。CPU COPY 不但占用了 CPU 资源,还占用了总线的带宽。\u003c/p\u003e\n\u003ch4 id=\"dma-copy\"\u003eDMA COPY\u003c/h4\u003e\n\u003cp\u003e​\tDMA(DIRECT MEMORY ACCESS) 是现代计算机的重要功能，它有一个重要特点：当需要与外设进行数据交换时, CPU 只需要初始化这个动作便可以继续执行其他指令,剩下的数据传输的动作完全由DMA来完成可以看到 DMA COPY 是可以避免大量的 CPU 中断的\u003c/p\u003e","title":"Linux 网络模型"},{"content":"鸭子类型 定义 鸭子类型（英语：duck typing）在程序设计中是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由\u0026quot;当前方法和属性的集合\u0026ldquo;决定。这个概念的名字来源于由詹姆斯·惠特科姆·莱利提出的鸭子测试（见下面的“历史”章节），“鸭子测试”可以这样表述：\n​\t“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”\n在鸭子类型中，关注点在于对象的行为，能作什么；而不是关注对象所属的类型。例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为\u0026quot;鸭子\u0026quot;的对象，并调用它的\u0026quot;走\u0026quot;和\u0026quot;叫\u0026quot;方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的\u0026quot;走\u0026quot;和\u0026quot;叫\u0026quot;方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的\u0026quot;走\u0026quot;和\u0026quot;叫\u0026quot;方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。 鸭子类型通常得益于\u0026quot;不\u0026quot;测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。 在常规类型中，我们能否在一个特定场景中使用某个对象取决于这个对象的类型，而在鸭子类型中，则取决于这个对象是否具有某种属性或者方法——即只要具备特定的属性或方法，能通过鸭子测试，就可以使用。 多态 为什么会在鸭子类型中去介绍多态这个东西，众所周知，面向对象编程的三大特点 继承、封装、多态\n所谓多态：就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 from abc import ABC, abstractmethod from collections import namedtuple Customer = namedtuple(\u0026#39;Customer\u0026#39;, \u0026#39;name fidelity\u0026#39;) class LineItem: \u0026#34;\u0026#34;\u0026#34;订单中单个商品的数量和单价\u0026#34;\u0026#34;\u0026#34; def __init__(self, product, quantity, price): self.product = product self.quantity = quantity self.price = price def total(self): return self.price * self.quantity class Order: \u0026#34;\u0026#34;\u0026#34;订单\u0026#34;\u0026#34;\u0026#34; def __init__(self, customer, cart, promotion=None): self.customer = customer self.cart = list(cart) self.promotion = promotion def total(self): if not hasattr(self, \u0026#39;__total\u0026#39;): self.__total = sum(item.total() for item in self.cart) return self.__total def due(self): if self.promotion is None: discount = 0 else: discount = self.promotion.discount(self) return self.total() - discount def __repr__(self): fmt = \u0026#39;\u0026lt;订单 总价: {:.2f} 实付: {:.2f}\u0026gt;\u0026#39; return fmt.format(self.total(), self.due()) class Promotion(ABC): # 策略：抽象基类 @abstractmethod def discount(self, order): \u0026#34;\u0026#34;\u0026#34;返回折扣金额（正值）\u0026#34;\u0026#34;\u0026#34; class FidelityPromo(Promotion): # 第一个具体策略 \u0026#34;\u0026#34;\u0026#34;为积分为1000或以上的顾客提供5%折扣\u0026#34;\u0026#34;\u0026#34; def discount(self, order): return order.total() * 0.05 if order.customer.fidelity \u0026gt;= 1000 else 0 class BulkItemPromo(Promotion): # 第二个具体策略 \u0026#34;\u0026#34;\u0026#34;单个商品为20个或以上时提供10%折扣\u0026#34;\u0026#34;\u0026#34; def discount(self, order): discount = 0 for item in order.cart: if item.quantity \u0026gt;= 20: discount += item.total() * 0.1 return discount class LargeOrderPromo(Promotion): # 第三个具体策略 \u0026#34;\u0026#34;\u0026#34;订单中的不同商品达到10个或以上时提供7%折扣\u0026#34;\u0026#34;\u0026#34; def discount(self, order): distinct_items = {item.product for item in order.cart} if len(distinct_items) \u0026gt;= 10: return order.total() * 0.07 return 0 joe = Customer(\u0026#39;John Doe\u0026#39;, 0) ann = Customer(\u0026#39;Ann Smith\u0026#39;, 1100) cart = [LineItem(\u0026#39;banana\u0026#39;, 4, 0.5), LineItem(\u0026#39;apple\u0026#39;, 10, 1.5), LineItem(\u0026#39;watermellon\u0026#39;, 5, 5.0)] print(\u0026#39;策略一：为积分为1000或以上的顾客提供5%折扣\u0026#39;) print(Order(joe, cart, FidelityPromo())) print(Order(ann, cart, FidelityPromo())) banana_cart = [LineItem(\u0026#39;banana\u0026#39;, 30, 0.5), LineItem(\u0026#39;apple\u0026#39;, 10, 1.5)] print(\u0026#39;策略二：单个商品为20个或以上时提供10%折扣\u0026#39;) print(Order(joe, banana_cart, BulkItemPromo())) long_order = [LineItem(str(item_code), 1, 1.0) for item_code in range(10)] print(\u0026#39;策略三：订单中的不同商品达到10个或以上时提供7%折扣\u0026#39;) print(Order(joe, long_order, LargeOrderPromo())) print(Order(joe, cart, LargeOrderPromo())) 首先要有一个接口（Promotion），然后各个策略去实现这个接口。然而，Python 语言没有 interface 关键字，就是说，Python 里没有像 java、C# 一样的接口。\n在上面策略模式代码示例中，使用了抽象基类（Abstract Base Class，ABC）来实现接口，这主要是为了写法上看起来和 java、C# 等语言更加的像，易于有这些语言基础的同学理解和对比。\n抽象基类是在 Python 语言诞生 15 年后，Python 2.6 才引入的。这里我们不详细介绍抽象基类，因为即便现在也很少有代码使用抽象基类。对于多态，Python 有更好的实现方式——鸭子类型（duck typing）。\n协议和鸭子类型 所谓 鸭子类型 就是：如果一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么它就是鸭子。这个概念的名字来源于 James Whitcomb Riley 提出的鸭子测试。\n初次看到这个描述的小伙伴一定一头雾水，为了理解鸭子类型，我们不得不提到另一个名词——协议。\n在面向对象编程中，协议是非正式的接口，是一组方法，只由文档和约定定义，因此，协议不能像正式接口那样施加强制性约束。而 Python 的哲学就是尽量支持基本协议。\n翻译成人话，就是：Python 中没有接口，在需要使用接口的地方，就用协议代替。所谓协议，其实就是一组方法，和接口中定义的方法一个意思。只不过协议不是强制性的约定，如果你不遵守协议，那么也没关系，运行时报错就是了。这样就好理解鸭子类型了，“如果一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子” 这就表示已经遵守了协议，“那么它就是鸭子”，意味着你可以在其他用到“鸭子”的地方，用“这只鸟”替换。这不就是多态吗！用“鸭子类型”来实现策略模式也很简单，删掉抽象基类就可以了。（这就是为什么抽象基类很少使用的原因，因为删掉代码也一样正确啊。）\n如果你学的是JAVA或者C++等静态语言，可能对鸭子类型的理解没那么深刻，因为静态语言中对象的特性取决于其父类。而动态语言则不一样，比如迭代器，任何实现了 __iter__ 和 __next__ 方法的对象都可称之为迭代器，但对象本身是什么类型不受限制，可以自定义为任何类。\n鸭子类型依赖文档、清晰的代码和测试来确保正确使用 。这既是优点也是缺点，缺点是需要通过文档才能知道参数类型，为了弥补这方面的不足，Python3.6 引入了类型信息，定义变量的时候可以指定类型\n总结 鸭子类型是编程语言中动态类型语言中的一种设计风格，一个对象的特征不是由父类决定，而是通过对象的方法决定的。 我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。 原文参考：https://juejin.cn/post/6844903825489264653\n","permalink":"https://luenci.com/en/posts/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/","summary":"\u003ch1 id=\"鸭子类型\"\u003e鸭子类型\u003c/h1\u003e\n\u003ch2 id=\"定义\"\u003e定义\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e鸭子类型\u003c/strong\u003e（英语：\u003cstrong\u003educk typing\u003c/strong\u003e）在\u003ca href=\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"\u003e程序设计\u003c/a\u003e中是\u003ca href=\"https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\"\u003e动态类型\u003c/a\u003e的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由\u0026quot;\u003cstrong\u003e当前\u003ca href=\"https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_%28%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8%29\"\u003e方法\u003c/a\u003e和属性的集合\u003c/strong\u003e\u0026ldquo;决定。这个概念的名字来源于由\u003ca href=\"https://zh.wikipedia.org/w/index.php?title=%e8%a9%b9%e5%a7%86%e6%96%af%c2%b7%e6%83%a0%e7%89%b9%e7%a7%91%e5%a7%86%c2%b7%e8%8e%b1%e5%88%a9\u0026amp;action=edit\u0026amp;redlink=1\"\u003e詹姆斯·惠特科姆·莱利\u003c/a\u003e提出的\u003ca href=\"https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E6%B5%8B%E8%AF%95\"\u003e鸭子测试\u003c/a\u003e（见下面的“\u003ca href=\"https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B#%E5%8E%86%E5%8F%B2\"\u003e历史\u003c/a\u003e”章节），“鸭子测试”可以这样表述：\u003c/p\u003e\n\u003cp\u003e​\t“\u003cstrong\u003e当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。\u003c/strong\u003e”\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在鸭子类型中，关注点在于对象的行为，能作什么；而不是关注对象所属的类型。例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为\u0026quot;鸭子\u0026quot;的对象，并调用它的\u0026quot;走\u0026quot;和\u0026quot;叫\u0026quot;方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的\u0026quot;走\u0026quot;和\u0026quot;叫\u0026quot;方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的\u0026quot;走\u0026quot;和\u0026quot;叫\u0026quot;方法的对象都可被函数接受的这种行为引出了以上表述，这种决定类型的方式因此得名。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e鸭子类型通常得益于\u0026quot;不\u0026quot;测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e在常规类型中，我们能否在一个特定场景中使用某个对象取决于这个对象的类型，而在鸭子类型中，则取决于这个对象是否具有某种属性或者方法——即只要具备特定的属性或方法，能通过鸭子测试，就可以使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"多态\"\u003e多态\u003c/h2\u003e\n\u003cp\u003e为什么会在鸭子类型中去介绍多态这个东西，众所周知，面向对象编程的三大特点 \u003ccode\u003e继承\u003c/code\u003e、\u003ccode\u003e封装\u003c/code\u003e、\u003ccode\u003e多态\u003c/code\u003e\u003c/p\u003e","title":"鸭子类型介绍"},{"content":"RESTful设计方法 原文参考自哔哩哔哩: https://www.bilibili.com/video/BV1k5411p7Kp\n1. 域名 应该尽量将API部署在专用域名之下。\n1 https://api.example.com 如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。\n1 https://example.org/api/ 2. 版本（Versioning） 应该将API的版本号放入URL。\n1 2 3 4 5 http://www.example.com/app/1.0/foo http://www.example.com/app/1.1/foo http://www.example.com/app/2.0/foo 另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。\n因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URL。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见Versioning REST Services）：\n1 2 3 4 5 Accept: vnd.example-com.foo+json; version=1.0 Accept: vnd.example-com.foo+json; version=1.1 Accept: vnd.example-com.foo+json; version=2.0 3. 路径（Endpoint） 路径又称\u0026quot;终点\u0026quot;（endpoint），表示API的具体网址，每个网址代表一种资源（resource）\n(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。\n举例来说，以下是不好的例子:\n1 2 3 /getProducts /listOrders /retreiveClientByOrder?orderId=1 对于一个简洁结构，你应该始终用名词。 此外，利用的HTTP方法可以分离网址中的资源名称的操作。\n1 2 3 4 GET /products ：将返回所有产品清单 POST /products ：将产品新建到集合 GET /products/4 ：将获取产品 4 PATCH（或）PUT /products/4 ：将更新产品 4 (2) API中的名词应该使用复数。无论子资源或者所有资源。\n举例来说，获取产品的API可以这样定义\n1 2 获取单个产品：http://127.0.0.1:8080/AppName/rest/products/1 获取所有产品: http://127.0.0.1:8080/AppName/rest/products 3. HTTP动词 对于资源的具体操作类型，由HTTP动词表示。\n常用的HTTP动词有下面四个（括号里是对应的SQL命令）。\nGET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 DELETE（DELETE）：从服务器删除资源。 还有三个不常用的HTTP动词。\nPATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。 HEAD：获取资源的元数据。 OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。 下面是一些例子。\n1 2 3 4 5 6 7 8 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园（上传文件） GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 4. 过滤信息（Filtering） 如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。\n下面是一些常见的参数。\n1 2 3 4 5 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2\u0026amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name\u0026amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件 参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoos/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。\n6. 状态码（Status Codes） 服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。\n200 OK - [GET]：服务器成功返回用户请求的数据 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。 状态码的完全列表参见这里或这里。\n7. 错误处理（Error handling） 如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。\n1 2 3 { error: \u0026#34;Invalid API key\u0026#34; } 8. 返回结果 针对不同操作，服务器向用户返回的结果应该符合以下规范。\nGET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档 9. 其他 服务器返回的数据格式，应该尽量使用JSON，避免使用XML。\n","permalink":"https://luenci.com/en/posts/restful%E9%A3%8E%E6%A0%BC%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"restful设计方法\"\u003eRESTful设计方法\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文参考自哔哩哔哩: \u003ca href=\"https://www.bilibili.com/video/BV1k5411p7Kp\"\u003ehttps://www.bilibili.com/video/BV1k5411p7Kp\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"1-域名\"\u003e1. 域名\u003c/h2\u003e\n\u003cp\u003e应该尽量将API部署在专用域名之下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-http\" data-lang=\"http\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003ehttps://api.example.com\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-http\" data-lang=\"http\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003ehttps://example.org/api/\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"2-版本versioning\"\u003e2. 版本（Versioning）\u003c/h2\u003e\n\u003cp\u003e应该将API的版本号放入URL。\u003c/p\u003e","title":"RESTful风格"},{"content":" 原文:同源策略、跨域解决方案\n一、同源策略 1、先来说说什么是源 • 源（origin）就是协议、域名和端口号。 以上url中的源就是：http://www.company.com:80 若地址里面的协议、域名和端口号均相同则属于同源。 以下是相对于 http://www.a.com/test/index.html 的同源检测\n• http://www.a.com/dir/page.html \u0026mdash;-成功 • http://www.child.a.com/test/index.html \u0026mdash;-失败，域名不同 • https://www.a.com/test/index.html \u0026mdash;-失败，协议不同 • http://www.a.com:8080/test/index.html \u0026mdash;-失败，端口号不同\n2.什么是同源策略？ 同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。\n• 不受同源策略限制的： 1、页面中的链接，重定向以及表单提交是不会受到同源策略限制的。 2、跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的\u0026lt;script src=\u0026quot;...\u0026quot;\u0026gt;``\u0026lt;/script\u0026gt;，\u0026lt;img\u0026gt;，\u0026lt;link\u0026gt;，\u0026lt;iframe\u0026gt;等。\n二、跨域 1、什么是跨域 根据前面所讲的浏览器同源策略的影响，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象是就需要跨域。\n2、跨域的实现形式 （1）设置document.domain 比如home.example.com要读取developer.example.com里面的文档，由于同源策略的限制，就无法读取，我们通过设置document.domain=\u0026quot;example.com\u0026quot;;这时就不再受同源策略的限制了。 （2）跨资源共享CORS（Cross-origin resource sharing） CORS采用新的“origin:”请求头和新的Access-Control-Allow-Origin响应头来扩展HTTP。它允许服务器用头信息显示地列出源，或使用通配符来匹配所有的源并允许任何地址请求文件。\n因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。\n从而它允许浏览器向跨源服务器，发出XMLHttpRequest请求，克服了AJAX只能同源使用的限制。\n（3）跨文档消息（cross-document messaging） 允许来自一个文档的脚本可以传递消息到另一个文档里的脚本，而不管脚本的来源是否不同，通过调用window.postMessage()方法，可以异步传递消息事件(可以使用onmessage事件处理程序函数来处理它)到窗口的文档里。 ","permalink":"https://luenci.com/en/posts/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E5%92%8C%E5%90%8C%E6%BA%90/","summary":"\u003cblockquote\u003e\n\u003cp\u003e原文:\u003ca href=\"https://www.cnblogs.com/rockmadman/p/6836834.html\"\u003e同源策略、跨域解决方案\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"一同源策略\"\u003e一、同源策略\u003c/h2\u003e\n\u003ch3 id=\"1先来说说什么是源\"\u003e1、先来说说什么是源\u003c/h3\u003e\n\u003cp\u003e• 源（origin）就是协议、域名和端口号。\n以上url中的源就是：http://www.company.com:80\n若地址里面的协议、域名和端口号均相同则属于同源。\n以下是相对于 \u003ca href=\"http://www.a.com/test/index.html\"\u003ehttp://www.a.com/test/index.html\u003c/a\u003e 的同源检测\u003c/p\u003e","title":"同源和跨域"},{"content":"django的信号量 原文链接:https://juejin.cn/post/6844903674049724424\n一、关于django信号量 Django包含一个\u0026quot;信号调度程序\u0026quot;，它有助于在框架中的其他位置发生操作时通知分离的应用程序。简而言之，信号允许某些发送者通知一组接收器已经发生了某些动作。当许多代码可能对同一事件感兴趣时，它们特别有用.\n二、django中内置的信号量 1、Model的信号量\npre_init # django的modal执行其构造方法前，自动触发\npost_init # django的modal执行其构造方法后，自动触发\npre_save # django的modal对象保存前，自动触发\npost_save # django的modal对象保存后，自动触发\npre_delete # django的modal对象删除前，自动触发\npost_delete # django的modal对象删除后，自动触发\nm2m_changed # django的modal中使用m2m字段操作第三张表（add,remove,clear）前后，自动触发\nclass_prepared # 程序启动时，检测已注册的app中modal类，对于每一个类，自动触发\n1 2 3 4 5 6 7 8 from django.db.models.signals import class_prepared from django.db.models.signals import pre_init from django.db.models.signals import post_init from django.db.models.signals import pre_save from django.db.models.signals import post_save from django.db.models.signals import pre_delete from django.db.models.signals import post_delete from django.db.models.signals import m2m_changed 2、Management的信号量\npre_migrate # 执行migrate命令前，自动触发\npost_migrate # 执行migrate命令后，自动触发\n1 2 from django.db.models.signals import pre_migrate from django.db.models.signals import post_migrate 3、Request/Response的信号量\nrequest_started # 请求到来前，自动触发\nrequest_finished # 请求结束后，自动触发\ngot_request_exception # 请求异常后，自动触发\n1 2 3 from django.core.signals import request_finished from django.core.signals import request_started from django.core.signals import got_request_exception 4、Test的信号量\nsetting_changed # 使用test测试修改配置文件时，自动触发\ntemplate_rendered # 使用test测试渲染模板时，自动触发\n1 2 from django.test.signals import setting_changed from django.test.signals import template_rendered 5、Database的信号量\nconnection_created # 创建数据库连接时，自动触发\n1 from django.db.backends.signals import connection_created 三、在django中使用connect定义信号量 1、官网案例\n要接收信号，请使用该方法注册接收器功能 Signal.connect()。发送信号时调用接收器功能。\nSignal.connect（receiver，sender = None，weak = True，dispatch_uid = None）\nreceiver - 将连接到此信号的回调函数。有关更多信息，请参阅接收器功能。 sender - 指定从中接收信号的特定发送方。有关详细信息，请参阅 连接到特定发件人发送的信号。 weak - Django默认将信号处理程序存储为弱引用。因此，如果您的接收器是本地功能，它可能是垃圾收集。为防止这种情况，请weak=False在调用信号connect()方法时通过。 dispatch_uid - 在可能发送重复信号的情况下信号接收器的唯一标识符。有关更多信息，请参阅 防止重复信号。 2、自己定义一个数据库保存前后的信号(在项目的__init__.py文件中定义)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from django.db.models import signals def before_save(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34; 定义一个数据保存之前触发的信号 :param args: :param kwargs: :return: \u0026#34;\u0026#34;\u0026#34; print(\u0026#39;===数据保存之前触发===\u0026#39;) print(args, kwargs) print(\u0026#39;===数据保存之前触发===\u0026#39;) def post_save(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34; 定义一个数据保存之后触发的信号 :param args: :param kwargs: :return: \u0026#34;\u0026#34;\u0026#34; print(\u0026#39;==数据保存之后触发==\u0026#39;) print(args, kwargs) print(\u0026#39;==数据保存之后触发==\u0026#39;) signals.pre_save.connect(before_save) signals.post_save.connect(post_save) 3、测试\n四、使用receiver装饰器定义信号量 1、同样在项目的__init__.py文件中\n2、导包\n1 2 from django.core.signals import request_finished from django.dispatch import receiver 3、定义信号量函数\n1 2 3 4 5 @receiver(request_finished) def my_callback(sender, **kwargs): print(\u0026#39;-\u0026#39; * 100) print(sender, kwargs) print(\u0026#34;Request finished!\u0026#34;) 不指定接受信号者就是作用于全局,一般直接写在项目的__init__.py文件中,如果是仅仅针对个别app来说的,不会全局配置\n五、关于指定接收者(组件的信号量) 1、在组件中创建一个signals.py文件\n2、signals.py中写上信号的接收者\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from django.db.models import signals from app01.models import ClassModel, StudentModle def before_save(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34; 定义一个数据保存之前触发的信号 :param args: :param kwargs: :return: \u0026#34;\u0026#34;\u0026#34; print(\u0026#39;===数据保存之前触发===\u0026#39;) print(args, kwargs) print(\u0026#39;===数据保存之前触发===\u0026#39;) signals.pre_save.connect(before_save, sender=ClassModel) 3、如果是使用装饰器的方式\n1 2 3 4 5 6 7 8 9 from django.core.signals import request_finished from django.dispatch import receiver from .views import app02Test @receiver(request_finished, sender=app02Test) def my_callback(sender, **kwargs): print(\u0026#39;-\u0026#39; * 100) print(sender, kwargs) print(\u0026#34;Request finished!\u0026#34;) 六、自定义信号 1、在app中创建一个文件\n2、在文件中自定义信号\n1 2 3 4 5 6 7 8 9 10 11 # 定义信号 import django.dispatch pizza_done = django.dispatch.Signal(providing_args=[\u0026#34;weightpings\u0026#34;, \u0026#34;size\u0026#34;]) # 注册信号 def callback(sender, **kwargs): print(\u0026#34;callback\u0026#34;) print(sender, kwargs) pizza_done.connect(callback) 3、在视图中发送信号\n1 2 from .文件 import pizza_done pizza_done.send(sender=\u0026#39;seven\u0026#39;, weightpings=123, size=456) ","permalink":"https://luenci.com/en/posts/django%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8F/","summary":"\u003ch1 id=\"django的信号量\"\u003edjango的信号量\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文链接:https://juejin.cn/post/6844903674049724424\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"一关于django信号量\"\u003e一、关于\u003ccode\u003edjango\u003c/code\u003e信号量\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eDjango\u003c/code\u003e包含一个\u0026quot;信号调度程序\u0026quot;，\u003cstrong\u003e它有助于在框架中的其他位置发生操作时通知分离的应用程序\u003c/strong\u003e。简而言之，信号允许某些发送者通知一组接收器已经发生了某些动作。当许多代码可能对同一事件感兴趣时，它们特别有用.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"二django中内置的信号量\"\u003e二、\u003ccode\u003edjango\u003c/code\u003e中内置的信号量\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e1、\u003ccode\u003eModel\u003c/code\u003e的信号量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epre_init\u003c/code\u003e # django的modal执行其构造方法前，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epost_init\u003c/code\u003e # django的modal执行其构造方法后，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epre_save\u003c/code\u003e # django的modal对象保存前，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epost_save\u003c/code\u003e # django的modal对象保存后，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epre_delete\u003c/code\u003e # django的modal对象删除前，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epost_delete\u003c/code\u003e # django的modal对象删除后，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003em2m_changed\u003c/code\u003e # django的modal中使用m2m字段操作第三张表（add,remove,clear）前后，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eclass_prepared\u003c/code\u003e # 程序启动时，检测已注册的app中modal类，对于每一个类，自动触发\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e class_prepared\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e pre_init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e post_init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e pre_save\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e post_save\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e pre_delete\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e post_delete\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e m2m_changed\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e2、\u003ccode\u003eManagement\u003c/code\u003e的信号量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epre_migrate\u003c/code\u003e # 执行migrate命令前，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003epost_migrate\u003c/code\u003e # 执行migrate命令后，自动触发\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e pre_migrate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e post_migrate\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e3、\u003ccode\u003eRequest/Response\u003c/code\u003e的信号量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003erequest_started\u003c/code\u003e # 请求到来前，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003erequest_finished\u003c/code\u003e # 请求结束后，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003egot_request_exception\u003c/code\u003e # 请求异常后，自动触发\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.core.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e request_finished\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.core.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e request_started\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.core.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e got_request_exception\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e4、\u003ccode\u003eTest\u003c/code\u003e的信号量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003esetting_changed\u003c/code\u003e # 使用test测试修改配置文件时，自动触发\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003etemplate_rendered\u003c/code\u003e # 使用test测试渲染模板时，自动触发\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.test.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e setting_changed\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.test.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e template_rendered\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e5、\u003ccode\u003eDatabase\u003c/code\u003e的信号量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003econnection_created\u003c/code\u003e # 创建数据库连接时，自动触发\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.backends.signals\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e connection_created\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Django信号量初探"},{"content":"行为型模式 行为型模式，顾名思义，它主要关注的是对象的责任。\n它们关注对象之间的交互以及对象的响应性 对象应该能够交互，同时仍然保持松散耦合 观察者模式 在观察者设计模式中，对象（主题）维护了一个依赖（观察者）列表，以便主题可以使用观察者定义的任何方法通知所有观察者它所发生的变化。\n它定义了对象之间的一对多的依赖关系，从而使得一个对象中的任何更改都将自动通知给其他对象 它封装了主题的核心组件 UML图 主题(Subject):类Subject需要了解Observe。Subject类具有许多方法，诸如register()和deregister()等，Observer可以通过这些方法注册到Subject类中。因此，一个Subject可以处理多个Observe。 观察者(Observe)：它为关注主题的对象定义了一个接口。它定义了Observe需要实现的各个方法，以便在主题发生变化时能够获得相应的通知。 具体观察者(ConcreteObserver):它用来保存应该与Subject的状态保持一致的状态。它实现了Observe接口以保持其状态与主题中的变化相一致。 代码案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python # -*- coding: utf-8 -*- class Subject(object): def __init__(self): self.__observer = [] def register(self, observer): self.__observer.append(observer) def notifyAll(self, *args, **kwargs): for observer in self.__observer: observer.notify(self, *args, **kwargs) class Observer1(object): def __init__(self, subject): subject.register(self) def notify(self, subject, *args): print(f\u0026#34;{type(self).__name__}:: Got, {args} from {subject}\u0026#34;) class Observer2(object): def __init__(self, subject): subject.register(self) def notify(self, subject, *args): print(f\u0026#34;{type(self).__name__}:: Got, {args} from {subject}\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: subject = Subject() observer1 = Observer1(subject) observer2 = Observer2(subject) subject.notifyAll(\u0026#34;notify~~~\u0026#34;) 观察者模式的优点和缺点 优点：\n它使得彼此交互的对象之间保持送耦合 它使得我们可以在无需对主题或观察者进行任何修改的情况下高效地发送数据到其他对象 可以随时添加/删除观察者 缺点：\n观察者接口必须由具体观察者实现，这涉及继承。无法进行组合，因为观察者接口可以实例化 如果实现不当的话，观察者可能会增加复杂性，并导致性能降低 在软件应用程序中，通知有时可能是不可靠的，并导致竞争条件或不一致性 现实世界的观察者模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta import abc class NewsPublisher(object): \u0026#34;\u0026#34;\u0026#34;主题,新闻发布机构.\u0026#34;\u0026#34;\u0026#34; def __init__(self): self.__subscribers = [] self.__latestNews = None def attach(self, subscriber): \u0026#34;\u0026#34;\u0026#34;订阅. :param subscriber: :return: list \u0026#34;\u0026#34;\u0026#34; self.__subscribers.append(subscriber) def detach(self): \u0026#34;\u0026#34;\u0026#34;取消订阅. :param subscriber: :return: list \u0026#34;\u0026#34;\u0026#34; return self.__subscribers.pop() def subscribers(self): \u0026#34;\u0026#34;\u0026#34;获取注册的订阅者. :return: list \u0026#34;\u0026#34;\u0026#34; return [type(x).__name__ for x in self.__subscribers] def notifySubscribers(self): \u0026#34;\u0026#34;\u0026#34;通知订阅者. :return: obj \u0026#34;\u0026#34;\u0026#34; for sub in self.__subscribers: sub.update() def addNews(self, news): \u0026#34;\u0026#34;\u0026#34;添加新闻. :param news: :return: \u0026#34;\u0026#34;\u0026#34; self.__latestNews = news def getNews(self): \u0026#34;\u0026#34;\u0026#34;返回最新信息. :return: \u0026#34;\u0026#34;\u0026#34; return f\u0026#34;Got News: {self.__latestNews}\u0026#34; class Subscriber(metaclass=ABCMeta): \u0026#34;\u0026#34;\u0026#34;观察者抽象接口.\u0026#34;\u0026#34;\u0026#34; @abc.abstractmethod def update(self): \u0026#34;\u0026#34;\u0026#34;抽象方法. :return: \u0026#34;\u0026#34;\u0026#34; pass class EmailSubscriber(Subscriber): \u0026#34;\u0026#34;\u0026#34;观察者1.\u0026#34;\u0026#34;\u0026#34; def __init__(self, publisher): self.publisher = publisher self.publisher.attach(self) def update(self): \u0026#34;\u0026#34;\u0026#34;更新新闻.\u0026#34;\u0026#34;\u0026#34; print(type(self).__name__, self.publisher.getNews()) class SMSSubscriber(Subscriber): \u0026#34;\u0026#34;\u0026#34;观察者2.\u0026#34;\u0026#34;\u0026#34; def __init__(self, publisher): self.publisher = publisher self.publisher.attach(self) def update(self): \u0026#34;\u0026#34;\u0026#34;更新新闻.\u0026#34;\u0026#34;\u0026#34; print(type(self).__name__, self.publisher.getNews()) class AnyOtherSubscriber(Subscriber): \u0026#34;\u0026#34;\u0026#34;观察者3.\u0026#34;\u0026#34;\u0026#34; def __init__(self, publisher): self.publisher = publisher self.publisher.attach(self) def update(self): \u0026#34;\u0026#34;\u0026#34;更新新闻.\u0026#34;\u0026#34;\u0026#34; print(type(self).__name__, self.publisher.getNews()) if __name__ == \u0026#39;__main__\u0026#39;: new_publisher = NewsPublisher() for Subscribers in [SMSSubscriber, EmailSubscriber, AnyOtherSubscriber]: Subscribers(new_publisher) print(f\u0026#34;\\\\n Subscriber:{new_publisher.subscribers()}\u0026#34;) new_publisher.addNews(\u0026#34;hello\u0026#34;) new_publisher.notifySubscribers() print(f\u0026#34;\\\\n Detach:{type(new_publisher.detach()).__name__}\u0026#34;) print(f\u0026#34;\\\\n Subscribers:{new_publisher.subscribers()}\u0026#34;) new_publisher.addNews(\u0026#34;hi\u0026#34;) new_publisher.notifySubscribers() 命令模式——封装调用 命令模式也是一种行为设计模式，其中对象用于封装在完成以项操作时或在触发一个事件时所需的全部信息。\n这些信息包含如下\n方法名称 拥有方法的对象 方法参数的值 命令模式常用术语Command、Receiver、Invoker 和 Client Command对象了解Receiver对象的情况下，并能调用Receiver对象的方法； 调用者方法的参数值存储在Command对象中 调用者知道如何执行命令 客户端用来创建Command对象并设置其接收者 命令模式的主要意图如下 将请求封装为对象 可用不用的请求对客户端进行参数化 允许将请求保存在队列中 提供面向对象的回调 命令模式的应用场景 根据需要执行的操作对对象进行参数化 将操作添加到队列并在不同地点执行请求 创建一个结构来根据较小操作完成高级操作 UML图 Command：声明执行操作的接口。 ConcreteCommand：将一个Receiver对象和一个操作绑定在一起。 Client：创建ConcreteCommand对象并设定其接受者。 Invoker：要求改ConcreteCommand执行这个请求。 Receiver：知道如何实施与执行一个请求相关的操作。 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta import abc class Command(metaclass=ABCMeta): def __init__(self, recv): self.recv = recv def execute(self): pass class ConcreteCommand(Command): def __init__(self, recv): self.recv = recv def execute(self): self.recv.action() class Receiver(object): def action(self): print(\u0026#34;Receiver Action\u0026#34;) class Invoker(object): def command(self, cmd): self.cmd = cmd def execute(self): self.cmd.execute() if __name__ == \u0026#39;__main__\u0026#39;: recv = Receiver() cmd = ConcreteCommand(recv) invoker = Invoker() invoker.command(cmd) invoker.execute() out：Receiver Action 现实世界的命令模式（一个股票交易例子） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta import abc class Order(metaclass=ABCMeta): \u0026#34;\u0026#34;\u0026#34;订单抽象接口类.\u0026#34;\u0026#34;\u0026#34; @abc.abstractmethod def execute(self): pass class BuyStockOrder(Order): \u0026#34;\u0026#34;\u0026#34;Buy 接口实现类.\u0026#34;\u0026#34;\u0026#34; def __init__(self, stock): self.stock = stock def execute(self): self.stock.buy() class SellStockOrder(Order): \u0026#34;\u0026#34;\u0026#34;Sell 接口实现类.\u0026#34;\u0026#34;\u0026#34; def __init__(self, stock): self.stock = stock def execute(self): self.stock.sell() class StockTrade(object): \u0026#34;\u0026#34;\u0026#34;接收者.\u0026#34;\u0026#34;\u0026#34; def buy(self): \u0026#34;\u0026#34;\u0026#34;调用交易中所卖入的股票.\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;You will buy stocks\u0026#34;) def sell(self): \u0026#34;\u0026#34;\u0026#34;调用交易中所买入的股票.\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;You will sell stocks\u0026#34;) class Agent(object): \u0026#34;\u0026#34;\u0026#34;代理.\u0026#34;\u0026#34;\u0026#34; def __init__(self): self.__orderQueue = [] def placeOrder(self, order): \u0026#34;\u0026#34;\u0026#34;获取用户所下的订单.\u0026#34;\u0026#34;\u0026#34; self.__orderQueue.append(order) order.execute() if __name__ == \u0026#39;__main__\u0026#39;: # client stock = StockTrade() buyStock = BuyStockOrder(stock) sellStock = SellStockOrder(stock) # Invoker agent = Agent() agent.placeOrder(buyStock) agent.placeOrder(sellStock) 命令模式优缺点 优点 将调用操作的类与知道如何执行该操作的对象解耦； 提供队列系统后，可以创建一系列命令； 添加新命令更容易，并且无需更改现有代码； 还可以使用命令模式来定义回滚系统，例如：在向导实例中，我们可以编写一个回滚方法。 缺点 为了实现目标，需要大量的类和对象进行协作。应用程序开发人员为了正确开发这些类，需要加倍小心。 每个单独的命令都是一个ConcreteCommand类，从而增加了需要实现和维护的类的数量。 模板方法设计模式 通过一种称为模板方法的方式来定义程序框架或算法\n使用基本操作定义算法的框架 重新定义子类的某些操作，而无需修改算法的结构 实现代码重用并避免重复工作 利用通用接口或实现 模板方法模式常用术语 AbstractClass：声明一个定义算法步骤的接口。 ConcreteClass：定义子类特定的步骤。 template_method()：通过调用步骤方法来定义算法。 代码实现（案例1） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta import abc class Compiler(metaclass=ABCMeta): @abc.abstractmethod def collectSource(self): pass @abc.abstractmethod def compileToObject(self): pass @abc.abstractmethod def run(self): pass def complileAndRun(self): self.collectSource() self.compileToObject() self.run() class IOSCompiler(Compiler): def collectSource(self): print(\u0026#34;Collecting Swift Source Code\u0026#34;) def compileToObject(self): print(\u0026#34;Compiling Swift code to LLVM bitcode\u0026#34;) def run(self): print(\u0026#34;Program running on runtime environment\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: iOS = IOSCompiler() iOS.complileAndRun() UML图 AbstractClass：在抽象方法的帮助下定义算法的操作或步骤。这些步骤将被具体子类覆盖 template_method()：定义算法的框架。在模板方法中调用抽象方法定义的多个步骤来定义序列或算法本身。 ConcreteClass：实现（由抽象方法定义的）步骤，来执行算法子类的特定步骤。 代码案例二 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta, abstractmethod class AbstractClass(metaclass=ABCMeta): def __init__(self): pass @abstractmethod def operation1(self): pass @abstractmethod def operation2(self): pass def template_method(self): print(\u0026#34;Defining the Algorithm. Operation1 follows Operation2\u0026#34;) self.operation2() self.operation1() class ConcreteClass(AbstractClass): def operation1(self): print(\u0026#34;My Concrete Operation1\u0026#34;) def operation2(self): print(\u0026#34;My Concrete Operation2\u0026#34;) class Client(object): def main(self): self.concreate = ConcreteClass() self.concreate.template_method() if __name__ == \u0026#39;__main__\u0026#39;: client = Client() client.main() out： My Concrete Operation2 My Concrete Operation1 代码案例三（旅行社例子） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import abstractmethod, ABCMeta class Trip(metaclass=ABCMeta): \u0026#34;\u0026#34;\u0026#34;抽象旅行模板类.\u0026#34;\u0026#34;\u0026#34; @abstractmethod def setTransport(self): pass @abstractmethod def day1(self): pass @abstractmethod def day2(self): pass @abstractmethod def day3(self): pass @abstractmethod def returnHome(self): pass def itinerary(self): self.setTransport() self.day1() self.day2() self.day3() self.returnHome() class VeniceTrip(Trip): \u0026#34;\u0026#34;\u0026#34;Venice 旅游实现类.\u0026#34;\u0026#34;\u0026#34; def setTransport(self): print(\u0026#34;Take a boat and find your way in the Grand Canal\u0026#34;) def day1(self): print(\u0026#34;Visit St Mark`s Basilica in St Mark`s Square\u0026#34;) def day2(self): print(\u0026#34;Appreciate Doge`s Palace\u0026#34;) def day3(self): print(\u0026#34;Enjoy the food near the Rialto Bridge\u0026#34;) def returnHome(self): print(\u0026#34;Get souvenirs for friends and get back\u0026#34;) class MaldivesTrip(Trip): \u0026#34;\u0026#34;\u0026#34;Maldives 旅游实现类.\u0026#34;\u0026#34;\u0026#34; def setTransport(self): print(\u0026#34;On foot, on any island, wow!\u0026#34;) def day1(self): print(\u0026#34;Enjoy the marine life of Banana Reed\u0026#34;) def day2(self): print(\u0026#34;Go for the water sports and snorkelling.\u0026#34;) def day3(self): print(\u0026#34;Relax on the beach and enjoy the sun.\u0026#34;) def returnHome(self): print(\u0026#34;Don`t feel like leaving the beach..\u0026#34;) class TraveAgency(object): \u0026#34;\u0026#34;\u0026#34;代理类.\u0026#34;\u0026#34;\u0026#34; def arrange_trip(self): choice = input(\u0026#34;What kind of place you`d like togo historical or to a beach? \\\\n\u0026#34;) if choice == \u0026#39;historical\u0026#39;: self.trip = VeniceTrip() self.trip.itinerary() if choice == \u0026#39;beach\u0026#39;: self.trip = MaldivesTrip() self.trip.itinerary() TraveAgency().arrange_trip() 模板方法模式优缺点 优点 没有重复代码 由于模板方法模式使用继承而不是合成，因此能够对代码进行重用。所以只有为数不多的几个方法需要重写； 灵活性允许子类决定如何实现算法中的步骤 缺点 调试和理解模板方法模式中的流程序列有时会令人困惑。你最终实现的方法可能是一个不应该实现的方法，或根本没有实现抽象方法。文档和严格的错误处理必须由程序员完成； 模板框架的维护可能是一个问题，因为任何层次（低层或高层）的变更都可能对实现造成干扰。因此，使用模板方法模式可能会使维护变得异常痛苦。 状态设计模式 一个对象可以基于其内部状态封装多个行为。状态模式也可以看作是在运行时改变对象行为的一种方式。\n状态设计模式常用名词 State：这被认为是封装对象行为的接口。这个行为与对象的状态相关联。 ConcreteState：这是实现State接口的子类。ConcreteState实现与对象的特定状态相关联的实际行为。 Context：这定义了用户感兴趣的接口。Context还维护一个ConcreteState子类的实例，该子类在内部定义了对象的特定状态的实现。 代码示例1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta, abstractmethod class State(metaclass=ABCMeta): \u0026#34;\u0026#34;\u0026#34;状态抽象类接口.\u0026#34;\u0026#34;\u0026#34; @abstractmethod def Handle(self): pass class ConcreteStateB(State): \u0026#34;\u0026#34;\u0026#34;接口子类A.\u0026#34;\u0026#34;\u0026#34; def Handle(self): print(\u0026#34;ConcreteStateB\u0026#34;) class ConcreteStateA(State): \u0026#34;\u0026#34;\u0026#34;接口子类B.\u0026#34;\u0026#34;\u0026#34; def Handle(self): print(\u0026#34;ConcreteStateA\u0026#34;) class Context(State): \u0026#34;\u0026#34;\u0026#34;用户操作接口.\u0026#34;\u0026#34;\u0026#34; def __init__(self): self.state = None def getState(self): return self.state def setState(self, state): self.state = state def Handle(self): self.state.Handle() if __name__ == \u0026#39;__main__\u0026#39;: context = Context() stateA = ConcreteStateA() stateB = ConcreteStateB() context.setState(stateB) context.Handle() out: ConcreteStateB UML图 Handle（）方法，根据状态的变化定义要采取的实际行动 Context：这是一个接受客户端请求的类。它维护着对象的当前状态的引用。这样，就可以根据相应的请求，来调用具体的行为。 代码示例2（TV播放） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import abstractmethod, ABCMeta class State(metaclass=ABCMeta): @abstractmethod def doThis(self): pass class StartState(State): def doThis(self): print(\u0026#34;Tv Switching ON ..\u0026#34;) class SweightState(State): def doThis(self): print(\u0026#34;Tv Switching OFF..\u0026#34;) class TVContext(State): def __init__(self): self.state = None def getState(self): return self.state def setState(self, state): self.state = state def doThis(self): self.state.doThis() if __name__ == \u0026#39;__main__\u0026#39;: context = TVContext() context.getState() start = StartState() sweight = SweightState() context.setState(sweight) context.doThis() out： Tv Switching OFF.. 一个应用案例（pythonic 电脑状态） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #!/usr/bin/env python # -*- coding: utf-8 -*- class ComputerState(object): name = \u0026#34;state\u0026#34; allowed = [] def switch(self, state): if state.name in self.allowed: print(f\u0026#34;Current: {self} =\u0026gt; switched to new state {state.name}.\u0026#34;) state.__class__ = state else: print(f\u0026#34;Current: {self} =\u0026gt; switching to {state.name} not possible.\u0026#34;) def __str__(self): return self.name class Off(ComputerState): name = \u0026#34;off\u0026#34; allowed = [\u0026#34;on\u0026#34;] class On(ComputerState): name = \u0026#34;on\u0026#34; allowed = [\u0026#34;off\u0026#34;, \u0026#34;suspend\u0026#34;, \u0026#34;hibernate\u0026#34;] class Suspend(ComputerState): name = \u0026#34;suspend\u0026#34; allowed = [\u0026#34;on\u0026#34;] class Hibernate(ComputerState): name = \u0026#34;hibernate\u0026#34; allowed = [\u0026#34;on\u0026#34;] class Computer(object): def __init__(self, model=\u0026#34;HP\u0026#34;): self.model = model self.state = Off() def change(self, state): self.state.switch(state) if __name__ == \u0026#39;__main__\u0026#39;: comp = Computer() # Switch On comp.change(On) # Switch Off comp.change(Off) # Switch on again comp.change(On) # Suspend comp.change(Suspend) # Try to hibernate --\u0026gt; can`t comp.change(Hibernate) # switch on back comp.change(On) # Finally off comp.change(Off) 状态模式优缺点 优点 在状态设计模式中，对象的行为是其状态的函数结果，并且行为在运行时根据状态而改变。这消除了对iese或 switch/case条件逻辑的依赖。例如，在电视远程遥控的场景中，我们还可以通过简单地写一个类和方法来实现相应的行为，但是该类和方法将用到参数，并使用ieei句块来执行具体操作（打开/关闭电视）。 使用状态模式，实现多态行为的好处是显而易见的，并且更易于添加状态来支持额外的行为。 状态设计模式还提高了聚合性，因为特定于状态的行为被聚合到 Concretestate类中，并且放置在代码中的同一个地方。 使用状态设计模式，通过只添加一个 Concretestate类来添加行为是非常容易的。因此，状态模式不仅改善了扩展应用程序行为时的灵活性，而且全面提高了代码的可维护性。 不足 类爆炸：由于每个状态都需要在 Concretestate的帮助下定义，因此我们可能导致创建了太多功能较为单一的类。我们不妨考虑有限状态机的情况——如果有许多状态，但每个状态与另一个状态没有太大不同，我们仍然需要将它们写成单独的 Concretestate类。这既增加了代码量，又使得状态机的结构更加难以审查 随着每个新行为的引入（即使添加行为只是添加一个 Concretestate）， Context类都需要进行相应的更新以处理每个行为。这使得上下文行为更容易受到每个新的行为的影响。 ","permalink":"https://luenci.com/en/posts/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"行为型模式\"\u003e行为型模式\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e行为型模式，顾名思义，它主要关注的是对象的责任。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e它们关注对象之间的交互以及对象的响应性\u003c/li\u003e\n\u003cli\u003e对象应该能够交互，同时仍然保持松散耦合\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"观察者模式\"\u003e观察者模式\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在观察者设计模式中，对象（主题）维护了一个依赖（观察者）列表，以便主题可以使用观察者定义的任何方法通知所有观察者它所发生的变化。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e它定义了对象之间的一对多的依赖关系，从而使得一个对象中的任何更改都将自动通知给其他对象\u003c/li\u003e\n\u003cli\u003e它封装了主题的核心组件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"uml图\"\u003eUML图\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210225223249.png\"\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210225223249.png\" alt=\"image-20210225223249145\"  /\u003e\n\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e主题(Subject):类Subject需要了解Observe。Subject类具有许多方法，诸如register()和deregister()等，Observer可以通过这些方法注册到Subject类中。因此，一个Subject可以处理多个Observe。\u003c/li\u003e\n\u003cli\u003e观察者(Observe)：它为关注主题的对象定义了一个接口。它定义了Observe需要实现的各个方法，以便在主题发生变化时能够获得相应的通知。\u003c/li\u003e\n\u003cli\u003e具体观察者(ConcreteObserver):它用来保存应该与Subject的状态保持一致的状态。它实现了Observe接口以保持其状态与主题中的变化相一致。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"代码案例\"\u003e代码案例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#!/usr/bin/env python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# -*- coding: utf-8 -*-\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eSubject\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__observer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eregister\u003c/span\u003e(self, observer):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__observer\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eappend(observer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enotifyAll\u003c/span\u003e(self, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e observer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__observer:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            observer\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003enotify(self, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eObserver1\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, subject):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        subject\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eregister(self)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enotify\u003c/span\u003e(self, subject, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#79c0ff\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003etype(self)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__name__\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e:: Got, \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003eargs\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e from \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003esubject\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eObserver2\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, subject):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        subject\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eregister(self)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enotify\u003c/span\u003e(self, subject, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#79c0ff\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003etype(self)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__name__\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e:: Got, \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003eargs\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e from \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003esubject\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    subject \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Subject()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    observer1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Observer1(subject)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    observer2 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Observer2(subject)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    subject\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003enotifyAll(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;notify~~~\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"观察者模式的优点和缺点\"\u003e观察者模式的优点和缺点\u003c/h3\u003e\n\u003cp\u003e优点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e它使得彼此交互的对象之间保持送耦合\u003c/li\u003e\n\u003cli\u003e它使得我们可以在无需对主题或观察者进行任何修改的情况下高效地发送数据到其他对象\u003c/li\u003e\n\u003cli\u003e可以随时添加/删除观察者\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e观察者接口必须由具体观察者实现，这涉及继承。无法进行组合，因为观察者接口可以实例化\u003c/li\u003e\n\u003cli\u003e如果实现不当的话，观察者可能会增加复杂性，并导致性能降低\u003c/li\u003e\n\u003cli\u003e在软件应用程序中，通知有时可能是不可靠的，并导致竞争条件或不一致性\u003c/li\u003e\n\u003c/ul\u003e","title":"行为型模式"},{"content":"结构型模式 结构型模式用于设计对象和类的结构，从而使它们之间可以互相协作以获取更大的结构。\n结构型模式描述如何将对象和类组合成更大的结构 结构型模式是一种能够简化设计工作的模式，因为它能够找出更简单的方法来认识或表示实体之间的关系。在面向对象世界中，实体指的是对象或类 类模式可以通过继承来描述对象，从而提供更有用的程序接口，而对象模式则描述了如何将对象联系起来从而组合成更大的对象。结构型模式是类和对象模式的综合体 门面设计模式 它为子系统的一组接口提供一个统一的接口，并定义一个高级接口来帮助客户端通过更加简单的方式使用子系统 门面模式解决的问题是，如何用的单个接口对象来表示复杂的子系统。实际上它并不是封装子系统，而是对底层子系统进行组合 它促进了实现与多个客户端的解耦 UML图 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #!/usr/bin/env python # -*- coding: utf-8 -*- class EventManager(object): def __init__(self): print(\u0026#34;Event Manager:: Let me talk to the folks\\\\n\u0026#34;) def arrange(self): self.hotelier = Hotelier() self.hotelier.bookHotel() self.florist = Florist() self.florist.setFlowerRequirements() self.caterer = Caterer() self.caterer.setCuisine() self.musiccian = Musician() self.musiccian.setMusicType() class Hotelier(object): def __init__(self): print(\u0026#34;Arranging the hotel for Marriage ?\u0026#34;) def __isAvailable(self): print(\u0026#34;Is the Hotel free for the event on given day?\u0026#34;) return True def bookHotel(self): if self.__isAvailable(): print(\u0026#34;Register the Booking \\\\n\\\\n\u0026#34;) class Florist(object): def __init__(self): print(\u0026#34;Flower Decorations for the Event ? --\u0026#34;) def setFlowerRequirements(self): print(\u0026#34;Carnations, Rose and Lilies would be used for Decorations\\\\n\\\\n\u0026#34;) class Caterer(object): def __init__(self): print(\u0026#34;Food Arrangements for the Event --\u0026#34;) def setCuisine(self): print(\u0026#34;Chinese \u0026amp; Continental Cuisine to be served \\\\n\\\\n\u0026#34;) class Musician(object): def __init__(self): print(\u0026#34;Musical Arrangements for the Marriage --\u0026#34;) def setMusicType(self): print() class You(object): def __init__(self): print(\u0026#34;you::whoa Marriage Arrangements !\u0026#34;) def askEventManager(self): print(\u0026#34;you:: Let is Contact the Event Manager\\\\n\\\\n\u0026#34;) em = EventManager() em.arrange() def __del__(self): print(\u0026#34;All preparations done!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: you = You() you.askEventManager() out： you::whoa Marriage Arrangements ! you:: Let is Contact the Event Manager Event Manager:: Let me talk to the folks Arranging the hotel for Marriage ? Is the Hotel free for the event on given day? Register the Booking Flower Decorations for the Event ? -- Carnations, Rose and Lilies would be used for Decorations Food Arrangements for the Event -- Chinese \u0026amp; Continental Cuisine to be served Musical Arrangements for the Marriage -- All preparations done! 小结 EventManager类是简化接口的门面 EventManager 通过组合创建子系统对象，如Hotelier，Florist等。 补充：（最少知识原则） 最少知识原则指导我们减少对象之间的交互，就像跟你亲近的只有某几个朋友那样。\n在设计系统时，对于创建的每个对象，都应该考察与之交互的类的数量，以及交互的方式 遵循这个原则，就能够避免创建许多彼此紧密耦合的类的情况 如果类之间存在大量的依赖关系，那么系统就会变得难以维护。如果对系统中的任何一部分进行修改，都可能导致系统的其他部分被无意改变，这意味着系统会退化，是应该坚决避免的 代理模式—控制对象的访问 代理通常就是一个介于寻求方和提供方之间的中介系统\n代理模式优势 在设计模式中，代理是充当实际对象接口的类\n它能够以更简单的方式表示一个复杂的接口 它提高了现有对象的安全性。 它为不同服务器上的远程对象提供了本地接口 它为消耗大量内存的对象提供了一个轻量级的句柄 UML图 代理：它是一个控制对RealSubject类访问的类。它处理客户端的请求，负责创建或删除RealSubject 主题/真实主题：主题是定义真实主题(RealSubject）和代理（Proxy）相类似的接口。RealSubject是Subject接口的实际实现。它提供了真正的功能，然后由客户端使用。 客户端：它访问要完成工作的Proxy类。Proxy类在内部控制对RealSubject的访问，并引导客户端（Client）所请求的工作 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python # -*- coding: utf-8 -*- class Actor(object): def __init__(self): self.isBusy = False def occupied(self): self.isBusy = True print(f\u0026#34;{type(self).__name__} is occupied with current movie\u0026#34;) def available(self): self.isBusy = False print(f\u0026#34;{type(self).__name__} is free for the movie\u0026#34;) def getStatus(self): return self.isBusy class Agent(object): def __init__(self): self.principal = None def work(self): self.actor = Actor() if self.actor.getStatus(): self.actor.occupied() else: self.actor.available() if __name__ == \u0026#39;__main__\u0026#39;: r = Agent() r.work() 虚拟代理 帮助我们控制访问创建开销大的资源\n如果一个对象实例化后会占用大量内存的话，可以先利用占位符来表示，这就是所谓的虚拟代理。例如，假设你想在网站上加载大型图片，而这个请求需要很长时间才能加载完成。通常，开发人员将在网页上创建一个占位符图标，以提示这里有图像。但是，只有当用户实际点击图标时才会加载图像，从而节省了向存储器中加载大型图像的开销。因此，在虚拟代理中，当客户端请求或访间对象时，才会创建实际对象。\n远程代理 远程代理可表述如下：它给位于远程服务器或不同地址空间上的实际对象提供了一个本地表示。例如，你希望为应用程序建立一个监控系统，而该应用涉及多个Web服务器、数据库服务器、芹菜（cery）任务服务器、缓存服务器，等等。如果我们要监视这些服务器的CPU和磁盘利用率，就需要建立一个对象，该对象能够用于监视应用程序运行的上下文中，同时还可以执行远程命令以获取实际的参数值。在这种情况下，建立一个作为远程对象的本地表示的远程代理对象将可以帮助我们实现这个目标。\n保护代理 你可以通过以下几点加深对保护代理的理解。这种代理能够控制 Realsubject的敏感对象的访问。例如，在当今分布式系统的世界中，Web应用会提供多个服务，这些服务相互协作来提供各种功能。现在，在这样的系统中，认证服务充当负责认证和授权的保护性代理服务器。在这种情况下，代理自然有助于保护网站的核心功能，防止无法识别或未授权的代理访间它们。因此，代理对象会检查调用者是否具有转发请求所需的访间权限。\n智能代理 智能代理在访问对象时插入其他操作。例如，假设在系统中有一个核心组件，它将状态信息集中保存在一个地点。通常情况下，这样的组件需要被多个不同的服务调用以完成它们的任务，并且可能导致共享资源的问题。与让服务直接调用核心组件不同，智能代理是内置的，并且会在访问之前检查实际对象是否被锁定，以确保没有其他对象可以更改它。\n现实世界代理模式 下面通过现实世界的付款案例来展示代理模式的现实应用场景\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #!/usr/bin/env python # -*- coding: utf-8 -*- from abc import ABCMeta import abc class You(object): def __init__(self): print(\u0026#34;you: buy the Denim shift\u0026#34;) self.debitCard = DebitCard() self.isPurchased = None def make_payment(self): self.isPurchased = self.debitCard.do_pay() def __del__(self): if self.isPurchased: print(\u0026#34;I buy it!!!\u0026#34;) else: print(\u0026#34;I have no money\u0026#34;) class Payment(metaclass=ABCMeta): @abc.abstractmethod def do_pay(self): pass class Bank(Payment): def __init__(self): self.card = None self.account = None def __getAccount(self): # 假设card人员是账户成员 self.account = self.card return self.account def __hasFunds(self): print(f\u0026#34;Bank: checking if Account {self.__getAccount()} has enough funds\u0026#34;) return True def setCard(self, card): self.card = card def do_pay(self): if self.__hasFunds(): print(\u0026#34;Bank: Paying the merchant\u0026#34;) return True else: print(\u0026#34;Bank: Sorry, not enough funds\u0026#34;) return False class DebitCard(Payment): def __init__(self): self.bank = Bank() def do_pay(self): card = input(\u0026#34;punch in card number:\\\\n\u0026#34;) self.bank.setCard(card) return self.bank.do_pay() if __name__ == \u0026#39;__main__\u0026#39;: you = You() you.make_payment() out： you: buy the Denim shift punch in card number: 231468498 Bank: checking if Account 231468498 has enough funds Bank: Paying the merchant I buy it!!! 注解：\nclass You： 客户端\n你的行为由类You（即客户端）来表示 为了购买衬衫，该类提供了**make_payment（）**方法 make_payment（）方法会在内部调用代理的方法进行付款 如果付款成功最后会执行del（）方法 class Payment： 主题是由代理和真实主题实现的接口\n在本例中，主题是Payment类。它是一个抽象基类，代表一个接口 付款具有一个 do_pay() 方法，该方法需要借助代理和真实主题来实现 class Bank(Payment): 真实主题\nBank 实际完成从你账户向商家账户划账的功能 Bank 提供了多个方法来处理付款。代理使用setCard（）方法将借记卡详细信息发送给银行 __getAccount（）方法是Bank的私有方法，用于获取借记卡持有人的账户详细信息。为了简单起见，我们强制使用与账号相同的借记卡号。 Bank还有__hasFunds()方法，它用来查看账户持有人在账户中是否有足够的资金来为衬衫付款。 由Bank类（通过Payment接口）实现的do_pay（）方法实际上负责根据可用资金向商家付款 class DebitCard(Payment) 代理\nDebitCard类是此处的代理。当你想要付款时，它会调用do_pay()方法。这是因为你不想跑去银行提款，然后再跑回商家完成支付。 DebitCard类充当真实主题（银行）的代理 代理模式的优点 代理可以通过缓存笨重的对象或频繁访问的对象来提高应用程序的性能。 代理还提供对于真实主题的访问授权。因此，只有提供合适权限的情况下，这个模式才会接受委派 远程代理还便于与可作网络连接和数据库连接的远程服务器进行交互，并可用于监视系统 ","permalink":"https://luenci.com/en/posts/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"结构型模式\"\u003e结构型模式\u003c/h1\u003e\n\u003cp\u003e结构型模式用于设计对象和类的结构，从而使它们之间可以互相协作以获取更大的结构。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e结构型模式描述如何将对象和类组合成更大的结构\u003c/li\u003e\n\u003cli\u003e结构型模式是一种能够简化设计工作的模式，因为它能够找出更简单的方法来认识或表示实体之间的关系。在面向对象世界中，实体指的是对象或类\u003c/li\u003e\n\u003cli\u003e类模式可以通过继承来描述对象，从而提供更有用的程序接口，而对象模式则描述了如何将对象联系起来从而组合成更大的对象。结构型模式是类和对象模式的综合体\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"门面设计模式\"\u003e门面设计模式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e它为子系统的一组接口提供一个统一的接口，并定义一个高级接口来帮助客户端通过更加简单的方式使用子系统\u003c/li\u003e\n\u003cli\u003e门面模式解决的问题是，如何用的单个接口对象来表示复杂的子系统。实际上它并不是封装子系统，而是对底层子系统进行组合\u003c/li\u003e\n\u003cli\u003e它促进了实现与多个客户端的解耦\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"uml图\"\u003eUML图\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210225222333.png\"\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210225222333.png\" alt=\"image-20210225222333048\"  /\u003e\n\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"代码实现\"\u003e代码实现\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e70\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e71\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e72\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e73\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e74\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e75\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e76\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e77\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e78\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e79\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e80\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e81\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e82\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e83\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e84\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e85\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e86\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e87\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e88\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e89\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#!/usr/bin/env python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# -*- coding: utf-8 -*-\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eEventManager\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Event Manager:: Let me talk to the folks\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003earrange\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ehotelier \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Hotelier()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ehotelier\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ebookHotel()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eflorist \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Florist()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eflorist\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esetFlowerRequirements()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ecaterer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Caterer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ecaterer\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esetCuisine()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003emusiccian \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Musician()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003emusiccian\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esetMusicType()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eHotelier\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Arranging the hotel for Marriage ?\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e__isAvailable\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Is the Hotel free for the event on given day?\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebookHotel\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__isAvailable():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Register the Booking \u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eFlorist\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Flower Decorations for the Event ? --\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003esetFlowerRequirements\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Carnations, Rose and Lilies would be used for Decorations\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eCaterer\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Food Arrangements for the Event --\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003esetCuisine\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Chinese \u0026amp; Continental Cuisine to be served \u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eMusician\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Musical Arrangements for the Marriage --\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003esetMusicType\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eYou\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;you::whoa Marriage Arrangements !\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003easkEventManager\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;you:: Let is Contact the Event Manager\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003en\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        em \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e EventManager()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        em\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003earrange()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __del__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;All preparations done!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    you \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e You()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    you\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003easkEventManager()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyou::whoa Marriage Arrangements \u003cspan style=\"color:#f85149\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyou:: Let \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003eis\u003c/span\u003e Contact the Event Manager\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEvent Manager:: Let me talk to the folks\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArranging the hotel \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e Marriage \u003cspan style=\"color:#f85149\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIs the Hotel free \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e the event on given day\u003cspan style=\"color:#f85149\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRegister the Booking \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFlower Decorations \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e the Event \u003cspan style=\"color:#f85149\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCarnations, Rose \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003eand\u003c/span\u003e Lilies would be used \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e Decorations\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFood Arrangements \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e the Event \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eChinese \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003e Continental Cuisine to be served \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMusical Arrangements \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e the Marriage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAll preparations done\u003cspan style=\"color:#f85149\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"小结\"\u003e小结\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eEventManager\u003c/code\u003e类是简化接口的门面\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEventManager \u003c/code\u003e通过组合创建子系统对象，如Hotelier，Florist等。\u003c/li\u003e\n\u003c/ul\u003e","title":"结构型模式"},{"content":"预备知识 @abstractmethod：抽象方法，含abstractmethod方法的类不能实例化，继承了含abstractmethod方法的子类必须复写所有abstractmethod装饰的方法，未被装饰的可以不重写\n@ property：方法伪装属性，方法返回值及属性值，被装饰方法不能有参数，必须实例化后调用，类不能调用\n@ classmethod：类方法，可以通过实例对象和类对象调用，被该函数修饰的方法第一个参数代表类本身常用cls，被修饰函数内可调用类属性，不能调用实例属性\n@staticmethod：静态方法，可以通过实例对象和类对象调用，被装饰函数可无参数，被装饰函数内部通过类名.属性引用类属性或类方法，不能引用实例属性\n创建型模式 创建型模式的工作原理是基于对象的创建机制的。由于这些模式隔离了对象的创建细节。所以使得代码能够与要创建的对象的类型互相独立。\n它们的运行机制基于对象的创建方式 它们将对象创建的细节隔离开来 代码与所创建的对象的类型无关 单例模式 单例模式提供了这样一种机制，即确保类有且只有一个特定类型的对象，并提供全局访问点\nUML图 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 In [1]: class Singleton(object): \u0026#34;\u0026#34;\u0026#34; 单例模式 \u0026#34;\u0026#34;\u0026#34; ...: def __new__(cls): ...: if not hasattr(cls, \u0026#34;instance\u0026#34;): ...: cls.instance = super(Singleton, cls).__new__(cls) ...: return cls.instance ...: In [2]: s = Singleton() In [3]: s Out[3]: \u0026lt;__main__.Singleton at 0x7fc32793ed90\u0026gt; In [4]: s2 = Singleton() In [5]: s2 Out[5]: \u0026lt;__main__.Singleton at 0x7fc32793ed90\u0026gt; In [21]: class Singletons(object): \u0026#34;\u0026#34;\u0026#34; 懒汉式加载 \u0026#34;\u0026#34;\u0026#34; ...: __instance = None ...: def __init__(self): ...: if not Singletons.__instance: ...: print(\u0026#34;__init__ method called..\u0026#34;) ...: else: ...: print(\u0026#34;Instance alreadly created:\u0026#34;,self.getInstance()) ...: @classmethod ...: def getInstance(cls): ...: if not cls.__instance: ...: cls.__instance = Singletons() ...: return cls.__instance ...: In [22]: a = Singletons() __init__ method called.. In [23]: a1 = Singletons() __init__ method called.. In [24]: a2 = Singletons() __init__ method called.. In [25]: a.getInstance() __init__ method called.. Out[25]: \u0026lt;__main__.Singletons at 0x7fc327b020d0\u0026gt; In [26]: a Out[26]: \u0026lt;__main__.Singletons at 0x7fc327e48ca0\u0026gt; In [27]: a1 Out[27]: \u0026lt;__main__.Singletons at 0x7fc32763a250\u0026gt; In [1]: class MyMetaClass(type): \u0026#34;\u0026#34;\u0026#34; 元类实现单例模式 \u0026#34;\u0026#34;\u0026#34; ...: _instances = {} ...: def __call__(cls,*args,**kwargs): ...: print(\u0026#34;**** Here`s my MetaClass ****\u0026#34;) ...: if cls not in cls._instances: ...: cls._instances[cls] = super(MyMetaClass,cls).__call__(*args,**kwargs) ...: return cls._instances[cls] In [2]: class test(metaclass=MyMetaClass): ...: pass ...: In [3]: a = test() **** Here`s my MetaClass **** In [4]: a2 = test() **** Here`s my MetaClass **** In [5]: id(a) Out[5]: 139837183079520 In [6]: id(a2) Out[6]: 139837183079520 虽然单例模式在许多情况下效果很好，但是由于单例模式具有全局访问权限，可能会存在一些问题\n全局变量可能在某处已经被更改，但是开发人员仍然认为它们没有发生变化，而改变量还在应用程序的其他位置被使用 可能会对同一个对象创建多个应用（此单例类被多次实例化，实际只实例化一次就可以） 所有依赖于全局变量的类都会由于一个类的改变而紧密耦合为全局数据，从而可能在无意中影响另一个类 工厂模式 工厂可以帮助开发人员创建不同类型的对象，而不是直接将对象实例化\n优点如下：\n松耦合：即对象的创建可以独立于类的实现 客户端无需了解创建对象的类，但是照样可以使用它来创建对象，它只需要知道需要传递的接口，方法和参数，就能够创建所需类型的对象了。这简化了客户端的实现。 可以轻松地在工厂中添加其他类来创建其他类型的对象，而这里无需更改客户端代码。最简单的情况下，客户端只需要传递另一个参数就可以。 工厂还可以重用现有对象。但是，如果客户端直接创建对象的话，总是创建一条新的对象 简单工厂模式 UML图 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import adc from abc import ABCMeta In [10]: class Animal(metaclass=ABCMeta): ...: @abc.abstractmethod # 抽象方法，子类必须实现（重写）此方法，不然子类实例化的时候会报错 ...: def do_say(self): ...: pass In [13]: class Cat(Animal): ...: def do_say(): ...: print(\u0026#34;喵喵喵\u0026#34;) ...: In [14]: class ForrestFactory(object): ...: def make_sound(self,object_type): ...: return eval(object_type)().do_say() ...: 工厂方法模式 我们定义一个接口来创建对象，但是工厂本身并不负责创建对象，而是将这一人物交由子类来完成，即子类决定了要实例化那些类 Factory方法的创建是通过集成而不是通过实例化来完成的 工厂方法使设计更加具有可定制性。它可以返回相同的实例或子类，而不是某种类型的对象 UML图 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 from abc import ABCMeta import abc class Section(metaclass=ABCMeta): @abc.abstractmethod def describe(self): pass class PersonalSection(Section): def describe(self): print(\u0026#34;Personal Section\u0026#34;) class AlbumSection(Section): def describe(self): print(\u0026#34;Album Section\u0026#34;) class PatentSection(Section): def describe(self): print(\u0026#34;Patent Section\u0026#34;) class PublicationSection(Section): def describe(self): print(\u0026#34;Publication Section\u0026#34;) class Profile(metaclass=ABCMeta): def __init__(self): self.sections = [] self.createProfile() @abc.abstractmethod def createProfile(self): pass def getSection(self): return self.sections def addSection(self, section): self.sections.append(section) class Linkedin(Profile): def createProfile(self): self.addSection(PersonalSection) self.addSection(PatentSection) self.addSection(PublicationSection) class FaceBook(Profile): def createProfile(self): self.addSection(PersonalSection) self.addSection(AlbumSection) if __name__ == \u0026#39;__main__\u0026#39;: profie_type = input(\u0026#34;Which Profile you choice ?\u0026#34;) profie = eval(profie_type.lower().capitalize())() print(\u0026#34;Create Profile\u0026#34;, type(profie).__name__) print(\u0026#34;Profile has Sections\u0026#34;, profie.getSection()) out： Which Profile you choice ?Create Profile Linkedin Profile has Sections [\u0026lt;class \u0026#39;__main__.PersonalSection\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.PatentSection\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.PublicationSection\u0026#39;\u0026gt;] 工厂方法的优点 具有更大的灵活性，使代码更加通用，因为它不仅仅是单独的实例化某个类。这样实现哪些类取决于接口（Product），而不是 ConcreteProduct类 它们之间是松耦合的，因为创建对象的代码与使用它的代码是分开的。客户端完全不需要关心要传递哪些参数以及需要实例化哪些类。由于添加新类更加容易，所以降低了维护成本。 抽象工厂模式 抽象工厂模式的主要目的是提供一个接口来创建一系列相关对象，而无需指定具体类\nUML图 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #!/usr/bin/env python # -*- coding: utf-8 -*- import abc from abc import ABCMeta class PizzaFactory(metaclass=ABCMeta): @abc.abstractmethod def createVegPizza(self): pass @abc.abstractmethod def createNonVegPizza(self): pass class VegPizza(metaclass=ABCMeta): @abc.abstractmethod def prepare(self, VegPizza): pass class NonVegPizza(metaclass=ABCMeta): @abc.abstractmethod def server(self, VegPizza): pass class DeluxVeggiePizza(VegPizza): def prepare(self): print(f\u0026#34;perpare {type(self).__name__}\u0026#34;) class ChickenPizza(NonVegPizza): def server(self, VegPizza): print(f\u0026#34;{type(self).__name__} is served with Chicken on {type(VegPizza).__name__}\u0026#34;) class MexicanVegPizza(VegPizza): def prepare(self): print(f\u0026#34;perpare {type(self).__name__}\u0026#34;) class HamPizza(NonVegPizza): def server(self, VegPizza): print(f\u0026#34;{type(self).__name__} is served with Chicken on {type(VegPizza).__name__}\u0026#34;) class IndianPizzaFactory(PizzaFactory): def createVegPizza(self): return DeluxVeggiePizza() def createNonVegPizza(self): return ChickenPizza() class USPizzaFactory(PizzaFactory): def createVegPizza(self): return MexicanVegPizza() def createNonVegPizza(self): return HamPizza() class PizzaStore: def __init__(self): pass def makePizzas(self): for factory in [IndianPizzaFactory(), USPizzaFactory()]: self.factory = factory self.NonVegPizza = self.factory.createNonVegPizza() self.VegPizza = self.factory.createVegPizza() self.VegPizza.prepare() self.NonVegPizza.server(self.VegPizza) if __name__ == \u0026#39;__main__\u0026#39;: pizza = PizzaStore() pizza.makePizzas() out： perpare DeluxVeggiePizza ChickenPizza is served with Chicken on DeluxVeggiePizza perpare MexicanVegPizza HamPizza is served with Chicken on MexicanVegPizza ","permalink":"https://luenci.com/en/posts/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"预备知识\"\u003e预备知识\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e@abstractmethod：抽象方法，含abstractmethod方法的类不能实例化，继承了含abstractmethod方法的子类必须复写所有abstractmethod装饰的方法，未被装饰的可以不重写\u003c/p\u003e\n\u003cp\u003e@ property：方法伪装属性，方法返回值及属性值，被装饰方法不能有参数，必须实例化后调用，类不能调用\u003c/p\u003e\n\u003cp\u003e@ classmethod：类方法，可以通过实例对象和类对象调用，被该函数修饰的方法第一个参数代表类本身常用cls，被修饰函数内可调用类属性，不能调用实例属性\u003c/p\u003e\n\u003cp\u003e@staticmethod：静态方法，可以通过实例对象和类对象调用，被装饰函数可无参数，被装饰函数内部通过类名.属性引用类属性或类方法，不能引用实例属性\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"创建型模式\"\u003e创建型模式\u003c/h2\u003e\n\u003cp\u003e创建型模式的工作原理是基于对象的创建机制的。由于这些模式隔离了对象的创建细节。所以使得代码能够与要创建的对象的类型互相独立。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e它们的运行机制基于对象的创建方式\u003c/li\u003e\n\u003cli\u003e它们将对象创建的细节隔离开来\u003c/li\u003e\n\u003cli\u003e代码与所创建的对象的类型无关\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"单例模式\"\u003e单例模式\u003c/h3\u003e\n\u003cp\u003e单例模式提供了这样一种机制，即确保类有且只有一个特定类型的对象，并提供全局访问点\u003c/p\u003e\n\u003ch4 id=\"uml图\"\u003eUML图\u003c/h4\u003e\n\u003cp\u003e\u003ca href=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210216171624.png\"\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210216171624.png\" alt=\"img\"  /\u003e\n\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"代码实现\"\u003e代码实现\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e70\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e71\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e72\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e73\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e74\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eSingleton\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u0026#34;\u0026#34; 单例模式 \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __new__(cls):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003enot\u003c/span\u003e hasattr(cls, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;instance\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:             cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003einstance \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e super(Singleton, cls)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__new__(cls)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003einstance\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e]: s \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Singleton()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e]: s\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e__main__\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSingleton at \u003cspan style=\"color:#a5d6ff\"\u003e0x7fc32793ed90\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e]: s2 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Singleton()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]: s2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e__main__\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSingleton at \u003cspan style=\"color:#a5d6ff\"\u003e0x7fc32793ed90\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e21\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eSingletons\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u0026#34;\u0026#34; 懒汉式加载 \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     __instance \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003enot\u003c/span\u003e Singletons\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__instance:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:             print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;__init__ method called..\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:             print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Instance alreadly created:\u0026#34;\u003c/span\u003e,self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003egetInstance())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@classmethod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003egetInstance\u003c/span\u003e(cls):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003enot\u003c/span\u003e cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__instance:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:             cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__instance \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Singletons()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__instance\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e22\u003c/span\u003e]: a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Singletons()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__init__ method called\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e..\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e23\u003c/span\u003e]: a1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Singletons()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__init__ method called\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e..\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e24\u003c/span\u003e]: a2 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Singletons()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__init__ method called\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e..\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e25\u003c/span\u003e]: a\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003egetInstance()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__init__ method called\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e..\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e25\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e__main__\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSingletons at \u003cspan style=\"color:#a5d6ff\"\u003e0x7fc327b020d0\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e26\u003c/span\u003e]: a\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e26\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e__main__\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSingletons at \u003cspan style=\"color:#a5d6ff\"\u003e0x7fc327e48ca0\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e27\u003c/span\u003e]: a1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e27\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e__main__\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSingletons at \u003cspan style=\"color:#a5d6ff\"\u003e0x7fc32763a250\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eMyMetaClass\u003c/span\u003e(type):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u0026#34;\u0026#34; 元类实现单例模式 \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     _instances \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __call__(cls,\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs,\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;**** Here`s my MetaClass ****\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e cls \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e_instances:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:             cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e_instances[cls] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e super(MyMetaClass,cls)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__call__(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs,\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e cls\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e_instances[cls]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003etest\u003c/span\u003e(metaclass\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003eMyMetaClass):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e]: a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e test()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e****\u003c/span\u003e Here\u003cspan style=\"color:#f85149\"\u003e`\u003c/span\u003es my MetaClass \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e]: a2 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e test()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e****\u003c/span\u003e Here\u003cspan style=\"color:#f85149\"\u003e`\u003c/span\u003es my MetaClass \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e****\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]: id(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e139837183079520\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e]: id(a2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e139837183079520\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e虽然单例模式在许多情况下效果很好，但是由于单例模式具有全局访问权限，可能会存在一些问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e全局变量可能在某处已经被更改，但是开发人员仍然认为它们没有发生变化，而改变量还在应用程序的其他位置被使用\u003c/li\u003e\n\u003cli\u003e可能会对同一个对象创建多个应用（此单例类被多次实例化，实际只实例化一次就可以）\u003c/li\u003e\n\u003cli\u003e所有依赖于全局变量的类都会由于一个类的改变而紧密耦合为全局数据，从而可能在无意中影响另一个类\u003c/li\u003e\n\u003c/ul\u003e","title":"创建型模式"},{"content":"设计模式 设计模式设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。设计模式相对于设计原则来说，没有那么抽象，而且大部分都不难理解，代码实现也并不复杂。这一块的学习难点是了解它们都能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。\n经典的设计模式有 23 种。随着编程语言的演进，一些设计模式（比如 Singleton）也随之过时，甚至成了反模式，一些则被内置在编程语言中（比如 Iterator），另外还有一些新的模式诞生（比如 Monostate）。\n创建型常用的有：\n单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。 不常用的有：原型模式。 结构型常用的有：\n代理模式、桥接模式、装饰者模式、适配器模式。 不常用的有：门面模式、组合模式、享元模式。 行为型常用的有：\n观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。 不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。 面向对象 面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。 面向对象编程和面向对象编程语言 面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。 面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。 面向对象编程从字面上，按照最简单、最原始的方式来理解，就是将对象或类作为代码组织的基本单元，\n面向对象分析和面向对象设计 统一建模语言(UML) UML 是一种非常复杂的东西。它不仅仅包含我们常提到类图，还有用例图、顺序图、活动图、状态图、组件图等。在我看来，即便仅仅使用类图，学习成本也是很高的。就单说类之间的关系，UML 就定义了很多种，比如泛化、实现、关联、聚合、组合、依赖等。\n设计原则 SOLID 原则 -SRP 单一职责原则 SOLID 原则 -OCP 开闭原则 SOLID 原则 -LSP 里式替换原则 SOLID 原则 -ISP 接口隔离原则 SOLID 原则 -DIP 依赖倒置原则 DRY 原则、KISS 原则、YAGNI 原则、LOD 法则 编程规范 编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等等。 代码重构 重构的工具就是我们前面罗列的那些面向对象设计思想、设计原则、设计模式、编码规范。实际上，设计思想、设计原则、设计模式一个最重要的应用场景就是在重构的时候。我们前面讲过，虽然使用设计模式可以提高代码的可扩展性，但过度不恰当地使用，也会增加代码的复杂度，影响代码的可读性。在开发初期，除非特别必须，我们一定不要过度设计，应用复杂的设计模式。而是当代码出现问题的时候，我们再针对问题，应用原则和模式进行重构。这样就能有效避免前期的过度设计。 重构把握的点 重构的目的（why）、对象（what）、时机（when）、方法（how）； 保证重构不出错的技术手段：单元测试和代码的可测试性； 两种不同规模的重构：大重构（大规模高层次）和小重构（小规模低层次） 五者之间的联系 面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。 设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。 设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。 编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节、更加能落地。持续的小重构依赖的理论基础主要就是编程规范。 重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。 小结 ","permalink":"https://luenci.com/en/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"设计模式\"\u003e设计模式\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e设计模式设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。设计模式相对于设计原则来说，没有那么抽象，而且大部分都不难理解，代码实现也并不复杂。这一块的学习难点是了解它们都能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。\u003c/p\u003e","title":"设计模式"},{"content":" 你想通过改变实例创建方式来实现单例、缓存或其他类似的特性。\n类的创建过程 https://docs.python.org/3/reference/datamodel.html#metaclasses\n当 Python 见到 class 关键字时，会首先解析 class ... 中的内容。例如解析基类信息，最重要的是找到对应的元类信息（默认是 type)。 元类找到后，Python 需要准备 namespace （也可以认为是上节中 type 的 dict 参数）。如果元类实现了 __prepare__ 函数，则会调用它来得到默认的 namespace 。 之后是调用 exec 来执行类的 body，包括属性和方法的定义，最后这些定义会被保存进 namespace。 上述步骤结束后，就得到了创建类需要的所有信息，这时 Python 会调用元类的构造函数来真正创建类。 如果你想在类的创建过程中做一些定制(customization)的话，创建过程中任何用到了元类的地方，我们都能通过覆盖元类的默认方法来实现定制。这也是元类“无所不能”的所在，它深深地嵌入了类的创建过程。\ntype动态创建类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 常规方法创建类 class Foo(object): name = \u0026#34;luenci\u0026#34; def func(self): return 666 # 基于type创建类 # - 类名 # - 继承的类 # - 类属性 # - 类方法 foo1 = type(\u0026#34;Foo\u0026#34;, (object,), {\u0026#34;name\u0026#34;: \u0026#34;luenci\u0026#34;, \u0026#34;func\u0026#34;: lambda self: \u0026#34;hi\u0026#34;}) 元类声明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class MateFoo(type): def __init__(self,*args,**kwargs): print(\u0026#34;init\u0026#34;) # super().__init__(*args, **kwargs) type.__init__(*args, **kwargs) def __new__(cls, *args, **kwargs): # 创建类 # new_cls = super().__new__(cls, *args, **kwargs) new_cls = type.__new__(cls, *args, **kwargs) print(\u0026#34;new \u0026#34;, new_cls) return new_cls def __call__(self, *args, **kwargs): # 1.调用自己类的 __new__ 方法去创建对象 empty_obj = self.__new__(self) # 2.调用自己类的 __init__ 方法去初始化 self.__init__(empty_obj, *args, **kwargs) print(\u0026#34;call\u0026#34;, empty_obj) return empty_obj # Foo1 类就是MateFoo的对象 class Foo1(object, metaclass=MateFoo): def __init__(self, name): self.name = name print(Foo1(\u0026#34;hi\u0026#34;)) 元类实现单例模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Singleton(type): \u0026#34;\u0026#34;\u0026#34; 单例元类. \u0026#34;\u0026#34;\u0026#34; _instance = None def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) # 可以设置子类继承的字段 self.author = \u0026#34;luenci\u0026#34; def __call__(self, *args, **kwargs): # 对象实例化的时候调用 # 判断是否已经实例化对象 if not self._instance: self._instance = self.__new__(self) self.__init__(self._instance, *args, **kwargs) return self._instance class DBclient(object, metaclass=Singleton): \u0026#34;\u0026#34;\u0026#34;数据库单例连接.\u0026#34;\u0026#34;\u0026#34; def __init__(self, url, port, user, pwd): self.url = url self.port = port self.url = user self.pwd = pwd ","permalink":"https://luenci.com/en/posts/python%E5%85%83%E7%B1%BB/","summary":"\u003cblockquote\u003e\n\u003cp\u003e你想通过改变实例创建方式来实现单例、缓存或其他类似的特性。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"类的创建过程\"\u003e类的创建过程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://docs.python.org/3/reference/datamodel.html#metaclasses\"\u003ehttps://docs.python.org/3/reference/datamodel.html#metaclasses\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210424180140.svg\"\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210424180140.svg\" alt=\"class-creation\"  /\u003e\n\u003c/a\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e当 Python 见到 \u003ccode\u003eclass\u003c/code\u003e 关键字时，会首先解析 \u003ccode\u003eclass ...\u003c/code\u003e 中的内容。例如解析基类信息，最重要的是找到对应的元类信息（默认是 \u003ccode\u003etype\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e元类找到后，Python 需要准备 namespace （也可以认为是上节中 \u003ccode\u003etype\u003c/code\u003e 的 \u003ccode\u003edict\u003c/code\u003e 参数）。如果元类实现了 \u003ccode\u003e__prepare__\u003c/code\u003e 函数，则会调用它来得到默认的 namespace 。\u003c/li\u003e\n\u003cli\u003e之后是调用 \u003ccode\u003eexec\u003c/code\u003e 来执行类的 body，包括属性和方法的定义，最后这些定义会被保存进 namespace。\u003c/li\u003e\n\u003cli\u003e上述步骤结束后，就得到了创建类需要的所有信息，这时 Python 会调用元类的构造函数来真正创建类。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e如果你想在类的创建过程中做一些定制(customization)的话，创建过程中任何用到了元类的地方，我们都能通过覆盖元类的默认方法来实现定制。这也是元类“无所不能”的所在，它深深地嵌入了类的创建过程。\u003c/p\u003e\n\u003ch1 id=\"type动态创建类\"\u003etype动态创建类\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 常规方法创建类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eFoo\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e666\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 基于type创建类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# - 类名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# - 继承的类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# - 类属性\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# - 类方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e type(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Foo\u0026#34;\u003c/span\u003e, (object,), {\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;func\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ff7b72\"\u003elambda\u003c/span\u003e self: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;hi\u0026#34;\u003c/span\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Python元类学习"},{"content":"Go语言特点 没有头文件概念，.go后缀 强类型语言，编译型语言 一个go语言的应用程序，在运行的时候是不需要依赖外部库的 把执行时需要的库都打包到程序中 go程序比较大 如果import的包没有使用，那么程序不允许编译 go语法不区分平台的，在windos下面编译的一个程序，可以在Linux上运行，需要配置环境变量来控制 GOOS：设定运行平台 mac：darwin linux：linux windos：windos GOARCH：目标平台的体系架构 386 amd64 arm Go命令 go build -o 生成文件名.exe 编译文件名.go\ngo run *.go\n直接运行程序不会编译成exe文件 安装程序\n./configure make make install —\u0026gt;将编译好的程序安装到指定目录 go install\n将编译后的可执行文件安装到 GOBIN 目录下 go mod\n参数\ngo mod 资料连接 go mod 使用\n开始使用 Go Module\n依赖包存储位置 使用go get获取的包放在$GOPATH/src/目录下 使用go mod下载的依赖包放在$GOPATH/pkg/mod/目录下，所有项目共享 Go目录结构 一般的，一个Go项目在GOPATH下，会有如下三个目录： 一般，bin和pkg目录可以不创建，go命令会自动创建（如 go install），只需要创建src目录即可。\n1 2 3 |--bin |--pkg |--src bin存放编译后的可执行文件\n1 pkg 存放编译后的包文件\npkg中的文件是Go编译生成的，而不是手动放进去的 src存放项目源文件\nGo数据类型 go语言不支持隐式类型转换 比如从int 转为 int 64就会发生编译错误 显示类型转换和隐式类型转换 当两种或多种数据类型进行某种操作时，不需要干预，系统会自动进行隐式转换。 但你需要把一个 long 类型的数据转成 int 时，又或者让 string 与 int 互转，当数据小数点太多时，这时候就必须使用 显式转型 Golang的零值 Go语言中的零值是变量没有做初始化时系统默认设置的值。 所有其他数值型的类型（包括complex64/128）零值都是0，可以用常量表达式代表数值0的任何形式表示出来。 但是类型不能混用，变量类型和零值类型必须匹配。 布尔类型的零值（初始值）为 false，数值类型的零值为 0，字符串类型的零值为空字符串\u0026quot;\u0026quot;，而指针、切片、映射、通道、函数和接口的零值则是 nil。 Go基础语法 变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package main import \u0026#34;fmt\u0026#34; func main() { // 变量定义: var // 常量定义: const // 1.先定义变量，var 变量名 类型 ；再赋值 变量=XX var name string name = \u0026#34;Luenci\u0026#34; var age int age = 22 fmt.Println(\u0026#34;name:\u0026#34;, name) // 2.定义时直接赋值 var sex = \u0026#34;man\u0026#34; fmt.Printf(\u0026#34;sex is %s \\\\n\u0026#34;, sex) fmt.Printf(\u0026#34;name is %s age is %d \\\\n\u0026#34;, name, age) // 3.定义时直接赋值，使用时自动推导类型（常用） hobby := \u0026#34;篮球\u0026#34; fmt.Println(\u0026#34;my hobby is \u0026#34;, hobby) // 灰色部分表示形参 test(10, \u0026#34;ll\u0026#34;) // 4. 平行赋值 i, j := 10, 22 fmt.Println(i) fmt.Println(j) i, j = j, i fmt.Println(i) fmt.Println(j) } func test(a int, b string) { fmt.Println(a) fmt.Println(b) } 自增/自减 语法 1 2 3 4 5 6 7 8 9 10 11 package main func main() { i := 11 println(\u0026#34;i 自增前\u0026#34;, i) i++ println(\u0026#34;i 自增后\u0026#34;, i) i-- println(\u0026#34;i 自减后\u0026#34;, i) } 指针 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main func main() { // go语言在使用指针时，会使用内部的垃圾回收机制（garbage collector），开发人员不需要手动释放内存 // go语言可以返回栈上指针,程序在编译的时候就确定了变量的分配位置 // 在编译的时候，如果发现有必要的话，就将变量分配到堆上 // 定义指针，方式一 name := \u0026#34;luenci\u0026#34; namePtr := \u0026amp;name println(\u0026#34;指针地址是\u0026#34;, namePtr) println(\u0026#34;指针内容是\u0026#34;, *namePtr) // 定义指针关键字 new，方式二 name2Ptr := new(string) *name2Ptr = \u0026#34;luenci\u0026#34; println(\u0026#34;指针地址是\u0026#34;, name2Ptr) println(\u0026#34;指针内容是\u0026#34;, *name2Ptr) res := testPtr() if res == nil { println(\u0026#34;指针为空\u0026#34;) } else { println(\u0026#34;指针值为\u0026#34;, *res) } } // 定义一个函数,返回一个string类型的指针,go语言返回值写在参数列表后面 func testPtr() *string { city := \u0026#34;shanghai\u0026#34; cityPtr := \u0026amp;city return cityPtr } string 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \u0026#34;fmt\u0026#34; ) func main() { name := \u0026#34;Lynn\u0026#34; // 换行，原生字符串输出时候，使用反引号 `` usage := `./a.out \u0026lt;option\u0026gt; -h help -a xxx` fmt.Println(\u0026#34;name:\u0026#34;, name) fmt.Println(\u0026#34;usage:\u0026#34;, usage) // 长度 自由函数 len() fmt.Println(\u0026#34;name len\u0026#34;, len(name)) // 基本循环 for i := 0; i \u0026lt; len(name); i++ { fmt.Printf(\u0026#34;name[%d] %c \\\\n\u0026#34;, i, name[i]) } // 拼接 i, j := \u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34; fmt.Println(\u0026#34;i+j\u0026#34;, i+j) // 使用const 修饰为常量不能修改 constip= \u0026#34;127.0.0.1\u0026#34; fmt.Println(\u0026#34;const 常量:\u0026#34;,ip) } 定长数组 在不考虑逃逸分析的情况下，如果数组中元素的个数小于或者等于 4 个，那么所有的变量会直接在栈上初始化，如果数组元素大于 4 个，变量就会在静态存储区初始化然后拷贝到栈上，这些转换后的代码才会继续进入中间代码生成和机器码生成两个阶段，最后生成可以执行的二进制文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import \u0026#34;fmt\u0026#34; func main() { // 定义数组 建议使用自动推导 //var num = [10] int {1,2,3} //var num [10] int = [10]int{1,2,3} num := [10]int{1, 2, 3} // make 创建 //var nums[]int //nums = make([]int,10) // 遍历方式一 for i := 0; i \u0026lt; len(num); i++ { fmt.Printf(\u0026#34;num[%d] %d \\\\n\u0026#34;, i, num[i]) } // 遍历方式二 // key 是数组下标, value是数组值（副本） // 如果想忽略某个值 可使用 _ // for _, value := range num {...} for key, value := range num { // value是一个临时变量，不断的被重新赋值，修改value并不会更改原来num的值 fmt.Printf(\u0026#34;key %d value %d \\\\n\u0026#34;, key, value) } } 切片 扩容是为切片分配新的内存空间并拷贝原切片中元素的过程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import \u0026#34;fmt\u0026#34; func main() { // slice 切片 底层也是数组，可以动态改变长度 names := []string{\u0026#34;lynn\u0026#34;, \u0026#34;luenci\u0026#34;} // 对于一个切片不仅仅只有长度概念，还有\u0026#39;容量\u0026#39;概念 // 追加元素前 长度是 2 容量是 2 // 追加元素前 长度是 3 容量是 4 // 在一定量级的时候,动态追加元素, 容量一般是2倍增长 fmt.Printf(\u0026#34;追加元素前 长度是 %d 容量是 %d \\\\n\u0026#34;, len(names), cap(names)) // append 追加元素 names = append(names, \u0026#34;kk\u0026#34;) fmt.Printf(\u0026#34;追加元素前 长度是 %d 容量是 %d \\\\n\u0026#34;, len(names), cap(names)) // 在一定量级的时候,动态追加元素, 容量一般是2倍增长 num1 := [] int {} for i := 0; i \u0026lt; 50; i++ { num1 = append(num1, i) fmt.Printf(\u0026#34;长度 %d 容量 %d \\\\n\u0026#34;, len(num1), cap(num1)) } // 使用make创建数组 //mnu2 := make([]int, 10) //mnu2 } 切片2 在分配内存空间之前需要先确定新的切片容量，运行时根据切片的当前容量选择不同的策略进行扩容：\n如果期望容量大于当前容量的两倍就会使用期望容量； 如果当前切片的长度小于 1024 就会将容量翻倍； 如果当前切片的长度大于 1024 就会每次增加 25% 的容量，直到新容量大于期望容量； 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import \u0026#34;fmt\u0026#34; func main() { citys := [6]string{\u0026#34;shanghai\u0026#34;, \u0026#34;beijing\u0026#34;, \u0026#34;wuhan\u0026#34;, \u0026#34;hangzhou\u0026#34;, \u0026#34;nanjing\u0026#34;, \u0026#34;shenzhen\u0026#34;} fmt.Printf(\u0026#34;city 源地址 %p \\\\n\u0026#34;, \u0026amp;citys[0]) // 使用索引切片访问 前开后闭 浅拷贝（副本） loveCity := citys[0:1] //fmt.Println(\u0026#34;my love city\u0026#34;, loveCity) fmt.Printf(\u0026#34;切片地址 %p \\\\n\u0026#34;, \u0026amp;loveCity[0]) loveCity[0] = \u0026#34;kk\u0026#34; fmt.Println(\u0026#34;修改元素\u0026#34;,loveCity) fmt.Println(\u0026#34;citys\u0026#34;,citys[0]) // 如果想拷贝一份独立与源数组的 使用自由函数 copy() loveCitys := copy(loveCity, citys[:]) fmt.Printf(\u0026#34;copy 地址 %p \\\\n\u0026#34;, \u0026amp;loveCitys) } 切片的很多功能都是由运行时实现的，无论是初始化切片，还是对切片进行追加或扩容都需要运行时的支持，需要注意的是在遇到大切片扩容或者复制时可能会发生大规模的内存拷贝，一定要减少类似操作避免影响程序的性能。\nmap 字典 $$当桶的数量小于2^4时，由于数据较少、使用溢出桶的可能性较低，会省略创建的过程以减少额外开销；$$\n$$当桶的数量多于 2^4 时，会额外创建 2^(B−4）个溢出桶；$$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package main import ( \u0026#34;fmt\u0026#34; ) func main() { // key -\u0026gt; value key是经过hash运算，是无顺序的 // 使用map之前一定要分配空间 var idName map[int]string idName = make(map[int]string, 10) idName[0] = \u0026#34;luenci\u0026#34; idName[1] = \u0026#34;lynn\u0026#34; //遍历map for key, value := range idName { fmt.Println(\u0026#34;id为\u0026#34;, key, \u0026#34;value为\u0026#34;, value) } // 确定key是否在map中 // 在map中不存在访问越界，访问一个不存在的key，map不会崩溃，会返回零值 // 零值: bool-》true/false string-》空 int-》0 name := idName[9] fmt.Println(\u0026#34;name值为\u0026#34;, name) idScore := make(map[int]int, 10) fmt.Println(\u0026#34;int零值\u0026#34;, idScore[0]) idFalse := make(map[int]bool, 10) fmt.Println(\u0026#34;bool零值\u0026#34;, idFalse[0]) // map无法通过获取value来判断这个对应的key是否存在 // 可用过下面方法来确定是否存在key ok -》 bool值 value, ok := idName[99] fmt.Println(\u0026#34;ok值为\u0026#34;,ok) if ok { fmt.Println(\u0026#34;idname[99]存在,值为\u0026#34;, value) } else { fmt.Println(\u0026#34;key不存在\u0026#34;) } // 删除map中的元素 // 删除不存在的key也不会报错 delete(idName,0) fmt.Println(\u0026#34;删除后的map为\u0026#34;,idName) // 并发处理时需要对map进行上锁TODO } func 函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \u0026#34;fmt\u0026#34; func test1(a int, b int, c string) (int, string, bool) { return a + b, c, false } func test2(a, b int, c string) (res int, str string, bl bool) { // 直接使用返回值变量名参与运算 res = a + b str = c bl = false // 当返回值有名称时候，可以直接return return } func main() { a, b, c := test1(1, 2, \u0026#34;luenci\u0026#34;) fmt.Println(\u0026#34;test1函数返回值为\u0026#34;, a, b, c) res, str, bl := test2(1, 2, \u0026#34;luenci\u0026#34;) fmt.Println(\u0026#34;test2函数返回值为\u0026#34;, res, str, bl) } 内存逃逸 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import \u0026#34;fmt\u0026#34; func main() { resPtr := test3() fmt.Println(\u0026#34;rePtr:\u0026#34;, *resPtr) } func test3() *string { // 没有被返回，没有逃逸 name := \u0026#34;lynn\u0026#34; p0 := \u0026amp;name fmt.Println(\u0026#34;p0\u0026#34;, *p0) // 地址返回 内存逃逸 city := \u0026#34;上海\u0026#34; ptr := \u0026amp;city fmt.Println(\u0026#34;地址为:\u0026#34;, ptr) return ptr } Switch选择分支 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;reflect\u0026#34; ) func main() { cmds := os.Args fmt.Println(\u0026#34;cmds 类型为\u0026#34;, reflect.TypeOf(cmds)) switch cmds[1] { // case 中默认加了 break 不需要手动break case \u0026#34;luenci\u0026#34;: // 如果想向下穿透（执行下一个条件中的代码）,使用 fallthrough 关键字 fmt.Println(\u0026#34;i am luenci\u0026#34;) //fallthrough case \u0026#34;Lynn\u0026#34;: fmt.Println(\u0026#34;i am Lynn\u0026#34;) case \u0026#34;kk\u0026#34;: fmt.Println(\u0026#34;i am kk\u0026#34;) default: fmt.Println(\u0026#34;默认值\u0026#34;) } for key, value := range cmds { fmt.Println(\u0026#34;key\u0026#34;, key, \u0026#34;value\u0026#34;, value) } } 标签LABEL 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \u0026#34;fmt\u0026#34; func main() { // 标签 LABLE1 // goto LABEL1 \u0026gt;\u0026gt; 下次进入循环时,i 不会保存之前状态，i=0,重新向下运行 // break LABEL1 \u0026gt;\u0026gt; 直接跳出指定位置的循环 // continue LABEL1 \u0026gt;\u0026gt; 跳到指定位置，会记录之前的状态，向下执行 // 标签名称可以自定义命名 LABEL1: for i := 0; i \u0026lt; 5; i++ { for j := 0; j \u0026lt; 5; j++ { if j == 3 { goto LABEL1 } fmt.Println(\u0026#34;i\u0026#34;, i, \u0026#34;,j\u0026#34;, j) } } } 枚举iota 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 package main import \u0026#34;fmt\u0026#34; // iota 是常量组计数器 // iota从0开始，每换行递增1,从第一次出现iota开始计算 // 常量组如果不赋值，默认上一行表达式相同 // iota是以行为单位递增 // 每个常量组的iota是独立的，都是从零开始递增 const ( MONDAY= iota // 0 TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY M,N= iota, iota // const 属于预编译，所以不需要 := 自动推导 ) // go语言中没有枚举类型，但是可以使用 const + iota（常量累加器）来进行模拟 func main() { // 变量组统一命名变量 var ( number int name string flag bool ) fmt.Println(number, name, flag) fmt.Println(MONDAY) fmt.Println(TUESDAY) fmt.Println(WEDNESDAY) fmt.Println(THURSDAY) fmt.Println(FRIDAY) fmt.Println(SATURDAY) fmt.Println(M,N) } 结构体 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import \u0026#34;fmt\u0026#34; // 结构体声明 type + 别名 + struct type Student struct { name string age int sex string score float64 } func main() { lynn := Student{ name: \u0026#34;lynn\u0026#34;, age: 20, sex: \u0026#34;girl\u0026#34;, score: 100, // 最后换一个变量后必须加`,`, 或者以`}`结尾 } fmt.Println(\u0026#34;lynn\u0026#34;, lynn) s1 := \u0026amp;lynn fmt.Println(\u0026#34;s1\u0026#34;, s1.name, s1.age, s1.sex, s1.score) fmt.Println(\u0026#34;s1\u0026#34;, (*s1).name, (*s1).age, (*s1).sex, (*s1).score) // 如果只对结构体部分变量赋值，name应该指定变量名称 luenci := Student{ name: \u0026#34;luenci\u0026#34;, age: 21, } fmt.Println(\u0026#34;leunci\u0026#34;, luenci) } defer函数 \u0026amp; 匿名函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { readFile(\u0026#34;4.结构体.go\u0026#34;) } func readFile(filename string) { // os.Open 打开文件，会返回一个文件指针和err信息，如果无错误 err 是 nil // defer 当你的堆栈退出的时候会调用 （必须函数调用结束） // func (){...}() 不声明函数名表示匿名函数 后面加括号() 调用 fp, err := os.Open(filename) defer func() { fmt.Println(\u0026#34;文件关闭！\u0026#34;) _ = fp.Close() }() defer fmt.Println(\u0026#34;00000\u0026#34;) defer fmt.Println(\u0026#34;00001\u0026#34;) defer fmt.Println(\u0026#34;00002\u0026#34;) if err != nil { fmt.Println(\u0026#34;文件读取错误,error:\u0026#34;, err) return } buf := make([]byte, 1024) n, _ := fp.Read(buf) fmt.Println(string(buf)) fmt.Println(\u0026#34;读取文件长度为\u0026#34;, n) } init函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package sub import \u0026#34;fmt\u0026#34; // 在go语言同一层级目录，不允许出现多个 package 名称 func init() { fmt.Println(\u0026#34;sub库下的init函数\u0026#34;) } func Sub(a, b int) int { test5() return a - b } package main // sub 是文件夹名，也是package名 import ( _ \u0026#34;luenci/github.com/day02/5.init函数/sub\u0026#34; // 只会调用sub中的init函数 ) // init 函数没有参数和返回值,使用如下 // 同一个包中包含多个init函数时候,调用顺序是不确定的（同一个package下的多个文件都可以有init） // init 函数是不允许调用(显示调用)的 // 如果只想调用一个package中的 init函数,只需在导包前加上 _ func main() { //res := sub.Sub(10, 5) //fmt.Println(\u0026#34;sub res\u0026#34;, res) } ","permalink":"https://luenci.com/en/posts/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E8%AF%AD%E6%B3%95/","summary":"\u003ch1 id=\"go语言特点\"\u003eGo语言特点\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e没有头文件概念，\u003ccode\u003e.go\u003c/code\u003e后缀\u003c/li\u003e\n\u003cli\u003e强类型语言，编译型语言\u003c/li\u003e\n\u003cli\u003e一个go语言的应用程序，在运行的时候是不需要依赖外部库的\n\u003cul\u003e\n\u003cli\u003e把执行时需要的库都打包到程序中\u003c/li\u003e\n\u003cli\u003ego程序比较大\u003c/li\u003e\n\u003cli\u003e如果import的包没有使用，那么程序不允许编译\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ego语法不区分平台的，在windos下面编译的一个程序，可以在Linux上运行，需要配置环境变量来控制\n\u003cul\u003e\n\u003cli\u003eGOOS：设定运行平台\n\u003cul\u003e\n\u003cli\u003emac：darwin\u003c/li\u003e\n\u003cli\u003elinux：linux\u003c/li\u003e\n\u003cli\u003ewindos：windos\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGOARCH：目标平台的体系架构\n\u003cul\u003e\n\u003cli\u003e386\u003c/li\u003e\n\u003cli\u003eamd64\u003c/li\u003e\n\u003cli\u003earm\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"go命令\"\u003eGo命令\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ego build -o 生成文件名.exe 编译文件名.go\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ego run *.go\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e直接运行程序不会编译成exe文件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装程序\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e./configure\u003c/li\u003e\n\u003cli\u003emake\u003c/li\u003e\n\u003cli\u003emake install —\u0026gt;将编译好的程序安装到指定目录\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ego install\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将编译后的可执行文件安装到 GOBIN 目录下\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ego mod\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.notion.so/6b079c18f2fa42d9bccd79f84eaa0578\"\u003e参数\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ego mod 资料连接\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://juejin.cn/post/6844903798658301960\"\u003ego mod 使用\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/59687626\"\u003e开始使用 Go Module\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"依赖包存储位置\"\u003e依赖包存储位置\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e使用go get获取的包放在\u003ccode\u003e$GOPATH/src/\u003c/code\u003e目录下\u003c/li\u003e\n\u003cli\u003e使用go mod下载的依赖包放在\u003ccode\u003e$GOPATH/pkg/mod/\u003c/code\u003e目录下，所有项目共享\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"go目录结构\"\u003eGo目录结构\u003c/h2\u003e\n\u003ch3 id=\"一般的一个go项目在gopath下会有如下三个目录\"\u003e一般的，一个Go项目在GOPATH下，会有如下三个目录：\u003c/h3\u003e\n\u003cp\u003e一般，bin和pkg目录可以不创建，go命令会自动创建（如 go install），只需要创建src目录即可。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003ebin\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003epkg\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003esrc\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebin\u003c/code\u003e存放编译后的可执行文件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epkg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e存放编译后的包文件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epkg\u003c/code\u003e中的文件是Go编译生成的，而不是手动放进去的\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003esrc\u003c/code\u003e存放项目源文件\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"go数据类型\"\u003eGo数据类型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ego语言不支持隐式类型转换\n\u003cul\u003e\n\u003cli\u003e比如从int 转为 int 64就会发生编译错误\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"显示类型转换和隐式类型转换\"\u003e显示类型转换和隐式类型转换\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e当两种或多种数据类型进行某种操作时，不需要干预，系统会自动进行隐式转换。\u003c/li\u003e\n\u003cli\u003e但你需要把一个 long 类型的数据转成 int 时，又或者让 string 与 int 互转，当数据小数点太多时，这时候就必须使用 显式转型\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"golang的零值\"\u003eGolang的零值\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGo语言中的零值是变量没有做初始化时系统默认设置的值。 所有其他数值型的类型（包括complex64/128）零值都是0，可以用常量表达式代表数值0的任何形式表示出来。 但是类型不能混用，变量类型和零值类型必须匹配。\u003c/li\u003e\n\u003cli\u003e布尔类型的零值（初始值）为 false，数值类型的零值为 0，字符串类型的零值为空字符串\u0026quot;\u0026quot;，而指针、切片、映射、通道、函数和接口的零值则是 nil。\u003c/li\u003e\n\u003c/ul\u003e","title":"Go语言基础知识和语法"},{"content":"Go面向对象相关知识 类的封装和绑定方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package main import \u0026#34;fmt\u0026#34; // go语言没有class关键字生成类 // 使用struct声明类 type Person struct { // 成员属性 name string age int gender string } // 类外边绑定方法 // 类的方法，可以使用自己的成员 // 使用指针可以修改类的成员变量等 func (p *Person) Eat() { fmt.Println(\u0026#34;使用 *Person 指针 修改前\u0026#34;) fmt.Println(p.name + \u0026#34; is eating\u0026#34;) p.name = \u0026#34;luenci\u0026#34; fmt.Println(\u0026#34;使用 *Person 指针 修改后\u0026#34;) fmt.Println(p.name + \u0026#34; is eating\u0026#34;) } func (p Person) Eat2() { fmt.Println(\u0026#34;使用 Person 不是指针 修改前\u0026#34;) fmt.Println(p.name + \u0026#34; is eating\u0026#34;) p.name = \u0026#34;luenci\u0026#34; fmt.Println(\u0026#34;使用 Person 不是指针 修改后\u0026#34;) fmt.Println(p.name + \u0026#34; is eating\u0026#34;) } func main() { lynn := Person{ name: \u0026#34;lynn\u0026#34;, age: 20, gender: \u0026#34;girl\u0026#34;, } lynn.Eat() lynn.Eat2() } 类的继承 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package main import \u0026#34;fmt\u0026#34; type Human struct { name string sex string age int } type Student struct { hum Human // 包含 Human类型的变量 是嵌套类 school string } type Teacher struct { Human // 直接声明Human类型，没有定义变量 类继承 school string } // 类外面绑定方法 func (h *Human) Eat() { fmt.Println(h.name + \u0026#34; is eating\u0026#34;) } func main() { st1 := Student{ hum: Human{ name: \u0026#34;lynn\u0026#34;, sex: \u0026#34;girl\u0026#34;, age: 20, }, school: \u0026#34;一中\u0026#34;, } fmt.Println(\u0026#34;st1\u0026#34;, st1) fmt.Println(\u0026#34;st1 name\u0026#34;, st1.hum.name) t1 := Teacher{} t1.school = \u0026#34;一中\u0026#34; t1.name = \u0026#34;lynn\u0026#34; t1.sex = \u0026#34;girl\u0026#34; t1.age = 20 fmt.Println(\u0026#34;t1\u0026#34;, t1) fmt.Println(\u0026#34;t1 name\u0026#34;, t1.name) // 继承的时候虽然我们没有声明变量名称，但是默认自动会给类型创建一个同名字段 // 这是为了能在子类中操作父类，因为：子类父类可能出现同名字段 fmt.Println(\u0026#34;t1 age\u0026#34;, t1.Human.age) } 类成员访问权限（字段大小写） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 package src import \u0026#34;fmt\u0026#34; // 类外面绑定方法 // 即使在类的定义前也没关系，go应该不是逐行运行 func (h *Human) Eat() { fmt.Println(h.Name + \u0026#34; is eating\u0026#34;) } type Human struct { Name string Sex string Age int } type Student struct { Hum Human // 包含 Human类型的变量 是嵌套类 School string } type Teacher struct { Human // 直接声明Human类型，没有定义变量 类继承 School string } package main import ( \u0026#34;fmt\u0026#34; \u0026#34;luenci/github.com/day03/3.类成员访问权限/src\u0026#34; ) // go语言中，权限都是通过首字母大小写来控制的 // import XX 如果package名称不同，那么只有大写字母开头的才是 Public // 对于类里面的成员、函数等，只有大写字母开头的才能在其他的包中使用 // 如果在用一个package（文件下）下则无以上限制 func main() { st1 := src.Student{ Hum: src.Human{ Name: \u0026#34;lynn\u0026#34;, Sex: \u0026#34;girl\u0026#34;, Age: 20, }, School: \u0026#34;一中\u0026#34;, } fmt.Println(\u0026#34;st1\u0026#34;, st1) fmt.Println(\u0026#34;st1 name\u0026#34;, st1.Hum.Name) t1 := src.Teacher{} t1.School = \u0026#34;一中\u0026#34; t1.Name = \u0026#34;lynn\u0026#34; t1.Sex = \u0026#34;girl\u0026#34; t1.Age = 20 fmt.Println(\u0026#34;t1\u0026#34;, t1) fmt.Println(\u0026#34;t1 name\u0026#34;, t1.Name) fmt.Println(\u0026#34;t1 age\u0026#34;, t1.Human.Age) } 接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 package main import ( \u0026#34;fmt\u0026#34; ) // go语言中,interface代表接口 // interface 不仅仅是用来处理多态，它可以接收任意的数据类型 func main() { // func Println(a ...interface{}) (n int, err error) { ... } // 定义三个接口类型 var i, j, k interface{} i = []string{\u0026#34;lynn\u0026#34;, \u0026#34;luenci\u0026#34;} j = 98 k = false // 快速判断接口的类型 //jType := reflect.TypeOf(j) 反射 jType, ok := j.(int) fmt.Println(\u0026#34;ok\u0026#34;, ok) if !ok { fmt.Println(\u0026#34;j不是int类型\u0026#34;) } fmt.Println(\u0026#34;jType\u0026#34;, jType) fmt.Println(i, j, k) // 最常用的场景：把interface当成一个函数的参数，（类似于上面的 Println函数） ，使用switch来判断用户输入的不同类型 // 根据不同类型，做相关的逻辑处理 // 创建一个具有三个接口类型的切片 array := make([]interface{}, 3) array[0] = 3 array[1] = \u0026#34;luenci\u0026#34; array[2] = true for _, value := range array { // 获取接口中真正的数据类型 switch v := value.(type) { case int: fmt.Println(\u0026#34;当前数据类型为int，内容为:\u0026#34;, v) case string: fmt.Println(\u0026#34;当前数据类型为string，内容为:\u0026#34;, v) case bool: fmt.Println(\u0026#34;当前数据类型为bool，内容为:\u0026#34;, v) default: fmt.Println(\u0026#34;不是合理的数据类型\u0026#34;) } } } 多态 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package main import \u0026#34;fmt\u0026#34; // go语言多态，需要实现定义接口 // 定义一个接口，类型是interface type IAttack interface { // 如果定义了多个接口函数，那么实现的类必须全部实现这些接口，才可以赋值 Attack() // 接口函数可以有多个，但是只能有函数原型，不可以有实现 } // 低等级玩家 type HumanLowLevel struct { name string level int } func (a *HumanLowLevel) Attack() { fmt.Println(\u0026#34;我是\u0026#34;, a.name, \u0026#34;等级为\u0026#34;, a.level, \u0026#34;造成伤害1000\u0026#34;) } // 高等级玩家 type HumanHighLevel struct { name string level int } func (a *HumanHighLevel) Attack() { fmt.Println(\u0026#34;我是\u0026#34;, a.name, \u0026#34;等级为\u0026#34;, a.level, \u0026#34;造成伤害50000\u0026#34;) } // 定义一个多态的通用接口，传入不同的对象，调用相同的函数，实现不同的效果 func DoAttack(a IAttack) { a.Attack() } func main() { //var player IAttack // 定义一个包含Attack的接口变量 lowLevel1 := HumanLowLevel{ name: \u0026#34;luenci\u0026#34;, level: 0, } HighLevel1 := HumanHighLevel{ name: \u0026#34;lynn\u0026#34;, level: 1000, } // 两个不同对象调用相同方法 DoAttack(\u0026amp;HighLevel1) DoAttack(\u0026amp;lowLevel1) //lowLevel1.Attack() // 对player赋值为lowLevel1，接口需要使用指针类型来赋值 //player = \u0026amp;lowLevel1 //player.Attack() } ","permalink":"https://luenci.com/en/posts/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","summary":"\u003ch1 id=\"go面向对象相关知识\"\u003eGo面向对象相关知识\u003c/h1\u003e\n\u003ch2 id=\"类的封装和绑定方法\"\u003e类的封装和绑定方法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// go语言没有class关键字生成类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 使用struct声明类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Person \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 成员属性\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   name   \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   age    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   gender \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 类外边绑定方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 类的方法，可以使用自己的成员\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 使用指针可以修改类的成员变量等\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (p \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003ePerson) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eEat\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;使用 *Person 指针 修改前\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(p.name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34; is eating\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   p.name = \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;使用 *Person 指针 修改后\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(p.name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34; is eating\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (p Person) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eEat2\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;使用 Person 不是指针 修改前\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(p.name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34; is eating\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   p.name = \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;使用 Person 不是指针 修改后\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(p.name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34; is eating\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   lynn \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Person{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      name:   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;lynn\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      age:    \u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      gender: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;girl\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   lynn.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eEat\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   lynn.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eEat2\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"类的继承\"\u003e类的继承\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Human \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   name \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   sex  \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   age  \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Student \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   hum    Human \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 包含 Human类型的变量 是嵌套类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   school \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Teacher \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Human  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 直接声明Human类型，没有定义变量 类继承\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   school \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 类外面绑定方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (h \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eHuman) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eEat\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(h.name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34; is eating\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   st1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Student{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      hum: Human{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         name: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;lynn\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         sex:  \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;girl\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         age:  \u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      school: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;一中\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;st1\u0026#34;\u003c/span\u003e, st1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;st1 name\u0026#34;\u003c/span\u003e, st1.hum.name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   t1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Teacher{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   t1.school = \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;一中\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   t1.name = \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;lynn\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   t1.sex = \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;girl\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   t1.age = \u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;t1\u0026#34;\u003c/span\u003e, t1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;t1 name\u0026#34;\u003c/span\u003e, t1.name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 继承的时候虽然我们没有声明变量名称，但是默认自动会给类型创建一个同名字段\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 这是为了能在子类中操作父类，因为：子类父类可能出现同名字段\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;t1 age\u0026#34;\u003c/span\u003e, t1.Human.age)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"类成员访问权限字段大小写\"\u003e类成员访问权限（字段大小写）\u003c/h2\u003e","title":"Go面向对象相关知识"},{"content":"管道和go程 goroutine（go程） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func display(num int) { count := 1 for { fmt.Println(\u0026#34;============\u0026gt; 这是子go程：\u0026#34;, num, \u0026#34;当前count值\u0026#34;, count) count++ } } func main() { // 启动子go程 for i := 0; i \u0026lt; 3; i++ { go display(i) } // 主go程 count := 1 for { fmt.Println(\u0026#34;============\u0026gt; 这是主go程：\u0026#34;, count) count++ time.Sleep(1 * time.Second) } } 提前退出go程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;time\u0026#34; ) // GOEXIT ===\u0026gt; 提前退出go程 // return ===\u0026gt; 返回当前函数 // exit ===\u0026gt; 退出当前进程 func main() { go func() { func() { fmt.Println(\u0026#34;子go程内部的函数!\u0026#34;) //return // 退出当前函数 //os.Exit(-1) // 退出进程 runtime.Goexit() // 退出当前go程 }() fmt.Println(\u0026#34;子go程结束！\u0026#34;) }() // 主go程需要等待子go程退出 fmt.Println(\u0026#34;主go程~\u0026#34;) time.Sleep(5 * time.Second) fmt.Println(\u0026#34;OVER!\u0026#34;) } 无缓冲管道 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) /* 当通道在多个协程之间传输的是指向数据的指针是，且读写操作是由不同的协程操作，则需要提供额外的同步动作。 */ func main() { // 当涉及到多go程时，c语言使用互斥量，上锁来保持资源同步，避免资源竞争问题 // go语言更好的解决方案是管道、通道 // 使用通道不需要手动进行加锁 //sync.RWMutex{} // 创建管道 关键字 chan numChan := make(chan int) // 装数字的管道，无缓冲通道，未声明空间 //numChan := make(chan int, 10) // 有缓冲通道 // 创建两个go程，父写，子读 // 发现子go程没有发生资源抢夺 // 子go程1 go func() { for i := 0; i \u0026lt; 25; i++ { // 只能 \u0026lt;- 数据流向 data := \u0026lt;-numChan fmt.Println(\u0026#34;子go程1 读取data\u0026#34;, data) } }() // 子go程2 go func() { for i := 0; i \u0026lt; 25; i++ { data := \u0026lt;-numChan fmt.Println(\u0026#34;子go程2 读取data\u0026#34;, data) } }() // 父go程 for i := 0; i \u0026lt; 50; i++ { // 向管道中写入数据 numChan \u0026lt;- i fmt.Println(\u0026#34;====\u0026gt; 主go程，写入数据\u0026#34;, i) } time.Sleep(5 * time.Second) } 有缓冲管道 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import \u0026#34;fmt\u0026#34; /* 当管道的读写次数不一致的时候 1.如果阻塞在主go程，程序会崩溃 2.如果阻塞在子go程，会发生内存泄露 */ func main() { // 当缓冲写满的时候，写阻塞，被读取后，在恢复写入 // 当缓冲区读取完毕，读阻塞，开始写入 // 如果没有使用make分配空间，那么管道默认nil的，读取，写入都会阻塞 numChan := make(chan int, 10) // 有缓冲通道 // 子go程1 go func() { for i := 0; i \u0026lt; 25; i++ { // 只能 \u0026lt;- 数据流向 data := \u0026lt;-numChan fmt.Println(\u0026#34;子go程1 读取data\u0026#34;, data) } }() // 父go程 for i := 0; i \u0026lt; 50; i++ { // 向管道中写入数据 numChan \u0026lt;- i fmt.Println(\u0026#34;====\u0026gt; 主go程，写入数据\u0026#34;, i) } var names chan string // 因为names是nil的，写操作会一直阻塞在这里 // 并发生 deadlock 的 error names \u0026lt;- \u0026#34;luenci\u0026#34; fmt.Println(\u0026#34;names\u0026#34;, \u0026lt;-names) } for range读取管道 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import \u0026#34;fmt\u0026#34; func main() { numChan := make(chan int) go func() { for i := 0; i \u0026lt; 50; i++ { numChan \u0026lt;- i fmt.Println(\u0026#34;写入数据\u0026lt;\u0026lt;\u0026#34;, i) } fmt.Println(\u0026#34;数据写入完成,关闭管道\u0026#34;) // 从一个close的管道中读取数据时，会返回零值（不会崩溃） close(numChan) }() // 遍历一个管道时，只会返回一个值 for v := range numChan { fmt.Println(\u0026#34;读取数据\u0026gt;\u0026gt;\u0026#34;, v) } } 判断管道是否关闭 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import \u0026#34;fmt\u0026#34; func main() { numChan := make(chan int, 10) go func() { for i := 0; i \u0026lt; 10; i++ { numChan \u0026lt;- i } close(numChan) }() for { // ok-idom 模式判断 if v, ok := \u0026lt;-numChan; ok { fmt.Println(\u0026#34;读取数据\u0026#34;, v) } else { fmt.Println(\u0026#34;管道已经关闭！\u0026#34;) break } } } 单向管道 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { wg := sync.WaitGroup{} // 单向通道：为了明确语义,一般用于函数参数 // 单向读通道： //var numChanReadOnly \u0026lt;-chan int // 单向写通道: //var numChanWriteOnly chan\u0026lt;- int //numChanReadOnly = make(chan int, 10) //numChanWriteOnly = make(chan int, 10) // 双向管道可以赋值给单向管道，单向不能转双向 numChan := make(chan int, 10) // 双向管道 // 生产者消费者模型 wg.Add(1) go producer(numChan, \u0026amp;wg) wg.Add(1) go consumer(numChan, \u0026amp;wg) wg.Wait() } // producer :生产者 ===\u0026gt; 提供一个只写通道 func producer(in chan\u0026lt;- int, wg *sync.WaitGroup) { for i := 0; i \u0026lt; 10; i++ { in \u0026lt;- i //data:= \u0026lt;-out 写通道不允许读操作 fmt.Println(\u0026#34;======\u0026gt; 向管道中写入数据:\u0026#34;, i) } close(in) wg.Done() } // consumer :消费者 ===\u0026gt; 只提供一个只读通道 func consumer(out \u0026lt;-chan int, wg *sync.WaitGroup) { //out \u0026lt;-10 读通道不允许有写入数据 for v := range out { fmt.Println(v, \u0026#34;\u0026lt;======= 从管道中读取数据\u0026#34;) } wg.Done() } 利用管道控制go程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import \u0026#34;fmt\u0026#34; func main() { c := make(chan bool, 100) for i := 0; i \u0026lt; 100; i++ { go func(i int) { fmt.Println(i) c \u0026lt;- true }(i) } for i := 0; i \u0026lt; 100; i++ { \u0026lt;-c } } select用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { /* 当程序中有多个channel协同工作，ch1，ch2，某一时刻，ch1或者ch2触发了，程序要做响应处理 1.使用 select 来监听多个管道，当管道被触发时（写入数据，读取数据，关闭管道） 2.select 语法于 switch case 很像，但是所有的分支条件必须是通道I/O */ var ch1, ch2 chan int ch1 = make(chan int) ch2 = make(chan int) wg := sync.WaitGroup{} wg.Add(3) // 启动一个go程，负责监听两个channel go func() { fmt.Println(\u0026#34;开始监听....\u0026#34;) for { select { case data1 := \u0026lt;-ch1: fmt.Println(\u0026#34;从ch1中读取数据: \u0026#34;, data1) case data2 := \u0026lt;-ch2: fmt.Println(\u0026#34;从ch2中读取数据: \u0026#34;, data2) } } wg.Done() }() go func() { for i := 0; i \u0026lt; 10; i++ { ch1 \u0026lt;- i } wg.Done() }() go func() { for i := 0; i \u0026lt; 10; i++ { ch2 \u0026lt;- i } wg.Done() }() wg.Wait() } ","permalink":"https://luenci.com/en/posts/%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95%E7%AE%A1%E9%81%93%E5%92%8Cgo%E7%A8%8B/","summary":"\u003ch1 id=\"管道和go程\"\u003e管道和go程\u003c/h1\u003e\n\u003ch2 id=\"goroutinego程\"\u003egoroutine（go程）\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003edisplay\u003c/span\u003e(num \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   count \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;============\u0026gt; 这是子go程：\u0026#34;\u003c/span\u003e, num, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;当前count值\u0026#34;\u003c/span\u003e, count)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      count\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 启动子go程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003edisplay\u003c/span\u003e(i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 主go程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   count \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;============\u0026gt; 这是主go程：\u0026#34;\u003c/span\u003e, count)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      count\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      time.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e time.Second)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"提前退出go程\"\u003e提前退出go程\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// GOEXIT ===\u0026gt; 提前退出go程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// return ===\u0026gt; 返回当前函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// exit ===\u0026gt; 退出当前进程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;子go程内部的函数!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//return // 退出当前函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//os.Exit(-1) // 退出进程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         runtime.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eGoexit\u003c/span\u003e() \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 退出当前go程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;子go程结束！\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 主go程需要等待子go程退出\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;主go程~\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   time.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e time.Second)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;OVER!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"无缓冲管道\"\u003e无缓冲管道\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e/*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e当通道在多个协程之间传输的是指向数据的指针是，且读写操作是由不同的协程操作，则需要提供额外的同步动作。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 当涉及到多go程时，c语言使用互斥量，上锁来保持资源同步，避免资源竞争问题\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// go语言更好的解决方案是管道、通道\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 使用通道不需要手动进行加锁\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//sync.RWMutex{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 创建管道 关键字 chan\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   numChan \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#ff7b72\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 装数字的管道，无缓冲通道，未声明空间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//numChan := make(chan int, 10) // 有缓冲通道\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 创建两个go程，父写，子读\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 发现子go程没有发生资源抢夺\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 子go程1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan style=\"color:#a5d6ff\"\u003e25\u003c/span\u003e; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 只能 \u0026lt;- 数据流向\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         data \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;-\u003c/span\u003enumChan\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;子go程1 读取data\u0026#34;\u003c/span\u003e, data)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 子go程2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan style=\"color:#a5d6ff\"\u003e25\u003c/span\u003e; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         data \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;-\u003c/span\u003enumChan\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;子go程2 读取data\u0026#34;\u003c/span\u003e, data)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 父go程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan style=\"color:#a5d6ff\"\u003e50\u003c/span\u003e; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 向管道中写入数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      numChan \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;-\u003c/span\u003e i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;====\u0026gt; 主go程，写入数据\u0026#34;\u003c/span\u003e, i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   time.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSleep\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e time.Second)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"管道和go程"},{"content":"consul服务发现 Consul是由HashiCorp开发的一个支持多数据中心的分布式服务发现和键值对存储服务的开源软件，被大量应用于基于微服务的软件架构当中。\n服务发现流程图 服务发现，也可以看做一个“服务”，是给“服务”提供服务的 服务发现种类 consul：常用于go-micro中 mdns：go-micro中默认的服务发现 etcd：k8s内嵌的服务发现 zookeeper：java中常用 Consul关键特性 服务发现：consul提供服务，服务端主动向consul发起注册。 健康检查：定时发送消息，类似于“心跳包”，保证客户端获取到的一定是健康的服务。 键值存储：consul提供，但常用于redis。 多数据中心：可以轻松加入集群。 Consul 参数 安装好 Consul 后，在启动程序之前，需要掌握一些配置参数，通过掌握这些参数，可以一次性的成功运行 Consul 服务器集群，常用的参数如下： 参数名称 用途 -server 此标志用于控制代理是运行于服务器/客户端模式，每个 Consul 集群至少有一个服务器，正常情况下不超过5个，使用此标记的服务器参与 Raft一致性算法、选举等事务性工作 -http-port=8500 consul自带的一个web访问端口，默认为8500 -client 表示 Consul 绑定客户端接口的IP地址，默认值为：127.0.0.1，当你有多块网卡的时候，最好指定IP地址，不要使用默认值 -bootstrap-expect 预期的服务器集群的数量，整数，如 -bootstrap-expect=3，表示集群服务器数量为3台，设置该参数后，Consul将等待指定数量的服务器全部加入集群可用后，才开始引导集群正式开始工作，此参数必须与 -server 一起使用 -data-dir 存储数据的目录，该目录在 Consul 程序重启后数据不会丢失，指定此目录时，应确保运行 Consul 程序的用户对该目录具有读写权限 -config-dir=XX 所有服务主动注册的配置文件 - node 当前服务器在集群中的名称，该值在整个 Consul 集群中必须唯一，默认值为当前主机名称 - bind Consul 在当前服务器侦听的地址，如果您有多块网卡，请务必指定一个IP地址（IPv4/IPv6)，默认值为：0.0.0.0，也可用使用[::] 启动consul 1 consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=consul1 -bind=172.16.249.181 -ui -rejoin -config-dir /etc/consul.d/ -client 0.0.0.0 如果第一次启动 请先创建 /etc/consul.d/ 文件夹 consul leave — 优雅退出consul consul members — 查看consul成员 consul info — 查看consul信息 注册服务到consul 增加配置在 /etc/consul.d/demo.json 1 2 3 4 5 6 7 8 { \u0026#34;service\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;luenci\u0026#34;, \u0026#34;tags\u0026#34;:[\u0026#34;study\u0026#34;], \u0026#34;port\u0026#34;:8880 } } curl 命令查看注册的服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 root@Luenci:~# curl -s 127.0.0.1:8500/v1/catalog/service/luenci | python -m json.tool [ { \u0026#34;Address\u0026#34;: \u0026#34;172.16.249.181\u0026#34;, \u0026#34;CreateIndex\u0026#34;: 44, \u0026#34;Datacenter\u0026#34;: \u0026#34;dc1\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;c3908dfa-4fdf-4a57-686f-a3fc620fc5b7\u0026#34;, \u0026#34;ModifyIndex\u0026#34;: 44, \u0026#34;Node\u0026#34;: \u0026#34;consul1\u0026#34;, \u0026#34;NodeMeta\u0026#34;: { \u0026#34;consul-network-segment\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;ServiceAddress\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ServiceConnect\u0026#34;: {}, \u0026#34;ServiceEnableTagOverride\u0026#34;: false, \u0026#34;ServiceID\u0026#34;: \u0026#34;luenci\u0026#34;, \u0026#34;ServiceKind\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ServiceMeta\u0026#34;: {}, \u0026#34;ServiceName\u0026#34;: \u0026#34;luenci\u0026#34;, \u0026#34;ServicePort\u0026#34;: 8880, \u0026#34;ServiceProxy\u0026#34;: {}, \u0026#34;ServiceProxyDestination\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ServiceTags\u0026#34;: [ \u0026#34;study\u0026#34; ], \u0026#34;ServiceWeights\u0026#34;: { \u0026#34;Passing\u0026#34;: 1, \u0026#34;Warning\u0026#34;: 1 }, \u0026#34;TaggedAddresses\u0026#34;: { \u0026#34;lan\u0026#34;: \u0026#34;172.16.249.181\u0026#34;, \u0026#34;wan\u0026#34;: \u0026#34;172.16.249.181\u0026#34; } } ] 健康检查 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 root@Luenci:~# cat /etc/consul.d/sweetie.json | python -m json.tool { \u0026#34;service\u0026#34;: { \u0026#34;check\u0026#34;: { \u0026#34;http\u0026#34;: \u0026#34;\u0026lt;http://172.16.249.181:8001\u0026gt;\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;api\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;10s\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;check sweetie api\u0026#34;, \u0026#34;timeout\u0026#34;: \u0026#34;2s\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;sweetie\u0026#34;, \u0026#34;port\u0026#34;: 8001, \u0026#34;tags\u0026#34;: [ \u0026#34;fast-api\u0026#34; ] } } consul 健康检查必须是Script, HTTP , TCP , TTL 中的一种 使用go注册服务，python做服务发现 服务注册，就是将提供某个服务的模块信息(通常是这个服务的ip和端口)注册到1个公共的组件上去。\n服务发现，就是新注册的这个服务模块能够及时的被其他调用者发现。不管是服务新增和服务删减都能实现自动发现。\nprotoc文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 syntax = \u0026#34;proto3\u0026#34;; // 指定所在包名 package study.consul; option go_package = \u0026#34;./proto\u0026#34;; message Human { string name = 1; int32 age = 2; } service SayName{ rpc Hello (Human) returns (Human); } server-consul（go实现） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/hashicorp/consul/api\u0026#34; \u0026#34;google.golang.org/grpc\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; \u0026#34;study.consul/proto\u0026#34; ) type Person struct { proto.UnimplementedSayNameServer } func (p *Person) Hello(ctx context.Context, args *proto.Human) (*proto.Human, error) { // 通过编译出来的rpc.pb.go解析String类型数据 args.Name += \u0026#34; is coding!\u0026#34; args.Age += 3 return args, nil } func main() { /* ------------------- 注册服务到consul ---------------------*/ // 初始化consul配置 consulConfig := api.DefaultConfig() // 创建consul对象 consulClient, err := api.NewClient(consulConfig) if err != nil { fmt.Println(\u0026#34;api NewClient err\u0026#34;, err) return } // 注册服务，服务的常规信息 regInfo := api.AgentServiceRegistration{ ID: \u0026#34;go grpc\u0026#34;, Tags: []string{\u0026#34;grpc\u0026#34;, \u0026#34;consul\u0026#34;}, Name: \u0026#34;go grpc server\u0026#34;, Address: \u0026#34;127.0.0.1\u0026#34;, Port: 5001, Check: \u0026amp;api.AgentServiceCheck{ CheckID: \u0026#34;consul check grpc test\u0026#34;, TCP: \u0026#34;127.0.0.1:5001\u0026#34;, Timeout: \u0026#34;2s\u0026#34;, Interval: \u0026#34;3s\u0026#34;, }, } // 注册 grpc 服务到 consul 上 consulClient.Agent().ServiceRegister(\u0026amp;regInfo) fmt.Println(\u0026#34;注册成功...\u0026#34;) /* ------------------- grpc 远程调用 ---------------------*/ // 初始化框架 grpcServer := grpc.NewServer() // 注册服务 proto.RegisterSayNameServer(grpcServer, new(Person)) // 定义端口监听服务 lis, err := net.Listen(\u0026#34;tcp\u0026#34;, \u0026#34;127.0.0.1:5001\u0026#34;) if err != nil { log.Fatal(err) } defer lis.Close() fmt.Println(\u0026#34;服务启动...\u0026#34;) // 开启监听 grpcServer.Serve(lis) } clien-consul(python实现) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # -*- coding: UTF-8 -*- # pip install python-consul # python 编译 protoc # python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. rpc.proto import consul import grpc import test_pb2 import test_pb2_grpc c = consul.Consul(\u0026#34;XX.XX.XX.XX\u0026#34;, \u0026#34;port\u0026#34;) # print(c.catalog.service(\u0026#34;go grpc server\u0026#34;)) # 从 consul 中拿到健康的服务 service = c.health.service(\u0026#34;go grpc server\u0026#34;) # print(type(service)) addr = service[1][0][\u0026#34;Service\u0026#34;][\u0026#34;Address\u0026#34;] port = service[1][0][\u0026#34;Service\u0026#34;][\u0026#34;Port\u0026#34;] # 获取健康的服务 ip + port health_service = str(addr) + \u0026#34;:\u0026#34; + str(port) print(health_service) # 连接 rpc 服务器 channel = grpc.insecure_channel(health_service) # 调用rpc服务,通过编译出来的rpc_pb2_grpc的HelloService接口定义HelloServiceStub接口,接收来自channel的数据 stub = test_pb2_grpc.SayNameStub(channel) print(stub) # 通过接口的rpc获取String类型数据，并获取值 response = stub.Hello(test_pb2.Human(name=\u0026#39;luenci\u0026#39;, age=19)) print(\u0026#34;Greeter client received: \u0026#34; + response.name) print(\u0026#34;Greeter client received: \u0026#34;, response.age) 扩展阅读：python与golang通过grpc进行通信\n","permalink":"https://luenci.com/en/posts/consul%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/","summary":"\u003ch1 id=\"consul服务发现\"\u003econsul服务发现\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eConsul是由HashiCorp开发的一个支持多数据中心的分布式服务发现和键值对存储服务的开源软件，被大量应用于基于微服务的软件架构当中。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"服务发现流程图\"\u003e服务发现流程图\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/20210607214102.png\" alt=\"image-20210607214102612\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务发现，也可以看做一个“服务”，是给“服务”提供服务的\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"服务发现种类\"\u003e服务发现种类\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003econsul：常用于go-micro中\u003c/li\u003e\n\u003cli\u003emdns：go-micro中默认的服务发现\u003c/li\u003e\n\u003cli\u003eetcd：k8s内嵌的服务发现\u003c/li\u003e\n\u003cli\u003ezookeeper：java中常用\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"consul关键特性\"\u003eConsul关键特性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e服务发现：consul提供服务，服务端主动向consul发起注册。\u003c/li\u003e\n\u003cli\u003e健康检查：定时发送消息，类似于“心跳包”，保证客户端获取到的一定是健康的服务。\u003c/li\u003e\n\u003cli\u003e键值存储：consul提供，但常用于redis。\u003c/li\u003e\n\u003cli\u003e多数据中心：可以轻松加入集群。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"consul-参数\"\u003eConsul 参数\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e安装好 Consul 后，在启动程序之前，需要掌握一些配置参数，通过掌握这些参数，可以一次性的成功运行 Consul 服务器集群，常用的参数如下：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e参数名称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e用途\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e-server\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e此标志用于控制代理是运行于服务器/客户端模式，每个 Consul 集群至少有一个服务器，正常情况下不超过5个，使用此标记的服务器参与 Raft一致性算法、选举等事务性工作\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e-http-port=8500\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003econsul自带的一个web访问端口，默认为8500\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e-client\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e表示 Consul 绑定客户端接口的IP地址，默认值为：127.0.0.1，当你有多块网卡的时候，最好指定IP地址，不要使用默认值\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e-bootstrap-expect\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e预期的服务器集群的数量，整数，如 -bootstrap-expect=3，表示集群服务器数量为3台，设置该参数后，Consul将等待指定数量的服务器全部加入集群可用后，才开始引导集群正式开始工作，此参数必须与 -server 一起使用\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e-data-dir\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e存储数据的目录，该目录在 Consul 程序重启后数据不会丢失，指定此目录时，应确保运行 Consul 程序的用户对该目录具有读写权限\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e-config-dir=XX\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e所有服务主动注册的配置文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e- node\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e当前服务器在集群中的名称，该值在整个 Consul 集群中必须唯一，默认值为当前主机名称\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e- bind\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003eConsul 在当前服务器侦听的地址，如果您有多块网卡，请务必指定一个IP地址（IPv4/IPv6)，默认值为：0.0.0.0，也可用使用[::]\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"consul服务发现"},{"content":"json、结构体标签和rpc入门 json使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; ) // 将 结构体 --\u0026gt; 字符串 编码 // 将 字符串 --\u0026gt; 结构体 解码 // 结构体的成员须大写，不然不参与编码 type Student struct { Name string Sex string Age int Score int } func main() { st1 := Student{ Name: \u0026#34;luenci\u0026#34;, Sex: \u0026#34;man\u0026#34;, Age: 22, Score: 99, } // 编码 序列化 encodeInfo, err := json.Marshal(st1) if err != nil { fmt.Println(\u0026#34;序列化发生错误,error\u0026#34;, err) return } fmt.Println(reflect.TypeOf(encodeInfo)) fmt.Println(string(encodeInfo)) // 解码 反序列化 var st2 Student if err := json.Unmarshal([]byte(encodeInfo), \u0026amp;st2); err != nil { fmt.Println(\u0026#34;反序列化发生错误,\u0026#34;, err) return } fmt.Println(st2.Name) } 结构体标签 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) // 结构体标签由一个或多个键值对组成。 // 键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。 type Teacher struct { Name string `json:\u0026#34;-\u0026#34;` // 在使用json编码时候，这个字段不参与编码 Subject string `json:\u0026#34;subject_name\u0026#34;` // 在使用json编码时候，这个字段会编码成 subject_name Age int `json:\u0026#34;age,string\u0026#34;` // 在使用json编码时候，这个字段类型会变成age and 类型会变为 string Address string `json:\u0026#34;address,omitempty\u0026#34;` // 在使用json编码时候，如果这个字段是空的,就会忽略掉不编码 // 小写的结构体成员在json编码时候会被忽略掉 gender string } func main() { t1 := Teacher{ Name: \u0026#34;lynn\u0026#34;, Subject: \u0026#34;math\u0026#34;, Age: 0, Address: \u0026#34;123\u0026#34;, gender: \u0026#34;girl\u0026#34;, } marshal, err := json.Marshal(t1) if err != nil { return } fmt.Println(\u0026#34;编码后结果为:\u0026#34;, string(marshal)) } rpc封装设计 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package main import ( \u0026#34;net/rpc\u0026#34; ) type MyInterface interface { HelloWorld(string, *string) error } // 服务端注册函数 func RegisterName(i MyInterface) error { err := rpc.RegisterName(\u0026#34;Hello\u0026#34;, i) if err != nil { return err } return nil } type MyClient struct { c *rpc.Client } func InitClient(addr string) MyClient { conn, _ := rpc.Dial(\u0026#34;tcp\u0026#34;, addr) return MyClient{c: conn} } // 实现函数参照interface实现 func (this *MyClient) HelloWorld(name string, resp *string) error { return this.c.Call(\u0026#34;Hello.HelloWorld\u0026#34;, name, resp) } rpc-server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net\u0026#34; \u0026#34;net/rpc/jsonrpc\u0026#34; ) type Hello struct { } func (this *Hello) HelloWorld(name string, resp *string) error { *resp = name + \u0026#34; 你好！\u0026#34; return nil } func main() { // 1.注册服务 //if err := rpc.RegisterName(\u0026#34;luenci\u0026#34;, new(Hello)); err != nil { // fmt.Println(\u0026#34;注册服务失败:\u0026#34;, err) // return //} if err := RegisterName(new(Hello)); err != nil { fmt.Println(\u0026#34;服务注册失败,error\u0026#34;, err) return } // 2.设置监听着 listenner, err := net.Listen(\u0026#34;tcp\u0026#34;, \u0026#34;127.0.0.1:8800\u0026#34;) if err != nil { fmt.Println(\u0026#34;设置监听者失败:\u0026#34;, err) return } defer listenner.Close() // 3.建立链接 conn, err := listenner.Accept() if err != nil { fmt.Println(\u0026#34;建立链接失败:\u0026#34;, err) return } defer conn.Close() // 4.绑定服务 jsonrpc //rpc.ServeConn(conn) jsonrpc.ServeConn(conn) } rpc-client（go） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/rpc\u0026#34; ) func main() { /* --------------------- 方式一 ------------------*/ // 通用的序列化和反序列化 -- json、protobuf // 使用 Dail 链接服务器 -- Dail() //conn, err := rpc.Dial(\u0026#34;tcp\u0026#34;, \u0026#34;127.0.0.1:8800\u0026#34;) //conn, err := jsonrpc.Dial(\u0026#34;tcp\u0026#34;, \u0026#34;127.0.0.1:8800\u0026#34;) //if err != nil { // fmt.Println(\u0026#34;Dail error:\u0026#34;, err) // return //} //defer conn.Close() // //// 调用远程函数 //var response string // 接收返回值 -- 传出参数 //if err := conn.Call(\u0026#34;luenci.HelloWorld\u0026#34;, \u0026#34;lynn\u0026#34;, \u0026amp;response); err != nil { // fmt.Println(\u0026#34;Call error\u0026#34;, err) // return //} //fmt.Println(\u0026#34;response\u0026#34;, response) /* --------------------- 方式二 ------------------*/ MyClient := InitClient(\u0026#34;127.0.0.1:8800\u0026#34;) defer func(c *rpc.Client) { err := c.Close() if err != nil { fmt.Println(\u0026#34;关闭链接出错.error\u0026#34;, err) return } }(MyClient.c) var resp string err := MyClient.HelloWorld(\u0026#34;luenci\u0026#34;, \u0026amp;resp) if err != nil { fmt.Println(\u0026#34;出错了,error\u0026#34;, err) return } } rpc-client（python） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python # -*- coding: UTF-8 -*- import json import socket # 导入 socket 模块 s = socket.socket() # 创建 socket 对象 host = \u0026#34;127.0.0.1\u0026#34; # 获取本地主机名 port = 8800 # 设置端口号 s.connect((host, port)) data = json.dumps({\u0026#34;method\u0026#34;:\u0026#34;luenci.HelloWorld\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;lynn\u0026#34;],\u0026#34;id\u0026#34;:0}) print(data) s.send(data) res = s.recv(1024) print(res) print(type(res)) s.close() ","permalink":"https://luenci.com/en/posts/json%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E7%AD%BE%E5%92%8Crpc%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"json结构体标签和rpc入门\"\u003ejson、结构体标签和rpc入门\u003c/h1\u003e\n\u003ch2 id=\"json使用\"\u003ejson使用\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;reflect\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 将 结构体 --\u0026gt; 字符串  编码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 将 字符串 --\u0026gt; 结构体  解码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 结构体的成员须大写，不然不参与编码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Student \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Name  \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Sex   \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Age   \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Score \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   st1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Student{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Name:  \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Sex:   \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;man\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Age:   \u003cspan style=\"color:#a5d6ff\"\u003e22\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Score: \u003cspan style=\"color:#a5d6ff\"\u003e99\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 编码 序列化\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   encodeInfo, err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e json.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eMarshal\u003c/span\u003e(st1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;序列化发生错误,error\u0026#34;\u003c/span\u003e, err)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(reflect.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eTypeOf\u003c/span\u003e(encodeInfo))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(string(encodeInfo))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 解码 反序列化\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e st2 Student\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e json.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eUnmarshal\u003c/span\u003e([]byte(encodeInfo), \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003est2); err \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;反序列化发生错误,\u0026#34;\u003c/span\u003e, err)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(st2.Name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"json、结构体标签和rpc入门"},{"content":"关于堆、栈、CPU密集型 和 I/O 密集型知识 程序中的内存分配方式（c/c++） 1、栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其 操作方式类似于数据结构中的栈。 2、堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回 收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链。 3、全局区（静态区）（static）：全局变量和静态变量的存储是放在一块的，初始化的 全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另 一块区域。 - 程序结束后由系统释放。 4、文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放 5、程序代码区：存放函数体的二进制代码。 python的堆栈解析 因为是动态语言**，python中的所有变量内容都存在堆（heap）中**，而变量名只是堆中内容的引用，存放在栈（stack）中，便于用户去间接操作堆中的数据。\n堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式，主要有如下几种区别：\n（1）管理方式不同。栈由操作系统自动分配释放，无需我们手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏； （2）空间大小不同。每个进程拥有的栈的大小要远远小于堆的大小。理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小 64bits 的 Windows 默认 1MB，64bits 的 Linux 默认 10MB； （3）生长方向不同。堆的生长方向向上，内存地址由低到高；栈的生长方向向下，内存地址由高到低。 （4）分配方式不同。堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。动态分配由malloc函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。 （5）分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。 （6）存放内容不同。栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等。 函数入栈和出栈 当主函数调用另外一个函数的时候，要对当前函数执行断点进行保存，需要使用栈来实现，首先入栈的是主函数下一条语句的地址，即扩展指针寄存器的内容（EIP），然后是当前栈帧的底部地址，即扩展基址指针寄存器内容（EBP），再然后是被调函数的实参等。一般情况下是按照从右向左的顺序入栈，之后是被调函数的局部变量，注意静态变量是存放在数据段或者BSS段，是不入栈的。\n出栈的顺序正好相反，最终栈顶指向主函数下一条语句的地址，主程序又从该地址开始执行。堆，一般情况堆顶使用一个字节的空间来存放堆的大小，而堆中具体存放内容是由程序员来填充的。\n从以上可以看到，堆和栈相比，由于大量malloc()/free()或new/delete的使用，容易造成大量的内存碎片，并且可能引发用户态和核心态的切换，效率较低。\n小结 栈相比于堆，在程序中应用较为广泛，最常见的是函数的调用过程由栈来实现，函数返回地址、EBP、实参和局部变量都采用栈的方式存放。虽然栈有众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，主要还是用堆。 无论是堆还是栈，在内存使用时都要防止非法越界，越界导致的非法内存访问可能会摧毁程序的堆、栈数据，轻则导致程序运行处于不确定状态，获取不到预期结果，重则导致程序异常崩溃，这些都是我们编程时与内存打交道时应该注意的问题。\nCPU 密集型 和I / O 密集型 CPU密集型（CPU-bound） CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，I/O在很短的时间就可以完成，而CPU还有许多运算要处理，CPU Loading很高。 在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。 CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。\nIO密集型（I/O bound） I/O密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作，此时CPU Loading并不高。 I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。 CPU密集型 vs IO密集型 我们可以把任务分为计算密集型和IO密集型。\n计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。\n计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。\n第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。\nIO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。\n总之，计算密集型程序适合C语言多线程，I/O密集型适合脚本语言开发的多线程。\n","permalink":"https://luenci.com/en/posts/%E5%85%B3%E4%BA%8E%E5%A0%86%E6%A0%88cpu%E5%AF%86%E9%9B%86%E5%9E%8B-%E5%92%8C-io-%E5%AF%86%E9%9B%86%E5%9E%8B%E7%9F%A5%E8%AF%86/","summary":"\u003ch1 id=\"关于堆栈cpu密集型-和-io-密集型知识\"\u003e关于堆、栈、CPU密集型 和 I/O 密集型知识\u003c/h1\u003e\n\u003ch2 id=\"程序中的内存分配方式cc\"\u003e程序中的内存分配方式（c/c++）\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e1、栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其\n操作方式类似于数据结构中的栈。\u003c/li\u003e\n\u003cli\u003e2、堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回\n收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链。\u003c/li\u003e\n\u003cli\u003e3、全局区（静态区）（static）：全局变量和静态变量的存储是放在一块的，初始化的\n全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另\n一块区域。 - 程序结束后由系统释放。\u003c/li\u003e\n\u003cli\u003e4、文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放\u003c/li\u003e\n\u003cli\u003e5、程序代码区：存放函数体的二进制代码。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"python的堆栈解析\"\u003epython的堆栈解析\u003c/h2\u003e\n\u003cp\u003e因为是动态语言**，python中的所有变量内容都存在堆（heap）中**，而\u003cstrong\u003e变量名只是堆中内容的引用，存放在栈（stack）中\u003c/strong\u003e，便于用户去间接操作堆中的数据。\u003c/p\u003e\n\u003cp\u003e堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式，主要有如下几种区别：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e（1）管理方式不同。栈由操作系统自动分配释放，无需我们手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏；\u003c/li\u003e\n\u003cli\u003e（2）空间大小不同。每个进程拥有的栈的大小要远远小于堆的大小。理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小 64bits 的 Windows 默认 1MB，64bits 的 Linux 默认 10MB；\u003c/li\u003e\n\u003cli\u003e（3）生长方向不同。堆的生长方向向上，内存地址由低到高；栈的生长方向向下，内存地址由高到低。\u003c/li\u003e\n\u003cli\u003e（4）分配方式不同。堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。动态分配由\u003ccode\u003emalloc\u003c/code\u003e函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。\u003c/li\u003e\n\u003cli\u003e（5）分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。\u003c/li\u003e\n\u003cli\u003e（6）存放内容不同。栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等。\u003c/li\u003e\n\u003c/ul\u003e","title":"深入理解堆、栈、CPU密集型 和 I/O 密集型任务"},{"content":"协程概念 协程，其实可以理解为一种特殊的程序调用。特殊的是在执行过程中，在子程序（或者说函数）内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。\n它有两个特征：\n可中断，这里的中断不是普通的函数调用，而是类似CPU的中断，CPU在这里直接释放转到其他程序断点继续执行。 可恢复，等到合适的时候，可以恢复到中断的地方继续执行。 和进程线程的区别 上面两个特点就导致了它相对于线程和进程切换来说极高的执行效率，为什么这么说呢？我们先老生常谈地说一下进程和线程。\n进程是操作系统资源分配的基本单位，线程是操作系统调度和执行的最小单位。 这两句应该是我们最常听到的两句话，拆开来说，\n进程是程序的启动实例，拥有代码和打开的文件资源、数据资源、独立的内存空间。 线程从属于进程，是程序的实际执行者，一个进程至少包含一个主线程，也可以有更多的子线程，线程拥有自己的栈空间。无论是进程还是线程，都是由操作系统所管理和切换的。 我们再来看协程，它又叫做微线程，但其实它和进程还有线程完全不是一个维度上的概念。\n进程和线程的切换完全是用户无感，由操作系统控制，从用户态到内核态再到用户态。 而协程的切换完全是程序代码控制的，在用户态的切换，就像函数回调的消耗一样，在线程的栈内即可完成。 python协程的特点 单线程内切换，适用于IO密集型程序中，可以最大化IO多路复用的效果。 无法利用多核。 协程间完全同步，不会并行。不需要考虑数据安全。 用法多样，可以用在web服务中，也可用在pipeline数据/任务消费中 go协程的特点 协程间需要保证数据安全，比如通过channel或锁。 可以利用多核并行执行。 协程间不完全同步，可以并行运行，具体要看channel的设计。 抢占式调度，可能无法实现公平。 coroutine（python）和goroutine（go）的区别 coroutine 与 goroutine 在名字上类似，都是可中断可恢复的协程，它们之间最大的不同是，\ngoroutine 可能在多核上发生并行执行，但 coroutine 始终是顺序执行。 也基于此，我们应该清楚coroutine适用于IO密集程序中，而goroutine在 IO密集和CPU密集 中都有很好的表现。不过话说回来，go就一定比python快么，假如在完全IO并发密集的程序中，python的表现反而更好，因为单线程内的协程切换效率更高。\n从运行机制上来说，coroutine 的运行机制属于协作式任务处理， 程序需要主动交出控制权，宿主才能获得控制权并将控制权交给其他 coroutine。\n如果开发者无意间或者故意让应用程序长时间占用 CPU，操作系统也无能为力，表现出来的效果就是计算机很容易失去响应或者死机。goroutine 属于抢占式任务处理，已经和现有的多线程和多进程任务处理非常类似， 虽然无法控制自己获取高优先度支持。但如果发现一个应用程序长时间大量地占用 CPU，那么用户有权终止这个任务。 ","permalink":"https://luenci.com/en/posts/goroutinevspython%E5%8D%8F%E7%A8%8B/","summary":"\u003ch1 id=\"协程概念\"\u003e协程概念\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e协程\u003c/strong\u003e，其实可以理解为一种特殊的程序调用。特殊的是在执行过程中，在子程序（或者说函数）内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e它有两个特征：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e可中断，这里的中断不是普通的函数调用，而是类似CPU的中断，CPU在这里直接释放转到其他程序断点继续执行。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可恢复，等到合适的时候，可以恢复到中断的地方继续执行。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"和进程线程的区别\"\u003e\u003cstrong\u003e和进程线程的区别\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e上面两个特点就导致了它相对于线程和进程切换来说极高的执行效率，为什么这么说呢？我们先老生常谈地说一下进程和线程。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e进程是操作系统资源分配的基本单位，线程是操作系统调度和执行的最小单位\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这两句应该是我们最常听到的两句话，拆开来说，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e进程是程序的启动实例，拥有代码和打开的文件资源、数据资源、独立的内存空间。\u003c/li\u003e\n\u003cli\u003e线程从属于进程，是程序的实际执行者，一个进程至少包含一个主线程，也可以有更多的子线程，线程拥有自己的栈空间。无论是进程还是线程，都是由操作系统所管理和切换的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们再来看协程，它又叫做微\u003cstrong\u003e线程，但其实它和进程还有线程完全不是一个维度上的概念\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e进程和线程的切换完全是用户无感，由操作系统控制，\u003cstrong\u003e从用户态到内核态再到用户态\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e而协程的切换完全是程序代码控制的，在\u003cstrong\u003e用户态\u003c/strong\u003e的切换，就像函数回调的消耗一样，在线程的栈内即可完成。\u003c/li\u003e\n\u003c/ul\u003e","title":"goroutine VS python 协程"},{"content":"G-P-M 模型概述 每一个OS线程都有一个固定大小的内存块(一般会是2MB)来做栈，这个栈会用来存储当前正在被调用或挂起(指在调用其它函数时)的函数的内部变量。 这个固定大小的栈同时很大又很小。因为2MB的栈对于一个小小的Goroutine来说是很大的内存浪费，而对于一些复杂的任务（如深度嵌套的递归）来说又显得太小。因此，Go语言做了它自己的『线程』。 在Go语言中，每一个Goroutine是一个独立的执行单元，相较于每个OS线程固定分配2M内存的模式，Goroutine的栈采取了动态扩容方式， 初始时仅为2KB，随着任务执行按需增长，最大可达1GB（64位机器最大是1G，32位机器最大是256M），且完全由Golang自己的调度器 Go Scheduler 来调度。 此外，GC还会周期性地将不再使用的内存回收，收缩栈空间。 因此，Go程序可以同时并发成千上万个Goroutine是得益于它强劲的调度器和高效的内存模型。 任何用户线程最终肯定都是要交由OS线程来执行\n​ Goroutine（称为G）也不例外，但是G并不直接绑定OS线程运行，而是由Goroutine Scheduler中的 P - Logical Processor （逻辑处理器）来作为两者的『中介』。\nP 可以看作是一个抽象的资源或者一个上下文，一个P绑定一个OS线程，在Golang的实现里把OS线程抽象成一个数据结构。\nM，G实际上是由M通过P来进行调度运行的，但是在G的层面来看，P提供了G运行所需的一切资源和环境，因此在G看来P就是运行它的 “CPU”，由 G、P、M 这三种由Go抽象出来的实现，最终形成了Go调度器的基本结构：\nG: Goroutine G有以下状态\n非GC状态\nidle:_Gidle for idle，意思是这个goroutine刚被创建出来，还未被进行初始化。 runnable: _Grunnable for runnable意思是这个goroutine已经在运行队列，在这种情况下，goroutine还未执行用户代码，M的执行栈还不是goroutine自己的 running: _Grunning for running，意思是goroutine可能正在执行用户代码，M的执行栈已经由该goroutine所拥有，此时对象g不在运行队列中。这个状态值要待分配给M和P之后，交由M和P来设定 syscall, waiting, dead, copystack 对应的GC状态\nscan, scanrunnable, scan running, scansyscall, scanwaiting _Gscan系列，用于标记正在被GC扫描的状态，这些状态是由_Gscan=0x1000再加上_GRunnable, _Grunning, _Gsyscall和_Gwaiting的枚举值所产生的，这么做的好处是直接通过简单的运算即可知道被Scan之前的状态。当被标记为这系列的状态时，这些goroutine都不会执行用户代码，并且它们的执行栈都是被做该GC的goroutine所拥有。不过_Gscanrunning状态有点特别，这个标记是为了阻止正在运行的goroutine切换成其它状态，并告诉这个G自己扫描自己的堆栈。正是这种巧妙的方式，使得Go语言的GC十分高效。 每个Goroutine对应一个G结构体，G 存储 Goroutine的运行堆栈、状态以及任务函数，可重用。\nG并非执行体，每个G需要绑定到P才能被调度执行。\nP: Processor 表示逻辑处理器， 对G来说，P相当于CPU核，G只有绑定到P(在P的local run中)才能被调度。对M来说，P提供了相关的执行环境(Context)，如内存分配状态(mcache)，任务队列(G)等，P的数量决定了系统内最大可并行的G的数量（前提：物理CPU核数 \u0026gt;= P的数量），P的数量由用户设置的GoMAXPROCS决定，但是不论GoMAXPROCS设置为多大，P的数量最大为256。 golang runtime是有个sysmon的协程，他会轮询的检测所有的P上下文队列，**只要 G-M 的线程长时间在阻塞状态，那么就重新创建一个线程去从runtime P队列里获取任务。先前的阻塞的线程会被游离出去了，当他完成阻塞操作后会触发相关的callback回调，并加入回线程组里。**简单说，如果你没有特意配置runtime.SetMaxThreads，那么在没有可复用的线程的情况下，会一直创建新线程。 M: Machine ​ OS线程抽象，代表着真正执行计算的资源。\n在绑定有效的P后，进入schedule循环；而schedule循环的机制大致是从Global队列、P的Local队列以及wait队列中获取G，切换到G的执行栈上并执行G的函数，调用Goexit做清理工作并回到M，如此反复。\nM并不保留G状态，这是G可以跨M调度的基础，M的数量是不定的，由Go Runtime调整，为了防止创建过多OS线程导致系统调度不过来，目前默认最大限制为10000个。\n在绝大多数时候，其实P的数量和M的数量是相等。 每创建一个p, 就会创建一个对应的M只有少数情况下，M的数量会大于P\nwork-stealing 的调度算法 每个P维护一个G的本地队列； 当一个G被创建出来，或者变为可执行状态时，就把他放到P的可执行队列中； 当一个G在M里执行结束后，P会从队列中把该G取出；如果此时P的队列为空，即没有其他G可以执行， M就随机选择另外一个P，从其可执行的G队列中取走一半。 G-P-M 模型调度 ​ Go调度器工作时会维护两种用来保存G的任务队列：\n一种是一个Global任务队列 一种是每个P维护的Local任务队列 当通过Go关键字创建一个新的Goroutine的时候，它会优先被放入P的本地队列。\n​ 为了运Goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个Goroutine并执行。\n当然还有上文提及的 work-stealing调度算法:\n​ 当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。\n用户态阻塞/唤醒 ​ 当Goroutine因为channel操作或者network I/O而阻塞时（实际上Golang已经用netpoller实现了Goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；\n当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。\n系统调用阻塞 ​ 当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。\n​ 如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。\n管理协程 ​ 上面说到go语言自己定义一个结构体，叫协程。自己在用户态控制多个协程（结构体）的调度和执行，那它是怎么实现的呢？\ngo引入了P(Processor)的概念。一个P表示一个逻辑处理器，用于调度G。称之为逻辑处理器，一般与物理处理器对应\nM(Machine)，可以理解成一个线程，真正执行P的线程。\nG、P、M之间的关系如下图：\n每一个P都有一个对应的G队列，P绑定了线程M0正在执行协程G0，当遇到阻塞事件的时候，runtime会为P绑定一个新的线程M1，执行新的新的线程\n参考链接 Go协程管理\nGo 调度模型 GPM\n","permalink":"https://luenci.com/en/posts/golang%E7%9A%84gpm%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0%E5%92%8C%E8%B0%83%E5%BA%A6/","summary":"\u003ch1 id=\"g-p-m-模型概述\"\u003eG-P-M 模型概述\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e每一个OS线程都有一个固定大小的内存块(一般会是\u003ccode\u003e2MB\u003c/code\u003e)来做栈，这个栈会用来存储当前正在被调用或挂起(指在调用其它函数时)的函数的内部变量。\u003c/li\u003e\n\u003cli\u003e这个固定大小的栈同时很大又很小。因为\u003ccode\u003e2MB\u003c/code\u003e的栈对于一个小小的\u003ccode\u003eGoroutine\u003c/code\u003e来说是很大的内存浪费，而对于一些复杂的任务（如深度嵌套的递归）来说又显得太小。因此，Go语言做了它自己的『线程』。\u003c/li\u003e\n\u003cli\u003e在Go语言中，每一个Goroutine是一个独立的执行单元，相较于每个OS线程固定分配\u003ccode\u003e2M\u003c/code\u003e内存的模式，Goroutine的栈采取了动态扩容方式， \u003cstrong\u003e初始时仅为\u003ccode\u003e2KB\u003c/code\u003e\u003c/strong\u003e，随着任务执行按需增长，最大可达\u003ccode\u003e1GB\u003c/code\u003e（64位机器最大是\u003ccode\u003e1G\u003c/code\u003e，32位机器最大是\u003ccode\u003e256M\u003c/code\u003e），且完全由Golang自己的调度器 Go Scheduler 来调度。\u003c/li\u003e\n\u003cli\u003e此外，\u003ccode\u003eGC\u003c/code\u003e还会周期性地将不再使用的内存回收，收缩栈空间。 因此，Go程序可以同时并发成千上万个Goroutine是得益于它\u003cstrong\u003e强劲的调度器和高效的内存模型\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e任何用户线程最终肯定都是要交由OS线程来执行\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​    Goroutine（称为G）也不例外，但是G并不直接绑定OS线程运行，而是由Goroutine Scheduler中的 \u003ccode\u003eP - Logical Processor \u003c/code\u003e（逻辑处理器）来作为两者的\u003ccode\u003e『中介』\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003eP 可以看作是一个抽象的资源或者一个上下文，一个P绑定一个OS线程，在Golang的实现里把OS线程抽象成一个数据结构。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eM，G实际上是由M通过P来进行调度运行的\u003c/strong\u003e，但是在G的层面来看，\u003cstrong\u003eP提供了G运行所需的一切资源和环境\u003c/strong\u003e，因此在G看来P就是运行它的 “CPU”，由 G、P、M 这三种由Go抽象出来的实现，最终形成了Go调度器的基本结构：\u003c/p\u003e\n\u003ch2 id=\"g-goroutine\"\u003eG: Goroutine\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eG有以下状态\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e非\u003ccode\u003eGC\u003c/code\u003e状态\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eidle\u003c/code\u003e:\u003ccode\u003e_Gidle for idle\u003c/code\u003e，意思是这个goroutine刚被创建出来，还未被进行初始化。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erunnable\u003c/code\u003e: \u003ccode\u003e_Grunnable for runnable\u003c/code\u003e意思是这个goroutine已经在运行队列，在这种情况下，goroutine还未执行用户代码，M的执行栈还不是goroutine自己的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erunning\u003c/code\u003e: \u003ccode\u003e_Grunning for running\u003c/code\u003e，意思是goroutine可能正在执行用户代码，M的执行栈已经由该goroutine所拥有，此时对象g不在运行队列中。这个状态值要待分配给M和P之后，交由M和P来设定\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyscall\u003c/code\u003e, \u003ccode\u003ewaiting\u003c/code\u003e, \u003ccode\u003edead\u003c/code\u003e, \u003ccode\u003ecopystack\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e对应的\u003ccode\u003eGC\u003c/code\u003e状态\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003escan\u003c/code\u003e, \u003ccode\u003escanrunnable\u003c/code\u003e, \u003ccode\u003escan running\u003c/code\u003e, \u003ccode\u003escansyscall\u003c/code\u003e, \u003ccode\u003escanwaiting\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e_Gscan\u003c/code\u003e系列，用于标记正在被\u003ccode\u003eGC\u003c/code\u003e扫描的状态，这些状态是由\u003ccode\u003e_Gscan=0x1000\u003c/code\u003e再加上\u003ccode\u003e_GRunnable\u003c/code\u003e, \u003ccode\u003e_Grunning\u003c/code\u003e, \u003ccode\u003e_Gsyscall\u003c/code\u003e和\u003ccode\u003e_Gwaiting\u003c/code\u003e的枚举值所产生的，这么做的好处是直接通过简单的运算即可知道被Scan之前的状态。当被标记为这系列的状态时，这些\u003ccode\u003egoroutine\u003c/code\u003e都不会执行用户代码，并且它们的执行栈都是被做该\u003ccode\u003eGC\u003c/code\u003e的\u003ccode\u003egoroutine\u003c/code\u003e所拥有。不过\u003ccode\u003e_Gscanrunning\u003c/code\u003e状态有点特别，这个标记是为了阻止正在运行的\u003ccode\u003egoroutine\u003c/code\u003e切换成其它状态，并告诉这个G自己扫描自己的堆栈。正是这种巧妙的方式，使得\u003ccode\u003eGo\u003c/code\u003e语言的\u003ccode\u003eGC\u003c/code\u003e十分高效。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e每个Goroutine对应一个G结构体，G 存储 Goroutine的运行堆栈、状态以及任务函数，可重用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eG并非执行体，每个G需要绑定到P才能被调度执行。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"p-processor\"\u003eP: Processor\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e表示逻辑处理器， 对G来说，P相当于CPU核，G只有绑定到P(\u003ccode\u003e在P的local run中\u003c/code\u003e)才能被调度。对M来说，\u003ccode\u003eP\u003c/code\u003e提供了相关的执行环境(\u003ccode\u003eContext\u003c/code\u003e)，如内存分配状态(\u003ccode\u003emcache\u003c/code\u003e)，任务队列(\u003ccode\u003eG\u003c/code\u003e)等，\u003cstrong\u003eP的数量决定了系统内最大可并行的G的数量（前提：物理CPU核数 \u0026gt;= P的数量），P的数量由用户设置的\u003ccode\u003eGoMAXPROCS\u003c/code\u003e决定，但是不论\u003ccode\u003eGoMAXPROCS\u003c/code\u003e设置为多大，P的数量最大为256\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egolang runtime\u003c/code\u003e是有个\u003ccode\u003esysmon\u003c/code\u003e的协程，他会轮询的检测所有的\u003ccode\u003eP上下文队列\u003c/code\u003e，**只要 G-M 的线程长时间在阻塞状态，那么就重新创建一个线程去从runtime P队列里获取任务。先前的阻塞的线程会被游离出去了，当他完成阻塞操作后会触发相关的callback回调，并加入回线程组里。**简单说，如果你没有特意配置\u003ccode\u003eruntime.SetMaxThreads\u003c/code\u003e，那么在没有可复用的线程的情况下，会一直创建新线程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"m-machine\"\u003eM: Machine\u003c/h2\u003e\n\u003cp\u003e​    OS线程抽象，\u003cstrong\u003e代表着真正执行计算的资源\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e在绑定有效的P后，进入schedule循环；而schedule循环的机制大致是从Global队列、P的Local队列以及wait队列中获取G，切换到G的执行栈上并执行G的函数，调用\u003ccode\u003eGoexit\u003c/code\u003e做清理工作并回到M，如此反复。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eM并不保留G状态，这是G可以跨M调度的基础，M的数量是不定的，由Go Runtime调整，为了防止创建过多OS线程导致系统调度不过来，目前默认最大限制为10000个。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在绝大多数时候，其实\u003ccode\u003eP\u003c/code\u003e的数量和\u003ccode\u003eM\u003c/code\u003e的数量是相等。 每创建一个\u003ccode\u003ep\u003c/code\u003e, 就会创建一个对应的\u003ccode\u003eM\u003c/code\u003e只有少数情况下，\u003ccode\u003eM\u003c/code\u003e的数量会大于\u003ccode\u003eP\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"work-stealing-的调度算法\"\u003e\u003cem\u003e\u003ca href=\"https://supertech.csail.mit.edu/papers/steal.pdf\"\u003ework-stealing\u003c/a\u003e\u003c/em\u003e 的调度算法\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e每个P维护一个G的本地队列；\u003c/li\u003e\n\u003cli\u003e当一个G被创建出来，或者变为可执行状态时，就把他放到P的可执行队列中；\u003c/li\u003e\n\u003cli\u003e当一个G在M里执行结束后，P会从队列中把该G取出；如果此时P的队列为空，即没有其他G可以执行， M就随机选择另外一个P，从其可执行的G队列中取走一半。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/202108091238404.png\" alt=\"image-20210809113044316\"  /\u003e\n\u003c/p\u003e","title":"Golang的goroutine模型概述和调度"},{"content":" 原文链接：https://juejin.cn/post/6844903944955625479\n一、高并发 简介 高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。 高并发相关常用的一些指标有响应时间（Response Time），吞吐量（Throughput），每秒查询率QPS（Query Per Second），并发用户数等。\n响应时间：系统对请求做出响应的时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间。 吞吐量：单位时间内处理的请求数量。 QPS：每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。 并发用户数：同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。 如何提高并发能力 垂直扩展\n（Scale Up）\n增强单机硬件性能（优先）：例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G。 提升单机架构性能：例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间。 总结：管是提升单机硬件性能，还是提升单机架构性能，都有一个致命的不足：单机性能总是有极限的。所以互联网分布式架构设计高并发终极解决方案还是水平扩展。 水平扩展\n（Scale Out）\n只要增加服务器数量，就能线性扩充系统性能。水平扩展对系统架构设计是有要求的，难点在于：如何在架构各层进行可水平扩展的设计。 二、高性能 简介 简单的说，高性能（High Performance）就是指程序处理速度快，所占内存少，cpu占用率低。 高并发和高性能是紧密相关的，提高应用的性能，是肯定可以提高系统的并发能力的。 应用性能优化的时候，对于计算密集型和IO密集型还是有很大差别，需要分开来考虑。 增加服务器资源（CPU、内存、服务器数量），绝大部分时候是可以提高应用的并发能力和性能 （前提是应用能够支持多任务并行计算，多服务器分布式计算才行），但也是要避免其中的一些问题，才可以更好的更有效率的利用服务器资源。 提高性能的注意事项 避免因为IO阻塞让CPU闲置，导致CPU的浪费。 避免多线程间增加锁来保证同步，导致并行系统串行化。 免创建、销毁、维护太多进程、线程，导致操作系统浪费资源在调度上。 避免分布式系统中多服务器的关联，比如：依赖同一个mysql，程序逻辑中使用分布式锁，导致瓶颈在mysql，分布式又变成串行化运算。 三、高可用 简介 高可用性（High Availability）通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性(一直都能用)。\n全年停机不能超过31.5秒， 6个9的性能：一直能用的概率为99.9999% 高可用注意事项 避免单点：使用单个服务器，一旦该服务器意外宕机，将导致服务不可用 使用“集群”：一台服务器挂了，还有其他后备服务器能够顶上 心跳机制：用于监控服务器状态，挂了就进行故障修复 四、 举例 Redis的主从复制 1. 应用场景 电子商务网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。\n2. 实现原理 一个Redis服务可以有多个该服务的复制品，这个Redis服务称为Master，其它复制称为Slaves。\n如图中所示，我们将一台Redis服务器作主库(Matser)，其他三台作为从库(Slave)，主库只负责写数据，每次有数据更新都将更新的数据同步到它所有的从库，而从库只负责读数据。这样一来，就有了两个好处：\n读写分离：不仅可以提高服务器的负载能力，并且可以根据读请求的规模自由增加或者减少从库的数量。 数据被复制成了了好几份，就算有一台机器出现故障，也可以使用其他机器的数据快速恢复。 注意事项：在Redis主从模式中，一台主库可以拥有多个从库，但是一个从库只能隶属于一个主库。\n","permalink":"https://luenci.com/en/posts/%E9%AB%98%E5%B9%B6%E5%8F%91%E9%AB%98%E5%8F%AF%E7%94%A8%E9%AB%98%E6%80%A7%E8%83%BD/","summary":"\u003cblockquote\u003e\n\u003cp\u003e原文链接：https://juejin.cn/post/6844903944955625479\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"一高并发\"\u003e一、高并发\u003c/h1\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证\u003cstrong\u003e系统能够同时并行处理很多请求\u003c/strong\u003e。 高并发相关常用的一些指标有\u003cstrong\u003e响应时间\u003c/strong\u003e（Response Time），\u003cstrong\u003e吞吐量\u003c/strong\u003e（Throughput），\u003cstrong\u003e每秒查询率\u003c/strong\u003eQPS（Query Per Second），\u003cstrong\u003e并发用户数\u003c/strong\u003e等。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e响应时间\u003c/strong\u003e：系统对请求做出响应的时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e吞吐量\u003c/strong\u003e：单位时间内处理的请求数量。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eQPS\u003c/strong\u003e：每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e并发用户数\u003c/strong\u003e：同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何提高并发能力\"\u003e如何提高并发能力\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e垂直扩展\u003c/p\u003e\n\u003cp\u003e（Scale Up）\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e增强单机硬件性能\u003c/strong\u003e（优先）：例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提升单机架构性能\u003c/strong\u003e：例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间。\u003c/li\u003e\n\u003cli\u003e总结：管是提升单机硬件性能，还是提升单机架构性能，都有一个致命的不足：单机性能总是有极限的。所以互联网分布式架构设计高并发终极解决方案还是\u003cstrong\u003e水平扩展\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e水平扩展\u003c/p\u003e\n\u003cp\u003e（Scale Out）\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e只要增加服务器数量，就能线性扩充系统性能。水平扩展对系统架构设计是有要求的，难点在于：如何在架构各层进行可水平扩展的设计。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"二高性能\"\u003e二、高性能\u003c/h1\u003e\n\u003ch2 id=\"简介-1\"\u003e简介\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e简单的说，高性能（High Performance）就是指\u003cstrong\u003e程序处理速度快，所占内存少，cpu占用率低\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e高并发和高性能是紧密相关的，提高应用的性能，是肯定可以提高系统的并发能力的。\u003c/li\u003e\n\u003cli\u003e应用性能优化的时候，对于\u003cstrong\u003e计算密集型\u003c/strong\u003e和\u003cstrong\u003eIO密集型\u003c/strong\u003e还是有很大差别，需要分开来考虑。\u003c/li\u003e\n\u003cli\u003e增加服务器资源（CPU、内存、服务器数量），绝大部分时候是可以提高应用的并发能力和性能 （前提是应用能够支持多任务并行计算，多服务器分布式计算才行），但也是要避免其中的一些问题，才可以更好的更有效率的利用服务器资源。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"提高性能的注意事项\"\u003e提高性能的注意事项\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e避免因为\u003cstrong\u003eIO阻塞\u003c/strong\u003e让CPU闲置，导致CPU的浪费。\u003c/li\u003e\n\u003cli\u003e避免\u003cstrong\u003e多线程间增加锁\u003c/strong\u003e来保证同步，导致并行系统串行化。\u003c/li\u003e\n\u003cli\u003e免创建、销毁、维护太多进程、线程，导致操作系统浪费资源在调度上。\u003c/li\u003e\n\u003cli\u003e避免分布式系统中多服务器的关联，比如：依赖同一个mysql，程序逻辑中使用\u003cstrong\u003e分布式锁\u003c/strong\u003e，导致瓶颈在mysql，分布式又变成串行化运算。\u003c/li\u003e\n\u003c/ol\u003e","title":"高并发,高可用,高性能"},{"content":" 架构设计的主要目的是为了解决软件系统复杂度带来的问题\n架构、框架、组件、模块、系统 OLAP（Online Analytical Processing）在线分析处理\n架构是顶层设计；框架是面向编程或配置的半成品；组件是从技术维度上的复用；模块是从业务维度上职责的划分；系统是相互协同可运行的实体。\n架构设计的目的 明确“架构设计是为了解决软件复杂度”原则后 “这么多需求，从哪里开始下手进行架构设计呢？” — 通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计。 “架构设计要考虑高性能、高可用、高扩展……这么多高 XX，全部设计完成估计要 1 个月，但老大只给了 1 周时间” —架构设计并不是要面面俱到，不需要每个架构都具备高性能、高可用、高扩展等特点，而是要识别出复杂点然后有针对性地解决问题。 “业界 A 公司的架构是 X，B 公司的方案是 Y，两个差别比较大，该参考哪一个呢？” —理解每个架构方案背后所需要解决的复杂点，然后才能对比自己的业务复杂点，参考复杂点相似的方案。 其次，遵循这条准则能够让“老鸟”架构师有的放矢，而不是贪大求全。技术人员往往都希望自己能够做出最牛的东西，架构师也不例外，尤其是一些“老鸟”架构师，为了证明自己的技术牛，可能会陷入贪大求全的焦油坑而无法自拔。\n例如：“我们的系统一定要做到每秒 TPS 10 万”。\n“淘宝的架构是这么做的，我们也要这么做”。\n“Docker 现在很流行，我们的架构应该将 Docker 应用进来”。\n以上这些想法，如果拿“架构设计是为了解决软件复杂度”这个原则来衡量，就很容易判断。\n“我们的系统一定要做到每秒 TPS 10 万” —如果系统的复杂度不是在性能这部分，TPS 做到 10 万并没有什么用。 “淘宝的架构是这么做的，我们也要这么做” —淘宝的架构是为了解决淘宝业务的复杂度而设计的，淘宝的业务复杂度并不就是我们的业务复杂度，绝大多数业务的用户量都不可能有淘宝那么大。 “Docker 现在很流行，我们的架构应该将 Docker 应用进来 —Docker 不是万能的，只是为了解决资源重用和动态分配而设计的，如果我们的系统复杂度根本不是在这方面，引入 Docker 没有什么意义。 简单的复杂度分析案例我来分析一个简单的案例 一起来看看如何将“架构设计的真正目的是为了解决软件系统复杂度带来的问题”这个指导思想应用到实践中。假设我们需要设计一个大学的学生管理系统，其基本功能包括登录、注册、成绩管理、课程管理等。当我们对这样一个系统进行架构设计的时候，首先应识别其复杂度到底体现在哪里。\n性能：一个学校的学生大约 1 ~ 2 万人，学生管理系统的访问频率并不高，平均每天单个学生的访问次数平均不到 1 次，因此性能这部分并不复杂，存储用 MySQL 完全能够胜任，缓存都可以不用，Web 服务器用 Nginx 绰绰有余。 可扩展性：学生管理系统的功能比较稳定，可扩展的空间并不大，因此可扩展性也不复杂。 高可用：学生管理系统即使宕机 2 小时，对学生管理工作影响并不大，因此可以不做负载均衡，更不用考虑异地多活这类复杂的方案了。但是，如果学生的数据全部丢失，修复是非常麻烦的，只能靠人工逐条修复，这个很难接受，因此需要考虑存储高可靠，这里就有点复杂了。我们需要考虑多种异常情况：机器故障、机房故障，针对机器故障，我们需要设计 MySQL 同机房主备方案；针对机房故障，我们需要设计 MySQL 跨机房同步方案。 安全性：学生管理系统存储的信息有一定的隐私性，例如学生的家庭情况，但并不是和金融相关的，也不包含强隐私（例如玉照、情感）的信息，因此安全性方面只要做 3 个事情就基本满足要求了：Nginx 提供 ACL 控制、用户账号密码管理、数据库访问权限控制。 成本：由于系统很简单，基本上几台服务器就能够搞定，对于一所大学来说完全不是问题，可以无需太多关注。还有其他方面，如果有兴趣，你可以自行尝试去分析。通过我上面的分析，可以看到这个方案的主要复杂性体现在存储可靠性上，需要保证异常的时候，不要丢失所有数据即可（丢失几个或者几十个学生的信息问题不大），对应的架构如下： 高性能 1. 任务分配 任务分配的意思是指每台机器都可以处理完整的业务任务，不同的任务分配到不同的机器上执行。\n2.任务分解 虽然系统拆分可能在某种程度上能提升业务处理性能，但提升性能也是有限的，不可能系统不拆分的时候业务处理耗时为 50ms，系统拆分后业务处理耗时只要 1ms，**因为最终决定业务处理性能的还是业务逻辑本身，业务逻辑本身没有发生大的变化下，理论上的性能是有一个上限的，系统拆分能够让性能逼近这个极限，但无法突破这个极限。**因此，任务分解带来的性能收益是有一个度的，并不是任务分解越细越好，而对于架构设计来说，如何把握这个粒度就非常关键了。\n高可用 系统无中断地执行其功能的能力，代表系统的可用性程度，是进行系统设计时的准则之一。\n高性能增加机器目的在于“扩展”处理性能；高可用增加机器目的在于“冗余”处理单元。\n计算高可用 计算有一个特点就是无论在哪台机器上进行计算，同样的算法和输入数据，产出的结果都是一样的，所以将计算从一台机器迁移到另外一台机器，对业务并没有什么影响。\n你可能会发现，这个双机的架构图和上期“高性能”讲到的双机架构图是一样的，因此复杂度也是类似的，具体表现为：\n需要增加一个任务分配器，选择合适的任务分配器也是一件复杂的事情，需要综合考虑性能、成本、可维护性、可用性等各方面因素。\n任务分配器和真正的业务服务器之间有连接和交互，需要选择合适的连接方式，并且对连接进行管理。例如，连接建立、连接检测、连接中断后如何处理等。\n任务分配器需要增加分配算法。例如，常见的双机算法有主备、主主，主备方案又可以细分为冷备、温备、热备。\n存储高可用 综合分析，无论是正常情况下的传输延迟，还是异常情况下的传输中断，都会导致系统的数据在某个时间点或者时间段是不一致的，而数据的不一致又会导致业务问题；但如果完全不做冗余，系统的整体高可用又无法保证，所以存储高可用的难点不在于如何备份数据，而在于如何减少或者规避数据不一致对业务造成的影响。\n计算机内部复杂度最关键的地方就是操作系统。计算机性能的发展本质上是由硬件发展驱动的，尤其是 CPU 的性能发展。著名的“摩尔定律”表明了 CPU 的处理能力每隔 18 个月就翻一番；而将硬件性能充分发挥出来的关键就是操作系统，所以操作系统本身其实也是跟随硬件的发展而发展的，操作系统是软件系统的运行环境，操作系统的复杂度直接决定了软件系统的复杂度。\n高性能方案 数据库读写分离（主从集群）\n主从复制延迟和分配机制。 读写分离分散了数据库读写操作的压力，但没有分散存储压力，当数据量达到千万甚至上亿条的时候，单台数据库服务器的存储能力会成为系统的瓶颈，主要体现在这几个方面：\n数据量太大，读写的性能会下降，即使有索引，索引也会变得很大，性能同样会下降。 数据文件会变得很大，数据库备份和恢复需要耗费很长时间。 数据文件越大，极端情况下丢失数据的风险越高（例如，机房火灾导致数据库主备机都发生故障）。 分库分表 业务分库\n业务分库指的是按照业务模块将数据分散到不同的数据库服务器。 分表 将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据，如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进行拆分。\n垂直分表 垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。 水平分表 当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性能瓶颈或者隐患。 小结 这些操作依次尝试\n1.做硬件优化，例如从机械硬盘改成使用固态硬盘，当然固态硬盘不适合服务器使用，只是举个例子\n2.先做数据库服务器的调优操作，例如增加索引，oracle有很多的参数调整;\n3.引入缓存技术，例如Redis，减少数据库压力\n4.程序与数据库表优化，重构，例如根据业务逻辑对程序逻辑做优化，减少不必要的查询;\n5.在这些操作都不能大幅度优化性能的情况下，不能满足将来的发展，再考虑分库分表，也要有预估性\n高性能NoSQL 常见的 NoSQL 方案分为 4 类。\nK-V 存储：解决关系数据库无法存储数据结构的问题，以 Redis 为代表。 文档数据库：解决关系数据库强 schema 约束的问题，以 MongoDB 为代表。 列式数据库：解决关系数据库大数据场景下的 I/O 问题，以 HBase 为代表。 全文搜索引擎：解决关系数据库的全文搜索性能问题，以 Elasticsearch 为代表。 缓存 缓存穿透 缓存穿透是指缓存没有发挥作用，业务系统虽然去缓存查询数据，但缓存中没有数据，业务系统需要再次去存储系统查询数据。通常情况下有两种情况：\n存储数据不存在 缓存数据生成耗费大量时间或者资源 缓存雪崩 缓存雪崩是指当缓存失效（过期）后引起系统性能急剧下降的情况。当缓存过期被清除后，业务系统需要重新生成缓存，因此需要再次访问存储系统，再次进行运算，这个处理步骤耗时几十毫秒甚至上百毫秒。而对于一个高并发的业务系统来说，几百毫秒内可能会接到几百上千个请求。由于旧的缓存已经被清除，新的缓存还未生成，并且处理这些请求的线程都不知道另外有一个线程正在生成缓存，因此所有的请求都会去重新生成缓存，都会去访问存储系统，从而对存储系统造成巨大的性能压力。这些压力又会拖慢整个系统，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃。\n","permalink":"https://luenci.com/en/posts/%E5%88%9D%E6%8E%A2%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","summary":"\u003cblockquote\u003e\n\u003cp\u003e架构设计的主要目的是为了解决软件系统复杂度带来的问题\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"架构框架组件模块系统\"\u003e架构、框架、组件、模块、系统\u003c/h2\u003e\n\u003cp\u003eOLAP（Online Analytical Processing）在线分析处理\u003c/p\u003e\n\u003cp\u003e架构是顶层设计；框架是面向编程或配置的半成品；组件是从技术维度上的复用；模块是从业务维度上职责的划分；系统是相互协同可运行的实体。\u003c/p\u003e\n\u003ch1 id=\"架构设计的目的\"\u003e架构设计的目的\u003c/h1\u003e\n\u003ch2 id=\"明确架构设计是为了解决软件复杂度原则后\"\u003e明确“架构设计是为了解决软件复杂度”原则后\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e“这么多需求，从哪里开始下手进行架构设计呢？”\n\u003cul\u003e\n\u003cli\u003e— 通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e“架构设计要考虑高性能、高可用、高扩展……这么多高 XX，全部设计完成估计要 1 个月，但老大只给了 1 周时间”\n\u003cul\u003e\n\u003cli\u003e—架构设计并不是要面面俱到，不需要每个架构都具备高性能、高可用、高扩展等特点，而是要识别出复杂点然后有针对性地解决问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e“业界 A 公司的架构是 X，B 公司的方案是 Y，两个差别比较大，该参考哪一个呢？”\n\u003cul\u003e\n\u003cli\u003e—理解每个架构方案背后所需要解决的复杂点，然后才能对比自己的业务复杂点，参考复杂点相似的方案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其次，遵循这条准则能够让“老鸟”架构师有的放矢，而不是贪大求全。技术人员往往都希望自己能够做出最牛的东西，架构师也不例外，尤其是一些“老鸟”架构师，为了证明自己的技术牛，可能会陷入贪大求全的焦油坑而无法自拔。\u003c/p\u003e\n\u003cp\u003e例如：“我们的系统一定要做到每秒 TPS 10 万”。\u003c/p\u003e\n\u003cp\u003e“淘宝的架构是这么做的，我们也要这么做”。\u003c/p\u003e\n\u003cp\u003e“Docker 现在很流行，我们的架构应该将 Docker 应用进来”。\u003c/p\u003e\n\u003cp\u003e以上这些想法，如果拿“架构设计是为了解决软件复杂度”这个原则来衡量，就很容易判断。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“我们的系统一定要做到每秒 TPS 10 万”\n\u003cul\u003e\n\u003cli\u003e—如果系统的复杂度不是在性能这部分，TPS 做到 10 万并没有什么用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e“淘宝的架构是这么做的，我们也要这么做”\n\u003cul\u003e\n\u003cli\u003e—淘宝的架构是为了解决淘宝业务的复杂度而设计的，淘宝的业务复杂度并不就是我们的业务复杂度，绝大多数业务的用户量都不可能有淘宝那么大。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e“Docker 现在很流行，我们的架构应该将 Docker 应用进来\n\u003cul\u003e\n\u003cli\u003e—Docker 不是万能的，只是为了解决资源重用和动态分配而设计的，如果我们的系统复杂度根本不是在这方面，引入 Docker 没有什么意义。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"初探架构设计"},{"content":"defer 解析 作用域 向 defer 关键字传入的函数会在函数返回之前运行。假设我们在 for 循环中多次调用 defer 关键字：\n1 2 3 4 5 6 7 8 9 10 11 12 func main() { for i := 0; i \u0026lt; 5; i++ { defer fmt.Println(i) } } $ go run main.go 4 3 2 1 0 运行上述代码会倒序执行传入 defer 关键字的所有表达式，因为最后一次调用 defer 时传入了 fmt.Println(4)，所以这段代码会优先打印 4。我们可以通过下面这个简单例子强化对 defer 执行时机的理解：\n1 2 3 4 5 6 7 8 9 10 11 12 13 func main() { { defer fmt.Println(\u0026#34;defer runs\u0026#34;) fmt.Println(\u0026#34;block ends\u0026#34;) } fmt.Println(\u0026#34;main ends\u0026#34;) } $ go run main.go block ends main ends defer runs 从上述代码的输出我们会发现，defer 传入的函数不是在退出代码块的作用域时执行的，它只会在当前函数和方法返回之前被调用。\n预计算参数 Go 语言中所有的函数调用都是传值的，虽然 defer 是关键字，但是也继承了这个特性。假设我们想要计算 main 函数运行的时间，可能会写出以下的代码：\n1 2 3 4 5 6 7 8 9 func main() { startedAt := time.Now() defer fmt.Println(time.Since(startedAt)) time.Sleep(time.Second) } $ go run main.go 0s 然而上述代码的运行结果并不符合我们的预期，这个现象背后的原因是什么呢？\n经过分析，我们会发现调用 defer 关键字会立刻拷贝函数中引用的外部参数，所以 time.Since(startedAt) 的结果不是在 main 函数退出之前计算的，而是在 defer 关键字调用时计算的，最终导致上述代码输出 0s。 想要解决这个问题的方法非常简单，我们只需要向 defer 关键字传入匿名函数：\n1 2 3 4 5 6 7 8 9 func main() { startedAt := time.Now() defer func() { fmt.Println(time.Since(startedAt)) }() time.Sleep(time.Second) } $ go run main.go 1s 虽然调用 defer 关键字时也使用值传递，但是因为拷贝的是函数指针，所以 time.Since(startedAt) 会在 main 函数返回前调用并打印出符合预期的结果。\n使用对循环迭代器变量的引用 在 Go 中，循环迭代器变量是一个在每次循环迭代中采用不同值的单个变量。这是非常有效的，但如果使用不当可能会导致意外行为。例如，请参阅以下程序：\n1 2 3 4 5 6 7 8 func main() { var out []*int for i := 0; i \u0026lt; 3; i++ { out = append(out, \u0026amp;i) } fmt.Println(\u0026#34;Values:\u0026#34;, *out[0], *out[1], *out[2]) fmt.Println(\u0026#34;Addresses:\u0026#34;, out[0], out[1], out[2]) } 它会输出意想不到的结果：\n1 2 Values: 3 3 3 Addresses: 0x40e020 0x40e020 0x40e020 解释：在每次迭代中，我们将 i 的地址附加i到out切片，但由于它是相同的变量，因此我们附加了相同的地址，该地址最终包含分配给 的最后一个值i。解决方案之一是将循环变量复制到新变量中：\n1 2 3 4 for i := 0; i \u0026lt; 3; i++ { i := i // Copy i into a new variable. out = append(out, \u0026amp;i) } 该程序的新输出是预期的：\n1 2 Values: 0 1 2 Addresses: 0x40e020 0x40e024 0x40e028 说明：该行将i := i循环变量复制i到作用域为 for 循环体块的新变量中，也称为i. 新变量的地址是附加到数组的地址，这使得它比 for 循环体块更有效。在每次循环迭代中，都会创建一个新变量。\n虽然这个例子可能看起来有点明显，但在其他一些情况下，同样的意外行为可能更隐蔽。例如，循环变量可以是一个数组，而引用可以是一个切片：\n1 2 3 4 5 6 7 func main() { var out [][]int for _, i := range [][1]int{{1}, {2}, {3}} { out = append(out, i[:]) } fmt.Println(\u0026#34;Values:\u0026#34;, out) } 输出：\n1 Values: [[3] [3] [3]] 当在 Goroutine 中使用循环变量时，也可以证明同样的问题（见下一节）。\n在循环迭代器变量上使用 goroutines 在 Go 中进行迭代时，可能会尝试使用 goroutines 并行处理数据。例如，您可以使用闭包编写如下内容：\n1 2 3 4 5 for _, val := range values { go func() { fmt.Println(val) }() } 上面的 for 循环可能不会像你期望的那样做，因为它们的val变量实际上是一个单一的变量，它接受每个切片元素的值。因为闭包都只绑定到那个变量，所以当你运行这段代码时，很有可能你会看到每次迭代打印的最后一个元素而不是按顺序打印的每个值，因为 goroutines 可能不会开始执行，直到循环后。\n编写该闭环的正确方法是：\n1 2 3 4 5 for _, val := range values { go func(val interface{}) { fmt.Println(val) }(val) } 通过将 val 作为参数添加到闭包中，val在每次迭代时评估并放置在 goroutine 的堆栈中，因此每个切片元素在最终执行时对 goroutine 可用。\n同样重要的是要注意，在循环体中声明的变量在迭代之间不共享，因此可以在闭包中单独使用。下面的代码使用一个公共索引变量i来创建单独的vals，这会导致预期的行为：\n1 2 3 4 5 6 for i := range valslice { val := valslice[i] go func() { fmt.Println(val) }() } 请注意，如果没有将这个闭包作为 goroutine 执行，代码会按预期运行。以下示例打印出 1 到 10 之间的整数。\n1 2 3 4 5 for i := 1; i \u0026lt;= 10; i++ { func() { fmt.Println(i) }() } 即使闭包仍然关闭同一个变量（在这种情况下，i），它们在变量更改之前执行，从而导致所需的行为。 http://golang.org/doc/go_faq.html#closures_and_goroutines\n您可能会发现另一种类似的情况，如下所示：\n1 2 3 4 5 6 7 for _, val := range values { go val.MyMethod() } func (v *val) MyMethod() { fmt.Println(v) } 上面的例子也将打印值的最后一个元素，原因与闭包相同。要解决此问题，请在循环内声明另一个变量。\n1 2 3 4 5 6 7 8 for _, val := range values { newVal := val go newVal.MyMethod() } func (v *val) MyMethod() { fmt.Println(v) } ","permalink":"https://luenci.com/en/posts/defergoroutine%E8%BF%AD%E4%BB%A3/","summary":"\u003ch1 id=\"defer-解析\"\u003edefer 解析\u003c/h1\u003e\n\u003ch2 id=\"作用域\"\u003e作用域\u003c/h2\u003e\n\u003cp\u003e向 \u003ccode\u003edefer\u003c/code\u003e 关键字传入的函数会在函数返回之前运行。假设我们在 \u003ccode\u003efor\u003c/code\u003e 循环中多次调用 \u003ccode\u003edefer\u003c/code\u003e 关键字：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#ff7b72\"\u003edefer\u003c/span\u003e fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(i)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e run main.\u003cspan style=\"color:#ff7b72\"\u003ego\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e运行上述代码会倒序执行传入 \u003ccode\u003edefer\u003c/code\u003e 关键字的所有表达式，因为最后一次调用 \u003ccode\u003edefer\u003c/code\u003e 时传入了 \u003ccode\u003efmt.Println(4)\u003c/code\u003e，所以这段代码会优先打印 4。我们可以通过下面这个简单例子强化对 \u003ccode\u003edefer\u003c/code\u003e 执行时机的理解：\u003c/p\u003e","title":"golang常见错误之defer和迭代"},{"content":"预备知识 unsafe.Pointer unsafe.Pointer 是一种特殊意义的指针，它可以包含任意类型的地址，有点类似于 C 语言里的 void* 指针，全能型的。\n对unsafe.Pointer 又爱又恨，你会有效使用它吗？\nunsafe 是关注 Go 程序操作类型安全的包。\nunsafe.Pointer 可以让你无视 Go 的类型系统，完成任何类型与内建的 uintptr 类型之间的转化。根据文档，unsafe.Pointer 可以实现四种其他类型不能的操作：\n任何类型的指针都可以转化为一个 unsafe.Pointer 一个 unsafe.Pointer 可以转化成任何类型的指针 一个 uintptr 可以转化成一个 unsafe.Pointer 一个 unsafe.Pointer 可以转化成一个 uintptr 两种只能借助 unsafe 包才能完成的操作：\n使用 unsafe.Pointer 实现两种类型间转换 使用 unsafe.Pointer 处理系统调用。 CAS比较并交换\u0026mdash;-Compare And Swap Go 的一个 CAS 操作使用场景\n在并发执行的多个 routine R1,R2\u0026hellip;Rn 的中，同一时间只允许唯一一个 routine 执行某一个操作，并且其他 routine 需要非阻塞的知道自己无权操作并返回的时候，可以使用 CAS 操作。 大方向：任务编排用 Channel，共享资源保护用传统并发原语\n互斥锁实现机制 使用互斥锁，限定临界区只能同时由一个线程持有。\n临界区 在并发编程中，如果程序中的一部分会被并发访问或修改，那么，为了避免并发访问导致的意想不到的结果，这部分程序需要被保护起来，这部分被保护起来的程序，就叫做临界区。 在 Go 标准库中，它提供了 Mutex 来实现互斥锁这个功能。\n共享资源。并发地读写共享资源，会出现数据竞争（data race）的问题，所以需要 Mutex、RWMutex 这样的并发原语来保护。 任务编排。需要 goroutine 按照一定的规律执行，而 goroutine 之间有相互等待或者依赖的顺序关系，我们常常使用 WaitGroup 或者 Channel 来实现。 消息传递。信息交流以及不同的 goroutine 之间的线程安全的数据交流，常常使用 Channel 来实现。 简单的计数器例子 Counter 方法一：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var count = 0 // 互斥锁保护计数器 var mu sync.Mutex var wg sync.WaitGroup wg.Add(10) for i := 0; i \u0026lt; 10; i++{ go func() { defer wg.Done() // 对变量 count 进行加法操作 // count++ 不是一个原子操作，它至少包含几个步骤， // 比如读取变量 count 的当前值， // 对这个值加 1，把结果再保存到 count 中。 // 因为不是原子操作，就可能有并发的问题。 for i := 0; i \u0026lt; 10000; i++{ mu.Lock() count++ mu.Unlock() } }() } // 等待 10 个 goroutine 完成 wg.Wait() fmt.Println(\u0026#34;结果为\u0026#34;, count) } 方法二（推荐）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 type Counter struct{ id int name string mu sync.Mutex count uint } func(c *Counter)Inc() { c.mu.Lock() c.count++ c.mu.Unlock() } func(c *Counter)Count()uint{ c.mu.Lock() defer c.mu.Unlock() return c.count } func main2() { var counter Counter var wg sync.WaitGroup wg.Add(10) for i := 0; i \u0026lt; 10; i++{ go func() { defer wg.Done() for i := 0; i \u0026lt; 10000; i++{ counter.Inc()// 受到 mutex 保护的方法 } }() } wg.Wait() fmt.Println(\u0026#34;结果为\u0026#34;, counter.count) } 等待的goroutine们是以FIFO排队的\n1）当Mutex处于正常模式时，若此时没有新goroutine与队头goroutine竞争，则队头goroutine获得。若有新goroutine竞争大概率新goroutine获得。\n2）当队头goroutine竞争锁失败1ms后，它会将Mutex调整为饥饿模式。进入饥饿模式后，锁的所有权会直接从解锁goroutine移交给队头goroutine，此时新来的goroutine直接放入队尾。\n3）当一个goroutine获取锁后，如果发现自己满足下列条件中的任何一个\n它是队列中最后一个 它等待锁的时间少于1ms 将锁切换回正常模式\nmutex 注意点 Unlock 方法可以被任意的 goroutine 调用释放锁，即使是没持有这个互斥锁的 goroutine，也可以进行这个操作。这是因为，Mutex 本身并没有包含持有这把锁的 goroutine 的信息，所以，Unlock 也不会对此进行检查。Mutex 的这个设计一直保持至今。 Mutex常见错误 Mutex 常见的错误场景有 4 类，分别是 Lock/Unlock 不是成对出现、Copy 已使用的 Mutex、重入和死锁。\n可重入的概念\n当一个线程获取锁时，如果没有其它线程拥有这个锁，那么，这个线程就成功获取到这个锁。之后，如果其它线程再请求这个锁，就会处于阻塞等待的状态。但是，如果拥有这把锁的线程再请求这把锁的话，不会阻塞，而是成功返回，所以叫可重入锁（有时候也叫做递归锁）。只要你拥有这把锁，你可以可着劲儿地调用，比如通过递归实现一些算法，调用者不会阻塞或者死锁。 死锁\n两个或两个以上的进程（或线程，goroutine）在执行过程中，因争夺共享资源而处于一种互相等待的状态，如果没有外部干涉，它们都将无法推进下去，此时，我们称系统处于死锁状态或系统产生了死锁。 避免死锁，只要破坏这四个条件中的一个或者几个，就可以了。\n互斥： 至少一个资源是被排他性独享的，其他线程必须处于等待状态，直到资源被释放。 持有和等待：goroutine 持有一个资源，并且还在请求其它 goroutine 持有的资源，也就是咱们常说的“吃着碗里，看着锅里”的意思。 不可剥夺：资源只能由持有它的 goroutine 来释放。 环路等待：一般来说，存在一组等待进程，P={P1，P2，…，PN}，P1 等待 P2 持有的资源，P2 等待 P3 持有的资源，依此类推，最后是 PN 等待 P1 持有的资源，这就形成了一个环路等待的死结。 Mutex小结 RWMutex — 读写锁 标准库中的 RWMutex 是一个 reader/writer 互斥锁。RWMutex在某一时刻只能由任意数量的 reader 持有，或者是只被单个的 writer 持有。RWMutex 的方法也很少，总共有 5 个。\nLock/Unlock：写操作时调用的方法。如果锁已经被 reader 或者 writer 持有，那么，Lock 方法会一直阻塞，直到能获取到锁；Unlock 则是配对的释放锁的方法。\nRLock/RUnlock：读操作时调用的方法。如果锁已经被 writer 持有的话，RLock 方法会一直阻塞，直到能获取到锁，否则就直接返回；而 RUnlock 是 reader 释放锁的方法。\nRLocker：这个方法的作用是为读操作返回一个 Locker 接口的对象。它的 Lock 方法会调用 RWMutex 的 RLock 方法，它的 Unlock 方法会调用 RWMutex 的 RUnlock 方法。\nRWMutex 的零值是未加锁的状态，所以，当你使用 RWMutex 的时候，无论是声明变量，还是嵌入到其它 struct 中，都不必显式地初始化。\n如果你遇到可以明确区分 reader 和 writer goroutine 的场景，且有大量的并发读、少量的并发写，并且有强烈的性能需求，你就可以考虑使用读写锁 RWMutex 替换 Mutex。\nRWMutex 的实现原理 RWMutex 是很常见的并发原语，很多编程语言的库都提供了类似的并发类型。RWMutex 一般都是基于互斥锁、条件变量（condition variables）或者信号量（semaphores）等并发原语来实现。Go 标准库中的 RWMutex 是基于 Mutex 实现的。\nreaders-writers 问题一般有三类，基于对读和写操作的优先级，读写锁的设计和实现也分成三类。Read-preferring：读优先的设计可以提供很高的并发性，但是，在竞争激烈的情况下可能会导致写饥饿。这是因为，如果有大量的读，这种设计会导致只有所有的读都释放了锁之后，写才可能获取到锁。 Write-preferring：写优先的设计意味着，如果已经有一个 writer 在等待请求锁的话，它会阻止新来的请求锁的 reader 获取到锁，所以优先保障 writer。当然，如果有一些 reader 已经请求了锁的话，新请求的 writer 也会等待已经存在的 reader 都释放锁之后才能获取。所以，写优先级设计中的优先权是针对新来的请求而言的。这种设计主要避免了 writer 的饥饿问题。 不指定优先级：这种设计比较简单，不区分 reader 和 writer 优先级，某些场景下这种不指定优先级的设计反而更有效，因为第一类优先级会导致写饥饿，第二类优先级可能会导致读饥饿，这种不指定优先级的访问不再区分读写，大家都是同一个优先级，解决了饥饿的问题。 Go 标准库中的 RWMutex 设计是 Write-preferring 方案。一个正在阻塞的 Lock 调用会排除新的 reader 请求到锁。\nRWMutex的锁 RWMutex 是⼀个多 writer 多 reader 的读写锁，所以同时可能有多个 writer 和 reader。那 么，为了避免 writer 之间的竞争，RWMutex 就会使用⼀个 Mutex 来保证 writer 的互斥。\n在 Lock 方法中，是先获取内部互斥锁，才会修改的其他字段； 在 Unlock 方法中，是先修改的其他字段，才会释放内部互斥锁，这样才能保证字段的修改也受到互斥锁的保护。 使用读写锁最需要注意的⼀点就是尽量避免重入，重入带来的死锁⾮常隐蔽，⽽且难以 诊断。\nWaitGroup：协同等待，任务编排利器 WaitGroup基本用法 1 2 3 func (wg *WaitGroup) Add(delta int) func (wg *WaitGroup) Done() func (wg *WaitGroup) Wait() Add，用来设置 WaitGroup 的计数值； Done，用来将 WaitGroup 的计数值减 1，其实就是调用了 Add(-1)； Wait，调用这个方法的 goroutine 会⼀直阻塞，直到 WaitGroup 的计数值变为 0。 WaitGroup数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 type WaitGroup struct { // 避免复制使用的⼀个技巧，可以告诉vet⼯具违反了复制使用的规则 noCopy noCopy // 64bit(8bytes)的值分成两段，⾼32bit是计数值，低32bit是waiter的计数 // 另外32bit是用作信号量的 // 因为64bit值的原子操作需要64bit对⻬，但是32bit编译器不⽀持，所以数组中的元素在不同的架构 // 总之，会找到对⻬的那64bit作为state，其余的32bit做信号量 state1 [3]uint32 } // 得到state的地址和信号量的地址 func (wg *WaitGroup) state() (statep *uint64, semap *uint32) { if uintptr(unsafe.Pointer(\u0026amp;wg.state1))%8 == 0 { // 如果地址是64bit对⻬的，数组前两个元素做state，后⼀个元素做信号量 return (*uint64)(unsafe.Pointer(\u0026amp;wg.state1)), \u0026amp;wg.state1[2] } else { // 如果地址是32bit对⻬的，数组后两个元素用来做state，它可以用来做64bit的原子操作，第 return (*uint64)(unsafe.Pointer(\u0026amp;wg.state1[1])), \u0026amp;wg.state1[0] } } WaitGroup 是可以重用的。只要 WaitGroup 的计数值恢复到零值的状态，那么它就可以被看作是新创建的 WaitGroup，被重复使用\n小结 不重用 WaitGroup。新建⼀个 WaitGroup 不会带来多⼤的资源开销，重用反⽽更容易出 错。 保证所有的 Add 方法调用都在 Wait 之前。 不传递负数给 Add 方法，只通过 Done 来给计数值减 1。 不做多余的 Done 方法调用，保证 Add 的计数值和 Done 方法调用的数量是⼀样的。 不遗漏 Done 方法的调用，否则会导致 Wait hang 住⽆法返回。 Cond Go 标准库提供 Cond 原语的目的是，为等待 / 通知场景下的并发问题提供⽀持。\nCond 的基本用法 1 2 3 4 5 type Cond func NeWCond(l Locker) *Cond func (c *Cond) Broadcast() func (c *Cond) Signal() func (c *Cond) Wait() ⾸先，Cond 关联的 Locker 实例可以通过 c.L 访问，它内部维护着⼀个先入先出的等待队 列。 Signal 方法，允许调用者 Caller 唤醒⼀个等待此 Cond 的 goroutine。如果此时没有等待的goroutine，显然⽆需通知 waiter；如果 Cond 等待队列中有⼀个或者多个等待的goroutine，则需要从等待队列中移除第⼀个 goroutine 并把它唤醒。在其他编程语言中，⽐如 Java 语⾔中，Signal 方法也被叫做 notify 方法。 调用 Signal 方法时，不强求你⼀定要持有 c.L 的锁。 Broadcast 方法，允许调用者 Caller 唤醒所有等待此 Cond 的 goroutine。如果此时没有等待的 goroutine，显然⽆需通知 waiter；如果 Cond 等待队列中有⼀个或者多个等待的goroutine，则清空所有等待的 goroutine，并全部唤醒。在其他编程语⾔中，⽐如 Java 语⾔中，Broadcast 方法也被叫做 notifyAll 方法。 同样地，调用 Broadcast 方法时，也不强求你⼀定持有 c.L 的锁。 Wait 方法，会把调用者 Caller 放入 Cond 的等待队列中并阻塞，直到被 Signal 或者Broadcast 的方法从等待队列中移除并唤醒。 调用 Wait 方法时必须要持有 c.L 的锁。 案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( \u0026#34;log\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) func main() { c := sync.NewCond(\u0026amp;sync.Mutex{}) var ready int for i := 0; i \u0026lt;10 ; i++ { go func(i int) { time.Sleep(time.Duration(rand.Int63n(10)) * time.Second) // 加锁更改等待条件 c.L.Lock() ready++ c.L.Unlock() log.Printf(\u0026#34;运动员#%d 准备就绪\\\\n\u0026#34;, i) // 广播唤醒所有的等待着 c.Broadcast() }(i) } c.L.Lock() for ready!= 10{ c.Wait() log.Printf(\u0026#34;裁判员被唤醒一次\u0026#34;) } c.L.Unlock() // 所有运动员是否准备就绪 log.Println(\u0026#34;所有运动员准备就绪，比赛开始！\u0026#34;) } 小结 Cond 是为等待 / 通知场景下的并发问题提供⽀持的。它提供了条件变量的三个基本方法Signal、Broadcast 和 Wait，为并发的 goroutine 提供等待 / 通知机制。 使用 Cond 之所以容易出错，就是 Wait 调用需要加锁，以及被唤醒后⼀定要检查条件是否真 的已经满⾜。你需要牢记这两点。 WaitGroup和 Cond 的区别：WaitGroup 是主 goroutine 等待确定数量的子 goroutine 完成任务；⽽ Cond 是等待某个条件满⾜，这个条件的修改可以被任意多的 goroutine 更新，⽽且 Cond的 Wait 不关⼼也不知道其他 goroutine 的数量，只关⼼等待条件。⽽且 Cond 还有单个通知的机制，也就是 Signal 方法。 Once Once可以用来执行且仅仅执行⼀次动作，常常用于单例对象的初始化场景。\n使用场景 sync.Once 只暴露了⼀个方法 Do，你可以多次调用 Do 方法，但是只有第⼀次调用 Do 方法 时 f 参数才会执行，这⾥的 f 是⼀个⽆参数⽆返回值的函数。\n1 func (o *Once) Do(f func()) Once 常常用来初始化单例资源，或者并发访问只需初始化⼀次的共享资源，或者在测试的时候初始化⼀次测试资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var once sync.Once f1:=func(){ fmt.Println(\u0026#34;f1 exce！\u0026#34;) } once.Do(f1) f2 := func() { fmt.Println(\u0026#34;f2 exce\u0026#34;) } once.Do(f2) } 小结 ⼀旦你遇到只需要初始化⼀次的场景，⾸先想到的就应该是 Once 并发原语。\nPool Go 标准库中提供了⼀个通用的 Pool 数据结构，也就是 sync.Pool，我们使用它可以创建池化的对象。但是它池化的对象可能会被垃圾回收掉。\nsync.Pool 数据类型用来保存⼀组可独立访问的临时对象。 也就是说，它池化的对象会在未来的某个时候被毫无预兆地移除掉。而且，如果没有别的对象引用这个被移除的对象的话，这个被移除的对象就会被垃圾回收掉。 注意点 sync.Pool 本身就是线程安全的，多个 goroutine 可以并发地调用它的方法存取对象； sync.Pool 不可在使用之后再复制使用。 方法介绍 1.New\nPool struct 包含⼀个 New 字段，这个字段的类型是函数 func() interface{}。当调用 Pool 的 Get 方法从池中获取元素，没有更多的空闲元素可返回时，就会调用这个 New 方法来创建新 的元素。如果你没有设置 New 字段，没有更多的空闲元素可返回时，Get 方法将返回 nil，表 明当前没有可用的元素。 有趣的是，New 是可变的字段。这就意味着，你可以在程序运行的时候改变创建元素的方 法。当然，很少有⼈会这么做，因为⼀般我们创建元素的逻辑都是⼀致的，要创建的也是同⼀ 类的元素，所以你在使用 Pool 的时候也没必要玩⼀些“花活”，在程序运行时更改 New 的 值。 2.Get\n如果调用这个方法，就会从 Pool取⾛⼀个元素，这也就意味着，这个元素会从 Pool 中移除， 返回给调用者。不过，除了返回值是正常实例化的元素，Get 方法的返回值还可能会是⼀个 nil（Pool.New 字段没有设置，⼜没有空闲元素可以返回），所以你在使用的时候，可能需要 判断。 3.Put\n这个方法用于将⼀个元素返还给 Pool，Pool 会把这个元素保存到池中，并且可以复用。但如 果 Put ⼀个 nil 值，Pool 就会忽略这个值。 推荐的三方pool gammazero/workerpool：gammazero/workerpool 可以⽆限制地提交任务，提供了更便利的 Submit 和 SubmitWait 方法提交任务，还可以提供当前的 worker 数和任务数以及关闭 Pool 的功能。 ivpusic/grpool：grpool 创建 Pool 的时候需要提供 Worker 的数量和等待执行的任务的 最⼤数量，任务的提交是直接往 Channel 放入任务。 dpaks/goworkers：dpaks/goworkers 提供了更便利的 Submit 方法提交任务以及Worker 数、任务数等查询方法、关闭 Pool 的方法。它的任务的执行结果需要在ResultChan 和 ErrChan 中去获取，没有提供阻塞的方法，但是它可以在初始化的时候设置 Worker 的数量和任务数。 pool可能造成的问题 内存泄漏 在使用 sync.Pool 回收 buffer 的时候，⼀定要检查回收的对象的⼤⼩。如果 buffer 太⼤，就 不要回收了，否则就太浪费了 内存浪费 要做到物尽其用，尽可能不浪费的话，我们可以将 buffer 池分成⼏层 ⼩于 512 byte的元素的 buffer 占⼀个池子；其次，⼩于 1K byte ⼤⼩的元素占⼀个池子；再次，⼩于 4Kbyte ⼤⼩的元素占⼀个池子。这样分成⼏个池子以后，就可以根据需要，到所需⼤⼩的池子中获取 buffer 了。 小结 Pool 是⼀个通用的概念，也是解决对象重用和预先分配的⼀个常用的优化⼿段。即使你⾃⼰ 没在项目中直接使用过，但肯定在使用其它库的时候，就享受到应用 Pool 的好处了，⽐如数 据库的访问、http API 的请求等等。 我们⼀般不会在程序⼀开始的时候就开始考虑优化，⽽是等项目开发到⼀个阶段，或者快结束 的时候，才全⾯地考虑程序中的优化点，⽽ Pool 就是常用的⼀个优化⼿段。如果你发现程序 中有⼀种 GC 耗时特别⾼，有⼤量的相同类型的临时对象，不断地被创建销毁，这时，你就可 以考虑看看，是不是可以通过池化的⼿段重用这些对象。 另外，在分布式系统或者微服务框架中，可能会有⼤量的并发 Client 请求，如果 Client 的耗 时占⽐很⼤，你也可以考虑池化 Client，以便重用。 如果你发现系统中的 goroutine 数量⾮常多，程序的内存资源占用⽐较⼤，⽽且整体系统的耗 时和 GC 也⽐较⾼，我建议你看看，是否能够通过 Worker Pool 解决⼤量 goroutine 的问 题，从⽽降低这些指标。 Context：信息穿透上下文 在 API之间或者方法调用之间，所传递的除了业务参数之外的额外信息。\ncontext使用场景 上下⽂信息传递 （request-scoped），⽐如处理 http 请求、在请求处理链路上传递信 息； 控制子 goroutine 的运行； 超时控制的方法调用； 可以取消的方法调用。 context 接口函数 1 2 3 4 5 6 type Context interface { Deadline() (deadline time.Time, ok bool) Done() \u0026lt;-chan struct{} Err() error Value(key interface{}) interface{} } Deadline 方法会返回这个 Context 被取消的截⽌⽇期。如果没有设置截⽌⽇期，ok 的值是 false。后续每次调用这个对象的 Deadline 方法时，都会返回和第⼀次调用相同的结果。 Done 方法返回⼀个 Channel 对象。在 Context 被取消时，此 Channel 会被 close，如果没 被取消，可能会返回 nil。后续的 Done 调用总是返回相同的结果。当 Done 被 close 的时 候，你可以通过 ctx.Err 获取错误信息。Done 这个方法名其实起得并不好，因为名字太过笼 统，不能明确反映 Done 被 close 的原因，因为 cancel、timeout、deadline 都可能导致 Done 被 close，不过，目前还没有⼀个更合适的方法名称。 如果 Done 没有被 close，Err 方法返回 nil；如果 Done 被 close，Err 方法会返回 Done 被 close 的原因。 Value 返回此 ctx 中和指定的 key 相关联的 value。 Context 中实现了 2 个常用的生成顶层 Context 的方法。\ncontext.Background()：返回⼀个⾮ nil 的、空的 Context，没有任何值，不会被 cancel，不会超时，没有截⽌⽇期。⼀般用在主函数、初始化、测试以及创建根 Context 的时候 context.TODO()：返回⼀个⾮ nil 的、空的 Context，没有任何值，不会被 cancel，不会超时，没有截⽌⽇期。当你不清楚是否该用 Context，或者目前还不知道要传递⼀些什么上下⽂信息的时候，就可以使用这个方法。 关于Context的一些约定规定 ⼀般函数使用 Context 的时候，会把这个参数放在第⼀个参数的位置。从来不把 nil 当Context 类型的参数值，可以使用 context.Background() 创建⼀个空的上下⽂对象，也不要使用 nil。 2.Context 只用来临时做函数之间的上下⽂透传，不能持久化 Context 或者把 Context ⻓久存。把 Context 持久化到数据库、本地⽂件或者全局变量、缓存中都是错误的用法。 3.key 的类型不应该是字符串类型或者其它内建类型，否则容易在包之间使用 Context 时候产生冲突。使用 WithValue 时，key 的类型应该是⾃⼰定义的类型。 4.常常使用 struct{}作为底层类型定义 key 的类型。对于 exported key 的静态类型，常常是接⼝或者指针。这样可以尽量减少内存分配。 应用场景 main函数返回时，所有的goroutine都会被直接打断，程序退出。除此之外如果想通过编程的方法让一个goroutine中断其他goroutine的执行，只能是通过在多个goroutine间通过context上下文对象同步取消信号的方式来实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func main() { ctx, cancel := context.WithCancel(context.Background()) go func() { defer func() { fmt.Println(\u0026#34;goroutine exit\u0026#34;) }() for { select { case \u0026lt;-ctx.Done(): return default: time.Sleep(time.Second) } } }() time.Sleep(time.Second) cancel() time.Sleep(2 * time.Second) } atomic 原子操作 原子操作，是因为⼀个原子在执行的时候，其它线程不会看到执行⼀半的操作结果。在其它线程看来，原子操作要么执行完了，要么还没有执行，就像⼀个最⼩的粒子 - 原子⼀样，不可分割\natomic 提供的方法 atomic 操作的对象是⼀个地址，你需要把可寻址的变量的地址作为参数传递给方法，⽽不是把变量的值传递给方法。 Add Add 方法就是给第⼀个参数地址中的值增加⼀个 delta 值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // AddInt32 atomically adds delta to *addr and returns the new value. func AddInt32(addr *int32, delta int32) (new int32) // AddUint32 atomically adds delta to *addr and returns the new value. // To subtract a signed positive constant value c from x, do AddUint32(\u0026amp;x, ^uint32(c-1)). // In particular, to decrement x, do AddUint32(\u0026amp;x, ^uint32(0)). func AddUint32(addr *uint32, delta uint32) (new uint32) // AddInt64 atomically adds delta to *addr and returns the new value. func AddInt64(addr *int64, delta int64) (new int64) // AddUint64 atomically adds delta to *addr and returns the new value. // To subtract a signed positive constant value c from x, do AddUint64(\u0026amp;x, ^uint64(c-1)). // In particular, to decrement x, do AddUint64(\u0026amp;x, ^uint64(0)). func AddUint64(addr *uint64, delta uint64) (new uint64) // AddUintptr atomically adds delta to *addr and returns the new value. func AddUintptr(addr *uintptr, delta uintptr) (new uintptr CAS （CompareAndSwap）\n这个方法会⽐较当前 addr 地址⾥的值是不是 old，如果不等于 old，就返回 false；如果等于old，就把此地址的值替换成 new 值，返回 true。这就相当于“判断相等才替换”。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value. func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool) // CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value. func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool) // CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value. func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool) // CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value. func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool) // CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value. func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool) // CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value. func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool) 效果如下\n1 2 3 4 5 if *addr == old { *addr = new return true } return false Swap 如果不需要⽐较旧值，只是⽐较粗暴地替换的话，就可以使用 Swap 方法，它替换后还可以 返回旧值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // SwapInt32 atomically stores new into *addr and returns the previous *addr value. func SwapInt32(addr *int32, new int32) (old int32) // SwapInt64 atomically stores new into *addr and returns the previous *addr value. func SwapInt64(addr *int64, new int64) (old int64) // SwapUint32 atomically stores new into *addr and returns the previous *addr value. func SwapUint32(addr *uint32, new uint32) (old uint32) // SwapUint64 atomically stores new into *addr and returns the previous *addr value. func SwapUint64(addr *uint64, new uint64) (old uint64) // SwapUintptr atomically stores new into *addr and returns the previous *addr value. func SwapUintptr(addr *uintptr, new uintptr) (old uintptr) // SwapPointer atomically stores new into *addr and returns the previous *addr value. func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer) 效果如下：\n1 2 3 old = *addr *addr = new return old Load Load 方法会取出 addr 地址中的值，即使在多处理器、多核、有 CPU cache 的情况下，这个操作也能保证 Load 是⼀个原子操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // LoadInt32 atomically loads *addr. func LoadInt32(addr *int32) (val int32) // LoadInt64 atomically loads *addr. func LoadInt64(addr *int64) (val int64) // LoadUint32 atomically loads *addr. func LoadUint32(addr *uint32) (val uint32) // LoadUint64 atomically loads *addr. func LoadUint64(addr *uint64) (val uint64) // LoadUintptr atomically loads *addr. func LoadUintptr(addr *uintptr) (val uintptr) // LoadPointer atomically loads *addr. func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer) Store Store 方法会把⼀个值存入到指定的 addr 地址中，即使在多处理器、多核、有 CPU cache的情况下，这个操作也能保证 Store 是⼀个原子操作。别的 goroutine 通过 Load 读取出来，不会看到存取了⼀半的值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // StoreInt32 atomically stores val into *addr. func StoreInt32(addr *int32, val int32) // StoreInt64 atomically stores val into *addr. func StoreInt64(addr *int64, val int64) // StoreUint32 atomically stores val into *addr. func StoreUint32(addr *uint32, val uint32) // StoreUint64 atomically stores val into *addr. func StoreUint64(addr *uint64, val uint64) // StoreUintptr atomically stores val into *addr. func StoreUintptr(addr *uintptr, val uintptr) // StorePointer atomically stores val into *addr. func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer Value 类型 它可以原子地存取对象类型，但也只能存取，不能 CAS 和 Swap，常常用在配置变更等场景中\n1 2 3 4 5 6 7 // A Value must not be copied after first use. type Value struct { v interface{} } func (v *Value) Load() (x interface{}) {...} func (v *Value) Store(x interface{}) {...} Channel：解决并发问题 CSP允许使用进程组件来描述系统，它们独⽴运行，并且只通过消息传递的方式通信。\nChannel 的应用场景 执行业务处理的 goroutine 不要通过共享内存的方式通信，⽽是要通过 Channel 通信的方式分享数据\n“communicate by sharing memory”是传统的并发编程处理方式，就是指，共享的数据需要用锁进行保护，goroutine 需要获取到锁，才能并发访问数据。 “share memory by communicating”则是类似于 CSP 模型的方式，通过通信的方式，⼀个goroutine 可以把数据的“所有权”交给另外⼀个 goroutine（虽然 Go 中没有“所有权”的概念，但是从逻辑上说，你可以把它理解为是所有权的转移）。 五大应用场景\n数据交流：当作并发的 buffer 或者 queue，解决生产者 - 消费者问题。多个 goroutine 可以并发当作生产者（Producer）和消费者（Consumer）。 数据传递：⼀个 goroutine 将数据交给另⼀个 goroutine，相当于把数据的拥有权 (引用)托付出去。 信号通知：⼀个 goroutine 可以将信号 (closing、closed、data ready 等) 传递给另⼀个或者另⼀组 goroutine 。 任务编排：可以让⼀组 goroutine 按照⼀定的顺序并发或者串行的执行，这就是编排的功能。 锁：利用 Channel 也可以实现互斥锁的机制。 channel 基本用法 \u0026lt;- v有个规则，总是尽量和左边的 chan 结合（The \u0026lt;- operator associates with the leftmost chan possible:\nnil 是 chan 的零值，是⼀种特殊的 chan，对值是 nil 的 chan 的发送接收调用者总是会阻塞 关于channel的选择 共享资源的并发访问使用传统并发原语； 复杂的任务编排和消息传递使用 Channel； 消息通知机制使用 Channel，除非只想 signal ⼀个 goroutine，才使用 Cond； 简单等待所有任务的完成用 WaitGroup，也有 Channel 的推崇者用 Channel，都可以； 需要和 Select 语句结合，使用 Channel； 需要和超时配合时，使用 Channel 和 Context。 chan 的编排方式 Or-Done 模式、扇入模式、扇出模式、Stream 和 map-reduce\nOr-Done 模式 Or-Done 模式是信号通知模式中更宽泛的⼀种模式\n我们会使用“信号通知”实现某个任务执行完成后的通知机制，在实现时，我们为这个任务定义 ⼀个类型为 chan struct{}类型的 done 变量，等任务结束后，我们就可以 close 这个变量， 然后，其它 receiver 就会收到这个通知。 这是有⼀个任务的情况，如果有多个任务，只要有任意⼀个任务执行完，我们就想获得这个信 号，这就是 Or-Done 模式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;time\u0026#34; ) // or or-done 模式 递归实现 func or(channels ...\u0026lt;-chan interface{}) \u0026lt;-chan interface{} { // 特殊情况，只有零个,1个或2个 chan switch len(channels) { case 0: return nil case 1: return channels[0] case 2: select { case \u0026lt;-channels[0]: case \u0026lt;-channels[1]: } } orDone := make(chan interface{}) go func() { defer close(orDone) // fmt.Println(\u0026#34;执行\u0026#34;) if len(channels) \u0026gt; 2 { m := len(channels) / 2 select { case \u0026lt;-or(channels[:m]...): case \u0026lt;-or(channels[m:]...): } } }() return orDone } func sig(after time.Duration) \u0026lt;-chan interface{} { c := make(chan interface{}) go func() { defer close(c) time.Sleep(after) }() return c } // orSelect 反射⽅式 实现 func orSelect(channels ...\u0026lt;-chan interface{}) \u0026lt;-chan interface{} { // 特殊情况，只有零个,1个或2个 chan switch len(channels) { case 0: return nil case 1: return channels[0] } orDone := make(chan interface{}) go func() { defer close(orDone) // 利用反射构建SelectCase var cases []reflect.SelectCase for _, c := range channels { cases = append(cases, reflect.SelectCase{ Dir: reflect.SelectRecv, Chan: reflect.ValueOf(c), }) } // 随机选取一个可用 case reflect.Select(cases) }() return orDone } func main() { start := time.Now() \u0026lt;-orSelect( sig(10*time.Second), sig(20*time.Second), sig(30*time.Second), sig(40*time.Second), sig(50*time.Second), sig(01*time.Second), ) fmt.Printf(\u0026#34;done after %v\u0026#34;, time.Since(start)) } 扇入模式 扇入借鉴了数字电路的概念，它定义了单个逻辑们能够接受的数字信号输入最⼤量的术语。⼀ 个逻辑们可以有多个输入，⼀个输出。\n在软件⼯程中，模块的扇入是指有多少个上级模块调用它。 而对于我们这里的 Channel 扇入模式来说，就是指有多个源 Channel 输入、⼀个目的 Channel 输出的情况。 扇入比就是源 Channel 数量比1。\n每个源 Channel 的元素都会发送给目标 Channel，相当于目标 Channel 的 receiver 只需要 监听目标 Channel，就可以接收所有发送给源 Channel 的数据。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;time\u0026#34; ) // 扇入模式 反射实现 func fanInReflect(channels ...\u0026lt;-chan interface{}) \u0026lt;-chan interface{} { out:= make(chan interface{}) go func() { defer close(out) // 构造 SelectCases slice var cases []reflect.SelectCase for _, c := range channels{ cases = append(cases, reflect.SelectCase{ Dir: reflect.SelectRecv, Chan: reflect.ValueOf(c), }) } // 循环，从 cases 中选择一个可用的 for len(cases)\u0026gt;0{ i,v,ok:=reflect.Select(cases) if !ok{ // chan 关闭 cases = append(cases[:i],cases[i+1:]...) continue } out \u0026lt;-v.Interface() } }() return out } func fanInRec(channels ...\u0026lt;-chan interface{}) \u0026lt;-chan interface{}{ switch len(channels){ case 0: c:= make(chan interface{}) close(c) return c case 1: return channels[0] case 2: return mergeTow(channels[0], channels[1]) default: m:=len(channels)/2 return mergeTow( fanInRec(channels[:m]...), fanInRec(channels[m:]...)) } } // 合并两个 chan func mergeTow(a,b \u0026lt;-chan interface{}) \u0026lt;-chan interface{} { c := make(chan interface{}) go func() { defer close(c) for a!= nil || b !=nil{ select{ case v,ok := \u0026lt;-a: if !ok { // a 已关闭，设置为nil a=nil continue } c \u0026lt;- v case v,ok := \u0026lt;-b: if !ok { // b已关闭，设置为nil b=nil continue } c \u0026lt;- v } } }() return c } func sigs(after time.Duration) \u0026lt;-chan interface{} { c := make(chan interface{}) go func() { defer close(c) time.Sleep(after) }() return c } func main() { start := time.Now() \u0026lt;-fanInReflect( sigs(10*time.Second), sigs(02*time.Second), sigs(03*time.Second), sigs(04*time.Second), sigs(05*time.Second), sigs(01*time.Second), ) fmt.Printf(\u0026#34;done after %v\u0026#34;, time.Since(start)) } 扇出模式 扇出模式是和扇入模式相反的。\n扇出模式只有⼀个输入源 Channel，有多个目标 Channel，扇出比就是 1比目标 Channel 数 的值，经常用在设计模式中的观察者模式中（观察者设计模式定义了对象间的⼀种⼀对多的 组合关系。这样⼀来，⼀个对象的状态发⽣变化时，所有依赖于它的对象都会得到通知并⾃动 刷新）。在观察者模式中，数据变动后，多个观察者都会收到这个变更信号。\n","permalink":"https://luenci.com/en/posts/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","summary":"\u003ch1 id=\"预备知识\"\u003e预备知识\u003c/h1\u003e\n\u003ch2 id=\"unsafepointer\"\u003eunsafe.Pointer\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eunsafe.Pointer 是一种特殊意义的指针，它可以包含任意类型的地址，有点类似于 C 语言里的 void* 指针，全能型的。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/137060307\"\u003e对unsafe.Pointer 又爱又恨，你会有效使用它吗？\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eunsafe 是关注 Go 程序操作类型安全的包。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e 可以让你无视 Go 的类型系统，完成任何类型与内建的 uintptr 类型之间的转化。根据文档，unsafe.Pointer 可以实现四种其他类型不能的操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e任何类型的指针都可以转化为一个 unsafe.Pointer\u003c/li\u003e\n\u003cli\u003e一个 unsafe.Pointer 可以转化成任何类型的指针\u003c/li\u003e\n\u003cli\u003e一个 uintptr 可以转化成一个 unsafe.Pointer\u003c/li\u003e\n\u003cli\u003e一个 unsafe.Pointer 可以转化成一个 uintptr\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e两种只能借助 unsafe 包才能完成的操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用 unsafe.Pointer 实现两种类型间转换\u003c/li\u003e\n\u003cli\u003e使用 unsafe.Pointer 处理系统调用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cas比较并交换-compare-and-swap\"\u003eCAS比较并交换\u0026mdash;-Compare And Swap\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://studygolang.com/articles/23289\"\u003eGo 的一个 CAS 操作使用场景\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在并发执行的多个 routine R1,R2\u0026hellip;Rn 的中，同一时间只允许唯一一个 routine 执行某一个操作，并且其他 routine 需要非阻塞的知道自己无权操作并返回的时候，可以使用 CAS 操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e大方向：任务编排用 \u003ccode\u003eChannel\u003c/code\u003e，共享资源保护用传统\u003ccode\u003e并发原语\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"互斥锁实现机制\"\u003e互斥锁实现机制\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e使用互斥锁，限定临界区只能同时由一个线程持有。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e临界区\n\u003cul\u003e\n\u003cli\u003e在并发编程中，如果程序中的一部分会被并发访问或修改，那么，为了避免并发访问导致的意想不到的结果，这部分程序需要被保护起来，这部分被保护起来的程序，就叫做临界区。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/202108281355882.png\" alt=\"image-20210828135504575\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e在 Go 标准库中，它提供了 Mutex 来实现互斥锁这个功能。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e共享资源。并发地读写共享资源，会出现数据竞争（data race）的问题，所以需要 Mutex、RWMutex 这样的并发原语来保护。\u003c/li\u003e\n\u003cli\u003e任务编排。需要 goroutine 按照一定的规律执行，而 goroutine 之间有相互等待或者依赖的顺序关系，我们常常使用 WaitGroup 或者 Channel 来实现。\u003c/li\u003e\n\u003cli\u003e消息传递。信息交流以及不同的 goroutine 之间的线程安全的数据交流，常常使用 Channel 来实现。\u003c/li\u003e\n\u003c/ul\u003e","title":"golang并发编程"},{"content":"深入理解golang中的nil nil is (a) zero\n什么是零值（zero value） 1 2 3 4 5 6 7 8 9 10 11 12 // go中的零值 bool -\u0026gt; false numbers -\u0026gt; 0 string -\u0026gt; \u0026#34;\u0026#34; pointers -\u0026gt; nil\t// point to nothing slices\t-\u0026gt; nil\t// have no backing array maps\t-\u0026gt; nil\t// are not initialized channels\t-\u0026gt; nil\t// are not initialized functions\t-\u0026gt; nil\t// are not initialized interfaces\t-\u0026gt; nil\t// have no value assigned, not even a nil pointer struct中的零值（zero values） 1 2 3 4 5 6 7 type Person struct{ Age int Name string Friend\t[]Person\t} var p Person // Person{0,\u0026#34;\u0026#34;,nil} nil 是什么类型（type） \u0026ldquo;nil is a predeclared identifier in Go that represents zero values for pointers, interfaces, channels, maps, slices and function types.\u0026rdquo;\nnil 是 Go 中预先声明的标识符，表示指针、接口、通道、映射、切片和函数类型的零值。\n一些关于nil的实践 1 2 3 4 //nil == nil var s fmt.Stringer\t// Stringer (nil,nil) fmt.Println(s == nil)\t// true 1 2 3 var p *Person\t// nil of type *Person var s fmt.Stringer = p\t// Stringer(*Person,nil) fmt.Println(s == nil)\t// false nil not nil ? Do not declare concrete error vars (不要声名错误变量) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // bad type NameEmtpyError struct { name string } // NameEmtpyError实现了 Error() 方法的对象 func (e *NameEmtpyError) Error() string { return \u0026#34;name 不能为空\u0026#34; } func do() error { var err *NameEmtpyError return err\t// nil of type *NameEmtpyError } func main(){ err := do()\t// error(*NameEmtpyError,nil) fmt.Println(err == nil) // false } 不要返回具体的错误类型 1 2 3 4 5 6 7 8 9 10 11 12 // bad func do() *NameEmtpyError { return nil\t// nil of type *NameEmtpyError } func wrapDo() error {\t// error(*NameEmtpyError, nil) return do()\t// nil of type *NameEmtpyError } func main(){ err := wrapDo()\t// error(*NameEmtpyError,nil) fmt.Println(err == nil)\t// false } nil is useful 1 2 3 4 5 6 pointers\t// methods can be callend on nil receivers 方法可以在 nil 接收器上调用 slices\t// perfectly valid zero values\t完全有效的零值映射 maps\t// perfect as read-only values\t完美的只读值 channels\t// essential for some concurrency patterns 对于某些并发模式必不可少 functions // needed for completeness\t完整性所需 interfaces // the most userd signal in Go(err != nil) Go中使用次数最多的信号(err != nil) ","permalink":"https://luenci.com/en/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3golang%E4%B8%AD%E7%9A%84nil/","summary":"\u003ch1 id=\"深入理解golang中的nil\"\u003e深入理解golang中的\u003ccode\u003enil\u003c/code\u003e\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003enil is (a) zero\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"什么是零值zero-value\"\u003e什么是零值（zero value）\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// go中的零值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ebool\u003c/span\u003e    \t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumbers \t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e  \t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epointers    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\t\t\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// point to nothing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eslices\t\t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\t\t\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// have no backing array\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emaps\t\t\t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\t\t\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// are not initialized\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echannels\t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\t\t\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// are not initialized\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efunctions\t\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\t\t\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// are not initialized\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einterfaces\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\t\t\t\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// have no value assigned, not even a  nil pointer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"struct中的零值zero-values\"\u003estruct中的零值（zero values）\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Person \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Age \t\t\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Name \t\t\u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Friend\t[]Person\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e p Person \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Person{0,\u0026#34;\u0026#34;,nil}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"nil-是什么类型type\"\u003enil 是什么类型（type）\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;nil is a predeclared identifier in Go that \u003cstrong\u003erepresents zero values for pointers, interfaces, channels\u003c/strong\u003e, maps, slices and function types.\u0026rdquo;\u003c/p\u003e","title":"golang中的nil"},{"content":"云计算定义 一种能够跨网络、按需提供基础架构、服务、平台和应用的交付方式，正在快速取代原本通过硬布线连接进行资源共享的方式。 \u0026ndash; redhat\n云计算解决的问题主要是物理资源上云，通过虚拟化技术来将底层资源池化，达到弹性、可控等目的。然而大多数传统应用并不是面向云环境来构建的，这里面包含了大量开发需求（开发框架、类库、后段服务等），就导致了云端的强大能力没有被完全发挥出来。因此，摒弃传统的应用技术架构，基于云的特点重新构建云原生应用，成为企业上云的下一个阶段。 特点 云计算是指在云中运行工作负载，而云是一种能够抽象、汇集和共享整个网络中的可扩展资源的 IT 环境。云计算和云本身都不属于技术的范畴。\n云计算是指在云中运行工作负载的功能。 而云是一种环境，是运行应用的地方。 技术则是指用于构建和使用云的软件和硬件 云计算为云原生提供了物理基础，做个不太精确的比喻:\u0026ldquo;云计算是电脑硬件，云原生是应用\u0026rdquo;.\n云原生 概念 云原生（Cloud Native）是一种软件开发和部署的方法论，旨在充分利用云计算的优势，提供高度可扩展、可伸缩、可观测、可维护、自动化、高稳定性的应用程序。\n云原生计算基金会（CNCF）：云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n容器：Kubernetes 的底层计算引擎，提供容器化的计算资源。\n微服务：一种软件架构思想，用来构建云原生应用。服务网格：建立在 Kubernetes 之上，作为服务间通信的底座，提供强大的服务治理功能。\n声明式 API ：一种新的软件开发模式，通过描述期望的应用状态，来使系统更加健壮。\n声明式 API 是指我们通过工具描述期望的应用状态，并由工具保障应用一直处在我们期望的状态。Kubernetes 的 API 设计，就是一种典型的声明式 API。例如，我们在创建 Deployment 时，在 Kubernetes YAML 文件中声明应用的副本数为2，即设置replicas: 2，Deployment Controller 就会确保应用的副本数一直为2。也就是说，如果当前副本数大于2，Deployment Controller 会删除多余的副本；如果当前副本数小于2，会创建新的副本。\n声明式设计是一种设计理念，同时也是一种工作模式，它使得你的系统更加健壮。分布式系统环境可能会出现各种不确定的故障，面对这些组件故障，如果使用声明式 API ，你只需要查看对应组件的 API 服务器状态，再确定需要执行的操作即可。\n不可变基础设施：一种新的软件部署模式，应用实例一旦被创建，便只能重建不能更新，是现代运维的基础。\n不可变基础设施（Immutable Infrastructure）的构想，是由 Chad Fowler 于 2013 年提出的。具体来说就是：一个应用程序的实例，一旦被创建，就会进入只读的状态，后面如果想变更这个应用程序的实例，只能重新创建一个新的实例。通过这种模式，可以确保应用程序实例的一致性，这使得落地 DevOps 更加容易，并可以有效减少运维人员管理配置的负担。 云原生是一种构建和运行应用程序的方法\n1 2 3 Cloud表示应用程序位于云中，而不是传统的数据中心； Native表示应用程序从设计之初即考虑到云的环境，原生为云而设计，在云上以最佳姿势运行， 充分利用和发挥云平台的弹性+分布式优势。 DevOps+持续交付+微服务+容器\n符合云原生架构的应用程序应该是：采用开源堆栈（K8S+Docker）进行容器化，基于微服务架构提高灵活性和可维护性，借助敏捷方法、DevOps支持持续迭代和运维自动化，利用云平台设施实现弹性伸缩、动态调度、优化资源利用率。 公有云，私有云和混和云 根据服务模式对云计算的分类包括：基础设施作为服务（iaas），平台作为服务（paas），软件作为服务（saas）。 根据云计算的资源归属对象，它可以分为公共云和私有云两大类。\n公共云（公共云）是一种向公众提供计算资源的服务。一般通过互联网使用，成本低，公共云的核心属性是共享资源服务。公共云的优点是低成本和良好的可扩展性。缺点是用户对云资源、数据安全、网络性能和匹配等问题缺乏控制。\n私有云是为拥有基础设施并控制如何在其上部署应用程序的单个客户而构建的。用户可以在企业数据中心防火墙或安全托管站点中部署私有云。私有云的核心属性是专有资源。\n混合云不是一个独立的概念。它是一种混合云服务模式，通过标准化手段或专有技术将公共和私人云结合起来。简单地说，混合云是一种云服务模式，既有公共云，也有私人云。\n云元生素的四要素 微服务：几乎每个云原生的定义都包含微服务，跟微服务相对的是单体应用，微服务有理论基础，那就是康威定律，指导服务怎么切分，很玄乎，凡是能称为理论定律的都简单明白不了，不然就忒没b格，大概意思是组织架构决定产品形态，不知道跟马克思的生产关系影响生产力有无关系。 微服务架构的好处就是按 function 切了之后，服务解耦，内聚更强，变更更易；另一个划分服务的技巧据说是依据DDD来搞。\n容器化：Docker是应用最为广泛的容器引擎，在思科谷歌等公司的基础设施中大量使用，是基于LXC技术搞的，容器化为微服务提供实施保障，起到应用隔离作用，K8S是容器编排系统，用于容器管理，容器间的负载均衡，谷歌搞的，Docker和K8S都采用Go编写，都是好东西。\nDevOps：这是个组合词，Dev+Ops，就是开发和运维合体，不像开发和产品，经常刀刃相见，实际上DevOps应该还包括测试，DevOps是一个敏捷思维，是一个沟通文化，也是组织形式，为云原生提供持续交付能力。\n持续交付：持续交付是不误时开发，不停机更新，小步快跑，反传统瀑布式开发模型，这要求开发版本和稳定版本并存，其实需要很多流程和工具支撑。\n云原生的设计理念 云原生系统的设计理念如下:\n面向分布式设计（Distribution）：容器、微服务、API 驱动的开发； 面向配置设计（Configuration）：一个镜像，多个环境配置； 面向韧性设计（Resistancy）：故障容忍和自愈； 面向弹性设计（Elasticity）：弹性扩展和对环境变化（负载）做出响应； 面向交付设计（Delivery）：自动拉起，缩短交付时间； 面向性能设计（Performance）：响应式，并发和资源高效利用； 面向自动化设计（Automation）：自动化的 DevOps； 面向诊断性设计（Diagnosability）：集群级别的日志、metric 和追踪； 面向安全性设计（Security）：安全端点、API Gateway、端到端加密； 以上的设计理念很多都是继承自分布式应用的设计理念。虽然有如此多的理念但是我们仍然无法辨认什么样的设施才是云原生基础设施，不过可以先用排除法，我将解释什么不是云原生基础设施。\n云原生应用 整体来看，云原生应用是指生而为云的应用，应用程序从设计之初就考虑到了云的环境，可以在云上以最佳姿势运行，充分利用和发挥云平台提供的各种能力。具体来看，云原生应用具有以下三大特点：\n从应用生命周期管理维度来看，使用 DevOps 和 CI/CD 的方式，进行开发和交付。 从应用维度来看，以微服务原则进行划分设计。 从系统资源维度来看，采用 Docker + Kubernetes 的方式来部署。 对于云原生架构的部署，通常我们需要关注以下两点：\n容灾能力：容灾能力是指应用程序遇到故障时的恢复能力。在互联网时代，对应用的容灾能力有比较高的要求。理想情况是系统在出现故障时，能够无缝切换到另外一个可用的实例上，继续提供服务，并做到用户无感知。但在实际开发中，无缝切换在技术上比较难以实现，所以也可以退而求其次，允许系统在一定时间内不可用。通常这个时间需要控制在秒级，例如 5s。容灾能力可以通过负载均衡、健康检查来实现。 扩缩容能力：扩缩容能力指的是系统能够根据需要扩缩容，可以手动扩缩容，也可以自动扩缩容。互联网时代对扩缩容能力的要求也比较高，需要实现自动扩缩容。我们可以基于一些自定义指标，例如 CPU 使用率、内存使用率等来自动扩缩容。扩容也意味着能够承载更多的请求，提高系统的吞吐量；缩容，意味着能够节省成本。扩缩容能力的实现，需要借助于负载均衡和监控告警能力。 服务网格（Service mesh） 服务网格是用于处理服务间通信的专用基础设施层。它负责通过包含现代云原生应用程序的复杂服务拓扑来可靠地传递请求。实际上，服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码一起部署，而不需要感知应用程序本身。 —— Willian Morgan Buoyant CEO\n服务网格有如下几个特点：\n应用程序间通讯的中间层 轻量级网络代理 应用程序无感知 解耦应用程序的重试/超时、监控、追踪和服务发现 目前两款流行的服务网格开源软件 Linkerd 和 Istio 都可以直接在 kubernetes`中集成，其中 Linkerd 已经成为 CNCF 成员，Istio 在 2018年7月31日宣布 1.0。\n理解服务网格 如果用一句话来解释什么是服务网格，可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。\n对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用服务网格也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给服务网格就可以了。\nPhil Calçado 在他的这篇博客 Pattern: Service Mesh 中详细解释了服务网格的来龙去脉：\n从最原始的主机之间直接使用网线相连 网络层的出现 集成到应用程序内部的控制流 分解到应用程序外部的控制流 应用程序的中集成服务发现和断路器 出现了专门用于服务发现和断路器的软件包/库，如 Twitter 的 Finagle 和 Facebook 的 Proxygen，这时候还是集成在应用程序内部 出现了专门用于服务发现和断路器的开源软件，如 Netflix OSS、Airbnb 的 synapse 和 nerve 最后作为微服务的中间层服务网格出现 服务网格的架构如下图所示：\n下面以 Istio 为例讲解服务网格如何在 Kubernetes 中工作。\nIstio 将服务请求路由到目的地址，根据中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。 当 Istio 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。 Istio 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。 Istio 将请求发送给该实例，同时记录响应类型和延迟数据。 如果该实例挂了、不响应了或者进程不工作了，Istio 将把请求发送到其他实例上重试。 如果该实例持续返回 error，Istio 会将该实例从负载均衡池中移除，稍后再周期性得重试。 如果请求的截止时间已过，Istio 主动失败该请求，而不是再次尝试添加负载。 Istio 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。 ","permalink":"https://luenci.com/en/posts/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%92%8C%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/","summary":"\u003ch1 id=\"云计算定义\"\u003e云计算定义\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一种能够跨网络、按需提供基础架构、服务、平台和应用的交付方式，正在快速取代原本通过硬布线连接进行资源共享的方式。          \u0026ndash;  redhat\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e云计算解决的问题主要是\u003cstrong\u003e物理资源上云，通过虚拟化技术来将底层资源池化，达到弹性、可控等目的\u003c/strong\u003e。然而大多数传统应用并不是面向云环境来构建的，这里面包含了大量开发需求（开发框架、类库、后段服务等），就导致了云端的强大能力没有被完全发挥出来。因此，摒弃传统的应用技术架构，基于云的特点重新构建云原生应用，成为企业上云的下一个阶段。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"特点\"\u003e特点\u003c/h2\u003e\n\u003cp\u003e云计算是指在云中\u003cstrong\u003e运行工作负载\u003c/strong\u003e，而云是一种能够抽象、汇集和共享整个网络中的可扩展资源的 IT 环境。云计算和云本身都不属于技术的范畴。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e云计算是指在云中运行工作负载的功能。\u003c/li\u003e\n\u003cli\u003e而云是一种环境，是运行应用的地方。\u003c/li\u003e\n\u003cli\u003e技术则是指用于构建和使用云的软件和硬件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e云计算为云原生提供了物理基础，做个不太精确的比喻:\u0026ldquo;云计算是电脑硬件，云原生是应用\u0026rdquo;.\u003c/p\u003e","title":"云计算和云原生概念浅析"},{"content":"Golang指针 原文来自:https://www.cnblogs.com/-wenli/p/12682477.html\n*类型:普通指针类型，用于传递对象地址，不能进行指针运算。 unsafe.Pointer:通用指针类型，用于转换不同类型的指针，不能进行指针运算，不能读取内存存储的值（必须转换到某一类型的普通指针）。 uintptr:用于指针运算，GC 不把 uintptr 当指针，uintptr 无法持有对象。uintptr 类型的目标会被回收。 unsafe.Pointer 是桥梁，可以让任意类型的指针实现相互转换，也可以将任意类型的指针转换为 uintptr 进行指针运算。 unsafe.Pointer 不能参与指针运算，比如你要在某个指针地址上加上一个偏移量，Pointer是不能做这个运算的，那么谁可以呢?\n就是uintptr类型了，只要将Pointer类型转换成uintptr类型，做完加减法后，转换成Pointer，通过*操作，取值，修改值，随意。 小结 unsafe.Pointer 可以让你的变量在不同的普通指针类型转来转去，也就是表示为任意可寻址的指针类型。而 uintptr 常用于与 unsafe.Pointer 打配合，用于做指针运算。\nunsafe.Pointer unsafe 是关注 Go 程序操作类型安全的包。\nunsafe.Pointer 可以让你无视 Go 的类型系统，完成任何类型与内建的 uintptr 类型之间的转化。\nunsafe.Pointer称为通用指针，官方文档对该类型有四个重要描述：\n（1）任何类型的指针都可以被转化为Pointer\n（2）Pointer可以被转化为任何类型的指针\n（3）uintptr可以被转化为Pointer\n（4）Pointer可以被转化为uintptr\nunsafe.Pointer是特别定义的一种指针类型（译注：类似C语言中的void类型的指针），在golang中是用于各种指针相互转换的桥梁，它可以包含任意类型变量的地址。 当然，我们不可以直接通过*p来获取unsafe.Pointer指针指向的真实变量的值，因为我们并不知道变量的具体类型。 和普通指针一样，unsafe.Pointer指针也是可以比较的，并且支持和nil常量比较判断是否为空指针。\nuintptr uintptr是一个整数类型。\n1 2 3 // uintptr is an integer type that is large enough to hold the bit pattern of // any pointer. type uintptr uintptr 即使uintptr变量仍然有效，由uintptr变量表示的地址处的数据也可能被GC回收，这个需要注意！\nunsafe包 unsafe包只有两个类型，三个函数，但是功能很强大。\n1 2 3 4 5 type ArbitraryType int type Pointer *ArbitraryType func Sizeof(x ArbitraryType) uintptr func Offsetof(x ArbitraryType) uintptr func Alignof(x ArbitraryType) uintptr ArbitraryType是int的一个别名，在Go中对ArbitraryType赋予特殊的意义。代表一个任意Go表达式类型。 Pointer是int指针类型的一个别名，在Go中可以把Pointer类型，理解成任何指针的父类型。 三个函数的参数均是ArbitraryType类型，就是接受任何类型的变量。\nunsafe.Sizeof 接受任意类型的值(表达式)，返回其占用的字节数,这和c语言里面不同，c语言里面sizeof函数的参数是类型，而这里是一个表达式，比如一个变量。 unsafe.Offsetof：返回结构体中元素所在内存的偏移量。 Alignof 返回变量对齐字节数量Offsetof返回变量指定属性的偏移量，这个函数虽然接收的是任何类型的变量，但是有一个前提，就是变量要是一个struct类型，且还不能直接将这个struct类型的变量当作参数，只能将这个struct类型变量的属性当作参数。 巧妙用法 在$GOPATH/src下建立poit包，并在poit下建立子包p，目录结构如下：\n1 2 3 4 5 6 7 8 9 $GOPATH/src ----poit --------p ------------v.go --------main.go 以下是v.go的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package p import ( \u0026#34;fmt\u0026#34; ) type V struct { i int32 j int64 } func (this V) PutI() { fmt.Printf(\u0026#34;i=%d\\n\u0026#34;, this.i) } func (this V) PutJ() { fmt.Printf(\u0026#34;j=%d\\n\u0026#34;, this.j) } 意图很明显，我是想通过unsafe包来实现对V的成员i和j赋值，然后通过PutI()和PutJ()来打印观察输出结果。\n以下是main.go源代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( \u0026#34;poit/p\u0026#34; \u0026#34;unsafe\u0026#34; ) func main() { var v *p.V = new(p.V) var i *int32 = (*int32)(unsafe.Pointer(v)) *i = int32(98) var j *int64 = (*int64)(unsafe.Pointer(uintptr(unsafe.Pointer(v)) + uintptr(unsafe.Sizeof(int32(0))))) *j = int64(763) v.PutI() v.PutJ() }　当然会有些限制，比如需要知道结构体V的成员布局，要修改的成员大小以及成员的偏移量。我们的核心思想就是：结构体的成员在内存中的分配是一段连续的内存，结构体中第一个成员的地址就是这个结构体的地址，您也可以认为是相对于这个结构体偏移了0。相同的，这个结构体中的任一成员都可以相对于这个结构体的偏移来计算出它在内存中的绝对地址。\n具体来讲解下main方法的实现：\n1 var v *p.V = new(p.V) new是golang的内置方法，用来分配一段内存(会按类型的零值来清零)，并返回一个指针。所以v就是类型为p.V的一个指针。\n1 var i *int32 = (*int32)(unsafe.Pointer(v)) 将指针v转成通用指针，再转成int32指针。这里就看到了unsafe.Pointer的作用了，您不能直接将v转成int32类型的指针，那样将会panic。刚才说了v的地址其实就是它的第一个成员的地址，所以这个i就很显然指向了v的成员i，通过给i赋值就相当于给v.i赋值了，但是别忘了i只是个指针，要赋值得解引用。\n1 *i = int32(98)　现在已经成功的改变了v的私有成员i的值，好开心^_^\n但是对于v.j来说，怎么来得到它在内存中的地址呢？其实我们可以获取它相对于v的偏移量(unsafe.Sizeof可以为我们做这个事)，但我上面的代码并没有这样去实现。各位别急，一步步来。\n1 var j *int64 = (*int64)(unsafe.Pointer(uintptr(unsafe.Pointer(v)) + uintptr(unsafe.Sizeof(int32(0))))) 其实我们已经知道v是有两个成员的，包括i和j，并且在定义中，i位于j的前面，而i是int32类型，也就是说i占4个字节。所以j是相对于v偏移了4个字节。您可以用uintptr(4)或uintptr(unsafe.Sizeof(int32(0)))来做这个事。unsafe.Sizeof方法用来得到一个值应该占用多少个字节空间。注意这里跟C的用法不一样，C是直接传入类型，而golang是传入值。之所以转成uintptr类型是因为需要做指针运算。v的地址加上j相对于v的偏移地址，也就得到了v.j在内存中的绝对地址，别忘了j的类型是int64，所以现在的j就是一个指向v.j的指针，接下来给它赋值：\n1 *j = int64(763) 好吧，现在貌视一切就绪了，来打印下：\n1 2 v.PutI() v.PutJ() 如果您看到了正确的输出，那就成功了！！！\n内存对齐 但是，别忘了上面的代码其实是有一些问题的，您发现了吗？\n在p目录下新建w.go文件，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package p import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) type W struct { b byte i int32 j int64 } func init() { var w *W = new(W) fmt.Printf(\u0026#34;size=%d\\n\u0026#34;, unsafe.Sizeof(*w)) } 需要修改main.go的代码吗？不需要，我们只是来测试一下。w.go里定义了一个特殊方法init，它会在导入p包时自动执行，别忘了我们有在main.go里导入p包。每个包都可定义多个init方法，它们会在包被导入时自动执行(在执行main方法前被执行，通常用于初始化工作)，但是，最好在一个包中只定义一个init方法，否则您或许会很难预期它的行为)。我们来看下它的输出：\n1 size=16 等等，好像跟我们想像的不一致。来手动计算一下：b是byte类型，占1个字节；i是int32类型，占4个字节；j是int64类型，占8个字节，1+4+8=13。这是怎么回事呢？这是因为发生了对齐。在struct中，它的对齐值是它的成员中的最大对齐值。每个成员类型都有它的对齐值，可以用unsafe.Alignof方法来计算，比如unsafe.Alignof(w.b)就可以得到b在w中的对齐值。同理，我们可以计算出w.b的对齐值是1，w.i的对齐值是4，w.j的对齐值也是4。如果您认为w.j的对齐值是8那就错了，所以我们前面的代码能正确执行(试想一下，如果w.j的对齐值是8，那前面的赋值代码就有问题了。也就是说前面的赋值中，如果v.j的对齐值是8，那么v.i跟v.j之间应该有4个字节的填充。所以得到正确的对齐值是很重要的)。对齐值最小是1，这是因为存储单元是以字节为单位。所以b就在w的首地址，而i的对齐值是4，它的存储地址必须是4的倍数，因此，在b和i的中间有3个填充，同理j也需要对齐，但因为i和j之间不需要填充，所以w的Sizeof值应该是13+3=16。如果要通过unsafe来对w的三个私有成员赋值，b的赋值同前，而i的赋值则需要跳过3个字节，也就是计算偏移量的时候多跳过3个字节，同理j的偏移可以通过简单的数学运算就能得到。 比如也可以通过unsafe来灵活取值：\n1 2 3 4 5 6 7 8 9 10 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;unsafe\u0026#34; ) func main() { var b []byte = []byte{\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;} var c *byte = \u0026amp;b[0] fmt.Println(*(*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(c)) + uintptr(1)))) } 错误案例 1 2 3 4 // NOTE: subtly incorrect! tmp := uintptr(unsafe.Pointer(\u0026amp;x)) + unsafe.Offsetof(x.b) pb := (*int16)(unsafe.Pointer(tmp)) *pb = 42 产生错误的原因很微妙。有时候垃圾回收器会移动一些变量以降低内存碎片等问题。这类垃圾回收器被称为移动GC。\n​ 当一个变量被移动，所有的保存改变量旧地址的指针必须同时被更新为变量移动后的新地址。\n​ 从垃圾收集器的视角来看，一个unsafe.Pointer是一个指向变量的指针，因此当变量被移动是对应的指针也必须被更新；但是uintptr类型的临时变量只是一个普通的数字，所以其值不应该被改变。\n上面错误的代码因为引入一个非指针的临时变量tmp，导致垃圾收集器无法正确识别这个是一个指向变量x的指针。当第二个语句执行时，变量x可能已经被转移，这时候临时变量tmp也就不再是现在的\u0026amp;x.b地址。**第三个向之前无效地址空间的赋值语句将彻底摧毁整个程序！\n","permalink":"https://luenci.com/en/posts/go-%E6%99%AE%E9%80%9A%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8Bunsafe.pointeruintptr%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/","summary":"\u003ch1 id=\"golang指针\"\u003eGolang指针\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文来自:https://www.cnblogs.com/-wenli/p/12682477.html\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e*\u003c/code\u003e类型:普通指针类型，用于传递对象地址，不能进行指针运算。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e:通用指针类型，用于转换不同类型的指针，不能进行指针运算，不能读取内存存储的值（必须转换到某一类型的普通指针）。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euintptr\u003c/code\u003e:用于指针运算，GC 不把 uintptr 当指针，uintptr 无法持有对象。uintptr 类型的目标会被回收。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e 是桥梁，可以让任意类型的指针实现相互转换，也可以将任意类型的指针转换为 uintptr 进行指针运算。\u003c/strong\u003e\n\u003cstrong\u003eunsafe.Pointer 不能参与指针运算\u003c/strong\u003e，比如你要在某个指针地址上加上一个偏移量，Pointer是不能做这个运算的，那么谁可以呢?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e就是uintptr类型了，只要将Pointer类型转换成uintptr类型，做完加减法后，转换成Pointer，通过*操作，取值，修改值，随意。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e 可以让你的变量在不同的普通指针类型转来转去，也就是表示为任意可寻址的指针类型。而 \u003ccode\u003euintptr\u003c/code\u003e 常用于与 \u003ccode\u003eunsafe.Pointer\u003c/code\u003e 打配合，用于做指针运算。\u003c/p\u003e\n\u003ch2 id=\"unsafepointer\"\u003eunsafe.Pointer\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eunsafe 是关注 Go 程序操作类型安全的包。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e 可以让你无视 Go 的类型系统，完成任何类型与内建的 uintptr 类型之间的转化。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e称为通用指针，官方文档对该类型有四个重要描述：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e（1）任何类型的指针都可以被转化为Pointer\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e（2）Pointer可以被转化为任何类型的指针\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e（3）uintptr可以被转化为Pointer\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e（4）Pointer可以被转化为uintptr\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eunsafe.Pointer\u003c/code\u003e是特别定义的一种指针类型（译注：类似C语言中的void类型的指针），\u003cstrong\u003e在golang中是用于各种指针相互转换的桥梁\u003c/strong\u003e，它可以包含任意类型变量的地址。\n当然，我们不可以直接通过*p来获取unsafe.Pointer指针指向的真实变量的值，因为我们并不知道变量的具体类型。\n和普通指针一样，unsafe.Pointer指针也是可以比较的，并且支持和nil常量比较判断是否为空指针。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"uintptr\"\u003euintptr\u003c/h2\u003e\n\u003cp\u003euintptr是一个整数类型。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// uintptr is an integer type that is large enough to hold the bit pattern of\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// any pointer.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003euintptr\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e即使uintptr变量仍然有效，由uintptr变量表示的地址处的数据也可能被GC回收，这个需要注意！\u003c/p\u003e\n\u003ch2 id=\"unsafe包\"\u003eunsafe包\u003c/h2\u003e\n\u003cp\u003eunsafe包只有两个类型，三个函数，但是功能很强大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e ArbitraryType \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Pointer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eArbitraryType\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eSizeof\u003c/span\u003e(x ArbitraryType) \u003cspan style=\"color:#ff7b72\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eOffsetof\u003c/span\u003e(x ArbitraryType) \u003cspan style=\"color:#ff7b72\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eAlignof\u003c/span\u003e(x ArbitraryType) \u003cspan style=\"color:#ff7b72\"\u003euintptr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eArbitraryType是int的一个别名，在Go中对ArbitraryType赋予特殊的意义。代表一个任意Go表达式类型。\u003c/li\u003e\n\u003cli\u003ePointer是int指针类型的一个别名，在Go中可以把Pointer类型，理解成任何指针的父类型。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e三个函数的参数均是ArbitraryType类型，就是接受任何类型的变量。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eunsafe.Sizeof 接受任意类型的值(表达式)，返回其占用的字节数,这和c语言里面不同，c语言里面sizeof函数的参数是类型，而这里是一个表达式，比如一个变量。\u003c/li\u003e\n\u003cli\u003eunsafe.Offsetof：返回结构体中元素所在内存的偏移量。\u003c/li\u003e\n\u003cli\u003eAlignof 返回变量对齐字节数量Offsetof返回变量指定属性的偏移量，这个函数虽然接收的是任何类型的变量，但是有一个前提，就是变量要是一个struct类型，且还不能直接将这个struct类型的变量当作参数，只能将这个struct类型变量的属性当作参数。\u003c/li\u003e\n\u003c/ul\u003e","title":"Golang指针详解"},{"content":"官方关于golang的继承和重载的FAQ 原文部分来自：https://segmentfault.com/a/1190000022429780\n关于类型继承 面向对象的编程，至少在最著名的语言中，涉及对类型之间关系的过多讨论，这些关系通常可以自动派生。Go 采取了不同的方法。\n与其要求程序员提前声明两种类型是相关的，在 Go 中，类型会自动满足任何指定其方法子集的接口。除了减少簿记之外，这种方法还有真正的优势。类型可以同时满足多个接口，没有传统多重继承的复杂性。接口可以是非常轻量级的——具有一个甚至零个方法的接口可以表达一个有用的概念。如果出现新想法或用于测试，可以事后添加接口——无需注释原始类型。因为类型和接口之间没有明确的关系，所以没有要管理或讨论的类型层次结构。\n可以使用这些想法来构建类似于类型安全的 Unix 管道的东西。例如，了解如何fmt.Fprintf 为任何输出启用格式化打印，而不仅仅是文件，或者bufio包如何与 文件 I/O 完全分离，或者image包如何生成压缩图像文件。所有这些想法都源于io.Writer表示单个方法 ( Write)的单个接口( )。而这只是皮毛。Go 的接口对程序的结构有着深远的影响。\n这需要一些时间来适应，但这种隐式的类型依赖是 Go 最高效的事情之一。\n​\t\u0026ndash;faq: https://golang.org/doc/faq#inheritance\n关于重载的定义 如果不需要进行类型匹配，则方法分派会得到简化。使用其他语言的经验告诉我们，拥有多种名称相同但签名不同的方法有时很有用，但在实践中也可能会令人困惑和脆弱。仅按名称匹配并要求类型的一致性是 Go 类型系统中一个主要的简化决定。\n关于运算符重载，它似乎更方便而不是绝对要求。同样，没有它，事情会更简单。\n​\t\u0026ndash; faq:https://golang.org/doc/faq#overloading\n从一个案例引入 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 type ShapeInterface interface { Area() float64 GetName() string PrintArea() } type Shape struct { name string } func (s *Shape) GetName() string { return s.name } func (s *Shape) Area() float64 { return 0.0 } func (s *Shape) PrintArea() { fmt.Printf(\u0026#34;%s : Area %v\\r\\n\u0026#34;, s.GetName(), s.Area()) } // Rectangle 矩形求面积 type Rectangle struct { Shape w, h float64 } func (r *Rectangle) Area() float64 { return r.w * r.h } // Circle 圆形 : 重新定义 Area 和PrintArea 方法 type Circle struct { Shape r float64 } func (c *Circle) Area() float64 { return c.r * c.r * math.Pi } func (c *Circle) PrintArea() { fmt.Printf(\u0026#34;%s : Area %v\\r\\n\u0026#34;, c.GetName(), c.Area()) } func main() { s := Shape{name: \u0026#34;Shape\u0026#34;} c := Circle{Shape: Shape{name: \u0026#34;Circle\u0026#34;}, r: 10} r := Rectangle{Shape: Shape{name: \u0026#34;Rectangle\u0026#34;}, w: 5, h: 4} listshape := []ShapeInterface{\u0026amp;s, \u0026amp;c, \u0026amp;r} for _, si := range listshape { si.PrintArea() //!! 猜猜哪个Area()方法会被调用 !! } } out: Shape : Area 0 Circle : Area 314.1592653589793 Rectangle : Area 0 // 为啥这里没有调用 5 * 4 原因分析：Rectangle通过组合Shape获得的PrintArea()方法并没有去调用Rectangle实现的Area()方法，而是去调用了Shape的Area()方法。Circle是因为自己重写了PrintArea()所以在方法里调用到了自身的Area()。\n解决方案 1.将要使用的值抽取成一个方法，在初始化中进行赋值。 定义了一个类似InitShape的方法来完成初始化流程，这里我把ShapeInterface接口和Shape类型做一些调整会更好理解一些。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 type ShapeInterface interface { Area() float64 GetName() string SetArea(float64) } type Shape struct { name string area float64 } ... func (s *Shape) SetArea(area float64) { s.area = area } func (s *Shape) PrintArea() { fmt.Printf(\u0026#34;%s : Area %v\\r\\n\u0026#34;, s.name, s.area) } ... func InitShape(s ShapeInterface) error { area, err := s.Area() if err != nil { return err } s.SetArea(area) ... } 对于Rectangle和Circle这样的组合Shape的类型，只需要按照自己的计算面积的公式实现Area()，SetArea()会把Area()计算出的面积存储在area字段供后面的程序使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 type Rectangle struct { Shape w, h float64 } func (r *Rectangle) Area() float64 { return r.w * r.h } r := \u0026amp;Rectangle { Shape: Shape{name: \u0026#34;Rectangle\u0026#34;}, w: 5, 4 } InitShape(r) r.PrintArea() 2.按照接口的定义，实现所有相关联的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 // Rectangle 矩形求面积 : 重新定义了 Area 方法 type Rectangle struct { Shape w, h float64 } func (r *Rectangle) Area() float64 { return r.w * r.h } // 实现 PrintArea 方法， func (r *Rectangle) PrintArea() { fmt.Printf(\u0026#34;%s : Area %v\\r\\n\u0026#34;, r.GetName(), r.Area()) } 3.用组合的方式去减少代码量（推荐） 面向接口编程\n接口里面的方法之间不应该存在相互依赖，应该用单一的方法组合去完成你的功能 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 type ShapeInterface interface { GetName() string GetArea() float64 } type Shape struct { name string } func (s *Shape) GetName() string { return s.name } func (s *Shape) GetArea() float64 { return 0.0 } // Rectangle 矩形求面积 : 重新定义了 Area 方法 type Rectangle struct { Shape w, h float64 } func (r *Rectangle) GetArea() float64 { return r.w * r.h } // Circle 圆形 : 重新定义 Area 和PrintArea 方法 type Circle struct { Shape r float64 } func (c *Circle) GetArea() float64 { return c.r * c.r * math.Pi } // PrintAreaInterface 抽象出一个输出面积的接口 type PrintAreaInterface interface { PrintArea(ShapeInterface) } type PrintAreas struct { } func (p *PrintAreas) PrintArea(shape ShapeInterface) { fmt.Printf(\u0026#34;%s : Area %v\\r\\n\u0026#34;, shape.GetName(), shape.GetArea()) } func NewPrintAreas() PrintAreaInterface { return \u0026amp;PrintAreas{} } func main() { s := Shape{name: \u0026#34;Shape\u0026#34;} c := Circle{Shape: Shape{name: \u0026#34;Circle\u0026#34;}, r: 10} r := Rectangle{Shape: Shape{name: \u0026#34;Rectangle\u0026#34;}, w: 5, h: 4} listshape := []ShapeInterface{\u0026amp;s, \u0026amp;c, \u0026amp;r} areas := NewPrintAreas() for _, si := range listshape { areas.PrintArea(si) } } 方案一 优点\n重复代码量少，可复用重复逻辑方法 缺点\n接口抽象不太优雅 容易留坑 方案二 优点\n接口职责单一，抽象优雅 不容易留坑，代码可读性好 缺点\n重复代码量多 方案三（推荐） 优点\n符合golang的面向接口编程哲学 缺点\n暂无\u0026#x1f436; 小结 由于本人之前是Python转到golang，对于面向对象的理解和golang的设计不太相符，应该是golang不是纯面向对象的语言，文章开头的几个FAQ也阐述了golang对面向对象支持的问题，所以在代码设计和抽象的时候不能完全的按照面向对象的方式去思考，golang应该是组合，而不是继承。和朋友探讨下来最终实现了方案三（推荐），面向接口编程的哲学。\n","permalink":"https://luenci.com/en/posts/golang%E7%9A%84%E7%BB%84%E5%90%88%E5%92%8C%E5%B5%8C%E5%A5%97/","summary":"\u003ch2 id=\"官方关于golang的继承和重载的faq\"\u003e官方关于golang的继承和重载的FAQ\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文部分来自：https://segmentfault.com/a/1190000022429780\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e关于类型继承\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e面向对象的编程，至少在最著名的语言中，涉及对类型之间关系的过多讨论，这些关系通常可以自动派生。Go 采取了不同的方法。\u003c/p\u003e\n\u003cp\u003e与其要求程序员提前声明两种类型是相关的，在 Go 中，类型会自动满足任何指定其方法子集的接口。除了减少簿记之外，这种方法还有真正的优势。类型可以同时满足多个接口，没有传统多重继承的复杂性。接口可以是非常轻量级的——具有一个甚至零个方法的接口可以表达一个有用的概念。如果出现新想法或用于测试，可以事后添加接口——无需注释原始类型。因为类型和接口之间没有明确的关系，所以没有要管理或讨论的类型层次结构。\u003c/p\u003e\n\u003cp\u003e可以使用这些想法来构建类似于类型安全的 Unix 管道的东西。例如，了解如何\u003ccode\u003efmt.Fprintf\u003c/code\u003e 为任何输出启用格式化打印，而不仅仅是文件，或者\u003ccode\u003ebufio\u003c/code\u003e包如何与 文件 I/O 完全分离，或者\u003ccode\u003eimage\u003c/code\u003e包如何生成压缩图像文件。所有这些想法都源于\u003ccode\u003eio.Writer\u003c/code\u003e表示单个方法 ( \u003ccode\u003eWrite\u003c/code\u003e)的单个接口( )。而这只是皮毛。Go 的接口对程序的结构有着深远的影响。\u003c/p\u003e\n\u003cp\u003e这需要一些时间来适应，但这种隐式的类型依赖是 Go 最高效的事情之一。\u003c/p\u003e\n\u003cp\u003e​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \u0026ndash;faq: \u003ca href=\"https://golang.org/doc/faq#inheritance\"\u003ehttps://golang.org/doc/faq#inheritance\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e关于重载的定义\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果不需要进行类型匹配，则方法分派会得到简化。使用其他语言的经验告诉我们，拥有多种名称相同但签名不同的方法有时很有用，但在实践中也可能会令人困惑和脆弱。仅按名称匹配并要求类型的一致性是 Go 类型系统中一个主要的简化决定。\u003c/p\u003e\n\u003cp\u003e关于运算符重载，它似乎更方便而不是绝对要求。同样，没有它，事情会更简单。\u003c/p\u003e\n\u003cp\u003e​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0026ndash; faq:https://golang.org/doc/faq#overloading\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"从一个案例引入\"\u003e从一个案例引入\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e65\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e ShapeInterface \u003cspan style=\"color:#ff7b72\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eArea\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003efloat64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eGetName\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintArea\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Shape \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tname \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (s \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eShape) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eGetName\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e s.name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (s \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eShape) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eArea\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003efloat64\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (s \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eShape) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintArea\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tfmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%s : Area %v\\r\\n\u0026#34;\u003c/span\u003e, s.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eGetName\u003c/span\u003e(), s.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eArea\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Rectangle 矩形求面积\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Rectangle \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tShape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tw, h \u003cspan style=\"color:#ff7b72\"\u003efloat64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eRectangle) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eArea\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003efloat64\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e r.w \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e r.h\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Circle 圆形  : 重新定义 Area 和PrintArea 方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Circle \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tShape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr \u003cspan style=\"color:#ff7b72\"\u003efloat64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (c \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eCircle) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eArea\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003efloat64\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e c.r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e c.r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e math.Pi\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (c \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eCircle) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintArea\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tfmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%s : Area %v\\r\\n\u0026#34;\u003c/span\u003e, c.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eGetName\u003c/span\u003e(), c.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eArea\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\ts \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Shape{name: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Shape\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tc \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Circle{Shape: Shape{name: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Circle\u0026#34;\u003c/span\u003e}, r: \u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e Rectangle{Shape: Shape{name: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Rectangle\u0026#34;\u003c/span\u003e}, w: \u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e, h: \u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tlistshape \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e []ShapeInterface{\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003es, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003ec, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003er}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e _, si \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003erange\u003c/span\u003e listshape {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tsi.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintArea\u003c/span\u003e() \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//!! 猜猜哪个Area()方法会被调用 !!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eShape : Area \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCircle : Area \u003cspan style=\"color:#a5d6ff\"\u003e314.1592653589793\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRectangle : Area \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 为啥这里没有调用 5 * 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e原因分析：\u003ccode\u003eRectangle\u003c/code\u003e通过组合\u003ccode\u003eShape\u003c/code\u003e获得的\u003ccode\u003ePrintArea()\u003c/code\u003e方法并没有去调用\u003ccode\u003eRectangle\u003c/code\u003e实现的\u003ccode\u003eArea()\u003c/code\u003e方法，而是去调用了\u003ccode\u003eShape\u003c/code\u003e的\u003ccode\u003eArea()\u003c/code\u003e方法。\u003ccode\u003eCircle\u003c/code\u003e是因为自己重写了\u003ccode\u003ePrintArea()\u003c/code\u003e所以在方法里调用到了自身的\u003ccode\u003eArea()\u003c/code\u003e。\u003c/p\u003e","title":"golang的组合和嵌套（面向接口编程）"},{"content":"Context 正确使用姿势 原文参考：https://juejin.cn/post/6844903929340231694\nContext 是 immutable（不可变的）\ncontext.Context API 基本上是两类操作：\n3个函数用于限定什么时候你的子节点退出； 1个函数用于设置请求范畴的变量 1 2 3 4 5 6 7 8 type Context interface { // 啥时候退出 Deadline() (deadline time.Time, ok bool) Done() \u0026lt;-chan struct{} Err() error // 设置变量 Value(key interface{}) interface{} } 如何创建 Context？ 在 RPC 开始的时候，使用 context.Background() 有些人把在 main() 里记录一个 context.Background()，然后把这个放到服务器的某个变量里，然后请求来了后从这个变量里继承 context。这么做是不对的。直接每个请求，源自自己的 context.Background() 即可。 如果你没有 context，却需要调用一个 context 的函数的话，用 context.TODO() 如果某步操作需要自己的超时设置的话，给它一个独立的 sub-context（如前面的例子） Context 放哪？ 把 Context 想象为一条河流流过你的程序 理想情况下，Context 存在于调用栈（Call Stack） 中 不要把 Context 存储到一个 struct 里 除非你使用的是像 http.Request 中的 request 结构体的方式 request 结构体应该以 Request 结束为生命终止 当 RPC 请求处理结束后，应该去掉对 Context 变量的引用（Unreference） Request 结束，Context 就应该结束。 Context 包的注意事项 要养成关闭 Context 的习惯 特别是 超时的 Contexts 如果一个 context 被 GC 而不是 cancel 了，那一般是你做错了 1 2 ctx, cancel := context.WithTimeout(parentCtx, time.Second * 2) defer cancel()、 使用 Timeout 会导致内部使用 time.AfterFunc，从而会导致 context 在计时器到时之前都不会被垃圾回收。 在建立之后，立即 defer cancel() 是一个好习惯。 终止请求 (Request Cancellation) 当你不再关心接下来获取的结果的时候，有可能会 Cancel 一个 Context？\n以 golang.org/x/sync/errgroup 为例，errgroup 使用 Context 来提供 RPC 的终止行为。\n1 2 3 4 5 6 type Group struct { cancel func() wg sync.WaitGroup errOnce sync.Once err error } 创建一个 group 和 context：\n1 2 3 4 func WithContext(ctx context.Context) (*Group, context.Context) { ctx, cancel := context.WithCancel(ctx) return \u0026amp;Group{cancel: cancel}, ctx } 这样就返回了一个可以被提前 cancel 的 group。\n而调用的时候，并不是直接调用 go func()，而是调用 Go()，将函数作为参数传进去，用高阶函数的形式来调用，其内部才是 go func() 开启 goroutine。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 func (g *Group) Go(f func() error) { g.wg.Add(1) go func() { defer g.wg.Done() if err := f(); err != nil { g.errOnce.Do(func() { g.err = err if g.cancel != nil { g.cancel() } }) } }() } 当给入函数 f 返回错误，则使用 sync.Once 来 cancel context，而错误被保存于 g.err 之中，在随后的 Wait() 函数中返回。\n1 2 3 4 5 6 7 func (g *Group) Wait() error { g.wg.Wait() if g.cancel != nil { g.cancel() } return g.err } 注意：这里在 Wait() 结束后，调用了一次 cancel()。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main func DoTwoRequestsAtOnce(ctx context.Context) error { eg, egCtx := errgroup.WithContext(ctx) var resp1, resp2 *http.Response f := func(loc string, respIn **http.Response) func() error { return func() error { reqCtx, cancel := context.WithTimeout(egCtx, time.Second) defer cancel() req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, loc, nil) var err error *respIn, err = http.DefaultClient.Do(req.WithContext(reqCtx)) if err == nil \u0026amp;\u0026amp; (*respIn).StatusCode \u0026gt;= 500 { return errors.New(\u0026#34;unexpected!\u0026#34;) } return err } } eg.Go(f(\u0026#34;\u0026lt;http://localhost:8080/fast_request\u0026gt;\u0026#34;, \u0026amp;resp1)) eg.Go(f(\u0026#34;\u0026lt;http://localhost:8080/slow_request\u0026gt;\u0026#34;, \u0026amp;resp2)) return eg.Wait() } 在这个例子中，同时发起了两个 RPC 调用，当任何一个调用超时或者出错后，会终止另一个 RPC 调用。这里就是利用前面讲到的 errgroup 来实现的，应对有很多并非请求，并需要集中处理超时、出错终止其它并发任务的时候，这个 pattern 使用起来很方便。\nContext.Value - Request 范畴的值 context.Value API 的万金油（duct tape) 胶带（duct tape) 几乎可以修任何东西，从破箱子，到人的伤口，到汽车引擎，甚至到NASA登月任务中的阿波罗13号飞船（Yeah! True Story)。所以在西方文化里，胶带是个“万能”的东西。在中文里，恐怕万金油是更合适的对应词汇，从头疼、脑热，感冒发烧，到跌打损伤几乎无所不治。\n当然，治标不治本，这点东西方文化中的潜台词都是一样的。这里提及的 context.Value 对于 API 而言，就是这类性质的东西，啥都可以干，但是治标不治本。\nvalue 节点是 Context 链中的一个节点 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package context type valueCtx struct { Context key, val interface{} } func WithValue(parent Context, key, val interface{}) Context { // ... return \u0026amp;valueCtx{parent, key, val} } func (c *valueCtx) Value(key interface{}) interface{} { if c.key == key { return c.val } return c.Context.Value(key) } 可以看到，WithValue() 实际上就是在 Context 树形结构中，增加一个节点罢了。\n约束 key 的空间 为了防止树形结构中出现重复的键，建议约束键的空间。比如使用私有类型，然后用 GetXxx() 和 WithXxxx() 来操作私有实体。\n1 2 3 4 5 6 7 8 9 10 11 type privateCtxType string var ( reqID = privateCtxType(\u0026#34;req-id\u0026#34;) ) func GetRequestID(ctx context.Context) (int, bool) { id, exists := ctx.Value(reqID).(int) return id, exists } func WithRequestID(ctx context.Context, reqid int) context.Context { return context.WithValue(ctx, reqID, reqid) } 这里使用 WithXxx 而不是 SetXxx 也是因为 Context 实际上是 immutable 的，所以不是修改 Context 里某个值，而是产生新的 Context 带某个值。\nContext.Value 是 immutable 的 再多次的强调 Context.Value 是 immutable 的也不过分。\ncontext.Context 从设计上就是按照 immutable （不可变的）模式设计的 同样，Context.Value 也是 immutable 的 不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变 更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的 比如设置了超时，就别以为可以改变这个设置的超时值 在使用 Context.Value 的时候，一定要记住这一点 应该把什么放到 Context.Value 里？ 应该保存 Request 范畴的值 任何关于 Context 自身的都是 Request 范畴的（这俩同生共死） 从 Request 数据衍生出来，并且随着 Request 的结束而终结 什么东西不属于 Request 范畴？ 在 Request 以外建立的，并且不随着 Request 改变而变化 比如你 func main() 里建立的东西显然不属于 Request 范畴 数据库连接 如果 User ID 在连接里呢？(稍后会提及) 全局 logger 如果 logger 里需要有 User ID 呢？（稍后会提及） 那么用 Context.Value 有什么问题？ 不幸的是，好像所有东西都是由请求衍生出来的 那么我们为什么还需要函数参数？然后干脆只来一个 Context 就完了？ 1 2 3 func Add(ctx context.Context) int { return ctx.Value(\u0026#34;first\u0026#34;).(int) + ctx.Value(\u0026#34;second\u0026#34;).(int) } 曾经看到过一个 API，就是这种形式：\n1 2 3 4 func IsAdminUser(ctx context.Context) bool { userID := GetUser(ctx) return authSingleton.IsAdmin(userID) } 这里API实现内部从 context 中取得 UserID，然后再进行权限判断。但是从函数签名看，则完全无法理解这个函数具体需要什么、以及做什么。\n代码要以可读性为优先设计考虑。\n别人拿到一个代码，一般不是掉进函数实现细节里去一行行的读代码，而是会先浏览一下函数接口。所以清晰的函数接口设计，会更加利于别人（或者是几个月后的你自己）理解这段代码。\n一个良好的 API 设计，应该从函数签名就清晰的理解函数的逻辑。如果我们将上面的接口改为：\n1 func IsAdminUser(ctx context.Context, userID string, authenticator auth.Service) bool 我们从这个函数签名就可以清楚的知道：\n这个函数很可能可以提前被 cancel 这个函数需要 User ID 这个函数需要一个authenticator来 而且由于 authenticator 是传入参数，而不是依赖于隐式的某个东西，我们知道，测试的时候就很容易传入一个模拟认证函数来做测试 userID 是传入值，因此我们可以修改它，不用担心影响别的东西 所有这些信息，都是从函数签名得到的，而无需打开函数实现一行行去看。\n那什么可以放到 Context.Value 里去？ 现在知道 Context.Value 会让接口定义更加模糊，似乎不应该使用。那么又回到了原来的问题，到底什么可以放到 Context.Value 里去？换个角度去想，什么不是衍生于 Request？\nContext.Value 应该是告知性质的东西，而不是控制性质的东西 应该永远都不需要写进文档作为必须存在的输入数据 如果你发现你的函数在某些 Context.Value 下无法正确工作，那就说明这个 Context.Value 里的信息不应该放在里面，而应该放在接口上。因为已经让接口太模糊了。 什么东西不是控制性质的东西？ Request ID 只是给每个 RPC 调用一个 ID，而没有实际意义 这就是个数字/字符串，反正你也不会用其作为逻辑判断 一般也就是日志的时候需要记录一下 而 logger 本身不是 Request 范畴，所以 logger 不应该在 Context 里 非 Request 范畴的 logger 应该只是利用 Context 信息来修饰日志 User ID （如果仅仅是作为日志用） Incoming Request ID 什么显然是控制性质的东西？ 数据库连接 显然会非常严重的影响逻辑 因此这应该在函数参数里，明确表示出来 认证服务(Authentication) 显然不同的认证服务导致的逻辑不同 也应该放到函数参数里，明确表示出来 Context WithValue的常见使用场景 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) /* case1: 首先，我们创建一个空上下文并将其分配给ctx变量。 1.ctx使用其键和值创建 3 个上下文作为父值。 2.然后我们创建另一个ctx1作为父级的上下文并给它一个键和值。 3.我们将尝试从中提取价值ctx1，ctx2，ctx3用正确的密钥。它将根据键返回给我们值。 4.如果我们尝试从具有错误键的上下文中提取值，它将返回nil值。 case2: 在http上下文中插入固值(中间件的方式)，如 userID，Token等。 */ func main() { //case1() http.Handle(\u0026#34;/\u0026#34;, middleware1(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { // After Insert Claim into Context fmt.Printf(\u0026#34;%+v\\\\n\u0026#34;, CtxClaim(r.Context())) fmt.Fprintf(w, \u0026#34;%+v\\\\n\u0026#34;, CtxClaim(r.Context())) }))) http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil) } type Claims struct { ID int `json:\u0026#34;id\u0026#34;` } var contextKey = \u0026#34;ctx-key\u0026#34; func middleware1(next http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { // Example: Get UserID From Token // .... // .... fmt.Println(\u0026#34;Insert Claim into Context\u0026#34;) newCtx := context.WithValue(r.Context(), contextKey, \u0026amp;Claims{ ID: 1, // example User ID: 1 }) r = r.WithContext(newCtx) next.ServeHTTP(w, r) }) } func CtxClaim(ctx context.Context) *Claims { raw, _ := ctx.Value(contextKey).(*Claims) return raw } func case1() { ctx := context.Background() // Empty Context ctx1 := context.WithValue(ctx, \u0026#34;key1\u0026#34;, \u0026#34;value1\u0026#34;) // parent: ctx ctx2 := context.WithValue(ctx, \u0026#34;key2\u0026#34;, \u0026#34;value2\u0026#34;) // parent: ctx ctx3 := context.WithValue(ctx, \u0026#34;key3\u0026#34;, \u0026#34;value3\u0026#34;) // parent: ctx ctx4 := context.WithValue(ctx1, \u0026#34;key4\u0026#34;, \u0026#34;value4\u0026#34;) // parent: ctx1 fmt.Println(ctx1.Value(\u0026#34;key1\u0026#34;)) // value1 fmt.Println(ctx2.Value(\u0026#34;key2\u0026#34;)) // value2 fmt.Println(ctx3.Value(\u0026#34;key3\u0026#34;)) // value3 fmt.Println(ctx4.Value(\u0026#34;key4\u0026#34;)) // value4 fmt.Println(ctx4.Value(\u0026#34;key1\u0026#34;)) // value1 fmt.Println(ctx3.Value(\u0026#34;key1\u0026#34;)) // nil } 小结 个人不推荐在 context 中封装太多的东西向下传递是非常的不 “simple”，时刻记住context设计初衷从API就可以看出：1.超时控制。2.固值传递（如UserID等）。\n","permalink":"https://luenci.com/en/posts/context%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/","summary":"\u003ch1 id=\"context-正确使用姿势\"\u003eContext 正确使用姿势\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原文参考：https://juejin.cn/post/6844903929340231694\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eContext 是 immutable（不可变的）\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"contextcontext-api\"\u003econtext.Context API\u003c/h2\u003e\n\u003cp\u003e基本上是两类操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e3个函数用于\u003cstrong\u003e限定什么时候你的子节点退出\u003c/strong\u003e；\u003c/li\u003e\n\u003cli\u003e1个函数用于\u003cstrong\u003e设置请求范畴的变量\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Context \u003cspan style=\"color:#ff7b72\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//  啥时候退出\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDeadline\u003c/span\u003e() (deadline time.Time, ok \u003cspan style=\"color:#ff7b72\"\u003ebool\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDone\u003c/span\u003e() \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#ff7b72\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eErr\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//  设置变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eValue\u003c/span\u003e(key \u003cspan style=\"color:#ff7b72\"\u003einterface\u003c/span\u003e{}) \u003cspan style=\"color:#ff7b72\"\u003einterface\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"如何创建-context\"\u003e如何创建 Context？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在 RPC 开始的时候，使用 context.Background()\n\u003cul\u003e\n\u003cli\u003e有些人把在 main() 里记录一个 context.Background()，然后把这个放到服务器的某个变量里，然后请求来了后从这个变量里继承 context。这么做是\u003cstrong\u003e不对的\u003c/strong\u003e。直接每个请求，源自自己的 context.Background() 即可。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如果你没有 context，却需要调用一个 context 的函数的话，用 context.TODO()\u003c/li\u003e\n\u003cli\u003e如果某步操作需要自己的超时设置的话，给它一个独立的 sub-context（如前面的例子）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"context-放哪\"\u003eContext 放哪？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e把 Context 想象为一条河流流过你的程序\u003c/li\u003e\n\u003cli\u003e理想情况下，Context 存在于调用栈（Call Stack） 中\u003c/li\u003e\n\u003cli\u003e不要把 Context 存储到一个 struct 里\n\u003cul\u003e\n\u003cli\u003e除非你使用的是像 http.Request 中的 request 结构体的方式\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003erequest 结构体应该以 Request 结束为生命终止\u003c/li\u003e\n\u003cli\u003e当 RPC 请求处理结束后，应该去掉对 Context 变量的引用（Unreference）\u003c/li\u003e\n\u003cli\u003eRequest 结束，Context 就应该结束。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"context-包的注意事项\"\u003eContext 包的注意事项\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e要养成关闭 Context 的习惯\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e特别是\u003c/strong\u003e 超时的 Contexts\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如果一个 context 被 GC 而不是 cancel 了，那一般是你做错了\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ectx, cancel \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e context.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWithTimeout\u003c/span\u003e(parentCtx, time.Second \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#ff7b72\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ecancel\u003c/span\u003e()\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e使用 Timeout 会导致内部使用 time.AfterFunc，从而会导致 context 在计时器到时之前都不会被垃圾回收。\u003c/li\u003e\n\u003cli\u003e在建立之后，立即 defer cancel() 是一个好习惯。\u003c/li\u003e\n\u003c/ul\u003e","title":"Context 正确使用姿势（推荐）"},{"content":" Wire 等依赖注入工具旨在简化初始化代码的管理\n💡 依赖注入 是一种标准技术，用于生成灵活且松散耦合的代码，通过显式地为组件提供它们工作所需的所有依赖项。\nWire 介绍 参考文章：Golang依赖注入框架wire使用详解_魂影魔宅-CSDN博客_golang wire\nWire 有两个基本概念：提供者(provider)和注入器(Injector)。\n官方的定义：\nprovider: a function that can produce a value. These functions are ordinary Go code.\ninjector: a function that calls providers in dependency order.\nWith Wire, you write the injector’s signature, then Wire generates the function’s body.\n提供者(provider)：一个可以产生值的函数（通常是构造函数)。这些函数都是普通的 Go 代码 注入器(Injector)：一个按依赖顺序调用提供者的函数。 使用 Wire，您编写注入器(Injector)的签名，然后 Wire 生成函数的主体。\nprovider provider就是普通的Go函数，可以把它看作是某对象的构造函数，我们通过provider告诉wire该对象的依赖情况：\n1 2 3 4 5 6 7 8 9 10 11 // NewUserStore是*UserStore的provider，表明*UserStore依赖于*Config和 *mysql.DB. func NewUserStore(cfg *Config, db *mysql.DB) (*UserStore, error) {...} // NewDefaultConfig是*Config的provider，没有依赖 func NewDefaultConfig() *Config {...} // NewDB是*mysql.DB的provider，依赖于ConnectionInfo func NewDB(info ConnectionInfo) (*mysql.DB, error) {...} // UserStoreSet 可选项，可以使用wire.NewSet将通常会一起使用的依赖组合起来。 var UserStoreSet = wire.NewSet(NewUserStore, NewDefaultConfig) injector injector是wire生成的函数，我们通过调用injector来获取我们所需的对象或值，injector会按照依赖关系，按顺序调用provider函数：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // File: wire_gen.go// Code generated by Wire. DO NOT EDIT. //go:generate wire //+build !wireinject // initUserStore是由wire生成的injector func initUserStore(info ConnectionInfo) (*UserStore, error) { // *Config的provider函数 defaultConfig := NewDefaultConfig() // *mysql.DB的provider函数 db, err := NewDB(info) if err != nil { return nil, err } // *UserStore的provider函数 userStore, err := NewUserStore(defaultConfig, db) if err != nil { return nil, err } return userStore, nil } injector帮我们把按顺序初始化依赖的步骤给做了，我们在main.go中只需要调用initUserStore方法就能得到我们想要的对象了。\n那么wire是怎么知道如何生成injector的呢？我们需要写一个函数来告诉它：\n定义injector的函数签名 在函数中使用wire.Build方法列举生成injector所需的provider 1 2 3 4 5 6 7 例如： // initUserStore用于声明injector的函数签名 func initUserStore(info ConnectionInfo) (*UserStore, error) { // wire.Build声明要获取一个UserStore需要调用到哪些provider函数 wire.Build(UserStoreSet, NewDB) return nil, nil // 这些返回值wire并不关心。 } 有了上面的函数，wire就可以得知如何生成injector了。wire生成injector的步骤描述如下：\n确定所生成injector函数的函数签名：func initUserStore(info ConnectionInfo) (*UserStore, error) 感知返回值第一个参数是UserStore 检查wire.Build列表，找到UserStore的provider：NewUserStore 由函数签名func NewUserStore(cfg *Config, db *mysql.DB)得知NewUserStore依赖于Config, 和mysql.DB 检查wire.Build列表，找到Config和mysql.DB的provider：NewDefaultConfig和NewDB 由函数签名func NewDefaultConfig() *Config得知Config没有其他依赖了。 由函数签名func NewDB(info *ConnectionInfo) (*mysql.DB, error)得知mysql.DB依赖于ConnectionInfo。 检查wire.Build列表，找不到ConnectionInfo的provider，但在injector函数签名中发现匹配的入参类型，直接使用该参数作为NewDB的入参。 感知返回值第二个参数是error 按依赖关系，按顺序调用provider函数，拼装injector函数。 接口绑定 💡 根据依赖倒置原则（Dependence Inversion Principle），对象应当依赖于接口，而不是直接依赖于具体实现。\nwire中如何处理接口依赖：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // UserService type UserService struct { userRepo UserRepository// \u0026lt;-- UserService依赖UserRepository接口 } type User struct { ID int Name string } // UserRepository 存放User对象的数据仓库接口,比如可以是mysql,restful api. type UserRepository interface { // GetUserByID 根据ID获取User, 如果找不到User返回对应错误信息 GetUserByID(id int) (*User, error) } // NewUserService *UserService构造函数 func NewUserService(userRepo UserRepository) *UserService { return \u0026amp;UserService{ userRepo:userRepo, } } // mockUserRepo 模拟一个UserRepository实现 type mockUserRepo struct { foo string bar int } // GetUserByID UserRepository接口实现 func (u *mockUserRepo) GetUserByID(id int) (*User,error){ return \u0026amp;User{}, nil } // NewMockUserRepo *mockUserRepo构造函数 func NewMockUserRepo(foo string,bar int) *mockUserRepo { return \u0026amp;mockUserRepo{ foo:foo, bar:bar, } } // MockUserRepoSet 将 *mockUserRepo与UserRepository绑定 var MockUserRepoSet = wire.NewSet(NewMockUserRepo,wire.Bind(new(UserRepository), new(*mockUserRepo))) 在这个例子中，UserService依赖UserRepository接口，其中mockUserRepo是UserRepository的一个实现，由于在Go的最佳实践中，更推荐返回具体实现而不是接口。所以mockUserRepo的provider函数返回的是*mockUserRepo这一具体类型。wire无法自动将具体实现与接口进行关联，我们需要显示声明它们之间的关联关系。通过wire.NewSet和wire.Bind将*mockUserRepo与UserRepository进行绑定： 1 2 // MockUserRepoSet 将 *mockUserRepo与UserRepository绑定 var MockUserRepoSet = wire.NewSet(NewMockUserRepo,wire.Bind(new(UserRepository), new(*mockUserRepo))) 定义injector函数签名：\n1 2 3 func InitializeUserService(foo string, bar int) *UserService{ wire.Build(NewUserService,MockUserRepoSet)// 使用MockUserRepoSetreturn nil } wire对provider的返回值个数和顺序有所规定：\n第一个参数是需要生成的依赖对象 如果返回2个返回值，第二个参数必须是func()或者error 如果返回3个返回值，第二个参数必须是func()，第三个参数则必须是error ","permalink":"https://luenci.com/en/posts/%E8%81%8A%E8%81%8Awire%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/","summary":"\u003cblockquote\u003e\n\u003cp\u003eWire 等依赖注入工具旨在简化初始化代码的管理\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e💡 \u003ca href=\"https://en.wikipedia.org/wiki/Dependency_injection\"\u003e依赖注入\u003c/a\u003e 是一种标准技术，用于生成灵活且松散耦合的代码，通过显式地为组件提供它们工作所需的所有依赖项。\u003c/p\u003e\n\u003ch1 id=\"wire-介绍\"\u003eWire 介绍\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考文章：\u003ca href=\"https://blog.csdn.net/uisoul/article/details/108776073\"\u003eGolang依赖注入框架wire使用详解_魂影魔宅-CSDN博客_golang wire\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eWire 有两个基本概念：提供者(\u003cstrong\u003eprovider\u003c/strong\u003e)和注入器(\u003cstrong\u003eInjector\u003c/strong\u003e)。\u003c/p\u003e\n\u003cp\u003e官方的定义：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eprovider:  a function that can produce a value. These functions are ordinary Go code.\u003c/p\u003e\n\u003cp\u003einjector:  a function that calls providers in dependency order.\u003c/p\u003e\n\u003cp\u003eWith Wire, you write the injector’s signature, then Wire generates the function’s body.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e提供者(\u003cstrong\u003eprovider\u003c/strong\u003e)：一个可以产生值的函数（通常是构造函数)。这些函数都是普通的 Go 代码\u003c/li\u003e\n\u003cli\u003e注入器(\u003cstrong\u003eInjector\u003c/strong\u003e)：一个按依赖顺序调用提供者的函数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e使用 Wire，您编写注入器(\u003cstrong\u003eInjector\u003c/strong\u003e)的签名，然后 Wire 生成函数的主体。\u003c/p\u003e","title":"聊聊 Wire 依赖注入"},{"content":"defer的妙用之跟踪函数调用链 本文参考：Tony Bai 老师的极客时间 《Tony Bai · Go语言第一课》 课程\n使用 defer 可以跟踪函数的 执行过程\ndefer 会预计算参数(表达式进行求值): 详情见 https://luenci.com\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // trace.go package main func Trace(name string) func() { println(\u0026#34;enter:\u0026#34;, name) return func() { println(\u0026#34;exit:\u0026#34;, name) } } func foo() { defer Trace(\u0026#34;foo\u0026#34;)() bar() } func bar() { defer Trace(\u0026#34;bar\u0026#34;)() } func main() { defer Trace(\u0026#34;main\u0026#34;)() foo() } out: enter: main enter: foo enter: bar exit: bar exit: foo exit: main 程序的函数调用的全过程一目了然地展现在了我们面前：程序按 main -\u0026gt; foo -\u0026gt; bar的函数调用次序执行，代码在函数的入口与出口处分别输出了跟踪日志。\nGo 会对 defer 后面的表达式Trace(\u0026quot;foo\u0026quot;)()进行求值。由于这个表达式包含一个函数调用Trace(\u0026quot;foo\u0026quot;)，所以这个函数会被执行。 程序存在的问题\n调用 Trace 时需手动显式传入要跟踪的函数名； 如果是并发应用，不同 Goroutine 中函数链跟踪混在一起无法分辨； 输出的跟踪结果缺少层次感，调用关系不易识别； 对要跟踪的函数，需手动调用 Trace 函数 接下来我们一步一步的解决这些问题，来完善我们的函数调用链。\n自动获取所跟踪函数的函数名 1 2 3 4 5 6 7 8 9 10 11 12 func Trace() func() { pc, _, _, ok := runtime.Caller(1) if !ok { panic(\u0026#34;not found caller\u0026#34;) } fn := runtime.FuncForPC(pc) name := fn.Name() println(\u0026#34;enter:\u0026#34;, name) return func() { println(\u0026#34;exit:\u0026#34;, name) } } ... 改进后的Trace()函数，通过 runtime.Caller 函数获得当前 Goroutine 的函数调用 栈上的信息，runtime.Caller 的参数标识的是要获取的是哪一个栈帧的信息。当参数为 0 时，返回的是 Caller 函数的调用者的函数信息，在这里就是 Trace 函数。但我们需要的是 Trace 函数的调用者的信息，于是我们传入 1。\nCaller 函数有四个返回值：\n第一个返回值代表的是程序计数（pc）；\n第二个 和 第三个参数 代表对应函数所在的源文件名以及所在行数，这里我们暂时不需要\n最后一个参数代表是 否能成功获取这些信息\n如果获取失败，我们抛出 panic。 然后，我们通过 runtime.FuncForPC 函数和程序计数器（PC）得到被跟踪函数的函数名称。runtime.FuncForPC 返回的名称中不仅仅包含函数名，还包含了被跟踪函数所在的包名\n增加 Goroutine 标识 注意：Go 核心团队为了避免 Goroutine ID 的滥用，故意没有将 Goroutine ID 暴露给开发者。但是在 Go 标准库的 h2_bundle.go 中发现了一个官方的获取 Goroutine ID的用法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // curGoroutineID 获取当前goroutine的id func curGoroutineID() uint64 { b := make([]byte, 64) b = b[:runtime.Stack(b, false)] // Parse the 4707 out of \u0026#34;goroutine 4707 [\u0026#34; b = bytes.TrimPrefix(b, goroutineSpace) i := bytes.IndexByte(b, \u0026#39; \u0026#39;) if i \u0026lt; 0 { panic(fmt.Sprintf(\u0026#34;No space found in %q\u0026#34;, b)) } b = b[:i] n, err := strconv.ParseUint(string(b), 10, 64) if err != nil { panic(fmt.Sprintf(\u0026#34;Failed to parse goroutine ID out of %q: %v\u0026#34;, b, err)) } return n } func Trace(name string) func() { pc, _, _, ok := runtime.Caller(1) if !ok { panic(\u0026#34;not found caller\u0026#34;) } fn := runtime.FuncForPC(pc) name = fn.Name() gid := curGoroutineID() fmt.Printf(\u0026#34;g[%05d]: enter: [%s]\\n\u0026#34;, gid, name) return func() { fmt.Printf(\u0026#34;g[%05d]: exit: [%s]\\n\u0026#34;, gid, name) } } .... out: g[00001]: enter: [main.main] g[00001]: enter: [main.foo] g[00001]: enter: [main.bar] g[00001]: exit: [main.bar] g[00001]: exit: [main.foo] g[00001]: exit: [main.main] 改进后的代码在出入口输出的跟踪信息中加入了 Goroutine ID 信息，我们输出的 Goroutine ID 为 5 位数字，如果 ID 值不足 5 位，则左补零，这一切都是 Printf 函数的格 式控制字符串%05d帮助我们实现的。这样对齐 Goroutine ID 的位数，为的是输出信 息格式的一致性更好。如果你的 Go 程序中 Goroutine 的数量超过了 5 位数可以表示的数值范围，也可以自行调整控制字符串。\n多Goroutine 测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 // trace.go package main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;sync\u0026#34; ) var goroutineSpace = []byte(\u0026#34;goroutine \u0026#34;) // curGoroutineID 获取当前goroutine的id func curGoroutineID() uint64 { b := make([]byte, 64) b = b[:runtime.Stack(b, false)] // Parse the 4707 out of \u0026#34;goroutine 4707 [\u0026#34; b = bytes.TrimPrefix(b, goroutineSpace) i := bytes.IndexByte(b, \u0026#39; \u0026#39;) if i \u0026lt; 0 { panic(fmt.Sprintf(\u0026#34;No space found in %q\u0026#34;, b)) } b = b[:i] n, err := strconv.ParseUint(string(b), 10, 64) if err != nil { panic(fmt.Sprintf(\u0026#34;Failed to parse goroutine ID out of %q: %v\u0026#34;, b, err)) } return n } func Trace() func() { pc, _, _, ok := runtime.Caller(1) if !ok { panic(\u0026#34;not found caller\u0026#34;) } fn := runtime.FuncForPC(pc) name := fn.Name() gid := curGoroutineID() fmt.Printf(\u0026#34;g[%05d]: enter: [%s]\\n\u0026#34;, gid, name) return func() { fmt.Printf(\u0026#34;g[%05d]: exit: [%s]\\n\u0026#34;, gid, name) } } func A1() { defer Trace()() B1() } func B1() { defer Trace()() C1() } func C1() { defer Trace()() D() } func D() { defer Trace()() } func A2() { defer Trace()() B2() } func B2() { defer Trace()() C2() } func C2() { defer Trace()() D() } func main() { var wg sync.WaitGroup wg.Add(1) go func() { A2() wg.Done() }() A1() wg.Wait() } out: g[00001]: enter: [main.A1] g[00001]: enter: [main.B1] g[00001]: enter: [main.C1] g[00001]: enter: [main.D] g[00001]: exit: [main.D] g[00001]: exit: [main.C1] g[00001]: exit: [main.B1] g[00001]: exit: [main.A1] g[00006]: enter: [main.A2] g[00006]: enter: [main.B2] g[00006]: enter: [main.C2] g[00006]: enter: [main.D] g[00006]: exit: [main.D] g[00006]: exit: [main.C2] g[00006]: exit: [main.B2] g[00006]: exit: [main.A2] 由于 Go 运行时对 Goroutine 调度顺序的不确定性，各个 Goroutine 的输出还是会存 在交织在一起的问题，这会给你查看某个 Goroutine 的函数调用链跟踪信息带来阻碍。这里提供一个小技巧：你可以将程序的输出重定向到一个本地文件中，然后通过 Goroutine ID 过滤出（可使用 grep 工具）你想查看的 groutine 的全部函数跟踪信息。\n优化输出的跟踪信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 var goroutineSpace = []byte(\u0026#34;goroutine \u0026#34;) var mu sync.Mutex var m = make(map[uint64]int) // printTrace 层次输出追踪栈 func printTrace(id uint64, name, arrow string, indent int) { indents := \u0026#34;\u0026#34; for i := 0; i \u0026lt; indent; i++ { indents += \u0026#34; \u0026#34; } fmt.Printf(\u0026#34;g[%05d]:%s%s%s\\n\u0026#34;, id, indents, arrow, name) } // curGoroutineID 获取当前goroutine的id func curGoroutineID() uint64 { b := make([]byte, 64) b = b[:runtime.Stack(b, false)] // Parse the 4707 out of \u0026#34;goroutine 4707 [\u0026#34; b = bytes.TrimPrefix(b, goroutineSpace) i := bytes.IndexByte(b, \u0026#39; \u0026#39;) if i \u0026lt; 0 { panic(fmt.Sprintf(\u0026#34;No space found in %q\u0026#34;, b)) } b = b[:i] n, err := strconv.ParseUint(string(b), 10, 64) if err != nil { panic(fmt.Sprintf(\u0026#34;Failed to parse goroutine ID out of %q: %v\u0026#34;, b, err)) } return n } func Trace() func() { pc, _, _, ok := runtime.Caller(1) if !ok { panic(\u0026#34;not found caller\u0026#34;) } fn := runtime.FuncForPC(pc) name := fn.Name() gid := curGoroutineID() mu.Lock() indents := m[gid] // 获取当前gid对应的缩进层次 m[gid] = indents + 1 // 缩进层次+1后存入map mu.Unlock() printTrace(gid, name, \u0026#34;-\u0026gt;\u0026#34;, indents+1) return func() { mu.Lock() indents := m[gid] // 获取当前gid对应的缩进层次 m[gid] = indents - 1 // 缩进层次-1后存入map mu.Unlock() printTrace(gid, name, \u0026#34;\u0026lt;-\u0026#34;, indents) } } ... out: g[00001]: -\u0026gt;main.A1 g[00001]: -\u0026gt;main.B1 g[00001]: -\u0026gt;main.C1 g[00001]: -\u0026gt;main.D g[00001]: \u0026lt;-main.D g[00001]: \u0026lt;-main.C1 g[00001]: \u0026lt;-main.B1 g[00001]: \u0026lt;-main.A1 g[00006]: -\u0026gt;main.A2 g[00006]: -\u0026gt;main.B2 g[00006]: -\u0026gt;main.C2 g[00006]: -\u0026gt;main.D g[00006]: \u0026lt;-main.D g[00006]: \u0026lt;-main.C2 g[00006]: \u0026lt;-main.B2 g[00006]: \u0026lt;-main.A2 为了格式化输出我们使用了一个 map 类型变量 m 来保存每个 Goroutine 当前的缩进信息：\nm 的 key 为 Goroutine 的 ID，值为缩进的层次。 然后，考虑到 Trace 函数可能在 并发环境中运行，因为的“map 不支持并发写”的，我 们增加了一个 sync.Mutex 实例 mu 用于同步对 m 的写操作。 这样，对于一个 Goroutine 来说，每次刚进入一个函数调用，我们就在输出入口跟踪信息 之前，将缩进层次加一，并输出入口跟踪信息，加一后的缩进层次值也保存到 map 中。然 后，在函数退出前，我们取出当前缩进层次值并输出出口跟踪信息，之后再将缩进层次减 一后保存到 map中。\n除了增加缩进层次信息外，在这一版的 Trace 函数实现中，我们也把输出出入口跟踪信息 的操作提取到了一个独立的函数 printTrace 中，这个函数会根据传入的 Goroutine ID、 函数名、箭头类型与缩进层次值，按预定的格式拼接跟踪信息并输出。\n利用代码生成自动注入 Trace 函数 将一些核心的逻辑封装程一个 module （完整代码在地址在 [trace](luenci/trace: 一个跟踪函数调用链的工具库 (github.com)) ）\n扩展：函数调用可视化 推荐一个三方库：https://github.com/ofabry/go-callvis\n","permalink":"https://luenci.com/en/posts/%E8%B7%9F%E8%B8%AA%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%93%BE/","summary":"\u003ch1 id=\"defer的妙用之跟踪函数调用链\"\u003edefer的妙用之跟踪函数调用链\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文参考：Tony Bai 老师的极客时间 \u003ca href=\"https://time.geekbang.org/column/intro/100093501?code=cQ4ugiP4uzDdDVD1T-HXXlTv9Fdl-SpdsPnSfxf0%2FuU%3D\"\u003e《Tony Bai · Go语言第一课》\u003c/a\u003e 课程\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e使用 defer 可以跟踪函数的 执行过程\u003c/p\u003e\n\u003cp\u003edefer 会预计算参数(表达式进行求值): 详情见 \u003ca href=\"https://luenci.com\"\u003ehttps://luenci.com\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// trace.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eTrace\u003c/span\u003e(name \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprintln(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;enter:\u0026#34;\u003c/span\u003e, name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tprintln(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;exit:\u0026#34;\u003c/span\u003e, name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efoo\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eTrace\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e)()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebar\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebar\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eTrace\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e)()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eTrace\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e)() \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efoo\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    enter: main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    enter: foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    enter: bar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    exit: bar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    exit: foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    exit: main\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e程序的函数调用的全过程一目了然地展现在了我们面前：程序按 \u003ccode\u003emain\u003c/code\u003e -\u0026gt; \u003ccode\u003efoo\u003c/code\u003e -\u0026gt; \u003ccode\u003ebar\u003c/code\u003e的函数调用次序执行，代码在函数的入口与出口处分别输出了跟踪日志。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGo 会对 \u003ccode\u003edefer\u003c/code\u003e 后面的表达式\u003ccode\u003eTrace(\u0026quot;foo\u0026quot;)()\u003c/code\u003e进行求值。由于这个表达式包含一个函数调用\u003ccode\u003eTrace(\u0026quot;foo\u0026quot;)\u003c/code\u003e，所以这个函数会被执行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e程序存在的问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用 Trace 时需手动显式传入要跟踪的函数名；\u003c/li\u003e\n\u003cli\u003e如果是并发应用，不同 Goroutine 中函数链跟踪混在一起无法分辨；\u003c/li\u003e\n\u003cli\u003e输出的跟踪结果缺少层次感，调用关系不易识别；\u003c/li\u003e\n\u003cli\u003e对要跟踪的函数，需手动调用 Trace 函数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e接下来我们一步一步的解决这些问题，来完善我们的函数调用链。\u003c/p\u003e","title":"defer的妙用之跟踪函数调用链"},{"content":"Golang 并发模型 \u0026amp; Goroutine 详解 💡 并发不是并行，并发关乎结构，并行关乎执行\n操作系统的基本调度与执行单元是进程(process)\n操作系统的最小调度单位是线程-线程可作为执行单元可被独立调度到处理器上运行\n**CSP( Communicationing Sequential Processes，通信顺序进程)**并发模型 Tony Hoare 的 CSP 模型旨在简化并发程序的编写，让并发程序的编写与编写顺序程序一样简单。Tony Hoare 认为输入输出应该是基本的编程原语，数据处理逻辑(也就是 CSP中的 P)只需调用输入原语获取数据，顺序地处理数据，并将结果数据通过输出原语输出就可以了。因此，在 Tony Hoare 眼中，一个符合 CSP 模型的并发程序应该是一组通过输入输出原语连接起来的 P 的集合。\n从这个角度来看，CSP理论不仅是一个并发参考模型，也是一种并发程序的程序组织方法。它的组合思想与 Go 的设计哲学不谋而合。\nTony Hoare 的 CSP 理论中的 P，也就是“Process(进程)”，是一个抽象概念，它代表任何顺序处理逻辑的封装，它获取输入数据(或从其他 P 的输出获取)，并生产出可以被其他 P 消费的输出数据。这里我们可以简单看下 CSP 通信模型的示意图:\n注意了，这里的 P 并不一定与操作系统的进程或线程划等号。在 Go 中，与“Process”对 应的是 goroutine。\n为了实现 CSP 并发模型中的输入和输出原语，Go 还引入了 goroutine(P)之间的通信原语channel。goroutine 可以从 channel 获取输入数据， 再将处理后得到的结果数据通过 channel 输出。通过 channel 将 goroutine(P)组合连 接在一起，让设计和编写大型并发系统变得更加简单和清晰，我们再也不用为那些传统共 享内存并发模型中的问题而伤脑筋了。\nGoroutine 的优势 资源占用小，每个 goroutine 的初始栈大小仅为 2k; 由 Go 运行时而不是操作系统调度，goroutine 上下文切换在用户层完成，开销更小; 在语言层面而不是通过标准库提供。goroutine 由go关键字创建，一退出就会被回收或 销毁，开发体验更佳 语言内置 channel 作为 goroutine 间通信原语，为并发设计提供了强大支撑。 Goroutine 调度器 一个 Go 程序对于操作系统来说只是一个用户层程序，操作系统眼中只有线程，它甚至不知道有一种叫 Goroutine 的事物存在。所以，Goroutine 的调度全要靠 Go 自己完成。那么，实现 Go 程序内 Goroutine 之间“公平”竞争“CPU”资源的任务，就落到了Go 运行时(runtime)头上了。要知道在一个 Go 程序中，除了用户层代码，剩下的就是Go 运行时了。\n于是，Goroutine 的调度问题就演变为，Go 运行时如何将程序内的众多 Goroutine，按照一定算法调度到“CPU”资源上运行的问题了。\n💡 可是，在操作系统层面，线程竞争的“CPU”资源是真实的物理 CPU，但在 Go 程序层 面，各个 Goroutine 要竞争的“CPU”资源又是什么呢?\nGo 程序是用户层程序，它本身就是整体运行在一个或多个操作系统线程上的。所以这个答案就出来了: Goroutine 们要竞争的“CPU”资源就是操作系统线程。这样，Goroutine调度器的任务也就明确了: 将 Goroutine 按照一定算法放到不同的操作系统线程中去执行。 Goroutine 调度器模型与演化过程 Goroutine 调度器的实现不是一蹴而就的，它的调度模型与算法也是几经演化，从最初的 G-M 模型、到 G-P-M 模型，从不支持抢占，到支持协作式抢占，再到支持基于信号的异步抢占。 Goroutine 调度器经历了不断地优化与打磨。\nG-M 模型 在这个调度器中，每个 Goroutine 对应于运行时中的一个抽象结构: G(Goroutine) ，而被视作“物理 CPU”的操作系统线程，则被抽象为另外一个结构:M(machine)。\n调度器的工作就是将 G 调度到 M 上去运行。为了更好地控制程序中活跃的 M 的数量，调度器引入了 GOMAXPROCS 变量来表示 Go 调度器可见的“处理器”的最大数量。\nG-M 模型的一个重要不足:限制了 Go 并发程序的伸缩性，尤其是对那些有高吞吐或并行计算需求的服务程序。这个问题主要体现在这几个方面:\n单一全局互斥锁(Sched.Lock) 和集中状态存储的存在，导致所有 Goroutine 相关操作，比如创建、重新调度等，都要上锁; Goroutine 传递问题: M 经常在 M 之间传递“可运行”的 Goroutine，这导致调度延迟增大，也增加了额外的性能损耗; 每个 M 都做内存缓存，导致内存占用过高，数据局部性较差; 由于系统调用(syscall)而形成的频繁的工作线程阻塞和解除阻塞，导致额外的性能损耗。 为了解决这些问题德米特里 - 维尤科夫又亲自操刀改进了 Go 调度器，在 Go 1.1 版本中实现了 G-P-M 调度模型。\nG-P-M 调度模型 P 是一个“逻辑 Proccessor”，每个 G(Goroutine)要想真正运行起来，首先需要被分配一个 P，也就是进入到 P 的本地运行队列(local runq)中。\n对于 G 来说，P 就是运行它的“CPU”，可以说:在 G 的眼里只有 P。但从 Go 调度器的视角来看，真正的“CPU”是 M，只有将 P 和 M 绑定，才能让 P 的 runq中的 G 真正运行起来。\nG-P-M 模型的实现算是Go调度器的一大进步，但调度器仍然有一个令人头疼的问题，那就是不支持抢占式调度，这导致一旦某个 G 中出现死循环的代码逻辑，那么 G 将永久占用分配给它的 P 和 M，而位于同一个 P 中的其他 G 将得不到调度，出现“饿死”的情况。\n更为严重的是，当只有一个 P(GOMAXPROCS=1)时，整个 Go 程序中的其他 G 都 将“饿死”。\n基于协作的“抢占式”调度 Go 编译器在每个函数或方法的入口处加上了一段额外的代码 (runtime.morestack_noctxt)，让运行时有机会在这段代码中检查是否需要执行抢占调度。\n这种解决方案只能说局部解决了“饿死”问题，只在有函数调用的地方才能插入“抢 占”代码(埋点)，对于没有函数调用而是纯算法循环计算的 G，Go 调度器依然无法抢占。\n比如，死循环等并没有给编译器插入抢占代码的机会，这就会导致 GC 在等待所有 Goroutine 停止时的等待时间过长，从而导致 GC 延迟，内存占用瞬间冲高;甚至在一 些特殊情况下，导致在STW(sweight the world)时死锁。\n非协作的抢占式调度 这种抢占式调度是基于系统信号的，也就是通过向线程发送信号的方式来抢占正在运行Goroutine。\n小结 除了这些大的迭代外，Goroutine 的调度器还有一些小的优化改动，比如通过文件 I/O poller 减少 M 的阻塞等。\nGo 运行时已经实现了netpoller，这使得即便 G 发起网络 I/O 操作，也不会导致 M 被阻塞(仅阻塞 G)，也就不会导致大量线程(M)被创建出来。但是对于文件 I/O 操作来说，一旦阻塞，那么线程(M)将进入挂起状态，等待 I/O 返回后被唤醒。这种情况下 P 将与挂起的 M 分离，再选择一个处于空闲状态(idle)的 M。如果此时没有空闲的 M，就会新创建一个 M(线程)，所以，这种情况下，大量 I/O 操作仍然会导致大量线程被创建。\n为了解决这个问题，Go 开发团队的伊恩 - 兰斯 - 泰勒(Ian Lance Taylor)在 Go 1.9 中 增加了一个针对文件 I/O 的 Poller的功能，这个功能可以像 netpoller 那样，在 G 操作 那些支持监听(pollable)的文件描述符时，仅会阻塞 G，而不会阻塞 M。不过这个功能 依然不能对常规文件有效，常规文件是不支持监听的(pollable)。但对于 Go 调度器而 言，这也算是一个不小的进步了。\n","permalink":"https://luenci.com/en/posts/golang%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%92%8Cgoroutine-%E8%AF%A6%E8%A7%A3/","summary":"\u003ch1 id=\"golang-并发模型--goroutine-详解\"\u003e\u003ccode\u003eGolang\u003c/code\u003e 并发模型 \u0026amp; Goroutine 详解\u003c/h1\u003e\n\u003cp\u003e💡 \u003cstrong\u003e并发不是并行，并发关乎结构，并行关乎执行\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e操作系统的基本调度与执行单元是进程(process)\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e操作系统\u003c/strong\u003e的\u003cstrong\u003e最小调度\u003c/strong\u003e单位是线程-\u003ccode\u003e线程可作为执行单元可被独立调度到处理器上运行\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"csp-communicationing-sequential-processes通信顺序进程并发模型\"\u003e**\u003ccode\u003eCSP\u003c/code\u003e( Communicationing Sequential Processes，通信顺序进程)**并发模型\u003c/h2\u003e\n\u003cp\u003eTony Hoare 的 \u003ccode\u003eCSP\u003c/code\u003e 模型旨在简化并发程序的编写，让并发程序的编写与编写顺序程序一样简单。Tony Hoare 认为输入输出应该是基本的编程原语，数据处理逻辑(也就是 \u003ccode\u003eCSP\u003c/code\u003e中的 P)只需调用输入原语获取数据，顺序地处理数据，并将结果数据通过输出原语输出就可以了。因此，在 Tony Hoare 眼中，\u003cstrong\u003e一个符合 \u003ccode\u003eCSP\u003c/code\u003e 模型的并发程序应该是一组通过输入输出原语连接起来的 P 的集合\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e从这个角度来看，\u003ccode\u003eCSP\u003c/code\u003e理论不仅是一个并发参考模型，也是一种并发程序的程序组织方法。它的组合思想与 Go 的设计哲学不谋而合。\u003c/p\u003e\n\u003cp\u003eTony Hoare 的 \u003ccode\u003eCSP\u003c/code\u003e 理论中的 P，也就是“Process(进程)”，是一个抽象概念，它代表任何顺序处理逻辑的封装，它获取输入数据(或从其他 P 的输出获取)，并生产出可以被其他 P 消费的输出数据。这里我们可以简单看下 \u003ccode\u003eCSP\u003c/code\u003e 通信模型的示意图:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/202202112129599.png\" alt=\"image-20220211212946539\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e注意了，这里的 P 并不一定与操作系统的进程或线程划等号。在 Go 中，与“Process”对 应的是 \u003ccode\u003egoroutine\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了实现 \u003ccode\u003eCSP\u003c/code\u003e 并发模型中的输入和输出原语，Go 还引入了 \u003ccode\u003egoroutine\u003c/code\u003e(P)之间的通信原语channel。goroutine 可以从 channel 获取输入数据， 再将处理后得到的结果数据通过 channel 输出。通过 channel 将 goroutine(P)组合连 接在一起，让设计和编写大型并发系统变得更加简单和清晰，我们再也不用为那些传统共 享内存并发模型中的问题而伤脑筋了。\u003c/p\u003e\n\u003ch2 id=\"goroutine-的优势\"\u003e\u003ccode\u003eGoroutine\u003c/code\u003e 的优势\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e资源占用小，每个 goroutine 的初始栈大小仅为 2k;\u003c/li\u003e\n\u003cli\u003e由 Go 运行时而不是操作系统调度，goroutine 上下文切换在用户层完成，开销更小;\u003c/li\u003e\n\u003cli\u003e在语言层面而不是通过标准库提供。goroutine 由go关键字创建，一退出就会被回收或 销毁，开发体验更佳\u003c/li\u003e\n\u003cli\u003e语言内置 channel 作为 goroutine 间通信原语，为并发设计提供了强大支撑。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"goroutine\"\u003e\u003cstrong\u003e\u003ccode\u003eGoroutine\u003c/code\u003e 调度器\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e一个 Go 程序对于操作系统来说只是一个\u003cstrong\u003e用户层程序\u003c/strong\u003e，操作系统眼中只有线程，它甚至不知道有一种叫 \u003cstrong\u003eGoroutine\u003c/strong\u003e 的事物存在。所以，Goroutine 的调度全要靠 Go 自己完成。那么，实现 Go 程序内 Goroutine 之间“公平”竞争“CPU”资源的任务，就落到了Go 运行时(runtime)头上了。要知道在一个 Go 程序中，除了用户层代码，剩下的就是Go 运行时了。\u003c/p\u003e\n\u003cp\u003e于是，Goroutine 的调度问题就演变为，Go 运行时如何将程序内的众多 Goroutine，按照一定算法调度到“CPU”资源上运行的问题了。\u003c/p\u003e\n\u003cp\u003e💡 \u003cstrong\u003e可是，在操作系统层面，线程竞争的“CPU”资源是真实的物理 CPU，但在 Go 程序层 面，各个 Goroutine 要竞争的“CPU”资源又是什么呢?\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGo 程序是用户层程序，它本身就是整体运行在一个或多个操作系统线程上的。所以这个答案就出来了: \u003cstrong\u003eGoroutine 们要竞争的“CPU”资源就是操作系统线程\u003c/strong\u003e。这样，Goroutine调度器的任务也就明确了: \u003cstrong\u003e将 Goroutine 按照一定算法放到不同的操作系统线程中去执行\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e","title":"Golang 并发模型 \u0026 Goroutine 详解"},{"content":"聊聊登录认证这件事 这里介绍的是减少登录页面的编写的方法，比如一个公司中有A，B, C 三个系统，对于用户来说希望是我只需要登录（认证）一次就可以访问A，B，C三个系统，而不是进到A系统在A中登录（认证）一次，进到B系统又要在B中登录（认证）一次，进到C系统还要在C中登录（认证）一次，这样一方面会有重复的编码（A，B，C系统的登录页面逻辑），另一方面对用户来说也是非常不友好。\n请区别于对系统中的资源的权限校验\n关于LDAP 轻量级目录访问协议 (LDAP) 是一种使应用程序可以快速查询用户信息的协议。\n“什么是目录服务？” 目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，支持过滤功能。 是动态的，灵活的，易扩展的。 如：人员组织管理，电话簿，地址簿。\nLDAP介绍 LDAP（Light Directory Access Portocol），它是基于 X.500 标准的轻量级目录访问协议。 目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。 目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。 LDAP目录服务是由目录数据库和一套访问协议组成的系统。\nLDAP 登录流程 单点登录(SingleSign-On，SSO) 单点登录 (SSO) 是一种身份验证方法，可让用户仅使用一组凭据即可安全地对多个应用程序和网站进行身份验证\nSSO的想法就是将身份提供者（Identity provider，IDP），**服务提供者（Service provider，SP）**彻底分离，用户用IDP提供的身份就可以在Web世界畅通无阻。\n这里面最让人头疼的其实是安全问题。如何保证用户的身份在逻辑上不能被冒充，才是最难的题目。数据加密，**数字签名（Digital Signature）**等各种密码学知识刚好解决了这个问题。\n在2001年由OASIS组织安全服务技术委员会(Security Services Technical Committee)推出了**SAML（安全主张标记语言，Security Assertion Markup Language），**就是提出了对SSO实现的整体技术和安全规范。\nSAML是以XML为基础，不用JSON的原因，大概是因为JSON一直在1999年才发明，2004年以后才流行起来逐渐取代了XML。在这之前，XML一直是作为网络通讯的标准格式。\n在SAML协议中，实际上也包含了可以发送账号属性等登陆外的扩展部分。SAML协议实际内容很多，就不一一介绍，这里只围绕单点登录来说明。\nSAML协议里，约定了参与SSO的三方：浏览器，身份提供者（IDP），服务提供者（SP），以及这三方相互的通讯次序，加密方法，传输数据格式。\nLDAP 和 SSO 对比 LDAP协议里只负责用户身份的认证，不包含授权过程。在SAML协议中，不仅包含身份认证，还包含是否允许用户访问当前网站内容的授权部分。 LDAP服务与应用之间是毫无条件的充分信任，LDAP几乎是作为应用的远程数据库一般的存在。而在SAML中，SP与IDP不仅需要在事前互相信任（互换签名公钥与IP地址），还要在认证过程中防止他人伪造而进行数据校验。因为SAML定义的SP与IDP是在互联网上相互独立的站点。 同时能注意到SAML协议非常依赖浏览器重定向功能，而LDAP协议都是应用与LDAP服务间的直接通讯。 浏览器重定向，其实就是指当前你访问的页面主动跳转到另外一个网站的网页上去，在跳转的过程中可以给这次访问网页的请求上附加上一些数据用来完成数据传输。 OpenID诞生 一个叫布莱德的程序员在1999年的时候，开发了一个类似博客一样的社区网站。运营的还不错，有了好几百万用户。你看，互联网公司，几百万用户，感觉可以开始做自己的SSO登录了。可这次布莱德不想做一个跟巨头们一样的东西，毕竟就算做出来估计也打不过。那要不要尝试去中心化的路子？\n中心化 去中心化这个概念随着比特币流行而火爆了起来，其实去中心化这个概念很早就有了。\n中心化的意思就是用户在使用某项服务时，所有的访问请求都需要向同一个主体的服务器地址发送。比如每个微信用户的客户端，都是在跟腾讯公司的服务端交流，A发送给B一条消息，都是A先发送给腾讯服务端，再由腾讯服务端转发给B。A是不能通过其它公司或个人的服务端发送给B消息的。 类似这样，所有用户都围着中间一个服务端，就管这种叫中心化的服务。\n去中心化 就是并没有固定的一个服务商提供服务，任何人只要他愿意的话，都可以作为服务端来给用户服务，用户也可以自由的切换服务端。这种方式显然是不符合已经拥有大量用户的互联网公司的利益，但却迎合了用户和中小企业抱团取暖的需求。 于是布莱德在2005开始了一个叫OpenID的项目开发，这个项目在软件社区中得到了响应，越来越多的人参与进来，之后越来越多的人开始使用。OpenID的目的就是建立一个统一的SSO的方式，而不用在意IDP服务的提供方。用户完全可以自己启动一个IDP的服务，或者选择一个用户信任的IDP服务提供方，在这个IDP服务上完成注册。那么只要SP站点能使用OpenID的方式，用户就可以完成登录了。\nOpenID登录流程 常见的两种登录框架 OAuth 2.0 定义了一个协议，即规定了token 的传输方式，JWT 定义了一种token 格式\nCAS（Central Authentication Service） CAS框架：CAS（Central Authentication Service，即：统一认证服务）是实现SSO单点登录的框架。\nOAuth 2.0 OAuth2是当前授权的行业标准，其重点在于为Web应用程序、桌面应用程序、移动设备以及室内设备的授权流程提供简单的客户端开发方式。它为第三方应用提供对HTTP服务的有限访问，既可以是资源拥有者通过授权允许第三方应用获取HTTP服务，也可以是第三方以自己的名义获取访问权限。\n角色 OAuth2 中主要分为了4种角色\nresource owner 资源所有者，是能够对受保护的资源授予访问权限的实体，可以是一个用户，这时会被称为end-user。 resource server 资源服务器，持有受保护的资源，允许持有访问令牌(access token)的请求访问受保护资源。 client 客户端，持有资源所有者的授权，代表资源所有者对受保护资源进行访问。 authorization server 授权服务器，对资源所有者的授权进行认证，成功后向客户端发送访问令牌。 协议流程\n首先看一张来自官方提供的流程图：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 +--------+ +---------------+ | |--(1)- Authorization Request -\u0026gt;| Resource | | | | Owner | | |\u0026lt;-(2)-- Authorization Grant ---| | | | +---------------+ | | | | +---------------+ | |--(3)-- Authorization Grant --\u0026gt;| Authorization | | Client | | Server | | |\u0026lt;-(4)----- Access Token -------| | | | +---------------+ | | | | +---------------+ | |--(5)----- Access Token ------\u0026gt;| Resource | | | | Server | | |\u0026lt;-(6)--- Protected Resource ---| | +--------+ +---------------+ 这是一张关于 OAuth2 角色的抽象交互流程图，主要包含以下的6个步骤：\n客户端请求资源所有者的授权； 资源所有者同意授权，返回授权许可(Authorization Grant)，这代表了资源所有者的授权凭证； 客户端携带授权许可要求授权服务器进行认证，请求访问令牌； 授权服务器对客户端进行身份验证，并认证授权许可，如果有效，返回访问令牌； 客户端携带访问许可向资源服务器请求受保护资源的访问； 资源服务器验证访问令牌，如果有效，接受访问请求，返回受保护资源。 客户端授权类型 参考文章 https://zhuanlan.zhihu.com/p/105674989 https://www.jianshu.com/p/6ba65cc8e399 https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html ","permalink":"https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E7%99%BB%E5%BD%95%E8%AE%A4%E7%9C%9F%E8%BF%99%E4%BB%B6%E4%BA%8B/","summary":"\u003ch1 id=\"聊聊登录认证这件事\"\u003e聊聊登录认证这件事\u003c/h1\u003e\n\u003cp\u003e这里介绍的是减少登录页面的编写的方法，比如一个公司中有A，B, C 三个系统，对于用户来说希望是我只需要登录（认证）一次就可以访问A，B，C三个系统，而不是进到A系统在A中登录（认证）一次，进到B系统又要在B中登录（认证）一次，进到C系统还要在C中登录（认证）一次，这样一方面会有重复的编码（A，B，C系统的登录页面逻辑），另一方面对用户来说也是非常不友好。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e请区别于对系统中的资源的权限校验\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"关于ldap\"\u003e关于LDAP\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e轻量级目录访问协议 (LDAP) 是一种使应用程序可以快速查询用户信息的协议。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"什么是目录服务\"\u003e\u003cstrong\u003e“什么是目录服务？\u003c/strong\u003e”\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，支持过滤功能。\u003c/li\u003e\n\u003cli\u003e是动态的，灵活的，易扩展的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如：人员组织管理，电话簿，地址簿。\u003c/p\u003e\n\u003ch3 id=\"ldap介绍\"\u003eLDAP介绍\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLDAP（Light Directory Access Portocol），它是基于 X.500 标准的轻量级目录访问协议。\u003c/li\u003e\n\u003cli\u003e目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。\u003c/li\u003e\n\u003cli\u003e目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLDAP目录服务是由目录数据库和一套访问协议组成的系统。\u003c/p\u003e\n\u003ch3 id=\"ldap-登录流程\"\u003eLDAP 登录流程\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/202203131307287.png\" alt=\"image-20220313130546204\"  /\u003e\n\u003c/p\u003e","title":"关于登录认证这件事"},{"content":"Unix 体系结构 内核：从严格意义来说，可将操作系统（内核）定义为一种软件，它控制计算机硬件资源，提供程序运行环境。 shell: 是一个命令行解释器，它读取用户输入，然后执行命令。 函数 系统调用通常提供一种最小的接口，而库函数通常提供比较复杂的功能。\n系统调用：内核的接口。各种版本的Unix实现都提供良好定义、数量有限、直接进入内核的入口点，这些入口点称为系统调用 公用库函数：封装一些功能，库函数可能会包含很多的系统调用 登录 /etc/passwd口令文件中保存这用户的登录相关信息。 由七个以冒号分隔的字段组成：登录名、加密口令、数字用户ID、数字组ID、注释字段、起始目录（/home/sar）、shell程序（/bin/ksh）。 1 2 登录名 加密口令 数字用户ID 数字组ID 注释字段 起始目录 shell程序 root x 0 0 root /root /bin/bash 文件和目录 文件系统 UNIX 文件系统是目录和文件的一种层次结构，所有东西的起点是称为根（root）的目录，这个目录名称是一个字符 \u0026quot;/\u0026quot;。 目录（directory）是一个包含目录项的文件。 文件名 目录中的各个名字称为文件名（filename）。只有斜线（/）和空字符不能出现在文件名中。 /：用来分隔构成路径名的各文件名。 空字符：用来终止一个路径名。 创建新目录的时候会自动创建两个文件名：.(点)和..（点点）。在最高层次的根目录中，点点和点相同 .(点)：指向当前目录 ..（点点）：指向父目录 路径名 由斜线分隔的一个或多个文件名组成的序列（也可以斜线开头）构成路径名（pathname），以斜线开头的路径名称称为绝对路径名（absolute pathname），否则称为相对路径名（relative pathname）。\n文件系统根的名字（/）是一个特殊的绝对路径名，它不含文件名。 工作目录 每个进程都有一个工作目录（working directory），有时称其为当前工作目录（current working directory）。所有的相对路径都从工作目录开始解释\n起始目录 登录时，工作目录设置为起始目录（home directory），该其实目录从口令文件中相应的用户的登录项中取得。\n输入和输出 文件描述符 文件描述符（file descriptor）通常是一个小的非负整数，内核用以标识一个特定进程正在访问的文件。当内核打开一个现有文件或创建一个新文件时，它都返回一个文件描述符。在读、写文件时，可以使用这个文件描述符。\n标准输入、标准输出和标准错误 按照惯例，每当运行一个新程序时，所有的shell都为其打开3个文件描述符，即标准输入（standard input）、标准输出（standard output）、以及标准错误（standard error）。\n不带缓冲的I/O 函数 open、read、write、lseek以及close提供了不带缓冲的I/O。\n标准I/O 标准I/O函数为那些不带缓冲的I/O函数提供了一个带缓冲的接口。使用标准I/O函数无须担心选取最佳的缓冲区大小。\n程序和进程 程序 程序（program）是一个存储在磁盘上某个目录中的可执行文件。内核使用exec函数（7个exec函数之一），将程序读入内存，并执行程序。\n进程和进程ID 程序被执行的实例被称为进程（process）。Unix系统确保每个进程都有一个唯一的数字标识符，称为进程ID（process ID）。进程ID总是一个非负整数\n进程控制 有3个用于进程控制的主要函数：fork、exec、waitpid。(exec函数有七种变体，但经常把它们统称为exec函数。)\nfork：调用fork用于创建一个新进程。 waitpid: 函数返回子进程的终止状态（status变量）。 线程和线程ID 通常，一个进程只有一个控制线程（thread）——某一时刻执行的一组机器指令。\n一个线程内的所有线程共享同一地址空间、文件描述符、栈以及与进程相关的属性。因为它们能访问同一存储区，所有各线程在访问共享数据时需要采用同步措施避免不一致性。 与进程相同，线程也用ID标识。但是，线程ID只在它所属的进程内起作用。一个进程中的线程ID在另一个进程中没有意义。当在一进程中对某个特定线程进行处理时，我们可以使用该线程的ID引用它。 出错处理 ​ 当Unix系统函数出错时候，通常会返回一个负值，而且整形变量errno通常被设置为具有特定信息的值。\n用户标识 用户ID ​ 口令文件登录项中的用户ID（user ID）是一个数值，它向系统标识各个不用的用户\n用户ID为0的用户为根用户（root）或者超级用户（superuser）。 如果一个进程具有超级用户特权，则大多数文件名权限的检查都不再进行。 组ID 组被用于将若干用户集合到项目或部门中去。这种机制允许同组的各个成员之间共享资源（如文件）\n这个组管理可以按照（rbac）角色资源管理去理解\n口令文件登录项也包含用户的组ID（group ID），它是一个数值。\n组ID是由系统管理员在指定用户登录名时分配的。 在口令文件中有多个登录项具有相同的组ID。 附属组ID ​ 除了在口令文件中对一个登录名指定一个组ID外，大多数UNIX系统版本还允许一个用户属于另外一些组。\n信号 ​ 信号用于通知进程发生了某种情况。进程有以下三种信号处理方式。\n忽略信号 按系统默认的方式处理。一般是终止该进程 提供一个函数，信号发生时调用该函数，这种称为捕捉信号。 ","permalink":"https://luenci.com/en/posts/unix%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/","summary":"\u003ch1 id=\"unix-体系结构\"\u003eUnix 体系结构\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/202203291146103.webp\" alt=\"img\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内核：从严格意义来说，可将操作系统（内核）定义为一种软件，它控制计算机硬件资源，提供程序运行环境。\u003c/li\u003e\n\u003cli\u003eshell: 是一个命令行解释器，它读取用户输入，然后执行命令。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"函数\"\u003e函数\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e系统调用通常提供一种最小的接口，而库函数通常提供比较复杂的功能。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e系统调用：内核的接口。各种版本的Unix实现都提供良好定义、数量有限、直接进入内核的入口点，这些入口点称为\u003ccode\u003e系统调用\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e公用库函数：封装一些功能，库函数可能会包含很多的系统调用\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"登录\"\u003e登录\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/etc/passwd\u003c/code\u003e口令文件中保存这用户的登录相关信息。\u003c/li\u003e\n\u003cli\u003e由七个以冒号分隔的字段组成：登录名、加密口令、数字用户ID、数字组ID、注释字段、起始目录（\u003ccode\u003e/home/sar\u003c/code\u003e）、shell程序（\u003ccode\u003e/bin/ksh\u003c/code\u003e）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e登录名 加密口令  数字用户ID  数字组ID   注释字段   起始目录    shell程序\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eroot    x        \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e         \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e        root     /root      /bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"UNIX 系统体系结构"},{"content":"Unix高级编程之文件和目录 文件类型 普通文件（regular file） 这是最常用的文件类型，这种文件包含了某种形式的数据。例如文本文件、二进制可执行文件等等。 不管文件是何种格式，其用途如何，对于 Unix 文件系统对此类文件的管理是完全一致的。 对普通文件内容的解释由处理该文件的应用程序进行。 目录文件（directory file） 这种文件包含了其他文件的名字以及指向与这些文件有关信息的指针。 对于一个目录文件具有读权限的任一进程都可以读取该目录的内容，但只有内核可以直接写目录文件。 块特殊文件（block special file） 这种类型的文件提供对设备（如磁盘）带缓冲的访问，每次访问以固定长度为单位进行。 字符特殊文件 （character special file） 这种类型的文件提供对设备不带缓冲的访问，每次访问的长度可变。系统中的所有设备要么是字符特殊文件，要么是块特殊文件。 FIFO 这种类型的文件用于进程间的通信，有时也称为命名管道（named pipe） 套接字（socket） 这种类型的文件用于进程间的网络通信。 也可用于在一台宿主机上进程之间的非网络通信。 符号链接（symbolic link） 这种类型的文件指向另一个文件。 ","permalink":"https://luenci.com/en/posts/unix%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/","summary":"\u003ch1 id=\"unix高级编程之文件和目录\"\u003eUnix高级编程之文件和目录\u003c/h1\u003e\n\u003ch2 id=\"文件类型\"\u003e文件类型\u003c/h2\u003e\n\u003ch3 id=\"普通文件regular-file\"\u003e普通文件（regular file）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这是最常用的文件类型，这种文件包含了某种形式的数据。例如文本文件、二进制可执行文件等等。\u003c/li\u003e\n\u003cli\u003e不管文件是何种格式，其用途如何，对于 Unix 文件系统对此类文件的管理是完全一致的。\u003c/li\u003e\n\u003cli\u003e对普通文件内容的解释由处理该文件的应用程序进行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"目录文件directory-file\"\u003e目录文件（directory file）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这种文件包含了其他文件的名字以及指向与这些文件有关信息的指针。\u003c/li\u003e\n\u003cli\u003e对于一个目录文件具有读权限的任一进程都可以读取该目录的内容，但只有内核可以直接写目录文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"块特殊文件block-special-file\"\u003e块特殊文件（block special file）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这种类型的文件提供对设备（如磁盘）带缓冲的访问，每次访问以固定长度为单位进行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"字符特殊文件-character-special-file\"\u003e字符特殊文件 （character special file）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这种类型的文件提供对设备不带缓冲的访问，每次访问的长度可变。系统中的所有设备要么是字符特殊文件，要么是块特殊文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"fifo\"\u003eFIFO\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这种类型的文件用于进程间的通信，有时也称为命名管道（named pipe）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"套接字socket\"\u003e套接字（socket）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这种类型的文件用于进程间的网络通信。\u003c/li\u003e\n\u003cli\u003e也可用于在一台宿主机上进程之间的非网络通信。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"符号链接symbolic-link\"\u003e符号链接（symbolic link）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这种类型的文件指向另一个文件。\u003c/li\u003e\n\u003c/ul\u003e","title":"UNIX 环境高级编程 - 文件和目录"},{"content":"Runtime：Golang 处理系统调用阻塞方式 当一个Goroutine由于执行 系统调用 而阻塞时，会将M从GPM中分离出去，然后P再找一个G和M重新执行，避免浪费CPU资源。\n前言 什么是 runtime ​ runtime 描述了程序运行时候执行的软件/指令， 在每种语言有着不同的实现。可大可小，在 C 中，runtime 是库代码， 等同于 C runtime library，一系列 C 程序运行所需的函数，在Java中，runtime 还提供了 Java 程序运行所需的虚拟机等。\n​ 总而言之，runtime 是一个通用抽象的术语，指的是计算机程序运行的时候所需要的一切代码库，框架，平台等。\nGo中的 runtime 在 Go 中， 有一个 runtime 库，其实现了垃圾回收，并发控制， 栈管理以及其他一些 Go 语言的关键特性。 runtime 库是每个 Go 程序的一部分，也就是说编译 Go 代码为机器代码时也会将其也编译进来。所以 Go 官方将其定位偏向类似于 C 语言中的库。Go 中的 runtime 不像 Java runtime （JRE， java runtime envirement ) 一样，jre 还会提供虚拟机， Java 程序要在 JRE 下 才能运行。\n所以在 Go 语言中， runtime 只是提供支持语言特性的库的名称，也就是 Go 程序执行时候使用的库。\nP的状态切换 ​ 从上图我们可以看出 P 执行系统调用时会执行 entersyscall() 函数（另还有一个类似的阻塞函数 entersyscallblock() ，注意两者的区别）。当系统调用执行完毕切换回去会执行 exitsyscall() 函数，下面我们看一下这两个函数的实现。\n进入系统调用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Standard syscall entry used by the go syscall library and normal cgo calls. // // This is exported via linkname to assembly in the syscall package. // //go:nosplit //go:linkname entersyscall func entersyscall() { reentersyscall(getcallerpc(), getcallersp()) } 当通过Golang标准库 syscall 或者 cgo 调用时会执行 entersyscall() 函数，并通过 go:linkname 方式导出为标准包。此函数只是对 reentersyscall() 函数的封装，我们看下这个函数实现了什么。\n函数注释比较多，这里只帖子重点的一部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // The goroutine g is about to enter a system call. // Record that it\u0026#39;s not using the cpu anymore. // This is called only from the go syscall library and cgocall, // not from the low-level system calls used by the runtime. // // Entersyscall cannot split the stack: the gosave must // make g-\u0026gt;sched refer to the caller\u0026#39;s stack segment, because // entersyscall is going to return immediately after. // // Nothing entersyscall calls can split the stack either. // We cannot safely move the stack during an active call to syscall, // because we do not know which of the uintptr arguments are // really pointers (back into the stack). // In practice, this means that we make the fast path run through // entersyscall doing no-split things, and the slow path has to use systemstack // to run bigger things on the system stack. // // reentersyscall is the entry point used by cgo callbacks, where explicitly // saved SP and PC are restored. This is needed when exitsyscall will be called // from a function further up in the call stack than the parent, as g-\u0026gt;syscallsp // must always point to a valid stack frame. entersyscall below is the normal // entry point for syscalls, which obtains the SP and PC from the caller. 从注释我们得知以下信息：\n调用此函数，goroutine 即将进入系统调用，将不会使用P。此函数只能通过标准的 syscall 库和 cgocall 调用 entersyscall() 函数是禁止栈分裂的， gosave() 函数必须将 g-\u0026gt;sched 指向它的调用者的栈段，这是因为 entersyscall() 函数返回时要使用（不清楚的话，可以点击这里） reentersyscall() 函数是cgo的回调执行函数，它保存了已经恢复的 SP/PC 。 reentersyscall() 是不允许分裂的 go:nosplit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 //go:nosplit func reentersyscall(pc, sp uintptr) { _g_ := getg() // Disable preemption because during this function g is in Gsyscall status, // but can have inconsistent g-\u0026gt;sched, do not let GC observe it. _g_.m.locks++ // Entersyscall must not call any function that might split/grow the stack. // (See details in comment above.) // Catch calls that might, by replacing the stack guard with something that // will trip any stack check and leaving a flag to tell newstack to die. _g_.stackguard0 = stackPreempt _g_.throwsplit = true // Leave SP around for GC and traceback. // 更新 g.sched 相关信息，后期需要读取这些信息 save(pc, sp) // 记录g的系统调用SP/PC _g_.syscallsp = sp _g_.syscallpc = pc // 设置g的状态为 _Gsyscall casgstatus(_g_, _Grunning, _Gsyscall) if _g_.syscallsp \u0026lt; _g_.stack.lo || _g_.stack.hi \u0026lt; _g_.syscallsp { systemstack(func() { print(\u0026#34;entersyscall inconsistent \u0026#34;, hex(_g_.syscallsp), \u0026#34; [\u0026#34;, hex(_g_.stack.lo), \u0026#34;,\u0026#34;, hex(_g_.stack.hi), \u0026#34;]n\u0026#34;) throw(\u0026#34;entersyscall\u0026#34;) }) } if trace.enabled { systemstack(traceGoSysCall) // systemstack itself clobbers g.sched.{pc,sp} and we might // need them later when the G is genuinely blocked in a // syscall save(pc, sp) } if atomic.Load(\u0026amp;sched.sysmonwait) != 0 { systemstack(entersyscall_sysmon) save(pc, sp) } if _g_.m.p.ptr().runSafePointFn != 0 { // runSafePointFn may stack split if run on this stack systemstack(runSafePointFn) save(pc, sp) } // 更新与当前g关联P的执行调用系统调用次数 _g_.m.syscalltick = _g_.m.p.ptr().syscalltick _g_.sysblocktraced = true // 设置当前 m 所关联的 P 为下次优先使用的P（m.oldp = p), 实现亲和性 pp := _g_.m.p.ptr() pp.m = 0 _g_.m.oldp.set(pp) // 解除 m 与 p 的关联 _g_.m.p = 0 // 修改P的状态为 _Psyscall atomic.Store(\u0026amp;pp.status, _Psyscall) if sched.gcwaiting != 0 { systemstack(entersyscall_gcwait) save(pc, sp) } _g_.m.locks-- } 主要有以下工作：\n在开始前需要进行 _g_.m.locks++, 以防止GC，函数执行结束时再减少一个锁 要进行禁止栈分裂 通过 save() 函数将当前调度需要的信息暂存到 _g_.sched 修改 G 和 P 的状态为系统调用状态 将本次 m 绑定的 P 保存到 _g_.oldp 字段中，以备系统调用完毕后可以优先使用当前P继续执行 退出系统调用 ​ 当一个goroutine系统调用结束后，需要再次将GM重新与P关联继续执行，Golang 为了亲和性，会优先与上次执行的P绑定，如果上次关联的 P 正在被使用，这时再考虑重新找一个新的P 关联。\n1 2 3 4 5 6 7 8 9 10 11 12 13 // The goroutine g exited its system call. // Arrange for it to run on a cpu again. // This is called only from the go syscall library, not // from the low-level system calls used by the runtime. // // Write barriers are not allowed because our P may have been stolen. // // This is exported via linkname to assembly in the syscall package. // //go:nosplit //go:nowritebarrierrec //go:linkname exitsyscall func exitsyscall() {} 同 reentersyscall() 函数一样，exitsyscall() 函数也是通过调用go的标准系统调用库实现的，而不是使用底层的runtime调用方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 func exitsyscall() { _g_ := getg() _g_.m.locks++ // see comment in entersyscall if getcallersp() \u0026gt; _g_.syscallsp { throw(\u0026#34;exitsyscall: syscall frame is no longer valid\u0026#34;) } // 重置g阻塞时间为0 _g_.waitsince = 0 // 取出上次关联的P，优先使用 oldp := _g_.m.oldp.ptr() _g_.m.oldp = 0 // 与原来的P进行关联 if exitsyscallfast(oldp) { if trace.enabled { if oldp != _g_.m.p.ptr() || _g_.m.syscalltick != _g_.m.p.ptr().syscalltick { systemstack(traceGoStart) } } // There\u0026#39;s a cpu for us, so we can run. _g_.m.p.ptr().syscalltick++ // We need to cas the status and scan before resuming... // G 的状态恢复为 _Grunning casgstatus(_g_, _Gsyscall, _Grunning) // Garbage collector isn\u0026#39;t running (since we are), // so okay to clear syscallsp. _g_.syscallsp = 0 _g_.m.locks-- if _g_.preempt { // restore the preemption request in case we\u0026#39;ve cleared it in newstack _g_.stackguard0 = stackPreempt } else { // otherwise restore the real _StackGuard, we\u0026#39;ve spoiled it in entersyscall/entersyscallblock _g_.stackguard0 = _g_.stack.lo + _StackGuard } _g_.throwsplit = false if sched.disable.user \u0026amp;\u0026amp; !schedEnabled(_g_) { // Scheduling of this goroutine is disabled. Gosched() } return } _g_.sysexitticks = 0 if trace.enabled { // Wait till traceGoSysBlock event is emitted. // This ensures consistency of the trace (the goroutine is started after it is blocked). for oldp != nil \u0026amp;\u0026amp; oldp.syscalltick == _g_.m.syscalltick { osyield() } // We can\u0026#39;t trace syscall exit right now because we don\u0026#39;t have a P. // Tracing code can invoke write barriers that cannot run without a P. // So instead we remember the syscall exit time and emit the event // in execute when we have a P. _g_.sysexitticks = cputicks() } _g_.m.locks-- // Call the scheduler. // 在g0上调用 exitsyscall0() 函数, 执行流程到这里的话，说明并没有找到空闲的P，此时需要将G和M进行解绑，分别入相应的队列等待下次执行 mcall(exitsyscall0) // Scheduler returned, so we\u0026#39;re allowed to run now. // Delete the syscallsp information that we left for // the garbage collector during the system call. // Must wait until now because until gosched returns // we don\u0026#39;t know for sure that the garbage collector // is not running. // 以下信息必须等待调度器返回才可以重置，gc考虑 _g_.syscallsp = 0 _g_.m.p.ptr().syscalltick++ _g_.throwsplit = false } 当系统调用返回时，通过函数 exitsyscallfast() 优先与上次关联的 oldp 进行关联，否则重新获取一个新的P。如果重新获取新P也失败的话，这时候就需要将GM进行解绑，分别入等待执行队列等待下次的调度执行。\n有P关联 上面我们说过与P关联时会优先使用上次使用的P，这里我们先看下与oldp 绑定的逻辑：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 //go:nosplit func exitsyscallfast(oldp *p) bool { _g_ := getg() // Freezetheworld sets sweightwait but does not retake P\u0026#39;s. if sched.sweightwait == freezeSweightWait { return false } // Try to re-acquire the last P. // 尝试与上次的P关联 if oldp != nil \u0026amp;\u0026amp; oldp.status == _Psyscall \u0026amp;\u0026amp; atomic.Cas(\u0026amp;oldp.status, _Psyscall, _Pidle) { // There\u0026#39;s a cpu for us, so we can run. wirep(oldp) exitsyscallfast_reacquired() return true } // Try to get any other idle P. if sched.pidle != 0 { var ok bool systemstack(func() { // 获取另一个P ok = exitsyscallfast_pidle() if ok \u0026amp;\u0026amp; trace.enabled { if oldp != nil { // Wait till traceGoSysBlock event is emitted. // This ensures consistency of the trace (the goroutine is started after it is blocked). for oldp.syscalltick == _g_.m.syscalltick { osyield() } } traceGoSysExit(0) } }) if ok { return true } } return false } 可以看到这里优先通过调用 wirep() 函数实现与上次使用的P关联。如果关联失败，再去看调度器里是否有空闲的P可以用（sched.pidle != 0）。如果有的话，则通过 exitsyscallfast_pidle() 函数里的 pidleget() 重新获取一个新的P进行关联。\n1 2 3 4 5 6 7 8 9 10 11 12 // Try get a p from _Pidle list. // Sched must be locked. // May run during STW, so write barriers are not allowed. //go:nowritebarrierrec func pidleget() *p { _p_ := sched.pidle.ptr() if _p_ != nil { sched.pidle = _p_.link atomic.Xadd(\u0026amp;sched.npidle, -1) // TODO: fast atomic } return _p_ } 无P关联 如果所有的 P 都处于繁忙状态，可能无法获取空闲的P，这时就不得不先将GM解除关联，然后放入各自的等待队列里，等待下次的调度。实现函数为 exitsyscall0(), 此函数需要在系统栈上执行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // exitsyscall slow path on g0. // Failed to acquire P, enqueue gp as runnable. // //go:nowritebarrierrec func exitsyscall0(gp *g) { _g_ := getg() // G 状态为等待执行状态 casgstatus(gp, _Gsyscall, _Grunnable) // 解除m与G的关联 dropg() lock(\u0026amp;sched.lock) var _p_ *p if schedEnabled(_g_) { _p_ = pidleget() } if _p_ == nil { // 将g 放放全局运行队列 globrunqput(gp) } else if atomic.Load(\u0026amp;sched.sysmonwait) != 0 { atomic.Store(\u0026amp;sched.sysmonwait, 0) notewakeup(\u0026amp;sched.sysmonnote) } unlock(\u0026amp;sched.lock) // 这里再检查一次是否有p可用，有的话，正好重新再获取一个G立即执行 if _p_ != nil { acquirep(_p_) execute(gp, false) // Never returns. } if _g_.m.lockedg != 0 { // Wait until another thread schedules gp and so m again. sweightlockedm() execute(gp, false) // Never returns. } // 停止M sweightm() // 重新调度 schedule() // Never returns. } sweightm() 函数会停止当前m执行，直到有新的G需要执行。m停止后被调用 mput() 函数将当前m放在一下 sched.midle 空闲列表里。\n总结 当进入系统调用时，先记录下当前 G 的调度信息，包括当前使用的 P 退出系统调用时，优先使用上次使用的P；如果原来的P已被使用，则重新找一个新的P；如果无P可用，则先当前的GM关系先解除，放入各自的待执行队列，等待下次调度再执行。这里的执行队列为全局 sched 。 参考链接 https://blog.haohtml.com/archives/23551 https://studygolang.com/articles/28812#:~:text=Go%E4%B8%AD%E7%9A%84runtime,C%20%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%BA%93%E3%80%82 ","permalink":"https://luenci.com/en/posts/runtimegolang-%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E9%98%BB%E5%A1%9E%E6%96%B9%E5%BC%8F/","summary":"\u003ch1 id=\"runtimegolang-处理系统调用阻塞方式\"\u003eRuntime：Golang 处理系统调用阻塞方式\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当一个Goroutine由于执行 \u003ccode\u003e系统调用\u003c/code\u003e 而阻塞时，会将M从GPM中分离出去，然后P再找一个G和M重新执行，避免浪费CPU资源。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003ch2 id=\"什么是-runtime\"\u003e什么是 runtime\u003c/h2\u003e\n\u003cp\u003e​    runtime 描述了\u003cstrong\u003e程序运行时候\u003c/strong\u003e执行的软件/指令， 在每种语言有着不同的实现。可大可小，在 C 中，runtime 是库代码， 等同于\u003ccode\u003e C runtime library\u003c/code\u003e，一系列 \u003ccode\u003eC \u003c/code\u003e程序运行所需的函数，在\u003ccode\u003eJava\u003c/code\u003e中，\u003ccode\u003eruntime\u003c/code\u003e 还提供了 \u003ccode\u003eJava\u003c/code\u003e 程序运行所需的虚拟机等。\u003c/p\u003e\n\u003cp\u003e​    总而言之，\u003cstrong\u003eruntime 是一个通用抽象的术语，指的是计算机程序运行的时候所需要的一切代码库，框架，平台等\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"go中的-runtime\"\u003eGo中的 runtime\u003c/h2\u003e\n\u003cp\u003e在 Go 中， 有一个 runtime 库，其实现了垃圾回收，并发控制， 栈管理以及其他一些 Go 语言的关键特性。 runtime 库是每个 Go 程序的一部分，也就是说编译 Go 代码为机器代码时也会将其也编译进来。所以 Go 官方将其定位偏向类似于 C 语言中的库。Go 中的 runtime 不像 Java runtime （JRE， java runtime envirement ) 一样，jre 还会提供虚拟机， Java 程序要在 JRE 下 才能运行。\u003c/p\u003e\n\u003cp\u003e所以在 Go 语言中， runtime 只是提供支持语言特性的库的名称，也就是 Go 程序执行时候使用的库。\u003c/p\u003e\n\u003ch2 id=\"p的状态切换\"\u003eP的状态切换\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/202205201526793.png\" alt=\"P的状态切换\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e​    从上图我们可以看出 \u003ccode\u003eP\u003c/code\u003e 执行系统调用时会执行 \u003ccode\u003eentersyscall()\u003c/code\u003e 函数（另还有一个类似的阻塞函数 \u003ca href=\"https://github.com/golang/go/blob/go1.15.6/src/runtime/proc.go#L3171-L3212\"\u003e\u003ccode\u003eentersyscallblock()\u003c/code\u003e\u003c/a\u003e ，注意两者的区别）。当系统调用执行完毕切换回去会执行 \u003ca href=\"https://github.com/golang/go/blob/go1.15.6/src/runtime/proc.go#L3222-L3305\"\u003e\u003ccode\u003eexitsyscall()\u003c/code\u003e\u003c/a\u003e 函数，下面我们看一下这两个函数的实现。\u003c/p\u003e","title":"Runtime:Golang 处理系统调用阻塞方式"},{"content":"聊聊分布式事务 前言 ​ 随着业务的快速发展、业务复杂度越来越高，传统单体应用逐渐暴露出了一些问题，例如开发效率低、可维护性差、架构扩展性差、部署不灵活、健壮性差等等。\n​ 微服务架构是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。每个微服务仅关注于完成一件任务并很好地完成该任务。\n微服务架构的特点 微服务架构的优势非常明显，在近些年迅猛发展。\n将复杂的业务拆分成多个小的业务，能够达到更好的业务复用，有利于人员组织分工 服务独立部署，独立扩容，每个服务的修改和部署对其他服务没有影响 每个服务可以根据业务场景选取合适的编程语言和数据库 微服务有以上的优势，但是微服务也带来不少的新问题，例如：\n服务数量众多，其测试、部署、监控等都变的更加困难。 单体应用拆分为分布式系统后，进程间的通讯机制和故障处理措施变的更加复杂 系统微服务化后，原先是一个服务内部的本地数据库事务，被拆到了多个服务，需要在分布式环境下保证事务的一致性 上述的各项问题中，1、2都可以通过近几年涌现的各项微服务技术解决，例如Kubernetes提供了服务发现、服务治理等。\n因此分布式事务已经成为微服务落地最大的阻碍，也是最具挑战性的一个技术难题。\nCAP 理论 一个分布式系统最多只能同时满足 一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。\n分布式事务方案 分布式事务模式常见的有XA、TCC、SAGA、可靠消息。\n两阶段提交XA ​ XA 是由X/Open组织提出的分布式事务的规范，XA规范主要定义了（全局）事务管理器（TM）和（局部）资源管理器（RM）之间的接口。本地的数据库如MySQL在XA中扮演的是RM角色。\n​ XA一共分为两阶段：\n第一阶段（prepare）：即所有的参与者RM准备执行事务并锁住需要的资源。参与者ready时，向TM报告已准备就绪。\n第二阶段（commit/rollback）：当事务管理者（TM）确认所有参与者（RM）都ready后，向所有参与者发送commit命令。\n目前主流的数据库基本都支持XA事务，包括MySQL、Oracle、SQLServer、PostgreSQL。\n一个成功完成的XA事务时序图如下：\nTCC事务方案 ​ TCC方案其实是XA提交的一种改进。其将整个业务逻辑的每个分支显式的分成了Try、Confirm、Cancel三个操作。Try部分完成业务的准备工作，confirm部分完成业务的提交，cancel部分完成事务的回滚。\n​ 事务开始时，业务应用会向事务协调器注册启动事务。之后业务应用会调用所有服务的try接口，完成一阶段准备。之后事务协调器会根据try接口返回情况，决定调用confirm接口或者cancel接口。如果接口调用失败，会进行重试。\n一个成功完成的TCC事务时序图如下：\nSAGA事务方案 ​ Saga和TCC一样，也是最终一致性事务、柔性事务。Saga的本质就是把一个长事务分隔成一个个小的事务，每个事务都包含一个执行模块和补偿模块。\n​ Saga没有try，直接提交事务，可能出现脏读的情况，在某些对一致性要求较高的场景下，是不可接受的。\n​ 在启动一个Saga事务时，事务管理器会告诉第一个Saga参与者，也就是子事务，去执行本地事务。事务完成之后Saga的会按照执行顺序调用Saga的下一个参与的子事务。这个过程会一直持续到Saga事务执行完毕。\n如果在执行子事务的过程中遇到子事务对应的本地事务失败，则Saga会按照相反的顺序执行补偿事务。\n一个成功完成的SAGA事务时序图如下：\n可靠消息 ​ 消息一致性方案是通过消息中间件保证上下游应用数据操作的一致性。基本思路是将本地操作和发送消息放在一个本地事务中，保证本地操作和消息发送要么两者都成功或者都失败。下游应用向消息系统订阅该消息，收到消息后执行相应操作。\nRocketMQ 提供了典型的可靠消息接口，可以参考。\n分布式事务开源项目 ​ 当前的分布式事务领域，有java语言的开源项目，以seata为代表。在非Java领域，Go语言的 DTM 是代表项目。 DTM 支持XA、TCC、SAGA、可靠消息，架构图如下：\n图中的各角色与XA模型中的角色模型一致，分别解释如下：\nAP应用程序（定义和提交事务，当前支持Go语言，即将支持Nodejs、Python、PHP、Rust等） RM资源管理器（负责管理本地事务，不限语言，只要提供了http相关的接口即可） TM事务管理器（DTM，协调全局事务，进行提交以及回滚） 在上述的架构图中，AP通过DTM提供的分布式事务接口，与RM和TM交互，对现有的微服务，侵入很小。\n另外在实际的业务中，AP和RM角色可能会有重叠，例如TCC模式下，AP可能有自己的本地事务，也会注册并调用其他事务分支。\n","permalink":"https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/","summary":"\u003ch1 id=\"聊聊分布式事务\"\u003e聊聊分布式事务\u003c/h1\u003e\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e​    随着业务的快速发展、业务复杂度越来越高，传统单体应用逐渐暴露出了一些问题，例如开发效率低、可维护性差、架构扩展性差、部署不灵活、健壮性差等等。\u003c/p\u003e\n\u003cp\u003e​    微服务架构是一个分布式的系统，按业务进行划分为独立的服务单元，解决单体系统的不足，同时也满足越来越复杂的业务需求。每个微服务仅关注于完成一件任务并很好地完成该任务。\u003c/p\u003e\n\u003ch2 id=\"微服务架构的特点\"\u003e微服务架构的特点\u003c/h2\u003e\n\u003cp\u003e微服务架构的优势非常明显，在近些年迅猛发展。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将复杂的业务拆分成多个小的业务，能够达到更好的业务复用，有利于人员组织分工\u003c/li\u003e\n\u003cli\u003e服务独立部署，独立扩容，每个服务的修改和部署对其他服务没有影响\u003c/li\u003e\n\u003cli\u003e每个服务可以根据业务场景选取合适的编程语言和数据库\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e微服务有以上的优势，但是微服务也带来不少的新问题，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务数量众多，其测试、部署、监控等都变的更加困难。\u003c/li\u003e\n\u003cli\u003e单体应用拆分为分布式系统后，进程间的通讯机制和故障处理措施变的更加复杂\u003c/li\u003e\n\u003cli\u003e系统微服务化后，原先是一个服务内部的本地数据库事务，被拆到了多个服务，需要在分布式环境下保证事务的一致性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e上述的各项问题中，1、2都可以通过近几年涌现的各项微服务技术解决，例如\u003ccode\u003eKubernetes\u003c/code\u003e提供了服务发现、服务治理等。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e因此分布式事务已经成为微服务落地最大的阻碍，也是最具挑战性的一个技术难题。\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"cap-理论\"\u003eCAP 理论\u003c/h3\u003e\n\u003cp\u003e一个分布式系统最多只能同时满足 \u003ccode\u003e一致性（Consistency）\u003c/code\u003e、\u003ccode\u003e可用性（Availability）\u003c/code\u003e和\u003ccode\u003e分区容错性（Partition tolerance）\u003c/code\u003e这三项中的两项。\u003c/p\u003e\n\u003ch2 id=\"分布式事务方案\"\u003e分布式事务方案\u003c/h2\u003e\n\u003cp\u003e分布式事务模式常见的有\u003ccode\u003eXA\u003c/code\u003e、\u003ccode\u003eTCC\u003c/code\u003e、\u003ccode\u003eSAGA\u003c/code\u003e、\u003ccode\u003e可靠消息\u003c/code\u003e。\u003c/p\u003e","title":"聊聊分布式事务"},{"content":"Golang 并发编程最佳实践 Goroutine 定义 ​ Goroutines 是与其他函数或方法同时运行的函数或方法。Goroutines 可以被认为是轻量级线程。与线程相比，创建 Goroutine 的成本很小。因此，Go 应用程序通常会同时运行数千个 Goroutine。\nGoroutines 相对于线程的优势 与线程相比，Goroutines 非常便宜。它们的堆栈大小只有几 kb，堆栈可以根据应用程序的需要增长和缩小，而在线程的情况下，堆栈大小必须指定并固定。 Goroutine 被多路复用到更少数量的 OS 线程。一个包含数千个 Goroutine 的程序中可能只有一个线程。如果该线程中的任何 Goroutine 阻塞等待用户输入，则创建另一个 OS 线程并将剩余的 Goroutine 移动到新的 OS 线程。所有这些都由运行时处理，我们作为程序员从这些复杂的细节中抽象出来，并获得了一个干净的 API 来处理并发性。 Goroutines 使用通道进行通信。通道通过设计防止在使用 Goroutine 访问共享内存时发生竞争条件。通道可以被认为是 Goroutine 进行通信的管道。 三种常见使用 通过sync. WaitGroup的三个方法 Add(), Done(), Wait() 来实现协程的控制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func A(i int) { fmt.Println(\u0026#34;我是A\u0026#34;, i) } func main() { var wg sync.WaitGroup fmt.Println(\u0026#34;我是main\u0026#34;) wg.Add(1) go func(i int) { defer wg.Done() A(i) }(1) wg.Wait() fmt.Println(\u0026#34;执行完了\u0026#34;) } 通过带buffe的channel来控制 无缓冲 channel，发送者会阻塞直到接收者接收了发送的值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;fmt\u0026#34; ) func A(i int) { fmt.Println(\u0026#34;我是A\u0026#34;, i) } func main() { ch := make(chan bool, 1) fmt.Println(\u0026#34;我是main\u0026#34;) go func(i int, chp chan\u0026lt;- bool) { defer close(chp) A(i) fmt.Println(\u0026#34;finish\u0026#34;) chp \u0026lt;- true }(1, ch) fmt.Println(\u0026#34;wait\u0026#34;) \u0026lt;-ch fmt.Println(\u0026#34;执行完了\u0026#34;) } 通过sync.Cond sync.Cond 条件变量用来协调想要访问共享资源的那些 goroutine，当共享资源的状态发生变化的时候，它可以用来通知被互斥锁阻塞的 goroutine。\ncond.L.Lock()和cond.L.Unlock()：也可以使用lock.Lock()和lock.Unlock()，完全一样，因为是指针转递 cond.Wait()：Unlock()-\u0026gt;*阻塞等待通知(即等待Signal()或Broadcast()的通知)-\u0026gt;收到通知*-\u0026gt;Lock() cond.Signal()：Signal 唤醒一个协程，若没有Wait()，也不会报错。Signal()通知的顺序是根据原来加入通知列表(Wait())的先入先出 cond.Broadcast(): 通知所有Wait()了的，若没有Wait()，也不会报错 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 var done = false func read(name string, c *sync.Cond) { c.L.Lock() for !done { c.Wait() } log.Println(name, \u0026#34;starts reading\u0026#34;) c.L.Unlock() } func write(name string, c *sync.Cond) { log.Println(name, \u0026#34;starts writing\u0026#34;) time.Sleep(time.Second) c.L.Lock() done = true c.L.Unlock() log.Println(name, \u0026#34;wakes all\u0026#34;) c.Broadcast() } func main() { cond := sync.NewCond(\u0026amp;sync.Mutex{}) go read(\u0026#34;reader1\u0026#34;, cond) go read(\u0026#34;reader2\u0026#34;, cond) go read(\u0026#34;reader3\u0026#34;, cond) write(\u0026#34;writer\u0026#34;, cond) time.Sleep(time.Second * 3) } done 即互斥锁需要保护的条件变量。 read() 调用 Wait() 等待通知，直到 done 为 true。 write() 接收数据，接收完成后，将 done 置为 true，调用 Broadcast() 通知所有等待的协程。 write() 中的暂停了 1s，一方面是模拟耗时，另一方面是确保前面的 3 个 read 协程都执行到 Wait()，处于等待状态。main 函数最后暂停了 3s，确保所有操作执行完毕。 使用案例 从 Channel 发送和接收值 ​ 我们创建一个 c int 通道并从生成器函数中返回它。在匿名 goroutine 中运行的 for 循环将值写入通道 c。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( \u0026#34;fmt\u0026#34; ) func main() { c := generator() receiver(c) } func receiver(c \u0026lt;-chan int) { for v := range c { fmt.Println(v) } } func generator() \u0026lt;-chan int { c := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { c \u0026lt;- i } close(c) }() return c } 读取和写入斐波那契数列到通道 ​ 主函数有两个无缓冲通道 ch 和 quit。在 fibonacci 函数内部，select 语句会阻塞，直到其中一个 case 准备好。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \u0026#34;fmt\u0026#34; ) func fibonacci(ch chan int, quit chan bool) { x, y := 0, 1 for { select { case ch \u0026lt;- x: // write to channel ch x, y = y, x+y case \u0026lt;-quit: fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { ch := make(chan int) quit := make(chan bool) n := 10 go func(n int) { for i := 0; i \u0026lt; n; i++ { fmt.Println(\u0026lt;-ch) // read from channel ch } quit \u0026lt;- false }(n) fibonacci(ch, quit) } 生产消费者模型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;runtime/pprof\u0026#34; ) type Consumer struct { msgs *chan int } // NewConsumer creates a Consumer func NewConsumer(msgs *chan int) *Consumer { return \u0026amp;Consumer{msgs: msgs} } // consume reads the msgs channel func (c *Consumer) consume() { fmt.Println(\u0026#34;consume: Started\u0026#34;) for { msg := \u0026lt;-*c.msgs fmt.Println(\u0026#34;consume: Received:\u0026#34;, msg) } } // Producer definition type Producer struct { msgs *chan int done *chan bool } // NewProducer creates a Producer func NewProducer(msgs *chan int, done *chan bool) *Producer { return \u0026amp;Producer{msgs: msgs, done: done} } // produce creates and sends the message through msgs channel func (p *Producer) produce(max int) { fmt.Println(\u0026#34;produce: Started\u0026#34;) for i := 0; i \u0026lt; max; i++ { fmt.Println(\u0026#34;produce: Sending \u0026#34;, i) *p.msgs \u0026lt;- i } *p.done \u0026lt;- true // signal when done fmt.Println(\u0026#34;produce: Done\u0026#34;) } func main() { // profile flags cpuprofile := flag.String(\u0026#34;cpuprofile\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;write cpu profile to `file`\u0026#34;) memprofile := flag.String(\u0026#34;memprofile\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;write memory profile to `file`\u0026#34;) // get the maximum number of messages from flags max := flag.Int(\u0026#34;n\u0026#34;, 5, \u0026#34;defines the number of messages\u0026#34;) flag.Parse() // utilize the max num of cores available runtime.GOMAXPROCS(runtime.NumCPU()) // CPU Profile if *cpuprofile != \u0026#34;\u0026#34; { f, err := os.Create(*cpuprofile) if err != nil { log.Fatal(\u0026#34;could not create CPU profile: \u0026#34;, err) } if err := pprof.StartCPUProfile(f); err != nil { log.Fatal(\u0026#34;could not start CPU profile: \u0026#34;, err) } defer pprof.SweightCPUProfile() } var msgs = make(chan int) // channel to send messages var done = make(chan bool) // channel to control when production is done // Start a goroutine for Produce.produce go NewProducer(\u0026amp;msgs, \u0026amp;done).produce(*max) // Start a goroutine for Consumer.consume go NewConsumer(\u0026amp;msgs).consume() // Finish the program when the production is done \u0026lt;-done // Memory Profile if *memprofile != \u0026#34;\u0026#34; { f, err := os.Create(*memprofile) if err != nil { log.Fatal(\u0026#34;could not create memory profile: \u0026#34;, err) } runtime.GC() // get up-to-date statistics if err := pprof.WriteHeapProfile(f); err != nil { log.Fatal(\u0026#34;could not write memory profile: \u0026#34;, err) } f.Close() } } Generator 模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) // boring is a function that returns a channel to communicate with it. // \u0026lt;-chan string means receives-only channel of string. func boring(msg string) \u0026lt;-chan string { c := make(chan string) // we launch goroutine inside a function // that sends the data to channel go func() { // The for loop simulate the infinite sender. for i := 0; i \u0026lt; 10; i++ { c \u0026lt;- fmt.Sprintf(\u0026#34;%s %d\u0026#34;, msg, i) time.Sleep(time.Duration(rand.Intn(1e3)) * time.Millisecond) } // The sender should close the channel close(c) }() return c // return a channel to caller. } func main() { joe := boring(\u0026#34;Joe\u0026#34;) ahn := boring(\u0026#34;Ahn\u0026#34;) // This loop yields 2 channels in sequence for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-joe) fmt.Println(\u0026lt;-ahn) } // or we can simply use the for range // for msg := range joe { // fmt.Println(msg) // } fmt.Println(\u0026#34;You\u0026#39;re both boring. I\u0026#39;m leaving\u0026#34;) } google 3.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) type Result string type Search func(query string) Result var ( Web1 = fakeSearch(\u0026#34;web1\u0026#34;) Web2 = fakeSearch(\u0026#34;web2\u0026#34;) Image1 = fakeSearch(\u0026#34;image1\u0026#34;) Image2 = fakeSearch(\u0026#34;image2\u0026#34;) Video1 = fakeSearch(\u0026#34;video1\u0026#34;) Video2 = fakeSearch(\u0026#34;video2\u0026#34;) ) func fakeSearch(kind string) Search { return func(query string) Result { time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond) return Result(fmt.Sprintf(\u0026#34;%s result for %q\\n\u0026#34;, kind, query)) } } // How do we avoid discarding result from the slow server. // We duplicates to many instance, and perform parallel request. func First(query string, replicas ...Search) Result { c := make(chan Result) for i := range replicas { go func(idx int) { c \u0026lt;- replicas[idx](query) }(i) } // the magic is here. First function always waits for 1 time after receiving the result return \u0026lt;-c } // I don\u0026#39;t want to wait for slow server func Google(query string) []Result { c := make(chan Result) // each search performs in a goroutine go func() { c \u0026lt;- First(query, Web1, Web2) }() go func() { c \u0026lt;- First(query, Image1, Image2) }() go func() { c \u0026lt;- First(query, Video1, Video2) }() var results []Result // the global timeout for 3 queries // it means after 50ms, it ignores the result from the server that taking response greater than 50ms timeout := time.After(50 * time.Millisecond) for i := 0; i \u0026lt; 3; i++ { select { case r := \u0026lt;-c: results = append(results, r) // this line ignore the slow server. case \u0026lt;-timeout: fmt.Println(\u0026#34;timeout\u0026#34;) return results } } return results } func main() { rand.Seed(time.Now().UnixNano()) start := time.Now() results := Google(\u0026#34;golang\u0026#34;) elapsed := time.Since(start) fmt.Println(results) fmt.Println(elapsed) } work-pool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 // Credit: // https://gobyexample.com/worker-pools // Worker pool benefits: // - Efficiency because it distributes the work across threads. // - Flow control: Limit work in flight // Disadvantage of worker: // Lifetimes complexity: clean up and idle worker // Principles: // Start goroutines whenever you have the concurrent work to do. // The goroutine should exit as soon as posible the work is done. This helps us // to clean up the resources and manage the lifetimes correctly. package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) func worker(id int, jobs \u0026lt;-chan int, results chan\u0026lt;- int) { for j := range jobs { fmt.Println(\u0026#34;worker\u0026#34;, id, \u0026#34;started job\u0026#34;, j) time.Sleep(time.Second) fmt.Println(\u0026#34;worker\u0026#34;, id, \u0026#34;fnished job\u0026#34;, j) results \u0026lt;- j * 2 } } func workerEfficient(id int, jobs \u0026lt;-chan int, results chan\u0026lt;- int) { // sync.WaitGroup helps us to manage the job var wg sync.WaitGroup for j := range jobs { wg.Add(1) // we start a goroutine to run the job go func(job int) { // start the job fmt.Println(\u0026#34;worker\u0026#34;, id, \u0026#34;started job\u0026#34;, job) time.Sleep(time.Second) fmt.Println(\u0026#34;worker\u0026#34;, id, \u0026#34;fnished job\u0026#34;, job) results \u0026lt;- job * 2 wg.Done() }(j) } // With a help to manage the lifetimes of goroutines // we can add more handler when a goroutine finished wg.Wait() } func main() { const numbJobs = 8 jobs := make(chan int, numbJobs) results := make(chan int, numbJobs) // 1. Start the worker // it is a fixed pool of goroutines receive and perform tasks from a channel // In this example, we define a fixed 3 workers // they receive the `jobs` from the channel jobs // we also naming the worker name with `w` variable. for w := 1; w \u0026lt;= 3; w++ { go workerEfficient(w, jobs, results) } // 2. send the work // other goroutine sends the work to the channels // in this example, the `main` goroutine sends the work to the channel `jobs` for j := 1; j \u0026lt;= numbJobs; j++ { jobs \u0026lt;- j } close(jobs) fmt.Println(\u0026#34;Closed job\u0026#34;) for a := 1; a \u0026lt;= numbJobs; a++ { \u0026lt;-results } close(results) } 崩溃处理(recover) 在Go语言中，如果一个协程崩溃了，则所有协程都会退出，比如数组越界，会触发panic(相当于throw exception), 这对持续可运行的应用来说，显然不是我们想要的效果．那这个时候我们需要对崩溃进行修复.\n​ 在Go语言中提供了一个defer和recover来实现崩溃恢复，这个相当于其它语言的try catch的方式．在使用recover函数时，如果要达到能捕获异常的作用，有几点需要注意：\nrecover如果想起作用的话， 必须在defer函数前声明，因为只要panic，后面的函数不会被执行 recover函数只有在方法内部发生panic时，返回值不会为nil，没有panic的情况下返回值为nil 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; )我· func A(i int) { fmt.Println(\u0026#34;我是A\u0026#34;, i) panic(\u0026#34;崩溃\u0026#34;) } func main() { var wg sync.WaitGroup fmt.Println(\u0026#34;我是main\u0026#34;) wg.Add(1) go func(i int) { defer func() { //在调用A函数前声明defer recover,能捕获异常 if err := recover(); err != nil { fmt.Println(\u0026#34;恢复\u0026#34;, err) } wg.Done() }() A(i) }(1) wg.Wait() fmt.Println(\u0026#34;执行完了\u0026#34;) } ​ 如果在协程内执行其它函数时，为了保证不崩溃，安全的做法是，提前声明defer recover函数\n参考链接 https://zhuanlan.zhihu.com/p/374464199 https://www.golangprograms.com/goroutines-and-channels-example.html https://github.com/lotusirous/go-concurrency-patterns ","permalink":"https://luenci.com/en/posts/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","summary":"\u003ch1 id=\"golang-并发编程最佳实践\"\u003eGolang 并发编程最佳实践\u003c/h1\u003e\n\u003ch2 id=\"goroutine-定义\"\u003eGoroutine 定义\u003c/h2\u003e\n\u003cp\u003e​    Goroutines 是与其他\u003ca href=\"https://golangbot.com/functions/\"\u003e函数\u003c/a\u003e或\u003ca href=\"https://golangbot.com/methods/\"\u003e方法\u003c/a\u003e同时运行的函数或方法。Goroutines 可以被认为是轻量级线程。与线程相比，创建 Goroutine 的成本很小。因此，Go 应用程序通常会同时运行数千个 Goroutine。\u003c/p\u003e\n\u003ch2 id=\"goroutines-相对于线程的优势\"\u003eGoroutines 相对于线程的优势\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e与线程相比，Goroutines 非常便宜。它们的堆栈大小只有几 kb，堆栈可以根据应用程序的需要增长和缩小，而在线程的情况下，堆栈大小必须指定并固定。\u003c/li\u003e\n\u003cli\u003eGoroutine 被多路复用到更少数量的 OS 线程。一个包含数千个 Goroutine 的程序中可能只有一个线程。如果该线程中的任何 Goroutine 阻塞等待用户输入，则创建另一个 OS 线程并将剩余的 Goroutine 移动到新的 OS 线程。所有这些都由运行时处理，我们作为程序员从这些复杂的细节中抽象出来，并获得了一个干净的 API 来处理并发性。\u003c/li\u003e\n\u003cli\u003eGoroutines 使用通道进行通信。通道通过设计防止在使用 Goroutine 访问共享内存时发生竞争条件。通道可以被认为是 Goroutine 进行通信的管道。\u003c/li\u003e\n\u003c/ul\u003e","title":"Golang并发编程最佳实践"},{"content":"Service Mesh 介绍 Service Mesh 是微服务时代的 TCP/IP 协议\n​ 一种控制应用程序的不同部分如何相互共享数据的方法。与其他用于管理此通信的系统不同，服务网格是内置于应用中的专用基础结构层。这个可见的基础结构层可以记录应用的不同部分的交互程度（或交互程度），因此随着应用的增长，优化通信和避免停机变得更加容易。\t\u0026ndash; redhat\n​ Buoyant的CEO William Morgan，也就是Service Mesh这个词的发明人，对Service Mesh的定义：\n​ 服务网格是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证请求在这些拓扑中可靠地穿梭。在实际应用当中，服务网格通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但对应用程序透明。\n演化进程 时代0 开发人员想象中，不同服务间通信的方式，抽象表示如下：\n时代1：原始通信时代 ​ 然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在TCP协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。\n时代2：TCP时代 ​ 为了避免每个服务都需要自己实现一套相似的网络传输处理逻辑，TCP协议出现了，它解决了网络传输中通用的流量控制问题，将技术栈下移，从服务的实现中抽离出来，成为操作系统网络层的一部分。\n时代3：第一代微服务 ​ 在TCP出现之后，机器之间的网络通信不再是一个难题，以GFS/BigTable/MapReduce为代表的分布式系统得以蓬勃发展。这时，分布式系统特有的通信语义又出现了，如熔断策略、负载均衡、服务发现、认证和授权、quota限制、trace和监控等等，于是服务根据业务需求来实现一部分所需的通信语义。\n时代4：第二代微服务 ​ 为了避免每个服务都需要自己实现一套分布式系统通信的语义功能，随着技术的发展，一些面向微服务架构的开发框架出现了，如Twitter的Finagle、Facebook的Proxygen以及Spring Cloud等等，这些框架实现了分布式系统通信需要的各种通用语义功能：如负载均衡和服务发现等，因此一定程度上屏蔽了这些通信细节，使得开发人员使用较少的框架代码就能开发出健壮的分布式系统。\n时代5：第一代Service Mesh 代表项目：Linkerd 和 Envoy 为代表\n第二代微服务模式看似完美，但开发人员很快又发现，它也存在一些本质问题：\n其一，虽然框架本身屏蔽了分布式系统通信的一些通用功能实现细节，但开发者却要花更多精力去掌握和管理复杂的框架本身，在实际应用中，去追踪和解决框架出现的问题也绝非易事； 其二，开发框架通常只支持一种或几种特定的语言，回过头来看文章最开始对微服务的定义，一个重要的特性就是语言无关，但那些没有框架支持的语言编写的服务，很难融入面向微服务的架构体系，想因地制宜的用多种语言实现架构体系中的不同模块也很难做到； 其三，框架以lib库的形式和服务联编，复杂项目依赖时的库版本兼容问题非常棘手，同时，框架库的升级也无法对服务透明，服务会因为和业务无关的lib库升级而被迫升级； ​ 因此以Linkerd，Envoy，NginxMesh为代表的代理模式（边车模式）应运而生，这就是第一代Service Mesh，它将分布式服务的通信抽象为单独一层，在这一层中实现负载均衡、服务发现、认证授权、监控追踪、流量控制等分布式系统所需要的功能，作为一个和服务对等的代理服务，和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求，这样上边所说的三个问题也迎刃而解。\n如果我们从一个全局视角来看，就会得到如下部署图：\n如果我们暂时略去服务，只看Service Mesh的单机组件组成的网络：\n相信现在，大家已经理解何所谓Service Mesh，也就是服务网格了。它看起来确实就像是一个由若干服务代理所组成的错综复杂的网格。\n时代6：第二代Service Mesh 代表项目： Istio 和 Conduit\n​ 第一代Service Mesh由一系列独立运行的单机代理服务构成，为了提供统一的上层运维入口，演化出了集中式的控制面板，所有的单机代理组件通过和控制面板交互进行网络拓扑策略的更新和单机数据的汇报。这就是以Istio为代表的第二代Service Mesh。\n只看单机代理组件(数据面板)和控制面板的Service Mesh全局部署视图如下：\n小结 Service Mesh具有如下优点：\n屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑； 真正的语言无关，服务可以用任何语言编写，只需和Service Mesh通信即可； 对应用透明，Service Mesh组件可以单独升级； 当然，Service Mesh目前也面临一些挑战：\nService Mesh组件以代理模式计算并转发请求，一定程度上会降低通信系统性能，并增加系统资源开销； Service Mesh组件接管了网络流量，因此服务的整体稳定性依赖于Service Mesh，同时额外引入的大量Service Mesh服务实例的运维和管理也是一个挑战； ​ 历史总是惊人的相似。为了解决端到端的字节码通信问题，TCP协议诞生，让多机通信变得简单可靠；微服务时代，Service Mesh应运而生，屏蔽了分布式系统的诸多复杂性，让开发者可以回归业务，聚焦真正的价值。\n参考链接 什么是 Service Mesh - 知乎 (zhihu.com)\nPattern: Service Mesh (philcalcado.com)\nWhat\u0026rsquo;s a service mesh? (redhat.com)\n","permalink":"https://luenci.com/en/posts/servicemesh%E6%B5%85%E6%9E%90/","summary":"\u003ch1 id=\"service-mesh-介绍\"\u003eService Mesh 介绍\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eService Mesh 是微服务时代的 TCP/IP 协议\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e​    \u003cstrong\u003e一种控制应用程序的不同部分如何相互共享数据的方法\u003c/strong\u003e。与其他用于管理此通信的系统不同，服务网格是内置于应用中的专用基础结构层。这个可见的基础结构层可以记录应用的不同部分的交互程度（或交互程度），因此随着应用的增长，优化通信和避免停机变得更加容易。\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0026ndash; redhat\u003c/p\u003e\n\u003cp\u003e​    Buoyant的CEO William Morgan，也就是Service Mesh这个词的发明人，对Service Mesh的定义：\u003c/p\u003e\n\u003cp\u003e​    服务网格是一个\u003cstrong\u003e基础设施层\u003c/strong\u003e，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证\u003cstrong\u003e请求在这些拓扑中可靠地穿梭\u003c/strong\u003e。在实际应用当中，服务网格通常是由一系列轻量级的\u003cstrong\u003e网络代理\u003c/strong\u003e组成的，\u003cstrong\u003e它们与应用程序部署在一起，但对应用程序透明。\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"演化进程\"\u003e演化进程\u003c/h2\u003e\n\u003ch3 id=\"时代0\"\u003e时代0\u003c/h3\u003e\n\u003cp\u003e开发人员想象中，不同服务间通信的方式，抽象表示如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-2a182cea5ab0f7d625776a9446cd596b_1440w.jpg\" alt=\"img\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"时代1原始通信时代\"\u003e时代1：原始通信时代\u003c/h3\u003e\n\u003cp\u003e​     然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在TCP协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，\u003cstrong\u003e因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/v2-1443e6bebd93d5e6bb1c18197676d29b_1440w.jpg\" alt=\"img\"  /\u003e\n\u003c/p\u003e","title":"Service Mesh 介绍"},{"content":"golang error 处理最佳实践 错误类型定义 Go 中error 类型是一个接口类型 1 2 3 type error interface { Error() string } 基本上，error 是实现该接口任何内容，它将错误消息作为字符串返回。\n构造错误 ​ 可以使用 Go 的内置或包动态构造错误。\n​ 例如，以下函数使用包返回带有静态错误消息的新错误：errors fmt errors\n1 2 3 4 5 6 7 package main import \u0026#34;errors\u0026#34; func DoSomething() error { return errors.New(\u0026#34;something didn\u0026#39;t work\u0026#34;) } ​\t同样，该包可用于向错误添加动态数据。\n​\t例如：fmt int string error\n1 2 3 4 5 6 7 8 9 10 package main import \u0026#34;fmt\u0026#34; func Divide(a, b int) (int, error) { if b == 0 { return 0, fmt.Errorf(\u0026#34;can\u0026#39;t divide \u0026#39;%d\u0026#39; by zero\u0026#34;, a) } return a / b, nil } 请注意，当用于用格式动词包装另一个错误时，这将非常有用 fmt.Errorf %w\n在上面的示例中，还有其他一些重要事项需要注意。\n错误可以返回为nil ，它是 Go 中 error 的默认值或零值。这很重要，因为检查是确定是否遇到错误的惯用方法（替换您可能在其他编程语言中熟悉的 / 语句）。if err != nil 错误通常作为函数中的最后一个参数返回。因此，在上面的示例中，我们按该顺序返回 int和 nil 。 当我们返回错误时，函数返回的其他参数通常作为其默认的零值返回。函数的用户可能期望，如果返回非nil 错误，则返回的其他参数不相关。 最后，错误消息通常以小写形式编写，不以标点符号结尾。但是可以例外，例如，当包含专有名词，以大写字母开头的函数名称等。 定义预期错误 ​ Go 中的另一个重要技术是定义预期的错误，以便可以在代码的其他部分中显式检查它们。当遇到某种类型的错误时需要执行不同的代码分支时，这将非常有用。\n关于 errors.Is() 和 errors.As() 如果我们想检查给定错误是否与另一个特定错误匹配，我们需要使用包中Is()的函数errors。如果我们对错误是否属于给定类型感兴趣，我们应该调用该As()函数。errors.Is()\nerrors.Is()功能 此函数适合没有经过包装的错误\n​ 在下面的示例中，我们可以看到该函数validateInput为badInput. 此错误ErrBadInput包含在由fmt.Errorf().\n​ 使用该Is(err, target error) bool函数，我们可以检测到ErrBadInput它是否被包装，因为该函数检查包装错误链中的任何错误是否与目标匹配。\n因此，这种形式应该比if err == ErrBadInput更可取。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) const badInput = \u0026#34;abc\u0026#34; var ErrBadInput = errors.New(\u0026#34;bad input\u0026#34;) func validateInput(input string) error { if input == badInput { return fmt.Errorf(\u0026#34;validateInput: %w\u0026#34;, ErrBadInput) } return nil } func main() { input := badInput err := validateInput(input) if errors.Is(err, ErrBadInput) { fmt.Println(\u0026#34;bad input error\u0026#34;) } } 输出：\n1 bad input error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) var ErrorString1 = errors.New(\u0026#34;test b\u0026#34;) func main() { err := func() error { return fmt.Errorf(\u0026#34;I am %w\u0026#34;, ErrorString1) }() if errors.Is(err, ErrorString1) { fmt.Println(\u0026#34;err b\u0026#34;) } } 输出：\n1 err b errors.As()功能 此函数将错误进行了包装\n​ 与 类似Is()，As(err error, target interface{}) bool检查包装错误链中的任何错误是否与目标匹配。不同之处在于此函数检查错误是否具有特定类型，不像Is()，它检查它是否是特定的错误对象。\n因为As考虑到整个错误链，它应该比类型断言更可取if e, ok := err.(*BadInputError); ok。\ntarget函数的参数``As(err error, target interface{}) bool应该是指向错误类型的指针，在这种情况下是*BadInputError\n复制\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) const badInput = \u0026#34;abc\u0026#34; type BadInputError struct { input string } func (e *BadInputError) Error() string { return fmt.Sprintf(\u0026#34;bad input: %s\u0026#34;, e.input) } func validateInput(input string) error { if input == badInput { return fmt.Errorf(\u0026#34;validateInput: %w\u0026#34;, \u0026amp;BadInputError{input: input}) } return nil } func main() { input := badInput err := validateInput(input) var badInputErr *BadInputError if errors.As(err, \u0026amp;badInputErr) { fmt.Printf(\u0026#34;bad input error occured: %s\\n\u0026#34;, badInputErr) } } 定义哨兵错误 ​ 基于前面的函数，我们可以通过预先定义Sentinel错误来改进错误信令。调用函数可以使用以下命令显式检查此错误：errors.Is\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) var ErrDivideByZero = errors.New(\u0026#34;divide by zero\u0026#34;) func Divide(a, b int) (int, error) { if b == 0 { return 0, ErrDivideByZero } return a / b, nil } func main() { a, b := 10, 0 result, err := Divide(a, b) if err != nil { switch { case errors.Is(err, ErrDivideByZero): fmt.Println(\u0026#34;divide by zero error\u0026#34;) default: fmt.Printf(\u0026#34;unexpected division error: %s\\n\u0026#34;, err) } return } fmt.Printf(\u0026#34;%d / %d = %d\\n\u0026#34;, a, b, result) } 定义自定义错误类型 使用上述策略可以涵盖许多错误处理用例，但是，有时您可能需要更多功能。也许您希望错误携带其他数据字段，或者错误的消息在打印时应使用动态值填充自身。这些可以通过自定义错误类型实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) type DivisionError struct { IntA int IntB int Msg string } func (e *DivisionError) Error() string { return e.Msg } func Divide(a, b int) (int, error) { if b == 0 { return 0, \u0026amp;DivisionError{ Msg: fmt.Sprintf(\u0026#34;cannot divide \u0026#39;%d\u0026#39; by zero\u0026#34;, a), IntA: a, IntB: b, } } return a / b, nil } func main() { a, b := 10, 0 result, err := Divide(a, b) if err != nil { var divErr *DivisionError switch { case errors.As(err, \u0026amp;divErr): fmt.Printf(\u0026#34;%d / %d is not mathematically valid: %s\\n\u0026#34;, divErr.IntA, divErr.IntB, divErr.Error()) default: fmt.Printf(\u0026#34;unexpected division error: %s\\n\u0026#34;, err) } return } fmt.Printf(\u0026#34;%d / %d = %d\\n\u0026#34;, a, b, result) } error are value 无论你做什么，都要始终检查你的错误！\nbufio的设计 1 2 3 4 5 6 7 8 scanner := bufio.NewScanner(input) for scanner.Scan() { token := scanner.Text() // process token } if err := scanner.Err(); err != nil { // process the error } 1 func (s *Scanner) Scan() (token []byte, error) 1 2 3 4 5 6 7 8 scanner := bufio.NewScanner(input) for { token, err := scanner.Scan() if err != nil { return err // or maybe break } // process token } 文件error处理 ​ 改进前\n1 2 3 4 5 6 7 8 9 10 11 12 13 _, err = fd.Write(p0[a:b]) if err != nil { return err } _, err = fd.Write(p1[c:d]) if err != nil { return err } _, err = fd.Write(p2[e:f]) if err != nil { return err } // and so on ​ 改进方法1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type errWriter struct { w io.Writer err error } func (ew *errWriter) write(buf []byte) { if ew.err != nil { return } _, ew.err = ew.w.Write(buf) } ew := \u0026amp;errWriter{w: fd} ew.write(p0[a:b]) ew.write(p1[c:d]) ew.write(p2[e:f]) // and so on if ew.err != nil { return ew.err } ​ 改进方法2(bufio的设计)\n1 2 3 4 5 6 7 8 b := bufio.NewWriter(fd) b.Write(p0[a:b]) b.Write(p1[c:d]) b.Write(p2[e:f]) // and so on if b.Flush() != nil { return b.Flush() } Error handling and Go 合理的对错误进行包装，给错误一个模板（参考定义预期错误）\n简化重复的错误处理 ​ 原始程序\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func init() { http.HandleFunc(\u0026#34;/view\u0026#34;, viewRecord) } func viewRecord(w http.ResponseWriter, r *http.Request) { c := appengine.NewContext(r) key := datastore.NewKey(c, \u0026#34;Record\u0026#34;, r.FormValue(\u0026#34;id\u0026#34;), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { http.Error(w, err.Error(), 500) return } if err := viewTemplate.Execute(w, record); err != nil { http.Error(w, err.Error(), 500) } } 封装函数对错误处理\n1 2 3 4 5 6 7 8 9 10 11 12 13 func viewRecord(w http.ResponseWriter, r *http.Request) error { c := appengine.NewContext(r) key := datastore.NewKey(c, \u0026#34;Record\u0026#34;, r.FormValue(\u0026#34;id\u0026#34;), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { return err } return viewTemplate.Execute(w, record) } 外层对重复错误的处理\n1 2 3 4 5 func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if err := fn(w, r); err != nil { http.Error(w, err.Error(), 500) } } 一个http服务的错误封装 1 2 3 4 5 type appError struct { Error error Message string Code int } 1 type appHandler func(http.ResponseWriter, *http.Request) *appError 1 2 3 4 5 6 7 func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if e := fn(w, r); e != nil { // e is *appError, not os.Error. c := appengine.NewContext(r) c.Errorf(\u0026#34;%v\u0026#34;, e.Error) http.Error(w, e.Message, e.Code) } } 1 2 3 4 5 6 7 8 9 10 11 12 func viewRecord(w http.ResponseWriter, r *http.Request) *appError { c := appengine.NewContext(r) key := datastore.NewKey(c, \u0026#34;Record\u0026#34;, r.FormValue(\u0026#34;id\u0026#34;), 0, nil) record := new(Record) if err := datastore.Get(c, key, record); err != nil { return \u0026amp;appError{err, \u0026#34;Record not found\u0026#34;, 404} } if err := viewTemplate.Execute(w, record); err != nil { return \u0026amp;appError{err, \u0026#34;Can\u0026#39;t display record\u0026#34;, 500} } return nil } 毛剑老师的课程的建议 panic 在程序启动的时候，如果有强依赖的服务出现故障时 panic 退出 在程序启动的时候，如果发现有配置明显不符合要求， 可以 panic 退出（防御编程） 其他情况下只要不是不可恢复的程序错误，都不应该直接 panic 应该返回 error 在程序入口处，例如 gin 中间件需要使用 recover 预防 panic 程序退出 在程序中我们应该避免使用野生的 goroutine 如果是在请求中需要执行异步任务，应该使用异步 worker ，消息通知的方式进行处理，避免请求量大时大量 goroutine 创建 如果需要使用 goroutine 时，应该使用同一的 Go 函数进行创建，这个函数中会进行 recover ，避免因为野生 goroutine panic 导致主进程退出 1 2 3 4 5 6 7 8 9 10 11 func Go(f func()){ go func(){ defer func(){ if err := recover(); err != nil { log.Printf(\u0026#34;panic: %+v\u0026#34;, err) } }() f() }() } error 我们在应用程序中使用 github.com/pkg/errors 处理应用错误，注意在公共库当中，我们一般不使用这个\nerror应该是函数的最后一个返回值，当error不为nil 时，函数的其他返回值是不可用的状态，不应该对其他返回值做任何期待\nfunc f() (io.Reader, *S1, error) 在这里，我们不知道 io.Reader 中是否有数据，可能有，也有可能有一部分 错误处理的时候应该先判断错误， if err != nil 出现错误及时返回，使代码是一条流畅的直线，避免过多的嵌套.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // good case func f() error { a, err := A() if err != nil { return err } // ... 其他逻辑 return nil } // bad case func f() error { a, err := A() if err == nil { // 其他逻辑 } return err } 在应用程序中出现错误时，使用 errors.New 或者 errors.Errorf 返回错误\n1 2 3 4 5 6 7 8 func (u *usecese) usecase1() error { money := u.repo.getMoney(uid) if money \u0026lt; 10 { errors.Errorf(\u0026#34;用户余额不足, uid: %d, money: %d\u0026#34;, uid, money) } // 其他逻辑 return nil } 如果是调用应用程序的其他函数出现错误，请直接返回，如果需要携带信息，请使用 errors.WithMessage 1 2 3 4 5 6 7 8 9 func (u *usecese) usecase2() error { name, err := u.repo.getUserName(uid) if err != nil { return errors.WithMessage(err, \u0026#34;其他附加信息\u0026#34;) } // 其他逻辑 return nil } 如果是调用其他库（标准库、企业公共库、开源第三方库等）获取到错误时，请使用errors.Wrap添加堆栈信息 切记，不要每个地方都是用 errors.Wrap 只需要在错误第一次出现时进行 errors.Wrap 即可 根据场景进行判断是否需要将其他库的原始错误吞掉，例如可以把 repository 层的数据库相关错误吞掉，返回业务错误码，避免后续我们分割微服务或者更换 ORM 库时需要去修改上层代码 注意我们在基础库，被大量引入的第三方库编写时一般不使用 errors.Wrap 避免堆栈信息重复 1 2 3 4 5 6 7 8 9 func f() error { err := json.Unmashal(\u0026amp;a, data) if err != nil { return errors.Wrap(err, \u0026#34;其他附加信息\u0026#34;) } // 其他逻辑 return nil } 禁止每个出错的地方都打日志，只需要在进程的最开始的地方使用 %+v 进行统一打印，例如 http/rpc 服务的中间件 错误判断使用 errors.Is 进行比较 1 2 3 4 5 6 7 8 9 func f() error { err := A() if errors.Is(err, io.EOF){ return nil } // 其他逻辑 return nil } 错误类型判断，使用 errors.As 进行赋值 1 2 3 4 5 6 7 8 9 10 11 func f() error { err := A() var errA errorA if errors.As(err, \u0026amp;errA){ // ... } // 其他逻辑 return nil } 如何判定错误的信息是否足够，想一想当你的代码出现问题需要排查的时候你的错误信息是否可以帮助你快速的定位问题，例如我们在请求中一般会输出参数信息，用于辅助判断错误 对于业务错误，推荐在一个统一的地方创建一个错误字典，错误字典里面应该包含错误的 code，并且在日志中作为独立字段打印，方便做业务告警的判断，错误必须有清晰的错误文档 不需要返回，被忽略的错误必须输出日志信息 同一个地方不停的报错，最好不要不停输出错误日志，这样可能会导致被大量的错误日志信息淹没，无法排查问题，比较好的做法是打印一次错误详情，然后打印出错误出现的次数 对同一个类型的错误，采用相同的模式，例如参数错误，不要有的返回 404 有的返回 200 处理错误的时候，需要处理已分配的资源，使用 defer 进行清理，例如文件句柄 panic or error 在 Go 中 panic 会导致程序直接退出，是一个致命的错误，如果使用 panic,recover 进行处理的话，会存在很多问题 性能问题，频繁 panic, recover 性能不好 容易导致程序异常退出，只要有一个地方没有处理到就会导致程序进程整个退出 不可控，一旦 panic 就将处理逻辑移交给了外部，我们并不能预设外部包一定会进行处理 什么时候使用 panic 呢？ 对于真正意外的情况，那些表示不可恢复的程序错误，例如索引越界、不可恢复的环境问题、栈溢出，我们才使用 panic 使用 error 处理有哪些好处？ 简单。 考虑失败，而不是成功(Plan for failure, not success)。 没有隐藏的控制流。 完全交给你来控制 error。 Error are values。 参考链接 Errors are values - The Go Programming Language\nError handling and Go - The Go Programming Language\nhttps://lailin.xyz/post/go-training-03.html\n","permalink":"https://luenci.com/en/posts/golang-error-%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","summary":"\u003ch1 id=\"golang-error-处理最佳实践\"\u003egolang error 处理最佳实践\u003c/h1\u003e\n\u003ch2 id=\"错误类型定义\"\u003e错误类型定义\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGo 中\u003ccode\u003eerror\u003c/code\u003e 类型是一个接口类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003einterface\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eError\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e基本上，\u003ccode\u003eerror\u003c/code\u003e 是实现该接口任何内容，它将错误消息作为字符串返回。\u003c/p\u003e\n\u003ch2 id=\"构造错误\"\u003e构造错误\u003c/h2\u003e\n\u003cp\u003e​    可以使用 Go 的内置或包动态构造错误。\u003c/p\u003e\n\u003cp\u003e​    例如，以下函数使用包返回带有静态错误消息的新错误：\u003ccode\u003eerrors fmt errors\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;errors\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDoSomething\u003c/span\u003e() \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e errors.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;something didn\u0026#39;t work\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t同样，该包可用于向错误添加动态数据。\u003c/p\u003e\n\u003cp\u003e​\t例如：\u003ccode\u003efmt int string error\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDivide\u003c/span\u003e(a, b \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e b \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e, fmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eErrorf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;can\u0026#39;t divide \u0026#39;%d\u0026#39; by zero\u0026#34;\u003c/span\u003e, a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e b, \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e请注意，当用于用格式动词包装另一个错误时，这将非常有用 \u003ccode\u003efmt.Errorf %w\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在上面的示例中，还有其他一些重要事项需要注意。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e错误可以返回为\u003ccode\u003enil\u003c/code\u003e ，它是 Go 中 \u003ccode\u003eerror\u003c/code\u003e 的默认值或\u003ccode\u003e零值\u003c/code\u003e。这很重要，因为检查是确定是否遇到错误的惯用方法（替换您可能在其他编程语言中熟悉的 / 语句）。\u003ccode\u003eif err != nil \u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e错误通常作为函数中的最后一个参数返回。因此，在上面的示例中，我们按该顺序返回 \u003ccode\u003eint\u003c/code\u003e和 \u003ccode\u003enil\u003c/code\u003e 。\u003c/li\u003e\n\u003cli\u003e当我们返回错误时，函数返回的其他参数通常作为其默认的\u003ccode\u003e零值\u003c/code\u003e返回。函数的用户可能期望，如果返回非\u003ccode\u003enil\u003c/code\u003e 错误，则返回的其他参数不相关。\u003c/li\u003e\n\u003cli\u003e最后，错误消息通常以小写形式编写，不以标点符号结尾。但是可以例外，例如，当包含专有名词，以大写字母开头的函数名称等。\u003c/li\u003e\n\u003c/ul\u003e","title":"Golang error 处理最佳实践"},{"content":"Golang Project Layout 最佳实践 鲍勃叔叔干净的架构（Uncle Bob） 依赖规则 同心圆代表软件的不同领域。 一般来说，你走得越远，软件的层次就越高。外圈是机制。内圈是政策。 ​ 使这个架构工作的最重要的规则是依赖规则。这条规则说源代码依赖只能指向内部。内圈中的任何人都无法对外圈中的事物一无所知。特别是，在外圈中声明的事物的名称不能被内圈中的代码提及。这包括函数、类。变量或任何其他命名的软件实体。\n​ 同样，在外圈中使用的数据格式不应该被内圈使用，特别是如果这些格式是由外圈中的框架生成的。我们不希望外圈的任何东西影响内圈。\n实体(entity) ​ 实体封装了企业范围的业务规则。实体可以是具有方法的对象，也可以是一组数据结构和函数。只要实体可以被企业中的许多不同应用程序使用，这并不重要。\n​ 如果您没有企业，而只是编写单个应用程序，则这些实体是应用程序的业务对象。它们封装了最一般和高级的规则。当外部变化时，它们最不可能改变。例如，您不会期望这些对象受到页面导航或安全性更改的影响。对任何特定应用程序的操作更改都不应影响实体层。\n使用案例(usecase) ​ 此层中的软件包含特定于应用程序的业务规则。它封装并实现了系统的所有用例。这些用例协调进出实体的数据流，并指示这些实体使用其企业范围的业务规则来实现用例的目标。\n​ 我们预计此层中的更改不会影响实体。我们也不希望此层受到外部性更改（如数据库、UI 或任何通用框架）的影响。这一层与此类问题隔离开来。\n​ 但是，我们确实预计对应用程序操作的更改将影响用例，从而影响该层中的软件。如果用例的细节发生变化，那么这一层中的一些代码肯定会受到影响。\n接口适配器(interface adapter) ​ 该层中的软件是一组适配器，可将数据从最适合用例和实体的格式转换为最适合某些外部机构（如数据库或 Web）的格式。例如，正是这一层将完全包含 GUI 的 MVC 架构。Presenters、Views 和 Controllers 都属于这里。模型可能只是从控制器传递到用例，然后从用例返回到演示者和视图的数据结构。\n​ 类似地，在这一层中，数据从对实体和用例最方便的形式转换为对正在使用的任何持久性框架最方便的形式。即数据库。这个圈子内的任何代码都不应该对数据库有任何了解。如果数据库是 SQL 数据库，那么所有的 SQL 都应该限制在这一层，特别是限制在这一层与数据库有关的部分。\n在这一层中还有任何其他适配器，用于将数据从某种外部形式（例如外部服务）转换为用例和实体使用的内部形式\n框架和驱动器（Frameworks and Drivers） ​ 最外层一般由框架和工具组成，如数据库、Web 框架等。一般在这一层你不会写太多代码，除了向内与下一个循环通信的胶水代码。\n​ 这一层是所有细节的所在。网络是一个细节。数据库是一个细节。我们把这些东西放在外面，它们不会造成什么伤害。\n圈和边界 ​ 源代码依赖项总是指向内部。随着向内移动，抽象级别会增加。最外圈是低层次的具体细节。随着您向内移动，软件变得更加抽象，并封装了更高级别的策略。最内圈是最普通的。\n​ 通常，跨越边界的数据是简单的数据结构。如果您愿意，可以使用基本结构或简单的数据传输对象。或者数据可以只是函数调用中的参数。或者你可以将它打包成一个 hashmap，或者将它构造成一个对象。重要的是，隔离的、简单的数据结构可以跨越边界传递。我们不想欺骗和传递实体或数据库行。我们不希望数据结构有任何违反依赖规则的依赖。\n​ 例如，许多数据库框架返回方便的数据格式以响应查询。我们可以称其为 Row Structure。我们不想跨边界向内传递该行结构。这将违反依赖规则，因为它会迫使内圈了解外圈。\n所以当我们越界传递数据时，总是采用最方便内圈的形式。\n结论 ​ 遵守这些简单的规则并不难，并且会为您省去很多麻烦。通过将软件分层并遵守依赖规则，您将创建一个本质上可测试的系统，并具有所有暗示的好处。当系统的任何外部部件（如数据库或 Web 框架）过时时，您可以轻松替换那些过时的元素。\n从 kratos 框架入手 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 application |____api | |____helloworld | | |____v1 | | |____errors |____cmd | |____helloworld |____configs |____internal | |____conf | |____data | |____biz | |____service | |____server |____test |____pkg |____go.mod |____go.sum |____LICENSE |____README.md 应用目录 /cmd ​ 本项目的主干。\n​\t每个应用程序的目录名应该与你想要的可执行文件的名称相匹配（例如，/cmd/myapp）。 不要在这个目录中放置太多代码。如果你认为代码可以导入并在其他项目中使用，那么它应该位于 /pkg 目录中。如果代码不是可重用的，或者你不希望其他人重用它，请将该代码放到 /internal 目录中。\n/internal ​ 私有应用程序和库代码。\n​ 这是你不希望其他人在其应用程序或库中导入代码。请注意，这个布局模式是由 Go 编译器本身执行的。有关更多细节，请参阅 Go 1.4 release notes。注意，你并不局限于顶级 internal 目录。在项目树的任何级别上都可以有多个内部目录。 你可以选择向 internal 包中添加一些额外的结构，以分隔共享和非共享的内部代码。这不是必需的(特别是对于较小的项目)，但是最好有有可视化的线索来显示预期的包的用途。你的实际应用程序代码可以放在 /internal/app 目录下（例如 /internal/app/myapp），这些应用程序共享的代码可以放在 /internal/pkg 目录下（例如 /internal/pkg/myprivlib）。 因为我们习惯把相关的服务，比如账号服务，内部有 rpc、job、admin 等，相关的服务整合一起后，需要区分 app。单一的服务，可以去掉 /internal/myapp。\n/pkg ​ 外部应用程序可以使用的库代码（例如 /pkg/mypubliclib）。\n​\t其他项目会导入这些库，所以在这里放东西之前要三思:-)注意，internal 目录是确保私有包不可导入的更好方法，因为它是由 Go 强制执行的。/pkg 目录仍然是一种很好的方式，可以显式地表示该目录中的代码对于其他人来说是安全使用的好方法。\n/pkg 目录内，可以参考 go 标准库的组织方式，按照功能分类。/internla/pkg 一般用于项目内的 跨多个应用的公共共享代码，但其作用域仅在单个项目工程内。\n服务应用目录 /api API 协议定义目录，services.proto protobuf 文件，以及生成的 go 文件。我们通常把 api 文档直接在 proto 文件中描述。 /configs 配置文件模板或默认配置。 /test ​\t额外的外部测试应用程序和测试数据。你可以随时根据需求构造 /test 目录。对于较大的项目，有一个数据子目录是有意义的。例如，你可以使用 /test/data 或 /test/testdata (如果你需要忽略目录中的内容)。请注意，Go 还会忽略以 “.” 或 “_” 开头的目录或文件，因此在如何命名测试数据目录方面有更大的灵活性。\n服务内部目录 ​\tApplication 目录下有 api、cmd、configs、internal、pkg 目录，目录里一般还会放置 README、CHANGELOG、OWNERS。internal 是为了避免有同业务下有人跨目录引用了内部的 data、biz、service、server 等内部 struct。\ndata ​\t业务数据访问，包含 cache、db 等封装，实现了 biz 的 repo 接口。我们可能会把 data 与 dao 混淆在一起，data 偏重业务的含义，它所要做的是将领域对象重新拿出来，我们去掉了 DDD 的 infra层。\nbiz ​\t业务逻辑的组装层，类似 DDD 的 domain 层，data 类似 DDD 的 repo，repo 接口在这里定义，使用依赖倒置的原则。\nservice ​\t实现了 api 定义的服务层，类似 DDD 的 application 层，处理 DTO 到 biz 领域实体的转换（DTO -\u0026gt; DO），同时协同各类 biz 交互，但是不应处理复杂逻辑。\nserver ​\t为http和grpc实例的创建和配置，以及注册对应的 service 。\n总结 ​\t在实际 go 项目开发中，一定要灵活运用，当然也可以完全不按照这样架构分层、包设计的规则，一切以项目的大小、业务的复杂度、个人专业技能认知的广度和深度、时间的紧迫度为准。\ngithub上优秀的项目 go-clean-arch ​\t此项目有 4 个域层\n模型层 存储库层 用例层 交付层 go-clean-template 服务流向 1 2 3 4 5 6 7 8 9 10 HTTP \u0026gt; usecase usecase \u0026gt; repository usecase \u0026lt; repository usecase \u0026gt; webapi usecase \u0026lt; webapi usecase \u0026gt; RPC usecase \u0026lt; RPC usecase \u0026gt; repository usecase \u0026lt; repository HTTP \u0026lt; usecase 参考文章 Clean Coder Blog\nGo工程化 - Project Layout 最佳实践 | Kratos (go-kratos.dev)\nGolang进阶4-Go 工程化实践和配置中心 - 掘金 (juejin.cn)\nbxcodec/go-clean-arch: Go (Golang) Clean Architecture based on Reading Uncle Bob\u0026rsquo;s Clean Architecture (github.com)\nevrone/go-clean-template: Clean Architecture template for Golang services (github.com)\n","permalink":"https://luenci.com/en/posts/golang-%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch1 id=\"golang-project-layout-最佳实践\"\u003eGolang Project Layout 最佳实践\u003c/h1\u003e\n\u003ch2 id=\"鲍勃叔叔干净的架构uncle-bob\"\u003e鲍勃叔叔干净的架构（Uncle Bob）\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/image-20220609141505914.png\" alt=\"clean arch\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"依赖规则\"\u003e依赖规则\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e同心圆代表软件的不同领域。\u003c/li\u003e\n\u003cli\u003e一般来说，你走得越远，软件的层次就越高。外圈是机制。内圈是政策。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e​     使这个架构工作的最重要的规则是\u003ccode\u003e依赖规则\u003c/code\u003e。这条规则说\u003ccode\u003e源代码依赖只能指向内部\u003c/code\u003e。内圈中的任何人都无法对外圈中的事物一无所知。特别是，在外圈中声明的事物的名称不能被内圈中的代码提及。这包括函数、类。变量或任何其他命名的软件实体。\u003c/p\u003e","title":"Go Project Layout 最佳实践"},{"content":"golang var、:=、new、make区别及使用 ​ go里面的几大变量“类型”(不严谨，只是个人在使用的时候常用到的结构的一个划分)\n（1） 值类型： int， string， struct 等 （2） 引用类型：主要是 map, slice,chan 这三个引用（make创建内存的） （3）指针类型：*int64， *struct等 var vs := ​\t对于值类型的变量，我们通过var 声明(包括结构体)，系统会默认为他分配内存空间，并赋该类型的零值。\n如下，我们声明一个int类型变量i，输出为0。\n1 2 var i int fmt.Println(i) // i = 0 (类型零值) var和:=之间实际上存在差异，采用:=允许重新声明变量。\n与常规变量声明不同，:=声明可以重新声明变量，前提是它们最初在同一块中以相同类型声明，并且至少有一个非空白变量是新的。因此，重新声明只能出现在多变量短声明中。\n重新声明不引入新变量；它只是为原始值分配一个新值。\n1 2 3 4 field1, offset := nextField(str, 0) field2, offset := nextField(str, offset) // 重新声明偏移量(可重入) a, a := 1, 2 // 非法：如果在别处声明了 a，则双重声明 a 或没有新变量 所以我会说:=运算符不是纯粹的声明，而是更像声明和分配。不允许在顶层重新声明，因此也不允许短声明。另一个原因可能是语法简单。type在 Go 中，所有顶级表单都以var 或 func 开头。\n建议：重复声明的变量用 :=，比如 err 的声明，使用的值或全局变量（不推荐大量使用）用 var， 如 var fields []string\nnew函数 来看一下new函数的签名：\n1 func new(Type)*Type ​\t它只接受一个参数，这个参数是一个类型，分配好内存后，返回一个指向该类型内存地址的指针。同时把分配的内存置为零，也就是类型的零值。但是实际在工程使用中，通常是直接声明指针使用，不需要 new 操作。\n如果我们声明一个指针类型的变量，系统不会为他分配内存，默认就是nil。此时如果你想直接使用，那么系统会抛异常。\n1 2 3 4 5 6 7 8 9 10 11 12 var j *int fmt.Println(j) *j = 10 //invalid memory address or nil pointer dereference // 也就是说，空指针还没有内存分配，是不能使用的。那么要想使用，此时就需要new出场啦。 var j *int j = new(int) // 让j里面的内容指向一块分配好的内存地址，地址里面设置int的零值：0 fmt.Println(j) fmt.Println(*j) *j = 10 fmt.Println(*j) // 声明指针类型变量后，通过new为他分配内存，有了内存空间，这个变量就可以自由的使用了。 Make函数 make和new不同，make 用于 map, slice,chan 的内存创建，因为他们三个是引用类型，直接返回这三个类型本身。\nmake签名是：\n1 func make(t Type, size ...IntegerType) Type make 是分配内存并初始化，初始化并不是置为零值(而是将地址空间的值二进制为都设置为0)。\n与new一样，它的第一个参数也是一个类型，但是不一样的是，make返回的是传入的类型，而不是指针！\n1 2 3 4 5 6 7 var c chan int //声明管道类型变量c，此时c还是nil，不可用 fmt.Printf(\u0026#34;%#v \\\\n\u0026#34;,c) //(chan int)(nil) c = make(chan int) fmt.Printf(\u0026#34;%#v\u0026#34;, c) //(chan int)(0xc000062060) 声明管道类型变量c，此时c还是nil，不可用；通过make来分配内存并初始化，c就获得了内存可以使用了。所以，我们在使用map, slice,chan 的时候，需要先对他们用make初始化，然后在进行操作。\n总结 new 和make都是Go语言的两个内建函数，用于分配内存 new 一般用来返回指针类型（一般不用），make返回引用类型（map, slice,chan 这三个引用) var声明的 基本类型和struct这种已经分配了内存，并且赋零值了。 参考链接 https://stackoverflow.com/questions/21657446/var-vs-in-go https://stackoverflow.com/questions/25358130/what-is-the-difference-between-new-and-make https://stackoverflow.com/questions/9320862/why-would-i-make-or-new?noredirect=1\u0026lq=1 ","permalink":"https://luenci.com/en/posts/%E6%B5%85%E6%9E%90-golangmakenewvar%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F/","summary":"\u003ch1 id=\"golang-varnewmake区别及使用\"\u003egolang var、:=、new、make区别及使用\u003c/h1\u003e\n\u003cp\u003e​    go里面的几大变量“类型”(不严谨，只是个人在使用的时候常用到的结构的一个划分)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e（1） 值类型：\u003ccode\u003e int\u003c/code\u003e， \u003ccode\u003estring\u003c/code\u003e， \u003ccode\u003estruct\u003c/code\u003e 等\u003c/li\u003e\n\u003cli\u003e（2） 引用类型：主要是 \u003ccode\u003emap\u003c/code\u003e, \u003ccode\u003eslice\u003c/code\u003e,\u003ccode\u003echan\u003c/code\u003e 这三个引用（\u003ccode\u003emake\u003c/code\u003e创建内存的）\u003c/li\u003e\n\u003cli\u003e（3）指针类型：\u003ccode\u003e*int64\u003c/code\u003e， \u003ccode\u003e*struct\u003c/code\u003e等\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"var-vs-\"\u003e\u003ccode\u003evar\u003c/code\u003e vs \u003ccode\u003e:=\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e​\t对于值类型的变量，我们通过var 声明(包括结构体)，系统会默认为他分配内存空间，并赋该类型的零值。\u003c/p\u003e\n\u003cp\u003e如下，我们声明一个int类型变量i，输出为0。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evar\u003c/span\u003e i \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efmt.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ePrintln\u003c/span\u003e(i) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// i = 0 (类型零值)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003evar\u003c/code\u003e和\u003ccode\u003e:=\u003c/code\u003e之间实际上存在差异，\u003cstrong\u003e采用\u003ccode\u003e:=\u003c/code\u003e允许重新声明变量\u003c/strong\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e与常规变量声明不同，\u003ccode\u003e:=\u003c/code\u003e声明可以重新声明变量，前提是它们最初在同一块中以相同类型声明，并且至少有一个非空白变量是新的。因此，重新声明只能出现在多变量短声明中。\u003c/p\u003e\n\u003cp\u003e重新声明不引入新变量；它只是为原始值分配一个新值。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efield1, offset \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enextField\u003c/span\u003e(str, \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efield2, offset \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003enextField\u003c/span\u003e(str, offset)  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 重新声明偏移量(可重入)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea, a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e                              \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 非法：如果在别处声明了 a，则双重声明 a 或没有新变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e所以我会说\u003ccode\u003e:=\u003c/code\u003e运算符不是纯粹的声明，而是更像声明和分配。不允许在顶层重新声明，因此也不允许短声明。另一个原因可能是语法简单。\u003ccode\u003etype\u003c/code\u003e在 Go 中，所有顶级表单都以\u003ccode\u003evar\u003c/code\u003e 或 \u003ccode\u003efunc\u003c/code\u003e 开头。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e建议：重复声明的变量用 \u003ccode\u003e:=\u003c/code\u003e，比如 err 的声明，使用的值或全局变量（不推荐大量使用）用 var， 如 var fields []string\u003c/p\u003e\u003c/blockquote\u003e","title":"Go 变量声明指南"},{"content":"程序配置服务和热更新 前言 ​\t在开发过程中，因为不同环境中有不同的配置，所以往往一个项目要同时保存着不同环境的配置文件（dev，test，staging，prd）等。如果没有一个方便简洁的管理这些配置文件方式，排查问题也会变的麻烦。接下来介绍几种我所经历的几种配置文件管理方案\ngit 分支管理 ​\t顾名思义就是利用 git 的分支来管理不同环境的配置，比如dev分支就是对应存放这dev的配置文件。\n优点 分支管理更符合开发的代码习惯，只关心本分支的代码和配置 缺点 不符合git-flow流程，如果test配置有改动，那么就要直接编辑test分支代码，而不是从dev分支合并过去。排查配置相关问题不友善 一份配置文件就一个分支，维护代价太大，有些舍本琢末了。 热更新方案无 所有配置文件都放在项目下 ​\t这种方式就是把所有的配置文件集中放在项目下的某个目录，用环境变量的方式去加载指定的配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main func main(){ switch env{ case:\u0026#34;dev\u0026#34;: load(\u0026#34;dev.config\u0026#34;) case:\u0026#34;test\u0026#34;: load(\u0026#34;test.config\u0026#34;) ... default: load(\u0026#34;local.config\u0026#34;) } } 优点 配置统一集中管理，修改方便 缺点 配置文件过多容易使项目结构变的“难看”，判断依赖过多，不优雅。 无法做到热更新，配置更改需要重新发布代码 热更新方案无 配置中心 ​\t将配置文件都放到三方的服务中保管，比如nacos、Apollo等配置中心\nnacos：https://nacos.io/zh-cn/docs/what-is-nacos.html Apollo：https://www.apolloconfig.com/#/zh/README 优点 集中化管理配置，配置文件“不落地” 有相关 sdk 调用，支持热更新等高级功能 缺点 要维护一个高可用的 三方服务 增加了维护成本 热更新方案 需要另外编码去开发 云原生方式管理(推荐) ​\t将应用配置和密匙等文件交由k8s的configMap、secret来管理，容器启动时候，直接将configMap、secret挂载进pod即可使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 apiVersion: extensions/v1beta1 kind: Deployment metadata: name: my-nginx spec: replicas: 1 template: metadata: labels: run: my-nginx spec: containers: - name: my-nginx image: harbor-001.jimmysong.io/library/nginx:1.9 ports: - containerPort: 80 volumeMounts: - name: config-volume mountPath: /etc/config volumes: - name: config-volume configMap: name: special-config --- apiVersion: v1 kind: ConfigMap metadata: name: special-config namespace: default data: log_level: INFO 相关资料连接 pod 挂载 configMap：https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/\nconfigMap 挂载后热更新实验：https://jimmysong.io/kubernetes-handbook/concepts/configmap-hot-update.html\n将多个secret或configMap挂载到一个目录下：https://stackoverflow.com/questions/59855142/use-a-single-volume-to-mount-multiple-files-from-secrets-or-configmaps\n热更新方案 采用一个三方插件监控 secret和configMap变动，如果有变动，则更新pod做到热更新\nhttps://github.com/stakater/Reloader 总结 ​\t以上几种方式都是笔者个人开发中所使用或经历过的，对于一般的传统小型程序采用git或者都放入一个项目下即可，如果是公司的业务都上云了，服务都在k8s中那么最后一种云原生的管理方式是我个人比较推荐的。\n","permalink":"https://luenci.com/en/posts/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%92%8C%E7%83%AD%E6%9B%B4%E6%96%B0/","summary":"\u003ch1 id=\"程序配置服务和热更新\"\u003e程序配置服务和热更新\u003c/h1\u003e\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e​\t在开发过程中，因为不同环境中有不同的配置，所以往往一个项目要同时保存着不同环境的配置文件（\u003ccode\u003edev\u003c/code\u003e，\u003ccode\u003etest\u003c/code\u003e，\u003ccode\u003estaging\u003c/code\u003e，\u003ccode\u003eprd\u003c/code\u003e）等。如果没有一个方便简洁的管理这些配置文件方式，排查问题也会变的麻烦。接下来介绍几种我所经历的几种配置文件管理方案\u003c/p\u003e\n\u003ch2 id=\"git-分支管理\"\u003egit 分支管理\u003c/h2\u003e\n\u003cp\u003e​\t顾名思义就是利用 \u003ccode\u003egit\u003c/code\u003e 的分支来管理不同环境的配置，比如\u003ccode\u003edev\u003c/code\u003e分支就是对应存放这\u003ccode\u003edev\u003c/code\u003e的配置文件。\u003c/p\u003e\n\u003ch3 id=\"优点\"\u003e优点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e分支管理更符合开发的代码习惯，只关心本分支的代码和配置\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"缺点\"\u003e缺点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e不符合\u003ccode\u003egit-flow\u003c/code\u003e流程，如果\u003ccode\u003etest\u003c/code\u003e配置有改动，那么就要直接编辑\u003ccode\u003etest\u003c/code\u003e分支代码，而不是从\u003ccode\u003edev\u003c/code\u003e分支合并过去。排查配置相关问题不友善\u003c/li\u003e\n\u003cli\u003e一份配置文件就一个分支，维护代价太大，有些舍本琢末了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"热更新方案无\"\u003e热更新方案无\u003c/h3\u003e\n\u003ch2 id=\"所有配置文件都放在项目下\"\u003e所有配置文件都放在项目下\u003c/h2\u003e\n\u003cp\u003e​\t这种方式就是把所有的配置文件集中放在项目下的某个目录，用环境变量的方式去加载指定的配置文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003epackage\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eswitch\u003c/span\u003e env{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ecase\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;dev\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eload\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;dev.config\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ecase\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eload\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test.config\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eload\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;local.config\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"优点-1\"\u003e优点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e配置统一集中管理，修改方便\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"缺点-1\"\u003e缺点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e配置文件过多容易使项目结构变的“难看”，判断依赖过多，不优雅。\u003c/li\u003e\n\u003cli\u003e无法做到热更新，配置更改需要重新发布代码\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"热更新方案无-1\"\u003e热更新方案无\u003c/h3\u003e\n\u003ch2 id=\"配置中心\"\u003e配置中心\u003c/h2\u003e\n\u003cp\u003e​\t将配置文件都放到三方的服务中保管，比如\u003ccode\u003enacos\u003c/code\u003e、\u003ccode\u003eApollo\u003c/code\u003e等配置中心\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enacos：https://nacos.io/zh-cn/docs/what-is-nacos.html\u003c/li\u003e\n\u003cli\u003eApollo：https://www.apolloconfig.com/#/zh/README\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"优点-2\"\u003e优点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e集中化管理配置，配置文件“不落地”\u003c/li\u003e\n\u003cli\u003e有相关 \u003ccode\u003esdk\u003c/code\u003e 调用，支持热更新等高级功能\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"缺点-2\"\u003e缺点\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e要维护一个高可用的 三方服务 增加了维护成本\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"热更新方案\"\u003e热更新方案\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e需要另外编码去开发\u003c/li\u003e\n\u003c/ul\u003e","title":"服务配置和热更新"},{"content":"sync.Once 的用法 ​ 在多数情况下，sync.Once 被用于控制变量的初始化，这个变量的读写通常遵循单例模式，满足这三个条件：\n当且仅当第一次读某个变量时，进行初始化（写操作） 变量被初始化过程中，所有读都被阻塞（读操作；当变量初始化完成后，读操作继续进行） 变量仅初始化一次，初始化完成后驻留在内存里 实例化一次客户端 ​\t在标准库中不乏有大量 sync.Once 的使用案例，在 strings 包中 replace.go 里实现字符串批量替换功能时，需要预编译生成替换规则，即采用不同的替换算法并创建相关算法实例，因 strings.Replacer 实现是线程安全且支持规则复用，在第一次解析替换规则并创建对应算法实例后，可以并发的进行字符串替换操作，避免多次解析替换规则浪费资源。\n先看一下 strings.Replacer 的结构定义：\n1 2 3 4 5 6 // source: strings/replace.go type Replacer struct { once sync.Once // guards buildOnce method r replacer oldnew []string } ​\t这里定义了 once sync.Once 用来控制 r replacer 替换算法初始化，当我们使用 strings.NewReplacer 创建 strings.Replacer 时，这里采用惰性算法，并没有在这时进行 build 解析替换规则并创建对应算法实例，而是在执行替换时( Replacer.Replace 和 Replacer.WriteString)进行的, r.once.Do(r.buildOnce) 使用 sync.Once 的 Do 方法保证只有在首次执行时才会执行 buildOnce 方法，而在 buildOnce 中调用 build 解析替换规则并创建对应算法实例，在 buildOnce 中进行赋值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // source: strings/replace.go func NewReplacer(oldnew ...string) *Replacer { if len(oldnew)%2 == 1 { panic(\u0026#34;strings.NewReplacer: odd argument count\u0026#34;) } return \u0026amp;Replacer{oldnew: append([]string(nil), oldnew...)} } func (r *Replacer) buildOnce() { r.r = r.build() r.oldnew = nil } func (b *Replacer) build() replacer { .... } func (r *Replacer) Replace(s string) string { r.once.Do(r.buildOnce) return r.r.Replace(s) } func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error) { r.once.Do(r.buildOnce) return r.r.WriteString(w, s) } ​\t简单来说，once.Do 中的函数只会执行一次，并保证 once.Do 返回时，传入 Do 的函数已经执行完成。多个 goroutine 同时执行 once.Do 的时候，可以保证抢占到 once.Do 执行权的 goroutine 执行完 once.Do 后，其他 goroutine 才能得到返回。\n​\tonce.Do 接收一个函数作为参数，该函数不接受任何参数，不返回任何参数。具体做什么由使用方决定，错误处理也由使用方控制，对函数初始化的结果也由使用方进行保存。\n资源清理退出 ​\t一种错误处理的例子 exec.closeOnce，exec.closeOnce 保证了重复关闭文件，永远只执行一次，并且总是返回首次关闭产生的错误信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // source: os/exec/exec.go type closeOnce struct { *os.File once sync.Once err error } func (c *closeOnce) Close() error { c.once.Do(c.close) return c.err } func (c *closeOnce) close() { c.err = c.File.Close() } nsq的停止 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // source: apps/nsqd/main.go type program struct { once sync.Once nsqd *nsqd.NSQD } func main() { prg := \u0026amp;program{} if err := svc.Run(prg, syscall.SIGINT, syscall.SIGTERM); err != nil { logFatal(\u0026#34;%s\u0026#34;, err) } } func (p *program) Sweight() error { p.once.Do(func() { p.nsqd.Exit() }) return nil }\t常见的单例模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var ( onceHost sync.Once hostQueue *mq.PubSub ) func getHostInstance() *mq.PubSub { onceHost.Do(func() { var err error hostQueue, err = mq.NewPubSub(context.Background()) if err != nil { log.Error(err) } }) return hostQueue } 参考链接 https://blog.thinkeridea.com/202101/go/exsync/once.html https://github.com/nsqio/nsq/blob/master/apps/nsqd/main.go ","permalink":"https://luenci.com/en/posts/sync.once-%E7%9A%84%E6%8E%A2%E7%A9%B6/","summary":"\u003ch2 id=\"synconce-的用法\"\u003e\u003ccode\u003esync.Once\u003c/code\u003e 的用法\u003c/h2\u003e\n\u003cp\u003e​    在多数情况下，\u003ccode\u003esync.Once\u003c/code\u003e 被用于控制变量的初始化，这个变量的读写通常遵循单例模式，满足这三个条件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当且仅当第一次读某个变量时，进行初始化（写操作）\u003c/li\u003e\n\u003cli\u003e变量被初始化过程中，所有读都被阻塞（读操作；当变量初始化完成后，读操作继续进行）\u003c/li\u003e\n\u003cli\u003e变量仅初始化一次，初始化完成后驻留在内存里\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"实例化一次客户端\"\u003e实例化一次客户端\u003c/h3\u003e\n\u003cp\u003e​\t在标准库中不乏有大量 \u003ccode\u003esync.Once\u003c/code\u003e 的使用案例，在 \u003ccode\u003estrings\u003c/code\u003e 包中 \u003ccode\u003ereplace.go\u003c/code\u003e 里实现字符串批量替换功能时，需要预编译生成替换规则，即采用不同的替换算法并创建相关算法实例，因 \u003ccode\u003estrings.Replacer\u003c/code\u003e 实现是线程安全且支持规则复用，在第一次解析替换规则并创建对应算法实例后，可以并发的进行字符串替换操作，避免多次解析替换规则浪费资源。\u003c/p\u003e\n\u003cp\u003e先看一下 \u003ccode\u003estrings.Replacer\u003c/code\u003e 的结构定义：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// source: strings/replace.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003etype\u003c/span\u003e Replacer \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tonce   sync.Once \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// guards buildOnce method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr      replacer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\toldnew []\u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t这里定义了 \u003ccode\u003eonce sync.Once\u003c/code\u003e 用来控制 \u003ccode\u003er replacer\u003c/code\u003e 替换算法初始化，当我们使用 \u003ccode\u003estrings.NewReplacer\u003c/code\u003e 创建 \u003ccode\u003estrings.Replacer\u003c/code\u003e 时，这里采用惰性算法，并没有在这时进行 \u003ccode\u003ebuild\u003c/code\u003e 解析替换规则并创建对应算法实例，而是在执行替换时( \u003ccode\u003eReplacer.Replace\u003c/code\u003e 和 \u003ccode\u003eReplacer.WriteString\u003c/code\u003e)进行的, \u003ccode\u003er.once.Do(r.buildOnce)\u003c/code\u003e 使用 \u003ccode\u003esync.Once\u003c/code\u003e 的 \u003ccode\u003eDo\u003c/code\u003e 方法保证只有在首次执行时才会执行 \u003ccode\u003ebuildOnce\u003c/code\u003e 方法，而在 \u003ccode\u003ebuildOnce\u003c/code\u003e 中调用 \u003ccode\u003ebuild\u003c/code\u003e 解析替换规则并创建对应算法实例，在 \u003ccode\u003ebuildOnce\u003c/code\u003e 中进行赋值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// source: strings/replace.go\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eNewReplacer\u003c/span\u003e(oldnew \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e\u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eReplacer {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e len(oldnew)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tpanic(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;strings.NewReplacer: odd argument count\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003eReplacer{oldnew: append([]string(\u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e), oldnew\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e)}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eReplacer) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebuildOnce\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr.r = r.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebuild\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr.oldnew = \u003cspan style=\"color:#79c0ff\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (b \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eReplacer) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebuild\u003c/span\u003e() replacer {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eReplacer) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eReplace\u003c/span\u003e(s \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr.once.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDo\u003c/span\u003e(r.buildOnce)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e r.r.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eReplace\u003c/span\u003e(s)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efunc\u003c/span\u003e (r \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eReplacer) \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWriteString\u003c/span\u003e(w io.Writer, s \u003cspan style=\"color:#ff7b72\"\u003estring\u003c/span\u003e) (n \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e, err \u003cspan style=\"color:#ff7b72\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tr.once.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eDo\u003c/span\u003e(r.buildOnce)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e r.r.\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eWriteString\u003c/span\u003e(w, s)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t简单来说，\u003ccode\u003eonce.Do\u003c/code\u003e 中的函数只会执行一次，并保证 \u003ccode\u003eonce.Do\u003c/code\u003e 返回时，传入 \u003ccode\u003eDo\u003c/code\u003e 的函数已经执行完成。多个 \u003ccode\u003egoroutine\u003c/code\u003e 同时执行 \u003ccode\u003eonce.Do\u003c/code\u003e 的时候，可以保证抢占到 \u003ccode\u003eonce.Do\u003c/code\u003e 执行权的 \u003ccode\u003egoroutine\u003c/code\u003e 执行完 \u003ccode\u003eonce.Do\u003c/code\u003e 后，其他 \u003ccode\u003egoroutine\u003c/code\u003e 才能得到返回。\u003c/p\u003e\n\u003cp\u003e​\t\u003cstrong\u003e\u003ccode\u003eonce.Do\u003c/code\u003e 接收一个函数作为参数，该函数不接受任何参数，不返回任何参数。具体做什么由使用方决定，错误处理也由使用方控制，对函数初始化的结果也由使用方进行保存\u003c/strong\u003e。\u003c/p\u003e","title":"Golang Sync.Once 的探究"},{"content":"golang go get 私有库解决方案 注意：go get 只支持 https协议的库路径 \u0026#x203c;\u0026#xfe0f;\n前言 ​\t在我们开发过程中会自己封装一些工具库，在某个项目中使用。但是如果有别的项目想使用你封装的库，那么此时你就需要将工具库封装为一个go module，给其它项目导入。一般公司内部的库是不对外开放的，这时候就需要搭建代理去拉取私有仓库\n原理架构图 准备工作 nginx 搭建 ​\t详细安装教程可以参考这篇：https://blog.csdn.net/t8116189520/article/details/81909574\nnginx 配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { server { listen 443 ssl; server_name xxx.xxx.com; ssl_certificate /etc/nginx/ssl/xxx.pem; ssl_certificate_key /etc/nginx/ssl/xxx.key; # ssl验证相关配置 ssl_session_timeout 5m; # 缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 安全链接可选的加密协议 ssl_prefer_server_ciphers on; # 使用服务器端的首选算法 location / { proxy_pass http://127.0.0.1:8080; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } } } govanityurls 配置 Use a custom domain in your Go import path\n1 go install github.com/Lucareful/govanityurls@v1.0.3 # 我封装了一些，匹配全路由 编辑 vanity.yaml文件 1 2 3 4 # 代理路由匹配的前缀 /xxx/xxx: repo: https://真实的私有仓库地址 vsc: git 设置 govanityurls 为守护进程启动 systemd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 新建服务文件 /etc/systemd/system/vanity.service # 文件内容 [Unit] Description= Custom domain in your Go import path After=network.target [Service] Type=simple WorkingDirectory=/root/govanityurls/ # vanity.yaml 文件存放的路径 ExecStart=/home/gopath/bin/govanityurls -host xxxx.xxx.com(nginx代理的域名) Restart=always [Install] WantedBy=multi-user.target supervisord 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [program:govanityurls] directory = /root/govanityurls\t# vanity.yaml 文件存放的路径 command = /home/gopath/bin/govanityurls -host xxxx.xxx.com(nginx代理的域名) autostart = true startsecs = 5 autorestart = true startretries = 3 user = root redirect_stderr = true stdout_logfile_maxbytes = 20MB stdout_logfile_backups = 20 sweightasgroup=false killasgroup=false stdout_logfile = /root/log/go.log 总结 ​\t上面的架构设计中参照了tonybai小厂内部私有go模块拉取方案，我在此省略了了goproxy的搭建，只为私有库搭建了一个代理，公有库从公共module获取即可。\n参考资料 小厂内部私有Go module拉取方案 systemd 实战教程 定制go get的包路径 ","permalink":"https://luenci.com/en/posts/golang-go-get-%E7%A7%81%E6%9C%89%E5%BA%93%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","summary":"\u003ch1 id=\"golang-go-get-私有库解决方案\"\u003egolang go get 私有库解决方案\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：go get 只支持 https协议的库路径 \u0026#x203c;\u0026#xfe0f;\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e​\t\t在我们开发过程中会自己封装一些工具库，在某个项目中使用。但是如果有别的项目想使用你封装的库，那么此时你就需要将工具库封装为一个\u003ccode\u003ego module\u003c/code\u003e，给其它项目导入。一般公司内部的库是不对外开放的，这时候就需要搭建代理去拉取私有仓库\u003c/p\u003e\n\u003ch2 id=\"原理架构图\"\u003e原理架构图\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://tonybai.com/wp-content/uploads/the-approach-to-go-get-private-go-module-in-house-9.png\" alt=\"img\"  /\u003e\n\u003c/p\u003e","title":"go get 私有库解决方案"},{"content":"聊聊链路追踪 OpenTracing 什么是 Tracing 对 Tracing 的定义是，在软件工程中，Tracing 指使用特定的日志记录程序的执行信息，与之相近的还有两个概念，它们分别是 Logging 和 Metrics。\nLogging：用于记录离散的事件，包含程序执行到某一点或某一阶段的详细信息。 Metrics：可聚合的数据，且通常是固定类型的时序数据，包括 Counter、Gauge、Histogram 等。 Tracing：记录单个请求的处理流程，其中包括服务调用和处理时长等信息。 同时这三种定义相交的情况也比较常见。\nLogging \u0026amp; Metrics：可聚合的事件。例如分析某对象存储的 Nginx 日志，统计某段时间内 GET、PUT、DELETE、OPTIONS 操作的总数。 Metrics \u0026amp; Tracing：单个请求中的可计量数据。例如 SQL 执行总时长、gRPC 调用总次数。 Tracing \u0026amp; Logging：请求阶段的标签数据。例如在 Tracing 的信息中标记详细的错误原因。 针对每种分析需求，我们都有非常强大的集中式分析工具。\nLogging：ELK，近几年势头最猛的日志分析服务，无须多言。\nMetrics：Prometheus，第二个加入 CNCF 的开源项目，非常好用。\nTracing：OpenTracing 和 Jaeger，Jaeger 是 Uber 开源的一个兼容 OpenTracing 标准的分布式追踪服务。目前 Jaeger 也加入了 CNCF。\n原理 ​\t分布式追踪系统大体分为三个部分，数据采集、数据持久化、数据展示。数据采集是指在代码中埋点，设置请求中要上报的阶段，以及设置当前记录的阶段隶属于哪个上级阶段。数据持久化则是指将上报的数据落盘存储，例如 Jaeger 就支持多种存储后端，可选用 Cassandra 或者 Elasticsearch。数据展示则是前端根据 Trace ID 查询与之关联的请求阶段，并在界面上呈现。\n上图是一个请求的流程例子，请求从客户端发出，到达负载均衡，再依次进行认证、计费，最后取到目标资源。\n请求过程被采集之后，会以上图的形式呈现，横坐标是时间，圆角矩形是请求的执行的各个阶段。\n发展历史 ​\t早在 2005 年，Google 就在内部部署了一套分布式追踪系统 Dapper，并发表了一篇论文《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》，阐述了该分布式追踪系统的设计和实现，可以视为分布式追踪领域的鼻祖。随后出现了受此启发的开源实现，如 Zipkin、SourceGraph 开源的 Appdash、Red Hat 的 Hawkular APM、Uber 开源的 Jaeger 等。但各家的分布式追踪方案是互不兼容的，这才诞生了 OpenTracing。\n​\tOpenTracing 是一个 Library，定义了一套通用的数据上报接口，要求各个分布式追踪系统都来实现这套接口。这样一来，应用程序只需要对接 OpenTracing，而无需关心后端采用的到底什么分布式追踪系统，因此开发者可以无缝切换分布式追踪系统，也使得在通用代码库增加对分布式追踪的支持成为可能。\n数据模型 a Trace can be thought of as a directed acyclic graph (DAG) of Spans。- Trace 是多个 Span 组成的有向非循环图。\n这部分在 OpenTracing 的规范中写的非常清楚，下面只大概翻译一下其中的关键部分，细节可参考原始文档 《The OpenTracing Semantic Specification》。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Causal relationships between Spans in a single Trace [Span A] ←←←(the root span) | +------+------+ | | [Span B] [Span C] ←←←(Span C is a `ChildOf` Span A) | | [Span D] +---+-------+ | | [Span E] [Span F] \u0026gt;\u0026gt;\u0026gt; [Span G] \u0026gt;\u0026gt;\u0026gt; [Span H] ↑ ↑ ↑ (Span G `FollowsFrom` Span F) Trace 是调用链，每个调用链由多个 Span 组成。Span 的单词含义是范围，可以理解为某个处理阶段。Span 和 Span 的关系称为 Reference。上图中，总共有标号为 A-H 的 8 个阶段。\n1 2 3 4 5 6 7 8 9 Temporal relationships between Spans in a single Trace ––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–\u0026gt; time [Span A···················································] [Span B··············································] [Span D··········································] [Span C········································] [Span E·······] [Span F··] [Span G··] [Span H··] 上图是按照时间顺序呈现的调用链。\n每个阶段（Span）包含如下状态：\n操作名称 起始时间 结束时间 一组零或多个键:值结构的 Span标签 ( span Tags)。键必须是字符串。值可以是字符串，布尔或数值类型. 一组零或多个 Span日志 (span Logs)，其中每个都是一个键:值映射并与一个时间戳配对。键必须是字符串，值可以是任何类型。 并非所有的 OpenTracing 实现都必须支持每种值类型。 阶段上下文（SpanContext），其中包含 Trace ID 和 Span ID 引用关系（References）：零或多个因果相关的 Span 间的 References (通过那些相关的 Span 的 SpanContext ) 每个 SpanContext 封装了如下状态:\n任何需要跟跨进程 Span 关联的，依赖于 OpenTracing 实现的状态(例如 Trace 和 Span 的 id) 键:值结构的跨进程的 Baggage Items（区别于 span tag，baggage 是全局范围，在 span 间保持传递，而tag 是 span 内部，不会被子 span 继承使用。） ​\t阶段（Span）可以有 ChildOf 和 FollowsFrom 两种引用关系。ChildOf 用于表示父子关系，即在某个阶段中发生了另一个阶段，是最常见的阶段关系，典型的场景如调用 RPC 接口、执行 SQL、写数据。FollowsFrom 表示跟随关系，意为在某个阶段之后发生了另一个阶段，用来描述顺序执行关系。\n一个 Trace 的 json 案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 { \u0026#34;data\u0026#34;: [ { \u0026#34;traceID\u0026#34;: \u0026#34;790e003e22209ca4\u0026#34;, \u0026#34;spans\u0026#34;: [ { \u0026#34;traceID\u0026#34;: \u0026#34;790e003e22209ca4\u0026#34;, \u0026#34;spanID\u0026#34;: \u0026#34;790e003e22209ca4\u0026#34;, \u0026#34;flags\u0026#34;: 1, \u0026#34;operationName\u0026#34;: \u0026#34;say-hello\u0026#34;, \u0026#34;references\u0026#34;: [], \u0026#34;startTime\u0026#34;: 1611318627992154, \u0026#34;duration\u0026#34;: 524139, \u0026#34;tags\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;sampler.type\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;const\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;sampler.param\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bool\u0026#34;, \u0026#34;value\u0026#34;: true }, { \u0026#34;key\u0026#34;: \u0026#34;hello-to\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;This trace\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;internal.span.format\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;proto\u0026#34; } ], \u0026#34;logs\u0026#34;: [], \u0026#34;processID\u0026#34;: \u0026#34;p1\u0026#34;, \u0026#34;warnings\u0026#34;: null }, { \u0026#34;traceID\u0026#34;: \u0026#34;790e003e22209ca4\u0026#34;, \u0026#34;spanID\u0026#34;: \u0026#34;d32970aca4d7a39b\u0026#34;, \u0026#34;flags\u0026#34;: 1, \u0026#34;operationName\u0026#34;: \u0026#34;format-string\u0026#34;, \u0026#34;references\u0026#34;: [], \u0026#34;startTime\u0026#34;: 1611318628080551, \u0026#34;duration\u0026#34;: 432791, \u0026#34;tags\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;span.kind\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;client\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;http.method\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;GET\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;http.url\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;http://localhost:8081/api/format/This trace\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;internal.span.format\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;proto\u0026#34; } ], \u0026#34;logs\u0026#34;: [ { \u0026#34;timestamp\u0026#34;: 1611318628510535, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;event\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string.Format\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Hello, This trace!\u0026#34; } ] } ], \u0026#34;processID\u0026#34;: \u0026#34;p1\u0026#34;, \u0026#34;warnings\u0026#34;: null }, { \u0026#34;traceID\u0026#34;: \u0026#34;790e003e22209ca4\u0026#34;, \u0026#34;spanID\u0026#34;: \u0026#34;4b73f8e8e77fe9dc\u0026#34;, \u0026#34;flags\u0026#34;: 1, \u0026#34;operationName\u0026#34;: \u0026#34;print-hello\u0026#34;, \u0026#34;references\u0026#34;: [], \u0026#34;startTime\u0026#34;: 1611318628515966, \u0026#34;duration\u0026#34;: 259, \u0026#34;tags\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;internal.span.format\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;proto\u0026#34; } ], \u0026#34;logs\u0026#34;: [ { \u0026#34;timestamp\u0026#34;: 1611318628516206, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;event\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;WriteLine\u0026#34; } ] } ], \u0026#34;processID\u0026#34;: \u0026#34;p1\u0026#34;, \u0026#34;warnings\u0026#34;: null } ], \u0026#34;processes\u0026#34;: { \u0026#34;p1\u0026#34;: { \u0026#34;serviceName\u0026#34;: \u0026#34;hello-world\u0026#34;, \u0026#34;tags\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;hostname\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Whuanle-PC\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;ip\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;172.20.240.1\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;jaeger.version\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;CSharp-0.4.2.0\u0026#34; } ] } }, \u0026#34;warnings\u0026#34;: null } ], \u0026#34;total\u0026#34;: 0, \u0026#34;limit\u0026#34;: 0, \u0026#34;offset\u0026#34;: 0, \u0026#34;errors\u0026#34;: null } 建议使用方式 ​\t首先假设某微服务已经有了中心化的日志收集和处理系统，如果还没有的话，强烈建议部署一套 ELK。再假设对于每一个请求，都会有一个贯穿整个请求流程的 Request ID，如果还没有的话，强烈建议加一个。以上准备完毕后，可以选取一个分布式追踪系统，集成到服务当中，建议采用 Jaeger。重点在最后，在 Trace 的起始处，将 Trace ID 设置为 Request ID，这么一来就打通了日志系统和分布式追踪系统，可以使用同一个 ID 查询请求的事件流和日志流，从此开启了上帝视角。\n具体使用 ​\t脱离分布式追踪系统单独讲 OpenTracing 的使用方法的话，意义不大，所以本文就不介绍具体的使用方法，之后会以 Jaeger 为例，解释如何给微服务增加分布式追踪，以及如何与现有的日志系统集合。\n如果想简单了解一下使用方式，可参考 OpenTracing 的《Quick Start》。\n非入侵式 ​\t除了通过修改应用程序代码增加分布式追踪之外，还有一种不需要修改代码的非入侵的方式，那就是 Service Mesh。Service Mesh 一般会被翻译成服务啮合层，它是在网络层面做文章，通过 Sidecar 的方式为 Pod 增加一层代理，通过这层网络代理来实现一些服务治理的功能，因为是工作在网络层面，可以做到跨语言、非入侵。Istio 则是目前最成熟的 Service Mash 工具，支持启用分布式追踪服务。Istio 会修改微服务之间发送的网络请求，在请求中注入 Trace 和 Span 标记，再将采集到的数据发送到支持 OpenTracing 的分布式追踪服务中，从而拿到请求在微服务中的调用链。当然这种方式也有缺点，它无法追踪某个微服务内部的调用过程，并且目前阶段 Istio 只能追踪 HTTP 请求，能够覆盖的范围比较有限。如果想追踪更详细的数据，还是需要在中间件和代码中埋点，不过好在埋点的过程并不复杂，不会成为一个额外的负担。\n实战环节 opentelemetry POC 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 // main.go package main import ( \u0026#34;context\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/signal\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/exporters/stdout/stdouttrace\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/resource\u0026#34; \u0026#34;go.opentelemetry.io/otel/sdk/trace\u0026#34; semconv \u0026#34;go.opentelemetry.io/otel/semconv/v1.4.0\u0026#34; ) func newExporter(w io.Writer) (trace.SpanExporter, error) { return stdouttrace.New( stdouttrace.WithWriter(w), // Use human-readable output. stdouttrace.WithPrettyPrint(), // Do not print timestamps for the demo. stdouttrace.WithoutTimestamps(), ) } func newResource() *resource.Resource { r, _ := resource.Merge( resource.Default(), resource.NewWithAttributes( semconv.SchemaURL, semconv.ServiceNameKey.String(\u0026#34;fib\u0026#34;), semconv.ServiceVersionKey.String(\u0026#34;v0.1.0\u0026#34;), attribute.String(\u0026#34;environment\u0026#34;, \u0026#34;demo\u0026#34;), ), ) return r } func main() { l := log.New(os.Stdout, \u0026#34;\u0026#34;, 0) // Write telemetry data to a file. f, err := os.Create(\u0026#34;traces.txt\u0026#34;) if err != nil { l.Fatal(err) } defer f.Close() exp, err := newExporter(f) if err != nil { l.Fatal(err) } tp := trace.NewTracerProvider( trace.WithBatcher(exp), trace.WithResource(newResource()), ) defer func() { if err := tp.Shutdown(context.Background()); err != nil { l.Fatal(err) } }() otel.SetTracerProvider(tp) sigCh := make(chan os.Signal, 1) signal.Notify(sigCh, os.Interrupt) errCh := make(chan error) app := NewApp(os.Stdin, l) go func() { errCh \u0026lt;- app.Run(context.Background()) }() select { case \u0026lt;-sigCh: l.Println(\u0026#34;\\ngoodbye\u0026#34;) return case err := \u0026lt;-errCh: if err != nil { l.Fatal(err) } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 // app.go package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;go.opentelemetry.io/otel\u0026#34; \u0026#34;go.opentelemetry.io/otel/attribute\u0026#34; \u0026#34;go.opentelemetry.io/otel/codes\u0026#34; \u0026#34;go.opentelemetry.io/otel/trace\u0026#34; ) const name = \u0026#34;fib\u0026#34; func Fibonacci(n uint) (uint64, error) { if n \u0026lt;= 1 { return uint64(n), nil } var n2, n1 uint64 = 0, 1 for i := uint(2); i \u0026lt; n; i++ { n2, n1 = n1, n1+n2 } return n1 + n2, nil } type App struct { r io.Reader l *log.Logger } func NewApp(r io.Reader, l *log.Logger) *App { return \u0026amp;App{r, l} } func (a *App) Run(ctx context.Context) error { for { // Each execution of the run loop, we should get a new \u0026#34;root\u0026#34; span and context. newCtx, span := otel.Tracer(name).Start(ctx, \u0026#34;Run\u0026#34;) n, err := a.Poll(newCtx) if err != nil { span.End() return err } a.Write(newCtx, n) } } func (a *App) Poll(ctx context.Context) (uint, error) { _, span := otel.Tracer(name).Start(ctx, \u0026#34;Poll\u0026#34;) defer span.End() a.l.Print(\u0026#34;What Fibonacci number would you like to konw: \u0026#34;) var n uint _, err := fmt.Fscanf(a.r, \u0026#34;%d\\n\u0026#34;, \u0026amp;n) // Store n as a string to not overflow an int64. nStr := strconv.FormatUint(uint64(n), 10) span.SetAttributes(attribute.String(\u0026#34;request.n\u0026#34;, nStr)) return n, err } func (a *App) Write(ctx context.Context, n uint) { var span trace.Span ctx, span = otel.Tracer(name).Start(ctx, \u0026#34;Poll\u0026#34;) defer span.End() f, err := func(ctx context.Context) (uint64, error) { _, span := otel.Tracer(name).Start(ctx, \u0026#34;Fibonacci\u0026#34;) defer span.End() f, err := Fibonacci(n) if err != nil { span.RecordError(err) span.SetStatus(codes.Error, err.Error()) } return f, err }(ctx) if err != nil { a.l.Printf(\u0026#34;Fibonacci(%d): %v\\n\u0026#34;, n, err) } else { a.l.Printf(\u0026#34;Fibonacci(%d)= %d\\n\u0026#34;, n, f) } } Jaeger 安装 docker-compose 文件安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 --- version: \u0026#34;3\u0026#34; services: elasticsearch: image: elasticsearch:7.14.2 networks: - elastic-jaeger ports: - \u0026#34;127.0.0.1:9200:9200\u0026#34; - \u0026#34;127.0.0.1:9300:9300\u0026#34; restart: on-failure environment: - cluster.name=jaeger-cluster - discovery.type=single-node - http.host=0.0.0.0 - transport.host=127.0.0.1 - ES_JAVA_OPTS=-Xms512m -Xmx512m - xpack.security.enabled=false volumes: - E:\\data\\es:/usr/share/elasticsearch/data jaeger-collector: image: jaegertracing/jaeger-collector ports: - \u0026#34;14269:14269\u0026#34; - \u0026#34;14268:14268\u0026#34; - \u0026#34;14267:14267\u0026#34; - \u0026#34;9411:9411\u0026#34; networks: - elastic-jaeger restart: on-failure environment: - SPAN_STORAGE_TYPE=elasticsearch command: [ \u0026#34;--es.server-urls=http://elasticsearch:9200\u0026#34;, \u0026#34;--es.num-shards=1\u0026#34;, \u0026#34;--es.num-replicas=0\u0026#34;, \u0026#34;--log-level=error\u0026#34; ] depends_on: - elasticsearch jaeger-agent: image: jaegertracing/jaeger-agent hostname: jaeger-agent command: [\u0026#34;--reporter.grpc.host-port=jaeger-collector:14267\u0026#34;] ports: - \u0026#34;5775:5775/udp\u0026#34; - \u0026#34;6831:6831/udp\u0026#34; - \u0026#34;6832:6832/udp\u0026#34; - \u0026#34;5778:5778\u0026#34; networks: - elastic-jaeger restart: on-failure environment: - SPAN_STORAGE_TYPE=elasticsearch depends_on: - jaeger-collector jaeger-query: image: jaegertracing/jaeger-query environment: - SPAN_STORAGE_TYPE=elasticsearch - no_proxy=localhost ports: - \u0026#34;16686:16686\u0026#34; - \u0026#34;16687:16687\u0026#34; networks: - elastic-jaeger restart: on-failure command: [ \u0026#34;--es.server-urls=http://elasticsearch:9200\u0026#34;, \u0026#34;--span-storage.type=elasticsearch\u0026#34;, \u0026#34;--log-level=debug\u0026#34; ] depends_on: - jaeger-agent volumes: esdata: driver: local networks: elastic-jaeger: driver: bridge http和grpc中使用 Jaeger 1. Gin 通过 Middleware 可以追踪到最外层的 Handler，更深层方法需要追踪的话可以通过ctx将span传递到各个方法中去进一步追踪。\nhttp 请求使用 request.Header 做载体。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package middleware import ( \u0026#34;context\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/opentracing/opentracing-go\u0026#34; \u0026#34;github.com/opentracing/opentracing-go/ext\u0026#34; \u0026#34;i-go/apm/trace/config\u0026#34; ) // Jaeger 通过 middleware 将 tracer 和 ctx 注入到 gin.Context 中 func Jaeger() gin.HandlerFunc { return func(c *gin.Context) { var parentSpan opentracing.Span tracer, closer := config.NewTracer(\u0026#34;gin-demo\u0026#34;) defer closer.Close() // 直接从 c.Request.Header 中提取 span,如果没有就新建一个 spCtx, err := opentracing.GlobalTracer().Extract(opentracing.HTTPHeaders, opentracing.HTTPHeadersCarrier(c.Request.Header)) if err != nil { parentSpan = tracer.StartSpan(c.Request.URL.Path) defer parentSpan.Finish() } else { parentSpan = opentracing.StartSpan( c.Request.URL.Path, opentracing.ChildOf(spCtx), opentracing.Tag{Key: string(ext.Component), Value: \u0026#34;HTTP\u0026#34;}, ext.SpanKindRPCServer, ) defer parentSpan.Finish() } // 然后存到 g.ctx 中 供后续使用 c.Set(\u0026#34;tracer\u0026#34;, tracer) c.Set(\u0026#34;ctx\u0026#34;, opentracing.ContextWithSpan(context.Background(), parentSpan)) c.Next() } } 然后在 gin 中添加这个 middleware 即可。\n1 e := gin.New() e.Use(middleware.Jaeger()) 需要更细粒度的追踪，只需要将 span 传递到各个方法即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func Register(e *gin.Engine) { e.GET(\u0026#34;/ping\u0026#34;, Ping) } func Ping(c *gin.Context) { psc, _ := c.Get(\u0026#34;ctx\u0026#34;) ctx := psc.(context.Context) doPing1(ctx) doPing2(ctx) c.JSON(200, gin.H{\u0026#34;message\u0026#34;: \u0026#34;pong\u0026#34;}) } func doPing1(ctx context.Context) { span, _ := opentracing.StartSpanFromContext(ctx, \u0026#34;doPing1\u0026#34;) defer span.Finish() time.Sleep(time.Second) fmt.Println(\u0026#34;pong\u0026#34;) } func doPing2(ctx context.Context) { span, _ := opentracing.StartSpanFromContext(ctx, \u0026#34;doPing2\u0026#34;) defer span.Finish() time.Sleep(time.Second) fmt.Println(\u0026#34;pong\u0026#34;) } 2. gRPC 追踪 gRPC 则通过拦截器实现。\n这里使用使用 gRPC 的metadata 来做载体。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 func ClientInterceptor(tracer opentracing.Tracer) grpc.UnaryClientInterceptor { return func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error { span, _ := opentracing.StartSpanFromContext(ctx, \u0026#34;call gRPC\u0026#34;, opentracing.Tag{Key: string(ext.Component), Value: \u0026#34;gRPC\u0026#34;}, ext.SpanKindRPCClient) defer span.Finish() md, ok := metadata.FromOutgoingContext(ctx) if !ok { md = metadata.New(nil) } else { md = md.Copy() } err := tracer.Inject(span.Context(), opentracing.TextMap, MDReaderWriter{md}) if err != nil { span.LogFields(log.String(\u0026#34;inject-error\u0026#34;, err.Error())) } newCtx := metadata.NewOutgoingContext(ctx, md) err = invoker(newCtx, method, req, reply, cc, opts...) if err != nil { span.LogFields(log.String(\u0026#34;call-error\u0026#34;, err.Error())) } return err } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func ServerInterceptor(tracer opentracing.Tracer) grpc.UnaryServerInterceptor { return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) ( resp interface{}, err error) { md, ok := metadata.FromIncomingContext(ctx) if !ok { md = metadata.New(nil) } // 服务端拦截器则是在MD中把 span提取出来 spanContext, err := tracer.Extract(opentracing.TextMap, MDReaderWriter{md}) if err != nil \u0026amp;\u0026amp; err != opentracing.ErrSpanContextNotFound { fmt.Print(\u0026#34;extract from metadata error: \u0026#34;, err) } else { span := tracer.StartSpan( info.FullMethod, ext.RPCServerOption(spanContext), opentracing.Tag{Key: string(ext.Component), Value: \u0026#34;gRPC\u0026#34;}, ext.SpanKindRPCServer, ) defer span.Finish() ctx = opentracing.ContextWithSpan(ctx, span) } return handler(ctx, req) } } MDReaderWriter 结构如下\n为了做载体，必须要实现 opentracing.TextMapWriter opentracing.TextMapReader 这两个接口。\n1 2 3 4 5 6 7 8 9 10 11 12 // TextMapWriter is the Inject() carrier for the TextMap builtin format.With // it, the caller can encode a SpanContext for propagation as entries in a map // of unicode strings. type TextMapWriter interface { Set(key, val string) } // TextMapReader is the Extract() carrier for the TextMap builtin format. With it, // the caller can decode a propagated SpanContext as entries in a map of // unicode strings. type TextMapReader interface { ForeachKey(handler func(key, val string) error) error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func main() { // tracer tracer, closer := config.NewTracer(\u0026#34;gRPC-hello\u0026#34;) defer closer.Close() ctx, cancel := context.WithTimeout(context.Background(), time.Second*5) defer cancel() // conn conn, err := grpc.DialContext( ctx, \u0026#34;localhost:50051\u0026#34;, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithUnaryInterceptor( grpcMiddleware.ChainUnaryClient( interceptor.ClientInterceptor(tracer), ), ), ) if err != nil { fmt.Println(\u0026#34;grpc conn err:\u0026#34;, err) return } client := proto.NewHelloClient(conn) r, err := client.SayHello(context.Background(), \u0026amp;proto.HelloReq{Name: \u0026#34;xiaoming\u0026#34;}) if err != nil { log.Fatalf(\u0026#34;could not greet: %v\u0026#34;, err) } log.Printf(\u0026#34;Greeting: %s\u0026#34;, r.Message) } 然后建立连接或者启动服务的时候把拦截器添加上即可\n建立连接\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func main() { // tracer tracer, closer := config.NewTracer(\u0026#34;gRPC-hello\u0026#34;) defer closer.Close() ctx, cancel := context.WithTimeout(context.Background(), time.Second*5) defer cancel() // conn conn, err := grpc.DialContext( ctx, \u0026#34;localhost:50051\u0026#34;, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithUnaryInterceptor( grpcMiddleware.ChainUnaryClient( interceptor.ClientInterceptor(tracer), ), ), ) if err != nil { fmt.Println(\u0026#34;grpc conn err:\u0026#34;, err) return } client := proto.NewHelloClient(conn) r, err := client.SayHello(context.Background(), \u0026amp;proto.HelloReq{Name: \u0026#34;xiaoming\u0026#34;}) if err != nil { log.Fatalf(\u0026#34;could not greet: %v\u0026#34;, err) } log.Printf(\u0026#34;Greeting: %s\u0026#34;, r.Message) } 启动服务\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func main() { lis, err := net.Listen(\u0026#34;tcp\u0026#34;, \u0026#34;50051\u0026#34;) if err != nil { log.Fatalf(\u0026#34;failed to listen: %v\u0026#34;, err) } tracer, closer := config.NewTracer(\u0026#34;gRPC-hello\u0026#34;) defer closer.Close() // UnaryInterceptor s := grpc.NewServer(grpc.UnaryInterceptor( grpc_middleware.ChainUnaryServer( interceptor.ServerInterceptor(tracer), ), )) proto.RegisterHelloServer(s, \u0026amp;helloServer{}) if err := s.Serve(lis); err != nil { panic(err) } } 参考文章 https://www.lixueduan.com/posts/tracing/04-jaeger-gin-grpc/\nhttps://pjw.io/articles/2018/05/08/opentracing-explanations/#section-3\nhttps://wu-sheng.gitbooks.io/opentracing-io/content/\nhttps://zhuanlan.zhihu.com/p/479209788\n","permalink":"https://luenci.com/en/posts/%E8%81%8A%E8%81%8A%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-opentracing/","summary":"\u003ch1 id=\"聊聊链路追踪-opentracing\"\u003e聊聊链路追踪 \u003ccode\u003eOpenTracing\u003c/code\u003e\u003c/h1\u003e\n\u003ch2 id=\"什么是-tracing\"\u003e什么是 Tracing\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/logging-metrics-tracing.o.png\" alt=\"Logging Metrics Tracing\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e对 Tracing 的定义是，在软件工程中，Tracing 指使用特定的日志记录程序的执行信息，与之相近的还有两个概念，它们分别是 Logging 和 Metrics。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLogging：用于记录离散的事件，包含程序执行到某一点或某一阶段的详细信息。\u003c/li\u003e\n\u003cli\u003eMetrics：可聚合的数据，且通常是固定类型的时序数据，包括 Counter、Gauge、Histogram 等。\u003c/li\u003e\n\u003cli\u003eTracing：记录单个请求的处理流程，其中包括服务调用和处理时长等信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e同时这三种定义相交的情况也比较常见。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLogging \u0026amp; Metrics：可聚合的事件。例如分析某对象存储的 \u003ccode\u003eNginx\u003c/code\u003e 日志，统计某段时间内 GET、PUT、DELETE、OPTIONS 操作的总数。\u003c/li\u003e\n\u003cli\u003eMetrics \u0026amp; Tracing：单个请求中的可计量数据。例如 \u003ccode\u003eSQL\u003c/code\u003e 执行总时长、\u003ccode\u003egRPC\u003c/code\u003e 调用总次数。\u003c/li\u003e\n\u003cli\u003eTracing \u0026amp; Logging：请求阶段的标签数据。例如在 Tracing 的信息中标记详细的错误原因。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e针对每种分析需求，我们都有非常强大的集中式分析工具。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eLogging：\u003ca href=\"https://www.elastic.co/\"\u003eELK\u003c/a\u003e，近几年势头最猛的日志分析服务，无须多言。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMetrics：\u003ca href=\"https://prometheus.io/\"\u003ePrometheus\u003c/a\u003e，第二个加入 \u003ccode\u003eCNCF\u003c/code\u003e 的开源项目，非常好用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTracing：\u003ca href=\"http://opentracing.io/\"\u003eOpenTracing\u003c/a\u003e 和 \u003ca href=\"https://www.jaegertracing.io/\"\u003eJaeger\u003c/a\u003e，Jaeger 是 \u003ccode\u003eUber \u003c/code\u003e开源的一个兼容 \u003ccode\u003eOpenTracing\u003c/code\u003e 标准的分布式追踪服务。目前 Jaeger 也加入了 \u003ccode\u003eCNCF\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"原理\"\u003e原理\u003c/h2\u003e\n\u003cp\u003e​\t分布式追踪系统大体分为三个部分，数据采集、数据持久化、数据展示。数据采集是指在代码中埋点，设置请求中要上报的阶段，以及设置当前记录的阶段隶属于哪个上级阶段。数据持久化则是指将上报的数据落盘存储，例如 Jaeger 就支持多种存储后端，可选用 \u003ccode\u003eCassandra\u003c/code\u003e 或者 \u003ccode\u003eElasticsearch\u003c/code\u003e。数据展示则是前端根据 Trace ID 查询与之关联的请求阶段，并在界面上呈现。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/request-demonstration.o.png\" alt=\"Request Demonstration\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e上图是一个请求的流程例子，请求从客户端发出，到达负载均衡，再依次进行认证、计费，最后取到目标资源。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/Lucareful/RepoImg/img/opentracing-demonstration.o.png\" alt=\"OpenTracing Demonstration\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e请求过程被采集之后，会以上图的形式呈现，横坐标是时间，圆角矩形是请求的执行的各个阶段。\u003c/p\u003e","title":"聊聊链路追踪 OpenTracing"},{"content":"GO 代码风格指南 风格原则 ​\t有一些总体原则总结了如何考虑编写可读的 Go 代码。以下是可读代码的属性，按重要性排序：\n清晰：代码的目的和基本原理对读者来说是清楚的。 简单性：代码以尽可能简单的方式实现其目标。 简洁：代码具有高信噪比。 可维护性：代码的编写使其易于维护。 一致性：代码与更广泛的 Google 代码库一致。 命名 下划线 Go 中的名称通常不应包含下划线。这个原则有三个例外：\n仅由生成的代码导入的包名称可能包含下划线。有关如何选择多词包名称的更多详细信息，请参阅包名称 文件中的测试、基准和示例函数名称*_test.go可能包含下划线。 与操作系统或 cgo 互操作的低级库可能会重用标识符，如syscall. 在大多数代码库中，这预计是非常罕见的。 包名 ​\tGo 包名称应该简短并且只包含小写字母。由多个单词组成的包名称应全部小写。例如，包tabwriter未命名为tabWriter、TabWriter或 tab_writer。\n​\t避免选择可能被常用局部变量名遮蔽的包名。例如，usercount是一个比 更好的包名 count，因为count是一个常用的变量名。\n​\tGo 包名称不应该有下划线。如果您需要导入名称中确实有一个包（通常来自生成的或第三方代码），则必须在导入时将其重命名为适合在 Go 代码中使用的名称。\n一个例外是仅由生成的代码导入的包名称可能包含下划线。具体例子包括：\n使用_test外部测试包的后缀，例如集成测试 使用包级文档示例_test的后缀 ​\t避免使用无意义的包名称，例如util, utility, common,helper等。查看更多关于 所谓的“实用程序包”的信息。\n​\t当导入的包被重命名（例如import foopb \u0026quot;path/to/foo_go_proto\u0026quot;）时，包的本地名称必须符合上述规则，因为本地名称决定了包中的符号在文件中的引用方式。如果给定的导入在多个文件中重命名，特别是在相同或附近的包中，则应尽可能使用相同的本地名称以保持一致性。\n另请参阅：https://go.dev/blog/package-names\n参数别名 接收器变量名称必须是：\n短（通常是一两个字母的长度） 类型本身的缩写 一致地应用于该类型的每个接收器 长名 更好的名字 func (tray Tray) func (t Tray) func (info *ResearchInfo) func (ri *ResearchInfo) func (this *ReportWriter) func (w *ReportWriter) func (self *Scanner) func (s *Scanner) 常量名称 ​\t常量名称必须像 Go 中的所有其他名称一样使用MixedCaps（导出 的常量以大写字母开头，而未导出的常量以小写字母开头。）即使它打破了其他语言的约定，这也适用。\n​\t常量名称不应是其值的派生词，而应解释值的含义。\n1 2 3 4 5 6 7 8 // Good: const MaxPacketSize = 512 const ( ExecuteBit = 1 \u0026lt;\u0026lt; iota WriteBit ReadBit ) 不要使用非 MixedCaps 常量名称或带有K前缀的常量。\n1 2 3 4 // Bad: const MAX_PACKET_SIZE = 512 const kMaxBufferSize = 1024 const KMaxUsersPergroup = 500 根据它们的角色而不是它们的值来命名常量。如果一个常量除了它的值之外没有其他作用，那么就没有必要将它定义为一个常量。\n1 2 3 4 5 6 7 // Bad: const Twelve = 12 const ( UserNameColumn = \u0026#34;username\u0026#34; GroupColumn = \u0026#34;group\u0026#34; ) 缩写词 ​\t名称中的首字母缩略词或首字母缩略词（例如，URL和NATO）应该具有相同的大小写。URL应显示为URL或url（如urlPony, 或 URLPony），绝不能显示为Url. 这也适用于ID“标识符”的缩写；写appID而不是appId。\n在具有多个首字母缩写词的名称中（例如XMLAPI，因为它包含XML and API），给定首字母缩写词中的每个字母都应该具有相同的大小写，但名称中的每个首字母缩写词不需要具有相同的大小写。 在首字母缩写包含小写字母（例如DDoS, iOS, gRPC）的名称中，首字母缩写应该像在标准散文中一样出现，除非您需要为了导出性而更改第一个字母。在这些情况下，整个首字母大写应该是相同的情况（例如ddos, IOS, GRPC）。 初始主义 范围 正确的 不正确 XML API 已出口 XMLAPI XmlApi, XMLApi, XmlAPI,XMLapi XML API 未出口 xmlAPI xmlapi,xmlApi iOS 已出口 IOS Ios,IoS iOS 未出口 iOS ios gRPC 已出口 GRPC Grpc gRPC 未出口 gRPC grpc 分布式拒绝服务 已出口 DDoS DDOS,Ddos 分布式拒绝服务 未出口 ddos dDoS,dDOS 函数名称 ​\t函数和方法名称不应使用Get或get前缀，除非底层概念使用单词“get”（例如 HTTP GET）。更喜欢直接以名词开头的名称，例如使用Countsover GetCounts。\n如果该函数涉及执行复杂的计算或执行远程调用，则可以使用不同的词（如Compute或）代替，以向读者清楚地表明函数调用可能需要时间并且可能会阻塞或失败。Fetch Get\n变量名 一般的经验法则是，名称的长度应与其范围的大小成正比，并与其在该范围内使用的次数成反比。在文件范围内创建的变量可能需要多个单词，而作用域为单个内部块的变量可能是单个单词甚至只是一两个字符，以保持代码清晰并避免无关信息。\n这是一个粗略的基线。这些数字准则不是严格的规则。根据上下文、清晰度和简洁性应用判断。\n小范围是执行一两个小操作的范围，比如 1-7 行。 中等范围是一些小的或一个大的操作，比如 8-15 行。 大范围是一个或几个大操作，比如 15-25 行。 非常大的范围是指超过一页（例如，超过 25 行）的任何内容。 在小范围内可能非常清楚的名称（例如，c对于计数器）在较大范围内可能是不够的，并且需要澄清以提醒读者其在代码中的目的。一个作用域中有很多变量，或者表示相似值或概念的变量，可能需要比作用域建议的更长的变量名称。\n概念的特殊性也有助于保持变量名称的简洁。例如，假设只有一个数据库在使用，像db这样的短变量名通常可能为非常小的范围保留，即使范围非常大也可能保持完全清晰。在这种情况下，根据范围的大小，单个词 database可能是可以接受的，但不是必需的，因为这db是一个非常常见的词缩写，几乎没有其他解释。\n局部变量的名称应该反映它包含的内容以及它在当前上下文中的使用方式，而不是值的来源。例如，通常情况下最佳局部变量名称与结构或协议缓冲区字段名称不同。\n一般来说：\n像count或这样的单词名称options是一个很好的起点。\n可以添加其他词来消除相似名称的歧义，例如 userCountand projectCount。\n不要为了节省打字而简单地放下字母。例如Sandbox比 更受欢迎Sbx，特别是对于导出的名称。\n从大多数变量名中 省略\n类型和类似类型的词。\n对于数字，userCount是比numUsersor 更好的名称usersInt。 对于切片，users是一个比userSlice. 如果范围内有两个版本的值，则包含类似类型的限定符是可以接受的，例如，您可能将输入存储在解析值中ageString并age用于解析值。 省略周围上下文清楚的词。例如，在一个UserCount方法的实现中，调用的一个局部变量 userCount很可能是多余的；count, users, 甚至c都一样可读。\n单字母变量名 单字母变量名可能是减少 重复的有用工具，但也可能使代码不必要地变得不透明。将它们的使用限制在完整单词很明显以及它会重复出现以代替单字母变量的情况。\n一般来说：\n对于方法接收者变量，首选一个字母或两个字母的名称。 对常见类型使用熟悉的变量名通常很有帮助： r对于一个io.Reader或*http.Request w对于一个io.Writer或http.ResponseWriter 单字母标识符作为整数循环变量是可接受的，特别是对于索引（例如，i）和坐标（例如，x和y）。 当范围很短时，缩写可以是可接受的循环标识符，例如for _, n := range nodes { ... }. 重复 ​\t一段 Go 源代码应该避免不必要的重复。一个常见的来源是重复名称，其中通常包含不必要的单词或重复其上下文或类型。如果相同或相似的代码段在很近的地方多次出现，代码本身也可能是不必要的重复。\n重复命名可以有多种形式，包括：\n包与导出的符号名称 ​\t命名导出的符号时，包的名称始终在包外可见，因此应减少或消除两者之间的冗余信息。如果一个包仅导出一种类型并且它以包本身命名，则构造函数的规范名称是Newif one is required。\n**示例：**重复名称 -\u0026gt; 更好的名称\nwidget.NewWidget-\u0026gt;widget.New widget.NewWidgetWithName-\u0026gt;widget.NewWithName db.LoadFromDatabase-\u0026gt;db.Load goatteleportutil.CountGoatsTeleported-\u0026gt;gtutil.CountGoatsTeleported 或goatteleport.Count myteampb.MyTeamMethodRequest-\u0026gt;mtpb.MyTeamMethodRequest或 myteampb.MethodRequest 变量名与类型 ​\t编译器总是知道变量的类型，并且在大多数情况下，读者也可以通过变量的使用方式清楚地知道变量是什么类型。如果一个变量的值在同一范围内出现两次，则只需明确变量的类型。\n重复名称 更好的名字 var numUsers int var users int var nameString string var name string var primaryProject *Project var primary *Project 如果该值以多种形式出现，则可以使用像rawandparsed或底层表示这样的额外词来澄清：\n1 2 3 4 5 6 // Good: limitStr := r.FormValue(\u0026#34;limit\u0026#34;) limit, err := strconv.Atoi(limitStr) // Good: limitRaw := r.FormValue(\u0026#34;limit\u0026#34;) limit, err := strconv.Atoi(limitRaw) 外部上下文与本地名称 ​\t包含来自周围上下文信息的名称通常会产生额外的噪音而没有任何好处。包名、方法名、类型名、函数名、导入路径，甚至文件名都可以提供自动限定其中所有名称的上下文。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // Bad: // In package \u0026#34;ads/targeting/revenue/reporting\u0026#34; type AdsTargetingRevenueReport struct{} func (p *Project) ProjectName() string // Good: // In package \u0026#34;ads/targeting/revenue/reporting\u0026#34; type Report struct{} func (p *Project) Name() string // Bad: // In package \u0026#34;sqldb\u0026#34; type DBConnection struct{} // Good: // In package \u0026#34;sqldb\u0026#34; type Connection struct{} // Bad: // In package \u0026#34;ads/targeting\u0026#34; func Process(in *pb.FooProto) *Report { adsTargetingID := in.GetAdsTargetingID() } // Good: // In package \u0026#34;ads/targeting\u0026#34; func Process(in *pb.FooProto) *Report { id := in.GetAdsTargetingID() } ​\t重复通常应该在符号用户的上下文中进行评估，而不是孤立地进行评估。例如，下面的代码有很多名称，在某些情况下可能没问题，但在上下文中是多余的：\n1 2 3 4 5 6 7 8 9 // Bad: func (db *DB) UserCount() (userCount int, err error) { var userCountInt64 int64 if dbLoadError := db.LoadFromDatabase(\u0026#34;count(distinct users)\u0026#34;, \u0026amp;userCountInt64); dbLoadError != nil { return 0, fmt.Errorf(\u0026#34;failed to load user count: %s\u0026#34;, dbLoadError) } userCount = int(userCountInt64) return userCount, nil } 相反，通常可以省略有关从上下文或用法中清楚的名称的信息：\n1 2 3 4 5 6 7 8 // Good: func (db *DB) UserCount() (int, error) { var count int64 if err := db.Load(\u0026#34;count(distinct users)\u0026#34;, \u0026amp;count); err != nil { return 0, fmt.Errorf(\u0026#34;failed to load user count: %s\u0026#34;, err) } return int(count), nil } imports 导入重命名 ​\t只应重命名导入以避免与其他导入的名称冲突。（由此推论，好的包名不应该需要重命名。）在名称冲突的情况下，更愿意重命名最本地或特定于项目的导入。包的本地名称（别名）必须遵循 包命名指南，包括禁止使用下划线和大写字母。\n​\t生成的 protocol buffer 包必须重命名以从名称中删除下划线，并且它们的别名必须有pb后缀。有关详细信息，请参阅 原型和存根最佳实践。\n1 2 3 4 // Good: import ( fspb \u0026#34;path/to/package/foo_service_go_proto\u0026#34; ) 导入的包名称没有有用的识别信息（例如 package v1）应该重命名以包括以前的路径组件。重命名必须与导入相同包的其他本地文件一致，并且可以包括版本号。\n**注意：**最好重命名包以符合 良好的包名称，但这对于 vendored 目录中的包通常不可行。\n1 2 3 4 5 // Good: import ( core \u0026#34;github.com/kubernetes/api/core/v1\u0026#34; meta \u0026#34;github.com/kubernetes/apimachinery/pkg/apis/meta/v1beta1\u0026#34; ) ​\t如果您需要导入一个名称与您要使用的公共局部变量名称（例如url, ssh）冲突的包，并且您希望重命名该包，首选方法是使用pkg后缀（例如urlpkg）。请注意，可以使用局部变量隐藏包；仅当此类变量在范围内时仍需要使用包时，才需要重命名。\n导入分组 导入应分为两组：\n标准库包 其他（项目和销售）包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Good: package main import ( \u0026#34;fmt\u0026#34; \u0026#34;hash/adler32\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/dsnet/compress/flate\u0026#34; \u0026#34;golang.org/x/text/encoding\u0026#34; \u0026#34;google.golang.org/protobuf/proto\u0026#34; foopb \u0026#34;myproj/foo/proto/proto\u0026#34; _ \u0026#34;myproj/rpc/protocols/dial\u0026#34; _ \u0026#34;myproj/security/auth/authhooks\u0026#34; ) ​\t将项目包分成多个组是可以接受的，例如，如果您想要一个单独的组来重命名、import-only-for-side-effects 或另一个特殊的导入组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Good: package main import ( \u0026#34;fmt\u0026#34; \u0026#34;hash/adler32\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/dsnet/compress/flate\u0026#34; \u0026#34;golang.org/x/text/encoding\u0026#34; \u0026#34;google.golang.org/protobuf/proto\u0026#34; foopb \u0026#34;myproj/foo/proto/proto\u0026#34; _ \u0026#34;myproj/rpc/protocols/dial\u0026#34; _ \u0026#34;myproj/security/auth/authhooks\u0026#34; ) ​\t注意：goimports工具不支持维护可选组 - 超出标准库和 Google 导入之间强制分离所需的拆分。额外的导入子组需要作者和审稿人的注意，以保持符合状态。\n​\t也是 AppEngine 应用程序的 Google 程序应该有一个单独的组用于 AppEngine 导入。\n导入“空白” ( import _) 仅为了副作用import _ \u0026quot;package\u0026quot;而导入的包（使用语法 ）只能在主包或需要它们的测试中导入。\n此类软件包的一些示例包括：\n时间/tzdata 图像处理代码中的image/jpeg 避免在库包中导入空白，即使库间接依赖于它们。将副作用导入限制到主包有助于控制依赖性，并使得编写依赖于不同导入的测试成为可能，而不会发生冲突或浪费构建成本。\n以下是此规则的唯一例外情况：\n您可以使用空白导入绕过 nogo 静态检查器中对不允许导入的检查。 您可以在使用编译器指令的源文件中使用嵌入包的空白导入。//go:embed **提示：**如果您创建的库包间接依赖于生产中的副作用导入，请记录预期用途。\n导入“点”( import .) ​\timport .表单是一种语言功能，允许将从另一个包导出的标识符无条件地带到当前包中。有关更多信息，请参阅语言规范。\n不要在 Google 代码库中使用此功能；这使得更难判断功能来自何处。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Bad: package foo_test import ( \u0026#34;bar/testutil\u0026#34; // also imports \u0026#34;foo\u0026#34; . \u0026#34;foo\u0026#34; ) var myThing = Bar() // Bar defined in package foo; no qualification needed. // Good: package foo_test import ( \u0026#34;bar/testutil\u0026#34; // also imports \u0026#34;foo\u0026#34; \u0026#34;foo\u0026#34; ) var myThing = foo.Bar() 错误 返回错误 ​\t用于error表示函数可能会失败。按照惯例，error是最后一个结果参数。\n1 2 // Good: func Good() error { /* ... */ } ​\t返回nil错误是表示操作成功的惯用方式，否则可能会失败。如果函数返回错误，除非另有明确说明，否则调用者必须将所有非错误返回值视为未指定。通常，非错误返回值是它们的零值，但这不能假设。\n1 2 3 4 5 6 7 8 // Good: func GoodLookup() (*Result, error) { // ... if err != nil { return nil, err } return res, nil } ​\t返回错误的导出函数应该使用error类型返回它们。具体的错误类型容易受到细微错误的影响：具体的nil指针可以包装到接口中，从而变成非零值（请参阅 主题上的 Go FAQ 条目）。\n1 2 // Bad: func Bad() *os.PathError { /*...*/ } ​\t提示：带有context.Context参数的函数通常应返回一个error，以便调用者可以确定在函数运行时上下文是否被取消。\n错误字符串 ​\t错误字符串不应大写（除非以导出名称、专有名词或首字母缩写词开头）并且不应以标点符号结尾。这是因为错误字符串通常在打印给用户之前出现在其他上下文中。\n1 2 3 4 // Bad: err := fmt.Errorf(\u0026#34;Something bad happened.\u0026#34;) // Good: err := fmt.Errorf(\u0026#34;something bad happened\u0026#34;) ​\t另一方面，完整显示消息（日志记录、测试失败、API 响应或其他 UI）的样式取决于，但通常应大写。\n1 2 3 4 // Good: log.Infof(\u0026#34;Operation aborted: %v\u0026#34;, err) log.Errorf(\u0026#34;Operation aborted: %v\u0026#34;, err) t.Errorf(\u0026#34;Op(%q) failed unexpectedly; err=%v\u0026#34;, args, err) 处理错误 ​\t遇到错误的代码应该慎重选择如何处理它。_使用变量丢弃错误通常是不合适的。如果函数返回错误，请执行以下操作之一：\n立即处理并解决错误。 将错误返回给调用者。 在特殊情况下，请致电log.Fatal或（如果绝对必要） panic。 注意： log.Fatalf不是标准库日志。参见 [#logging]。\n​\t在极少数情况下，忽略或丢弃错误是合适的（例如(*bytes.Buffer).Write，记录的调用永远不会失败），随附的注释应该解释为什么这是安全的。\n1 2 3 4 // Good: var b *bytes.Buffer n, _ := b.Write(p) // never returns a non-nil error 有关错误处理的更多讨论和示例，请参阅 Effective Go and best practices。\n带内错误 ​\t在 C 和类似语言中，函数返回值（如 -1、null 或空字符串）以表示错误或缺少结果是很常见的。这称为带内错误处理。\n1 2 3 // Bad: // Lookup returns the value for key or -1 if there is no mapping for key. func Lookup(key string) int ​\t未能检查带内错误值可能会导致错误，并将错误归因于错误的函数。\n1 2 3 4 // Bad: // The following line returns an error that Parse failed for the input value, // whereas the failure was that there is no mapping for missingKey. return Parse(Lookup(missingKey)) ​\tGo 对多个返回值的支持提供了更好的解决方案（请参阅 Effective Go 部分的多个返回值）。函数不应要求客户端检查带内错误值，而应返回一个附加值以指示其其他返回值是否有效。这个返回值可能是一个错误，也可能是一个布尔值，无需解释，应该是最终的返回值。\n1 2 3 // Good: // Lookup returns the value for key or ok=false if there is no mapping for key. func Lookup(key string) (value string, ok bool) ​\t此 API 可防止调用者错误写入Parse(Lookup(key))而导致编译时错误，因为Lookup(key)它有 2 个输出。\n以这种方式返回错误鼓励更健壮和明确的错误处理：\n1 2 3 4 5 6 // Good: value, ok := Lookup(key) if !ok { return fmt.Errorf(\u0026#34;no value for %q\u0026#34;, key) } return Parse(value) ​\t一些标准库函数，如 package中的函数strings，返回带内错误值。这极大地简化了字符串操作代码，但代价是需要程序员更加勤奋。一般来说，Google 代码库中的 Go 代码应该为错误返回额外的值。\n缩进错误流程 ​\t在继续您的代码的其余部分之前处理错误。这通过使读者能够快速找到正常路径来提高代码的可读性。同样的逻辑适用于任何测试条件然后以终止条件结束的块（例如return，，，panic）log.Fatal。\n​\t如果不满足终止条件，则运行的代码应出现在if 块之后，并且不应在else子句中缩进。\n1 2 3 4 5 6 7 8 9 10 11 12 // Good: if err != nil { // error handling return // or continue, etc. } // normal code // Bad: if err != nil { // error handling } else { // normal code that looks abnormal due to indentation } **提示：**如果您在多行代码中使用一个变量，通常不值得使用if-with-initializer 样式。在这些情况下，通常最好将声明移出并使用标准if 语句：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Good: x, err := f() if err != nil { // error handling return } // lots of code that uses x // across multiple lines // Bad: if x, err := f(); err != nil { // error handling return } else { // lots of code that uses x // across multiple lines } 有关详细信息，请参阅Go 技巧 #1：视线和 TotT：通过减少嵌套 来降低代码复杂性。\n文字格式语法 无切片 ​\tnil对于大多数用途，空切片和空切片之间没有功能差异。内置函数在切片上的表现len和cap预期一样。nil\n1 2 3 4 5 6 7 8 9 10 11 12 // Good: import \u0026#34;fmt\u0026#34; var s []int // nil fmt.Println(s) // [] fmt.Println(len(s)) // 0 fmt.Println(cap(s)) // 0 for range s {...} // no-op s = append(s, 42) fmt.Println(s) // [42] ​\t如果您将空切片声明为局部变量（尤其是如果它可以作为返回值的来源），则首选 nil 初始化以降低调用者出现错误的风险。\n1 2 3 4 5 // Good: var t []string // Bad: t := []string{} ​\t不要创建强制其客户区分 nil 和空切片的 API。\n1 2 3 4 5 6 7 8 9 10 // Good: // Ping pings its targets. // Returns hosts that successfully responded. func Ping(hosts []string) ([]string, error) { ... } // Bad: // Ping pings its targets and returns a list of hosts // that successfully responded. Can be empty if the input was empty. // nil signifies that a system error occurred. func Ping(hosts []string) []string { ... } ​\t在设计接口时，避免区分nil切片和nil非零长度切片，因为这会导致细微的编程错误。这通常是通过使用lento 检查是否为空来完成的，而不是== nil.\n​\t此实现接受两个nil和零长度切片为“空”：\n1 2 3 4 5 6 7 8 // Good: // describeInts describes s with the given prefix, unless s is empty. func describeInts(prefix string, s []int) { if len(s) == 0 { return } fmt.Println(prefix, s) } ​\t而不是依赖于区别作为 API 的一部分：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Bad: func maybeInts() []int { /* ... */ } // describeInts describes s with the given prefix; pass nil to skip completely. func describeInts(prefix string, s []int) { // The behavior of this function unintentionally changes depending on what // maybeInts() returns in \u0026#39;empty\u0026#39; cases (nil or []int{}). if s == nil { return } fmt.Println(prefix, s) } describeInts(\u0026#34;Here are some ints:\u0026#34;, maybeInts()) 有关进一步讨论，请参阅带内错误。\n函数格式化 函数或方法声明的签名应保留在一行中以避免缩进混淆。\n函数参数列表可以构成 Go 源文件中最长的几行。但是，它们先于缩进的变化，因此很难以不使后续行看起来像函数体的一部分的方式以令人困惑的方式断行：\n1 2 3 4 5 6 // Bad: func (r *SomeType) SomeLongFunctionName(foo1, foo2, foo3 string, foo4, foo5, foo6 int) { foo7 := bar(foo1) // ... } 请参阅最佳实践，了解一些选项，以缩短函数的调用站点，否则会有很多参数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Good: good := foo.Call(long, CallOptions{ Names: list, Of: of, The: parameters, Func: all, Args: on, Now: separate, Visible: lines, }) // Bad: bad := foo.Call( long, list, of, parameters, all, on, separate, lines, ) 通常可以通过分解出局部变量来缩短行。\n1 2 3 // Good: local := helper(some, parameters, here) good := foo.Call(list, of, parameters, local) ​\t同样，函数和方法调用不应仅根据行长度来分开。\n1 2 3 4 5 // Good: good := foo.Call(long, list, of, parameters, all, on, one, line) // Bad: bad := foo.Call(long, list, of, parameters, with, arbitrary, line, breaks) ​\t不要为特定的函数参数添加注释。相反，使用 选项结构或向函数文档添加更多详细信息。\n1 2 3 4 5 6 7 // Good: good := server.New(ctx, server.Options{Port: 42}) // Bad: bad := server.New( ctx, 42, // Port ) ​\t如果调用站点长得让人不舒服，请考虑重构：\n1 2 3 4 5 6 7 8 9 10 // Good: // Sometimes variadic arguments can be factored out replacements := []string{ \u0026#34;from\u0026#34;, \u0026#34;to\u0026#34;, // related values can be formatted adjacent to one another \u0026#34;source\u0026#34;, \u0026#34;dest\u0026#34;, \u0026#34;original\u0026#34;, \u0026#34;new\u0026#34;, } // Use the replacement struct as inputs to NewReplacer. replacer := strings.NewReplacer(replacements...) ​\t如果 API 无法更改或本地调用异常（无论调用是否太长），如果有助于理解调用，则始终允许添加换行符。\n1 2 3 4 5 6 7 8 9 10 11 // Good: canvas.RenderCube(cube, x0, y0, z0, x0, y0, z1, x0, y1, z0, x0, y1, z1, x1, y0, z0, x1, y0, z1, x1, y1, z0, x1, y1, z1, ) 请注意，上例中的线条并未环绕在特定的列边界处，而是根据坐标三元组进行分组。\n​\t函数内的长字符串字面值不应因行长而被打断。对于包含此类字符串的函数，可以在字符串格式后添加换行符，并且可以在下一行或后续行提供参数。关于换行符应该去哪里的决定最好基于输入的语义分组，而不是纯粹基于行的长度。\n1 2 3 4 5 6 7 8 9 10 // Good: log.Warningf(\u0026#34;Database key (%q, %d, %q) incompatible in transaction started by (%q, %d, %q)\u0026#34;, currentCustomer, currentOffset, currentKey, txCustomer, txOffset, txKey) // Bad: log.Warningf(\u0026#34;Database key (%q, %d, %q) incompatible in\u0026#34;+ \u0026#34; transaction started by (%q, %d, %q)\u0026#34;, currentCustomer, currentOffset, currentKey, txCustomer, txOffset, txKey) 条件和循环 ​\t声明if不应断行；多行if子句会导致 缩进混乱。\n1 2 3 4 5 6 7 // Bad: // The second if statement is aligned with the code within the if block, causing // indentation confusion. if db.CurrentStatusIs(db.InTransaction) \u0026amp;\u0026amp; db.ValuesEqual(db.TransactionKey(), row.Key()) { return db.Errorf(db.TransactionError, \u0026#34;query failed: row (%v): key does not match transaction key\u0026#34;, row) } 如果不需要短路行为，可以直接提取布尔操作数：\n1 2 3 4 5 6 // Good: inTransaction := db.CurrentStatusIs(db.InTransaction) keysMatch := db.ValuesEqual(db.TransactionKey(), row.Key()) if inTransaction \u0026amp;\u0026amp; keysMatch { return db.Error(db.TransactionError, \u0026#34;query failed: row (%v): key does not match transaction key\u0026#34;, row) } 可能还可以提取其他局部变量，尤其是在条件已经重复的情况下：\n1 2 3 4 5 6 7 8 9 10 // Good: uid := user.GetUniqueUserID() if db.UserIsAdmin(uid) || db.UserHasPermission(uid, perms.ViewServerConfig) || db.UserHasPermission(uid, perms.CreateGroup) { // ... } // Bad: if db.UserIsAdmin(user.GetUniqueUserID()) || db.UserHasPermission(user.GetUniqueUserID(), perms.ViewServerConfig) || db.UserHasPermission(user.GetUniqueUserID(), perms.CreateGroup) { // ... } if包含闭包或多行结构文字的语句应确保大括号匹配以避免 缩进混淆。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Good: if err := db.RunInTransaction(func(tx *db.TX) error { return tx.Execute(userUpdate, x, y, z) }); err != nil { return fmt.Errorf(\u0026#34;user update failed: %s\u0026#34;, err) } // Good: if _, err := client.Update(ctx, \u0026amp;upb.UserUpdateRequest{ ID: userID, User: user, }); err != nil { return fmt.Errorf(\u0026#34;user update failed: %s\u0026#34;, err) } 同样，不要尝试在for语句中插入人为的换行符。如果没有优雅的重构方式，你总是可以让这条线很长：\n1 2 3 4 // Good: for i, max := 0, collection.Size(); i \u0026lt; max \u0026amp;\u0026amp; !collection.HasPendingWriters(); i++ { // ... } 但是，通常有：\n1 2 3 4 5 6 7 // Good: for i, max := 0, collection.Size(); i \u0026lt; max; i++ { if collection.HasPendingWriters() { break } // ... } switch和case语句也应该保持在一行中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Good: switch good := db.TransactionStatus(); good { case db.TransactionStarting, db.TransactionActive, db.TransactionWaiting: // ... case db.TransactionCommitted, db.NoTransaction: // ... default: // ... } // Bad: switch bad := db.TransactionStatus(); bad { case db.TransactionStarting, db.TransactionActive, db.TransactionWaiting: // ... case db.TransactionCommitted, db.NoTransaction: // ... default: // ... } 如果行太长，缩进所有的案例并用空行分隔它们以避免缩进混淆：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Good: switch db.TransactionStatus() { case db.TransactionStarting, db.TransactionActive, db.TransactionWaiting, db.TransactionCommitted: // ... case db.NoTransaction: // ... default: // ... } 在比较变量和常量的条件语句中，将变量值放在相等运算符的左侧：\n1 2 3 4 // Good: if result == \u0026#34;foo\u0026#34; { // ... } 取而代之的是常数首先出现的不太清晰的措辞（“Yoda style conditionals”）：\n1 2 3 4 // Bad: if \u0026#34;foo\u0026#34; == result { // ... } 复制 为避免意外的别名和类似错误，从另一个包复制结构时要小心。例如，sync.Mutex 不得复制诸如此类的同步对象。\n该bytes.Buffer类型包含一个[]byte切片，并且作为对小字符串的优化，还包含一个切片可能引用的小字节数组。如果您复制 a Buffer，则副本中的切片可能会为原始数组设置别名，从而导致后续方法调用产生令人惊讶的效果。\nT通常，如果类型的方法与指针类型关联，则不要复制该类型的值*T。\n1 2 3 // Bad: b1 := bytes.Buffer{} b2 := b1 调用采用值接收器的方法可以隐藏副本。当您编写 API 时，如果您的结构包含不应复制的字段，您通常应该获取和返回指针类型。\n这些是可以接受的：\n1 2 3 4 5 6 7 8 9 10 11 // Good: type Record struct { buf bytes.Buffer // other fields omitted } func New() *Record {...} func (r *Record) Process(...) {...} func Consumer(r *Record) {...} 但这些通常是错误的：\n1 2 3 4 5 6 7 8 9 10 // Bad: type Record struct { buf bytes.Buffer // other fields omitted } func (r Record) Process(...) {...} // Makes a copy of r.buf func Consumer(r Record) {...} // Makes a copy of r.buf 本指南也适用于复印sync.Mutex。\n接口 ​\tGo接口通常属于使用接口类型值的包，而不是实现接口类型的包。实施包应该返回具体的（通常是指针或结构）类型。这样，无需大量重构即可将新方法添加到实现中。有关详细信息，请参阅GoTip #49：接受接口，返回具体类型 。\n​\t不要从使用接口的 API 导出接口的测试替身实现。相反，设计 API 以便可以使用实际实现的公共 API对其进行测试。有关详细信息，请参阅 GoTip #42：编写用于测试的存根。即使在使用真实实现不可行的情况下，也可能没有必要引入一个完全覆盖真实类型中所有方法的接口；消费者可以创建一个仅包含其所需方法的接口，如 GoTip #78：最小可行接口中所示。\n​\t要测试使用 Stubby RPC 客户端的包，请使用真实的客户端连接。如果无法在测试中运行真实服务器，Google 的内部做法是使用内部 rpctest 包（即将推出！）获取到本地 [test double] 的真实客户端连接。\n​\t不要在使用之前定义接口（请参阅 TotT：代码健康：消除 YAGNI 气味）(YAGNI: 你不需要它（ You Aren’t Gonna Need It)。如果没有实际的使用示例，就很难判断一个接口是否必要，更不用说它应该包含哪些方法了。\n软件开发的大部分成本是维护成本。减少维护成本的一个方法是：“只在当你真正需要它时，才去编写它”。\n如果包的用户不需要为他们传递不同的类型，请不要使用接口类型参数。\n不要导出包的用户不需要的接口。\n**TODO：**在接口上写一个更深入的文档并在此处链接到它。\n1 2 3 4 5 6 // Good: package consumer // consumer.go type Thinger interface { Thing() bool } func Foo(t Thinger) string { ... } 1 2 3 4 5 6 7 // Good: package consumer // consumer_test.go type fakeThinger struct{ ... } func (t fakeThinger) Thing() bool { ... } ... if Foo(fakeThinger{...}) == \u0026#34;x\u0026#34; { ... } 1 2 3 4 5 6 7 8 9 // Bad: package producer type Thinger interface { Thing() bool } type defaultThinger struct{ ... } func (t defaultThinger) Thing() bool { ... } func NewThinger() Thinger { return defaultThinger{ ... } } 1 2 3 4 5 6 7 // Good: package producer type Thinger struct{ ... } func (t Thinger) Thing() bool { ... } func NewThinger() Thinger { return Thinger{ ... } } 传值 不要为了节省几个字节而将指针作为函数参数传递。\n​\t如果一个函数x只读取它的参数*x，那么这个参数不应该是一个指针。这方面的常见实例包括传递一个指向字符串 ( *string) 的指针或一个指向接口值 ( *io.Reader) 的指针。在这两种情况下，值本身都是固定大小的，可以直接传递。\n​\t此建议不适用于大型结构，甚至可能会增加大小的小型结构。特别是，protocol buffer 消息通常应该由指针而不是值来处理。指针类型满足 proto.Message接口（被 , 等接受proto.Marshal）protocmp.Transform，并且协议缓冲区消息可能非常大，并且通常会随着时间的推移而变大。\n接收器类型 ​\t方法接收者可以作为值或指针传递，就好像它是常规函数参数一样。选择哪个应该基于该方法应该属于哪个方法集。\n​\t**正确性胜过速度或简单性。**在某些情况下，您必须使用指针值。在其他情况下，如果您对代码将如何增长没有很好的了解，则为大型类型选择指针或作为面向未来的指针，并为简单的普通旧数据使用值。\n下面的列表更详细地说明了每个案例：\n如果接收者是一个切片并且该方法不重新切片或重新分配切片，请使用值而不是指针。\n1 2 3 4 // Good: type Buffer []byte func (b Buffer) Len() int { return len(b) } 如果该方法需要改变接收者，则接收者必须是一个指针。\n1 2 3 4 5 6 7 8 9 // Good: type Counter int func (c *Counter) Inc() { *c++ } // See https://pkg.go.dev/container/heap. type Queue []Item func (q *Queue) Push(x Item) { *q = append([]Item{x}, *q...) } 如果接收者是一个包含 无法安全复制的字段的结构，请使用指针接收者。常见的例子是sync.Mutex和其他同步类型。\n1 2 3 4 5 6 7 8 9 10 11 // Good: type Counter struct { mu sync.Mutex total int } func (c *Counter) Inc() { c.mu.Lock() defer c.mu.Unlock() c.total++ } **提示：**检查类型的Godoc以获取有关复制是否安全的信息。\n如果接收器是“大”结构或数组，指针接收器可能更有效。传递结构等同于将其所有字段或元素作为参数传递给方法。如果这看起来太大而不能 按值传递，那么指针是一个不错的选择。\n对于将调用或与其他修改接收器的函数同时运行的方法，如果这些修改对您的方法不可见，请使用一个值；否则使用指针。\n如果接收器是一个结构或数组，其中任何一个元素都是指向可能发生变化的东西的指针，则更喜欢指针接收器以使读者清楚地了解可变性的意图。\n1 2 3 4 5 6 7 8 // Good: type Counter struct { m *Metric } func (c *Counter) Inc() { c.m.Add(1) } 如果接收者是内置类型，例如整数或字符串，不需要修改，则使用值。\n1 2 3 4 // Good: type User string func (u User) String() { return string(u) } 如果接收者是映射、函数或通道，请使用值而不是指针。\n1 2 3 4 5 // Good: // See https://pkg.go.dev/net/http#Header. type Header map[string][]string func (h Header) Add(key, value string) { /* omitted */ } 如果接收者是一个“小”数组或结构，它自然是一个没有可变字段和指针的值类型，那么值接收者通常是正确的选择。\n1 2 3 4 5 // Good: // See https://pkg.go.dev/time#Time. type Time struct { /* omitted */ } func (t Time) Add(d Duration) Time { /* omitted */ } 如有疑问，请使用指针接收器。\n作为一般准则，更喜欢使类型的方法全部为指针方法或全部为值方法。\n**注意：**关于将值或指针传递给函数是否会影响性能，存在很多错误信息。编译器可以选择将指针传递给堆栈上的值以及复制堆栈上的值，但在大多数情况下，这些考虑不应超过代码的可读性和正确性。当性能确实很重要时，重要的是在决定一种方法优于另一种方法之前，用一个现实的基准来分析这两种方法。\nswitch和break ​\t不要在子句break末尾使用没有目标标签的switch 语句；他们是多余的。与 C 和 Java 不同，switchGo 中的子句会自动中断，并且需要一条fallthrough语句来实现 C 风格的行为。break如果您想阐明空子句的目的，请使用注释而不是。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Good: switch x { case \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;: buf.WriteString(x) case \u0026#34;C\u0026#34;: // handled outside of the switch statement default: return fmt.Errorf(\u0026#34;unknown value: %q\u0026#34;, x) } // Bad: switch x { case \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;: buf.WriteString(x) break // this break is redundant case \u0026#34;C\u0026#34;: break // this break is redundant default: return fmt.Errorf(\u0026#34;unknown value: %q\u0026#34;, x) } **注意：**如果switch子句在for循环内，则使用breakwithin switch不会退出封闭for循环。\n1 2 3 4 5 6 for { switch x { case \u0026#34;A\u0026#34;: break // exits the switch, not the loop } } for要退出封闭循环，请在语句上使用标签：\n1 2 3 4 5 6 7 loop: for { switch x { case \u0026#34;A\u0026#34;: break loop // exits the loop } } ","permalink":"https://luenci.com/en/posts/golang%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/","summary":"\u003ch1 id=\"go-代码风格指南\"\u003eGO 代码风格指南\u003c/h1\u003e\n\u003ch2 id=\"风格原则\"\u003e风格原则\u003c/h2\u003e\n\u003cp\u003e​\t有一些总体原则总结了如何考虑编写可读的 Go 代码。以下是可读代码的属性，按重要性排序：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://google.github.io/styleguide/go/guide#clarity\"\u003e清晰\u003c/a\u003e\u003c/strong\u003e：代码的目的和基本原理对读者来说是清楚的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://google.github.io/styleguide/go/guide#simplicity\"\u003e简单性\u003c/a\u003e\u003c/strong\u003e：代码以尽可能简单的方式实现其目标。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://google.github.io/styleguide/go/guide#concision\"\u003e简洁\u003c/a\u003e\u003c/strong\u003e：代码具有高信噪比。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://google.github.io/styleguide/go/guide#maintainability\"\u003e可维护性\u003c/a\u003e\u003c/strong\u003e：代码的编写使其易于维护。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://google.github.io/styleguide/go/guide#consistency\"\u003e一致性\u003c/a\u003e\u003c/strong\u003e：代码与更广泛的 Google 代码库一致。\u003c/li\u003e\n\u003c/ol\u003e","title":"GO 代码风格指南"},{"content":"Giweights 介绍 https://icloudnative.io/posts/what-is-giweights/\n基础设施即代码 在理解 Giweights 之前，我们需要先理解什么是基础设施即代码。\n基础设施即代码（Infrastructure as Code, IaC），顾名思义，表示使用代码（而非手动流程）来定义基础设施，研发人员可以像对待应用软件一样对待基础设施，例如：\n可以创建包含基础架构规范的声明式配置文件，从而便于编辑和分发配置。 可以确保每次配置的环境都完全相同。 可以进行版本控制，所有的变更都会被记录下来，方便溯源。 可以将基础设施划分为若干个模块化组件，并通过自动化以不同的方式进行组合。 当然，广义上的 IaC 不仅仅只关于基础设施，还包含了网络、安全、配置等等，所以广义上的 IaC 又叫 X as Code。\n​\t比如你想在 AWS 中创建服务器，配置网络，部署 Kubernetes 集群以及各种工作负载，你只需要定义好 Terraform 或 Ansible 的声明式配置，以及 Kubernetes 的配置清单即可，免去一切繁杂的手动操作。\nGiweights 是什么 ​\tGiweights = IaC + Git + CI/CD，即基于 IaC 的版本化 CI/CD。它的核心是使用 Git 仓库来管理基础设施和应用的配置，并且以 Git 仓库作为基础设施和应用的单一事实来源，你从其他地方修改配置（比如手动改线上配置）一概不予通过。\n​\tGit 仓库中的声明式配置描述了目标环境当前所需基础设施的期望状态，借助于 Giweights，如果集群的实际状态与 Git 仓库中定义的期望状态不匹配，Kubernetes reconcilers 会根据期望状态来调整当前的状态，最终使实际状态符合期望状态。\n​\t另一方面，现代应用的开发更多关注的是迭代速度和规模，拥有成熟 DevOps 文化的组织每天可以将代码部署到生成环境中数百次，DevOps 团队可以通过版本控制、代码审查以及自动测试和部署的 CI/CD 流水线等最佳实践来实现这一目标，这就是 Giweights 干的事情。\nGiweights vs DevOps ​\t从广义上来看，Giweights 与 DevOps 并不冲突，Giweights 是一种技术手段，而 DevOps 是一种文化。Giweights 是一种实现持续交付（Continuous Delivery）、持续部署（Continuous Deployment）和基础设施即代码（IaC）的工具和框架，它是支持 DevOps 文化的。\n从狭义上来看，Giweights 与 DevOps 有以下几个区别：\n​\t首先，Giweights 是以目标为导向的。它使用 Git 来维护期望状态，并不断调整实际状态，最终与期望状态相匹配。而 DevOps 更多关注的是最佳实践，这些实践可以普遍应用于企业的每一个流程。\n​\t其次，Giweights 采取声明式的操作方法，而 DevOps 同时接受声明式和命令式的方法，所以 DevOps 除了适用于容器环境之外，还适用于虚拟机和裸机环境。\n​\t最后，Giweights 重新定义了云原生场景下的 CI/CD，它以 Git 作为中心的不可变状态声明，以加快持续部署速度。\nGiweights 的设计哲学 想要使用 Giweights 来管理你的基础设施和应用，需要践行以下几个原则：\n1. 声明式 必须通过声明式来描述系统的期望状态。例如 Kubernetes，众多现代云原生工具都是声明式的，Kubernetes 只是其中的一种。\n2. 版本控制/不可变 因为所有的状态声明都存储在 Git 仓库中，并且把 Git 仓库作为单一事实来源，那么所有的操作都是从 Git 仓库里驱动的，而且保留了完整的版本历史，方便回滚。有了 Git 优秀的安全保障，也可以使用 SSH 密钥来签署 commits，对代码的作者和出处实施强有力的安全保障。\n3. 自动应用变更 Git 仓库中声明的期望状态发生了任何变更，都可以立即应用到系统中，而且不需要安装配置额外工具（比如 kubectl），也不需要配置 Kubernetes 的认证授权。\n4. 持续的 Reconciliation ​\tReconciliation 其实最早是 Kubernetes 里的一个概念，表示的是确保系统的实际状态与期望状态一致的过程。具体的实现方式是在目标环境中安装一个 agent，一旦实际状态与期望状态不匹配，agent 就会进行自动修复。这里的修复比 Kubernetes 的故障自愈更高级，即使是手动修改了集群的编排清单，集群也会被恢复到 Git 仓库中的清单所描述的状态。\n鉴于以上这些设计哲学，我们来看一下 Giweights 的工作流：\n首先，团队中的任何一个成员都可以 Fork 仓库对配置进行更改，然后提交 Pull Request。 接下来会运行 CI 流水线，一般会做这么几件事情：验证配置文件、执行自动化测试、检测代码的复杂性、构建 OCI 镜像、将镜像推送到镜像仓库等等。 CI 流水线运行完成后，团队中拥有合并代码权限的人将会将这个 Pull Request 合并到主分支中 。一般拥有这个权限的都是研发人员、安全专家或者高级运维工程师。 最后会运行 CD 流水线，将变更应用到目标系统中（比如 Kubernetes 集群或者 AWS） 。 ​\t整个过程完全自动化且透明，通过多人协作和自动化测试来保证了基础设施声明配置的健壮性。而传统的模式是其中一个工程师在自己的电脑上操作这一切，其他人不知道发生了什么，也无法对其操作进行 Review。\nPush 模式 ​\t目前大多数 CI/CD 工具都使用基于 Push 的部署模式，例如 Jenkins、CircleCI 等。这种模式一般都会在 CI 流水线运行完成后执行一个命令（比如 kubectl）将应用部署到目标环境中。\n这种 CD 模式的缺陷很明显：\n需要安装配置额外工具（比如 kubectl）； 需要 Kubernetes 对其进行授权； 需要云平台授权； 无法感知部署状态。也就无法感知期望状态与实际状态的偏差，需要借助额外的方案来保障一致性。 ​\tKubernetes 集群或者云平台对 CI 系统的授权凭证在集群或云平台的信任域之外，不受集群或云平台的安全策略保护，因此 CI 系统很容易被当成非法攻击的载体。\nPull 模式 Pull 模式会在目标环境中安装一个 Agent，例如在 Kubernetes 集群中就靠 Operator 来充当这个 Agent。Operator 会周期性地监控目标环境的实际状态，并与 Git 仓库中的期望状态进行比较，如果实际状态不符合期望状态，Operator 就会更新基础设施的实际状态以匹配期望状态。\n只有 Git 的变更可以作为期望状态的唯一来源，除此之外，任何人都不可以对集群进行任何更改，即使你修改了，也会被 Operator 还原为期望状态，这也就是传说中的不可变基础设施。\n目前基于 Pull 模式的 CD 工具有 Argo CD， Flux CD 以及 ks-devops。\nGiweights 的优势 ​\t一般 Giweights 首选的都是基于 Pull 的部署模式，因为这种模式有很多不可替代的优势。\n更强大的安全保障 ​\t上面已经提到了，使用 Giweights 不需要任何 Kubernetes 或者云平台的凭证来执行部署，Kubernetes 集群内的 Argo CD 或者 Flux CD 只需要访问 Git 仓库，并通过 Pull 模式来更新即可。\n​\t另一方面，Git 由用于跟踪和管理代码变更的强大密码学支持，拥有对变更进行签名以证明作者身份和来源的能力，这是保障集群安全的关键。\nGit 作为事实的唯一真实来源 ​\t因为所有的应用包括基础设施的声明式配置都保存在 Git 中，并把 Git 作为应用系统的唯一事实来源，因此可以利用 Git 的强大功能操作所有东西，例如版本控制、历史记录、审计和回滚等等，无需使用 kubectl 这样的工具来操作。\n提高生产力 ​\tGit 也是开发人员非常熟悉的工具，通过 Git 不断迭代，可以提高生产率，加快开发和部署速度，更快地推出新产品，同时提高系统的稳定性和可靠性。\n更容易合规的审计 ​\t使用 Giweights 的基础设施可以像任何软件项目一样使用 Git 来管理，所以同样可以对其进行质量审计。当有人需要对基础设施进行更改时，会创建一个 Pull Request，等相关人员对其进行 Code Review 之后，更改才可以应用到系统中。\n总结 ​\tGiweights 是对现有 DevOps 文化的补充，它使用 Git 这样的版本控制系统来自动部署基础设施，部署过程清晰可见，可以查看和跟踪对系统进行的任何变更，提高了生产力、安全性和合规性。而且 Giweights 提供了更优雅的可观测性，可以实时观测部署状态，并采取行动使实际状态与期望状态保持一致。\n​\t而且在 Giweights 中，整个系统都是通过声明式来描述的，天然适合云原生环境，因为 Kubernetes 也是这么设计的。\n","permalink":"https://luenci.com/en/posts/gitops-%E5%8E%9F%E7%90%86/","summary":"\u003ch1 id=\"giweights-介绍\"\u003eGiweights 介绍\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://icloudnative.io/posts/what-is-giweights/\"\u003ehttps://icloudnative.io/posts/what-is-giweights/\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"基础设施即代码\"\u003e基础设施即代码\u003c/h2\u003e\n\u003cp\u003e在理解 Giweights 之前，我们需要先理解什么是\u003cstrong\u003e基础设施即代码\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e基础设施即代码（Infrastructure as Code, \u003cstrong\u003eIaC\u003c/strong\u003e），顾名思义，表示使用代码（而非手动流程）来定义基础设施，研发人员可以像对待应用软件一样对待基础设施，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可以创建包含基础架构规范的声明式配置文件，从而便于编辑和分发配置。\u003c/li\u003e\n\u003cli\u003e可以确保每次配置的环境都完全相同。\u003c/li\u003e\n\u003cli\u003e可以进行版本控制，所有的变更都会被记录下来，方便溯源。\u003c/li\u003e\n\u003cli\u003e可以将基础设施划分为若干个模块化组件，并通过自动化以不同的方式进行组合。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当然，广义上的 IaC 不仅仅只关于基础设施，还包含了\u003cstrong\u003e网络\u003c/strong\u003e、\u003cstrong\u003e安全\u003c/strong\u003e、\u003cstrong\u003e配置\u003c/strong\u003e等等，所以广义上的 IaC 又叫 \u003cstrong\u003eX as Code\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-16-10-zwMOq2.jpg\" alt=\"img\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e​\t比如你想在 AWS 中创建服务器，配置网络，部署 Kubernetes 集群以及各种工作负载，你只需要定义好 Terraform 或 Ansible 的声明式配置，以及 Kubernetes 的配置清单即可，免去一切繁杂的手动操作。\u003c/p\u003e\n\u003ch2 id=\"giweights-是什么\"\u003eGiweights 是什么\u003c/h2\u003e\n\u003cp\u003e​\tGiweights = IaC + Git + CI/CD，即基于 IaC 的版本化 CI/CD。它的核心是使用 Git 仓库来管理基础设施和应用的配置，并且\u003cstrong\u003e以 Git 仓库作为基础设施和应用的单一事实来源\u003c/strong\u003e，你从其他地方修改配置（比如手动改线上配置）一概不予通过。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/RepoImg/main/img/2022-07-02-16-34-pRb1Jc.jpg\" alt=\"img\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e​\tGit 仓库中的声明式配置描述了目标环境当前所需基础设施的期望状态，借助于 Giweights，如果集群的实际状态与 Git 仓库中定义的期望状态不匹配，Kubernetes reconcilers 会根据期望状态来调整当前的状态，最终使实际状态符合期望状态。\u003c/p\u003e\n\u003cp\u003e​\t另一方面，现代应用的开发更多关注的是迭代速度和规模，拥有成熟 DevOps 文化的组织每天可以将代码部署到生成环境中数百次，DevOps 团队可以通过版本控制、代码审查以及自动测试和部署的 CI/CD 流水线等最佳实践来实现这一目标，这就是 Giweights 干的事情。\u003c/p\u003e\n\u003ch2 id=\"giweights-vs-devops\"\u003eGiweights vs DevOps\u003c/h2\u003e\n\u003cp\u003e​\t从广义上来看，Giweights 与 DevOps 并不冲突，\u003cstrong\u003eGiweights 是一种技术手段，而 DevOps 是一种文化\u003c/strong\u003e。Giweights 是一种实现持续交付（Continuous Delivery）、持续部署（Continuous Deployment）和基础设施即代码（IaC）的工具和框架，它是支持 DevOps 文化的。\u003c/p\u003e\n\u003cp\u003e从狭义上来看，Giweights 与 DevOps 有以下几个区别：\u003c/p\u003e\n\u003cp\u003e​\t首先，\u003cstrong\u003eGiweights 是以目标为导向的\u003c/strong\u003e。它使用 Git 来维护期望状态，并不断调整实际状态，最终与期望状态相匹配。而 \u003cstrong\u003eDevOps 更多关注的是最佳实践\u003c/strong\u003e，这些实践可以普遍应用于企业的每一个流程。\u003c/p\u003e\n\u003cp\u003e​\t其次，\u003cstrong\u003eGiweights 采取声明式的操作方法，而 DevOps 同时接受声明式和命令式的方法\u003c/strong\u003e，所以 DevOps 除了适用于容器环境之外，还适用于虚拟机和裸机环境。\u003c/p\u003e\n\u003cp\u003e​\t最后，\u003cstrong\u003eGiweights 重新定义了云原生场景下的 CI/CD\u003c/strong\u003e，它以 Git 作为中心的不可变状态声明，以加快持续部署速度。\u003c/p\u003e","title":"Giweights 介绍"},{"content":"Django日志配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 LOGGING = { \u0026#39;version\u0026#39;: 1, \u0026#39;disable_existing_loggers\u0026#39;: False, \u0026#39;formatters\u0026#39;: { \u0026#39;verbose\u0026#39;: { \u0026#39;format\u0026#39;: \u0026#39;%(levelname)s %(asctime)s %(pathname)s %(module)s %(lineno)s %(process)d %(thread)d %(message)s\u0026#39; } }, \u0026#39;loggers\u0026#39;: { \u0026#39;django\u0026#39;: { \u0026#39;handlers\u0026#39;: [\u0026#39;default\u0026#39;], \u0026#39;propagate\u0026#39;: True, \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;filters\u0026#39;: [\u0026#39;special\u0026#39;] } }, \u0026#39;handlers\u0026#39;: { \u0026#39;default\u0026#39;: { \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;class\u0026#39;: \u0026#39;logging.handlers.RotatingFileHandler\u0026#39;, \u0026#39;filename\u0026#39;: \u0026#39;/var/logs/django/default.log\u0026#39;, \u0026#39;maxBytes\u0026#39;: 1024 * 1024 * 5, \u0026#39;backupCount\u0026#39;: 5, \u0026#39;formatter\u0026#39;: \u0026#39;verbose\u0026#39;, \u0026#39;filters\u0026#39;: [\u0026#39;special\u0026#39;] } }, \u0026#39;filters\u0026#39;: { # 过滤器 \u0026#39;special\u0026#39;: { # 使用自定义的web.my_logging.ContextFilter，别名special，可以接受其他的参数 \u0026#39;()\u0026#39;: \u0026#39;web.my_logging.ContextFilter\u0026#39; } }, } 配置分析说明 version 保留字。\ndisable_existing_loggers 是否禁用已经存在的logger实例。\n如果LOGGING 中的disable_existing_loggers 键为True（默认值），那么默认配置中的所有logger 都将禁用。\nLogger 的禁用与删除不同；logger 仍然存在，但是将默默丢弃任何传递给它的信息，也不会传播给上一级logger。所以，你应该非常小心使用'disable_existing_loggers': True；它可能不是你想要的。你可以设置disable_existing_loggers 为False，并重新定义部分或所有的默认loggers；或者你可以设置LOGGING_CONFIG 为 None，并 自己处理logging 配置。\nLogging 的配置属于Django setup() 函数的一部分。所以，你可以肯定在你的项目代码中logger 是永远可用的。\nformatters 定义输出的日志格式。 常用的格式化属性：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 %(name)s Logger的名字 %(levelname)s 文本形式的日志级别 %(message)s 用户输出的消息 %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒 %(levelno)s 数字形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 其他格式化属性请参 LogRecord attributes\nhandlers 处理器。\n1 2 3 4 5 6 7 8 9 10 11 \u0026#39;handlers\u0026#39;: { \u0026#39;default\u0026#39;: { \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;class\u0026#39;: \u0026#39;logging.handlers.RotatingFileHandler\u0026#39;, \u0026#39;filename\u0026#39;: \u0026#39;/var/logs/django/default.log\u0026#39;, \u0026#39;maxBytes\u0026#39;: 1024 * 1024 * 5, \u0026#39;backupCount\u0026#39;: 5, \u0026#39;formatter\u0026#39;: \u0026#39;verbose\u0026#39;, \u0026#39;filters\u0026#39;: [\u0026#39;special\u0026#39;] } } key为处理器名，values为处理器配置。\nlevel：日志处理级别。\nformatter： 这个参数对应formatters。\nfilters： 对应后面的 filters。\nclass：处理类。常用的有：NullHandler(无任何操作，相当于丢弃日志)，FileHandler(输出到磁盘文件)等。其他处理类请看 https://docs.python.org/3/library/logging.handlers.html\nfilename：记录日志的文件名。\nmaxBytes：文件最大字节数。\nbackupCount：最大扩展数。这个是和maxBytes一起使用的。例如当日志文件 pro.log 达到最大字节数，那么就会扩展一个文件pro.log.1文件继续记录日志， 依次扩展，达到backupCount的设定值，例如为5，那么到pro.log.5后，后面的日志会再次记入 pro.log文件，相当于轮询。\nloggers 定义logger实例。\n1 2 3 4 5 6 7 8 \u0026#39;loggers\u0026#39;: { \u0026#39;django\u0026#39;: { \u0026#39;handlers\u0026#39;: [\u0026#39;default\u0026#39;], \u0026#39;propagate\u0026#39;: True, \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;filters\u0026#39;: [\u0026#39;special\u0026#39;] } } handlers：对应的handles对象列表。\nlevel：logger实例输出的日志级别，但是这个级别并不是最终输出日志的级别，还有根据handlers的级别进行判断，两个level中取级别高的。DEBUG \u0026lt; INFO \u0026lt; WARNING \u0026lt; ERROR \u0026lt; CRITICAL\npropagate：日志是否向上级传递。True 向上级传，False 不向上级传。默认为True。\nfilters： 对应后面的 filters。 更详细说明请参照：https://docs.python.org/3/library/logging.html#logrecord-attributes\nfilters 过滤器。过滤器用来对传递给 Logger 或者 Handler 的日志信息提供附加的控制。 默认情况下，所有满足级别的日志信息都会被处理，但是我们可以通过 filter 来过滤掉 CRITICAL 级别的日志，然后仅允许 ERROR 级别的日志通过。 filter 也可以被用来对前面被忽略掉的日志进行修改，例如，我们可以在一定条件下将 ERROR 日志降级为 WARNING 日志。 过滤器可以安装在 logger 或者 handler 上，多个过滤器可以形成一个链来接连产生作用。 配置：\n1 2 3 4 5 6 \u0026#39;filters\u0026#39;: { # 过滤器 \u0026#39;special\u0026#39;: { # 使用自定义的web.my_logging.ContextFilter，别名special，可以接受其他的参数 \u0026#39;()\u0026#39;: \u0026#39;web.my_logging.ContextFilter\u0026#39; } } 自定义Filter：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import logging from random import choice class ContextFilter(logging.Filter): \u0026#34;\u0026#34;\u0026#34; This is a filter which injects contextual information into the log. Rather than use actual contextual information, we just use random data in this demo. \u0026#34;\u0026#34;\u0026#34; USERS = [\u0026#39;jim\u0026#39;, \u0026#39;fred\u0026#39;, \u0026#39;sheila\u0026#39;] IPS = [\u0026#39;123.231.231.123\u0026#39;, \u0026#39;127.0.0.1\u0026#39;, \u0026#39;192.168.0.1\u0026#39;] def filter(self, record): record.ip = choice(ContextFilter.IPS) record.user = choice(ContextFilter.USERS) return True 可以不定义类，直接定义函数，返回True表示\n","permalink":"https://luenci.com/en/posts/django%E7%9A%84logger/","summary":"\u003ch1 id=\"django日志配置\"\u003eDjango日志配置\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLOGGING \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;version\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;disable_existing_loggers\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#79c0ff\"\u003eFalse\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;formatters\u0026#39;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;verbose\u0026#39;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;format\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(levelname)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(asctime)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(pathname)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(module)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(lineno)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(process)d\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(thread)d\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(message)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;loggers\u0026#39;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;django\u0026#39;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;handlers\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;default\u0026#39;\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;propagate\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;level\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;DEBUG\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;filters\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;special\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;handlers\u0026#39;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;default\u0026#39;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;level\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;DEBUG\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;class\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;logging.handlers.RotatingFileHandler\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;filename\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;/var/logs/django/default.log\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;maxBytes\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e1024\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1024\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;backupCount\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;formatter\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;verbose\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;filters\u0026#39;\u003c/span\u003e: [\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;special\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;filters\u0026#39;\u003c/span\u003e: {  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 过滤器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;special\u0026#39;\u003c/span\u003e: {  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 使用自定义的web.my_logging.ContextFilter，别名special，可以接受其他的参数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;()\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;web.my_logging.ContextFilter\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"配置分析说明\"\u003e配置分析说明\u003c/h2\u003e\n\u003ch3 id=\"version\"\u003e\u003cstrong\u003eversion\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e保留字。\u003c/p\u003e\n\u003ch3 id=\"disable_\"\u003e\u003cstrong\u003edisable_existing_loggers\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e是否禁用已经存在的logger实例。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e如果\u003ccode\u003eLOGGING\u003c/code\u003e 中的\u003ccode\u003edisable_existing_loggers\u003c/code\u003e 键为\u003ccode\u003eTrue\u003c/code\u003e（默认值），那么默认配置中的所有logger 都将禁用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLogger 的禁用与删除不同；logger 仍然存在，但是将默默丢弃任何传递给它的信息，也不会传播给上一级logger。所以，你应该非常小心使用\u003ccode\u003e'disable_existing_loggers': True\u003c/code\u003e；它可能不是你想要的。你可以设置\u003ccode\u003edisable_existing_loggers\u003c/code\u003e 为\u003ccode\u003eFalse\u003c/code\u003e，并重新定义部分或所有的默认loggers；或者你可以设置\u003ccode\u003eLOGGING_CONFIG\u003c/code\u003e 为 \u003ccode\u003eNone\u003c/code\u003e，并 \u003cem\u003e自己处理logging 配置\u003c/em\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLogging 的配置属于Django \u003ccode\u003esetup()\u003c/code\u003e 函数的一部分。所以，你可以肯定在你的项目代码中logger 是永远可用的。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"formatters\"\u003e\u003cstrong\u003eformatters\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e定义输出的日志格式。\n常用的格式化属性：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(name)\u003c/span\u003es \u003cspan style=\"color:#79c0ff;font-weight:bold\"\u003eLogger的名字\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(levelname)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e文本形式的日志级别\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(message)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e用户输出的消息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(asctime)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e字符串形式的当前时间。默认格式是\u003c/span\u003e \u003cspan style=\"color:#f85149\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2003\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e07\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e08\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e16\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e49\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e45\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e896\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e”。逗号后面的是毫秒\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(levelno)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e数字形式的日志级别\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(pathname)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e调用日志输出函数的模块的完整路径名，可能没有\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(filename)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e调用日志输出函数的模块的文件名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(module)\u003c/span\u003es  \u003cspan style=\"color:#f85149\"\u003e调用日志输出函数的模块名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(funcName)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e调用日志输出函数的函数名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(lineno)\u003c/span\u003ed \u003cspan style=\"color:#f85149\"\u003e调用日志输出函数的语句所在的代码行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(created)\u003c/span\u003ef \u003cspan style=\"color:#f85149\"\u003e当前时间，用\u003c/span\u003e\u003cspan style=\"color:#79c0ff;font-weight:bold\"\u003eUNIX标准的表示时间的浮\u003c/span\u003e \u003cspan style=\"color:#f85149\"\u003e点数表示\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(relativeCreated)\u003c/span\u003ed \u003cspan style=\"color:#f85149\"\u003e输出日志信息时的，自\u003c/span\u003e\u003cspan style=\"color:#79c0ff;font-weight:bold\"\u003eLogger创建以\u003c/span\u003e \u003cspan style=\"color:#f85149\"\u003e来的毫秒数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(thread)\u003c/span\u003ed \u003cspan style=\"color:#f85149\"\u003e线程\u003c/span\u003e\u003cspan style=\"color:#79c0ff;font-weight:bold\"\u003eID\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e。可能没有\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(threadName)\u003c/span\u003es \u003cspan style=\"color:#f85149\"\u003e线程名。可能没有\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(process)\u003c/span\u003ed \u003cspan style=\"color:#f85149\"\u003e进程\u003c/span\u003e\u003cspan style=\"color:#79c0ff;font-weight:bold\"\u003eID\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e。可能没有\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e其他格式化属性请参 \u003ca href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\"\u003eLogRecord attributes\u003c/a\u003e\u003c/p\u003e","title":"Django的logger配置"},{"content":"写在前面 About ME 1.0 此博客记录了我的一些学习过程和一些项目的源码和学习笔记。有兴趣的朋友可在菜单的`分类`中找寻自己感兴趣的内容。有些内容可能过于浅显或者有误，欢迎大家指教和斧正。 学无止境，希望大家都能学有所成。 每一种编程语言都是一种艺术，希望大家选择编程语言不要纠结不前，还不如先出发。一直在路上。 2018/12/4\nAbout ME 2.0 博文断断续续的写了两年多了，这两年我对技术的思考从浅显到底层，从一条线到一个平面。一路走来，收获良多。最初的信念现在还在坚守着： 仰望星空，也脚踏实地。 从一而终，终身学习，以有涯之生，追无涯之知，不亦乐乎！ 2021/04/24\nAbout ME 3.0 一个全干工程师。 2024/4/15\nAbout ME 3.1 blog 由 hexo 迁移到 hugo ​\t个人微信公众号：\n​\t","permalink":"https://luenci.com/en/about/","summary":"\u003ch1 id=\"写在前面\"\u003e写在前面\u003c/h1\u003e\n\u003ch2 id=\"about-me-10\"\u003eAbout ME 1.0\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e此博客记录了我的一些学习过程和一些项目的源码和学习笔记。有兴趣的朋友可在菜单的`分类`中找寻自己感兴趣的内容。有些内容可能过于浅显或者有误，欢迎大家指教和斧正。\n\n学无止境，希望大家都能学有所成。\n\n每一种编程语言都是一种艺术，希望大家选择编程语言不要纠结不前，还不如先出发。一直在路上。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2018/12/4\u003c/p\u003e","title":"About ME"},{"content":"从数据库中查询出来的结果一般是一个集合，这个集合叫做 QuerySet。\n一、QuerySet何时被提交 在内部，创建、过滤、切片和传递一个QuerySet不会真实操作数据库，在你对查询集提交之前，不会发生任何实际的数据库操作。可以使用下列方法对QuerySet提交查询操作： 迭代 QuerySet是可迭代的，在首次迭代查询集时执行实际的数据库查询。 例如， 下面的语句会将数据库中所有Entry的headline打印出来： 1 2 for e in Entry.objects.all(): print(e.headline) 切片：如果使用切片的”step“参数，Django 将执行数据库查询并返回一个列表。 Pickling/缓存 repr()\nlen()：当你对QuerySet调用len()时， 将提交数据库操作。\nlist()：对QuerySet调用list()将强制提交操作entry_list = list(Entry.objects.all())\nbool()\n测试布尔值，像这样：\n1 2 if Entry.objects.filter(headline=\u0026#34;Test\u0026#34;): print(\u0026#34;There is at least one Entry with the headline Test\u0026#34;) 注：如果你需要知道是否存在至少一条记录（而不需要真实的对象），使用exists() 将更加高效。\n二、QuerySet 下面是对于QuerySet的正式定义：\nclass QuerySet(model=None, query=None, using=None)[source] QuerySet类具有两个公有属性用于内省：\nordered：如果QuerySet是排好序的则为True，否则为False。\ndb：如果现在执行，则返回使用的数据库。\n三、返回新QuerySets的API 以下的方法都将返回一个新的QuerySets。重点是加粗的几个API，其它的使用场景很少。 方法名 解释 filter() 过滤查询对象。\nexclude() 排除满足条件的对象\nannotate() 使用聚合函数\norder_by() 对查询集进行排序\nreverse() 反向排序\ndistinct() 对查询集去重\nvalues() 返回包含对象具体值的字典的QuerySet\nvalues_list() 与values()类似，只是返回的是元组而不是字典。\ndates() 根据日期获取查询集\ndatetimes() 根据时间获取查询集\nnone() 创建空的查询集\nall() 获取所有的对象\nunion() 并集\nintersection() 交集\ndifference() 差集\nselect_related() 附带查询关联对象\nprefetch_related()预先查询\nextra() 附加SQL查询\ndefer() 不加载指定字段\nonly() 只加载指定的字段\nusing() 选择数据库\nselect_for_update()锁住选择的对象，直到事务结束。\nraw() 接收一个原始的SQL查询\n1. filter() filter(**kwargs)\n返回满足查询参数的对象集合。\n查找的参数（**kwargs）应该满足下文字段查找中的格式。多个参数之间是和AND的关系。\n2. exclude() exclude(**kwargs)\n返回一个新的QuerySet，它包含不满足给定的查找参数的对象。\n查找的参数（**kwargs）应该满足下文字段查找中的格式。多个参数通过AND连接，然后所有的内容放入NOT() 中。\n1 2 3 4 5 6 7 # 下面的示例排除所有pub_date晚于2005-1-3且headline为“Hello” 的记录： Entry.objects.exclude(pub_date__gt=[datetime.date](2005, 1, 3), headline=\u0026#39;Hello\u0026#39;) # 下面的示例排除所有pub_date晚于2005-1-3或者headline 为“Hello” 的记录： Entry.objects.exclude(pub_date__gt=[datetime.date](2005, 1, 3)).exclude(headline=\u0026#39;Hello\u0026#39;) 3. annotate() annotate(args, *kwargs)\n使用提供的聚合表达式查询对象。\n表达式可以是简单的值、对模型（或任何关联模型）上的字段的引用或者聚合表达式（平均值、总和等）。\nannotate()的每个参数都是一个annotation，它将添加到返回的QuerySet每个对象中。\n关键字参数指定的Annotation将使用关键字作为Annotation 的别名。 匿名参数的别名将基于聚合函数的名称和模型的字段生成。 只有引用单个字段的聚合表达式才可以使用匿名参数。 其它所有形式都必须用关键字参数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 例如，如果正在操作一个Blog列表，你可能想知道每个Blog有多少Entry： \u0026gt;\u0026gt;\u0026gt; from django.db.models import Count \u0026gt;\u0026gt;\u0026gt; q = Blog.objects.annotate(Count(\u0026#39;entry\u0026#39;)) # The name of the first blog \u0026gt;\u0026gt;\u0026gt; q[0].name \u0026#39;Blogasaurus\u0026#39; # The number of entries on the first blog \u0026gt;\u0026gt;\u0026gt; q[0].entry__count 42 # Blog模型本身没有定义entry__count属性，但是通过使用一个关键字参数来指定聚合函数，可以控制Annotation的名称： \u0026gt;\u0026gt;\u0026gt; q = Blog.objects.annotate(number_of_entries=Count(\u0026#39;entry\u0026#39;)) # The number of entries on the first blog, using the name provided \u0026gt;\u0026gt;\u0026gt; q[0].number_of_entries 42 4. order_by() order_by(*fields)\n默认情况下，根据模型的Meta类中的ordering属性对QuerySet中的对象进行排序 Entry.objects.filter(pub_date__year=2005).order_by('-pub_date', 'headline')\n上面的结果将按照pub_date降序排序，然后再按照headline升序排序。\u0026quot;-pub_date\u0026quot;前面的负号表示降序顺序。 升序是默认的。 要随机排序，使用\u0026quot;?\u0026quot;，如下所示：\nEntry.objects.order_by(\u0026rsquo;?')\n注：order_by(\u0026rsquo;?\u0026rsquo;)可能耗费资源且很慢，这取决于使用的数据库。\n若要按照另外一个模型中的字段排序，可以使用查询关联模型的语法。即通过字段的名称后面跟两个下划线（__），再加上新模型中的字段的名称，直到希望连接的模型。 像这样：\nEntry.objects.order_by(\u0026lsquo;blog__name\u0026rsquo;, \u0026lsquo;headline\u0026rsquo;)\n如果排序的字段与另外一个模型关联，Django将使用关联的模型的默认排序，或者如果没有指定Meta.ordering将通过关联的模型的主键排序。 例如，因为Blog模型没有指定默认的排序：\nEntry.objects.order_by(\u0026lsquo;blog\u0026rsquo;)\n与以下相同：\nEntry.objects.order_by('blog__id')\n如果Blog设置了ordering = [\u0026rsquo;name\u0026rsquo;]，那么第一个QuerySet将等同于：\nEntry.objects.order_by(\u0026lsquo;blog__name\u0026rsquo;)\n还可以通过调用表达式的desc()或者asc()方法：\nEntry.objects.order_by(Coalesce(\u0026lsquo;summary\u0026rsquo;, \u0026lsquo;headline\u0026rsquo;).desc())\n考虑下面的情况，指定一个多值字段来排序（例如，一个ManyToManyField 字段或者ForeignKey 字段的反向关联）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Event(Model): parent = models.ForeignKey( \u0026#39;self\u0026#39;, on_delete=models.CASCADE, related_name=\u0026#39;children\u0026#39;, ) date = models.DateField() Event.objects.order_by(\u0026#39;children__date\u0026#39;) 在这里，每个Event可能有多个排序数据；具有多个children的每个Event将被多次返回到order_by()创建的新的QuerySet中。 换句话说，用order_by()方法对QuerySet对象进行操作会返回一个扩大版的新QuerySet对象。因此，使用多值字段对结果进行排序时要格外小心。\n没有方法指定排序是否考虑大小写。 对于大小写的敏感性，Django将根据数据库中的排序方式排序结果。\n可以通过Lower将一个字段转换为小写来排序，它将达到大小写一致的排序：\nEntry.objects.order_by(Lower('headline').desc())\n可以通过检查QuerySet.ordered属性来知道查询是否是排序的。\n每个order_by()都将清除前面的任何排序。 例如下面的查询将按照pub_date排序，而不是headline：\nEntry.objects.order_by('headline').order_by('pub_date')\n5. reverse() reverse()\n反向排序QuerySet中返回的元素。 第二次调用reverse()将恢复到原有的排序。\n如要获取QuerySet中最后五个元素，可以这样做：\nmy_queryset.reverse()[:5]\n这与Python直接使用负索引有点不一样。 Django不支持负索引，只能曲线救国。\n6. distinct() distinct(*fields)\n去除查询结果中重复的行。\n默认情况下，QuerySet不会去除重复的行。当查询跨越多张表的数据时，QuerySet可能得到重复的结果，这时候可以使用distinct()进行去重。\n7. values() values(fields, *expressions)\n返回一个包含数据的字典的queryset，而不是模型实例。\n每个字典表示一个对象，键对应于模型对象的属性名称。\n下面的例子将values() 与普通的模型对象进行比较：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 # 列表中包含的是Blog对象 \u0026gt;\u0026gt;\u0026gt; Blog.objects.filter(name__startswith=\u0026#39;Beatles\u0026#39;) \u0026lt;QuerySet [\u0026lt;Blog: Beatles Blog\u0026gt;]\u0026gt; # 列表中包含的是数据字典 \u0026gt;\u0026gt;\u0026gt; Blog.objects.filter(name__startswith=\u0026#39;Beatles\u0026#39;).values() \u0026lt;QuerySet [{\u0026#39;id\u0026#39;: 1, \u0026#39;name\u0026#39;: \u0026#39;Beatles Blog\u0026#39;, \u0026#39;tagline\u0026#39;: \u0026#39;All the latest Beatles news.\u0026#39;}]\u0026gt; 该方法接收可选的位置参数*fields，它指定values()应该限制哪些字段。如果指定字段，每个字典将只包含指定的字段的键/值。如果没有指定字段，每个字典将包含数据库表中所有字段的键和值。 例如： \u0026gt;\u0026gt;\u0026gt; Blog.objects.values() \u0026lt;QuerySet [{\u0026#39;id\u0026#39;: 1, \u0026#39;name\u0026#39;: \u0026#39;Beatles Blog\u0026#39;, \u0026#39;tagline\u0026#39;: \u0026#39;All the latest Beatles news.\u0026#39;}]\u0026gt; \u0026gt;\u0026gt;\u0026gt; Blog.objects.values(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;) \u0026lt;QuerySet [{\u0026#39;id\u0026#39;: 1, \u0026#39;name\u0026#39;: \u0026#39;Beatles Blog\u0026#39;}]\u0026gt; values()方法还有关键字参数**expressions，这些参数将传递给annotate()： \u0026gt;\u0026gt;\u0026gt; from django.db.models.functions import Lower \u0026gt;\u0026gt;\u0026gt; Blog.objects.values(lower_name=Lower(\u0026#39;name\u0026#39;)) \u0026lt;QuerySet [{\u0026#39;lower_name\u0026#39;: \u0026#39;beatles blog\u0026#39;}]\u0026gt; 在values()子句中的聚合应用于相同values()子句中的其他参数之前。 如果需要按另一个值分组，请将其添加到较早的values()子句中。 像这样： \u0026gt;\u0026gt;\u0026gt; from django.db.models import Count \u0026gt;\u0026gt;\u0026gt; Blog.objects.values(\u0026#39;author\u0026#39;, entries=Count(\u0026#39;entry\u0026#39;)) \u0026lt;QuerySet [{\u0026#39;author\u0026#39;: 1, \u0026#39;entries\u0026#39;: 20}, {\u0026#39;author\u0026#39;: 1, \u0026#39;entries\u0026#39;: 13}]\u0026gt; \u0026gt;\u0026gt;\u0026gt; Blog.objects.values(\u0026#39;author\u0026#39;).annotate(entries=Count(\u0026#39;entry\u0026#39;)) \u0026lt;QuerySet [{\u0026#39;author\u0026#39;: 1, \u0026#39;entries\u0026#39;: 33}]\u0026gt; 注意： 如果你有一个字段foo是一个ForeignKey，默认的foo_id参数返回的字典中将有一个叫做foo 的键，因为这是保存实际值的那个隐藏的模型属性的名称。 当调用foo_id并传递字段的名称，传递foo 或values()都可以，得到的结果是相同的。像这样： \u0026gt;\u0026gt;\u0026gt; Entry.objects.values() \u0026lt;QuerySet [{\u0026#39;blog_id\u0026#39;: 1, \u0026#39;headline\u0026#39;: \u0026#39;First Entry\u0026#39;, ...}, ...]\u0026gt; \u0026gt;\u0026gt;\u0026gt; Entry.objects.values(\u0026#39;blog\u0026#39;) \u0026lt;QuerySet [{\u0026#39;blog\u0026#39;: 1}, ...]\u0026gt; \u0026gt;\u0026gt;\u0026gt; Entry.objects.values(\u0026#39;blog_id\u0026#39;) \u0026lt;QuerySet [{\u0026#39;blog_id\u0026#39;: 1}, ...]\u0026gt; 当values()与distinct()一起使用时，注意排序可能影响最终的结果。 如果values()子句位于extra()调用之后，extra()中的select参数定义的字段必须显式包含在values()调用中。 values( 调用后面的extra( 调用将忽略选择的额外的字段。在values()之后调用only()和defer()不太合理，所以将引发一个NotImplementedError。可以通过ManyToManyField、ForeignKey 和 OneToOneFiel 属性反向引用关联的模型的字段： \u0026gt;\u0026gt;\u0026gt; Blog.objects.values(\u0026#39;name\u0026#39;, \u0026#39;entry__headline\u0026#39;) \u0026lt;QuerySet [{\u0026#39;name\u0026#39;: \u0026#39;My blog\u0026#39;, \u0026#39;entry__headline\u0026#39;: \u0026#39;An entry\u0026#39;},{\u0026#39;name\u0026#39;: \u0026#39;My blog\u0026#39;, \u0026#39;entry__headline\u0026#39;: \u0026#39;Another entry\u0026#39;}, ...]\u0026gt; 8. values_list() values_list(*fields, flat=False)\n与values()类似，只是在迭代时返回的是元组而不是字典。每个元组包含传递给values_list()调用的相应字段或表达式的值，因此第一个项目是第一个字段等。 像这样： 1 2 3 4 5 6 7 8 9 \u0026gt;\u0026gt;\u0026gt; Entry.objects.values_list(\u0026#39;id\u0026#39;, \u0026#39;headline\u0026#39;) \u0026lt;QuerySet [(1, \u0026#39;First entry\u0026#39;), ...]\u0026gt; \u0026gt;\u0026gt;\u0026gt; from django.db.models.functions import Lower \u0026gt;\u0026gt;\u0026gt; Entry.objects.values_list(\u0026#39;id\u0026#39;, Lower(\u0026#39;headline\u0026#39;)) \u0026lt;QuerySet [(1, \u0026#39;first entry\u0026#39;), ...]\u0026gt; 如果只传递一个字段，还可以传递flat参数。 如果为True，它表示返回的结果为单个值而不是元组。 如下所示： 1 2 3 4 5 6 7 \u0026gt;\u0026gt;\u0026gt; Entry.objects.values_list(\u0026#39;id\u0026#39;).order_by(\u0026#39;id\u0026#39;) \u0026lt;QuerySet[(1,), (2,), (3,), ...]\u0026gt; \u0026gt;\u0026gt;\u0026gt; Entry.objects.values_list(\u0026#39;id\u0026#39;, flat=True).order_by(\u0026#39;id\u0026#39;) \u0026lt;QuerySet [1, 2, 3, ...]\u0026gt; 如果有多个字段，传递flat将发生错误。\n如果不传递任何值给values_list()，它将返回模型中的所有字段，以在模型中定义的顺序。\n常见的情况是获取某个模型实例的特定字段值。可以使用values_list()，然后调用get()：\n1 2 \u0026gt;\u0026gt;\u0026gt; Entry.objects.values_list(\u0026#39;headline\u0026#39;, flat=True).get(pk=1) \u0026#39;First entry\u0026#39; values()和values_list()都用于特定情况下的优化：检索数据子集，而无需创建模型实例。 注意通过ManyToManyField进行查询时的行为： 1 2 3 4 5 6 7 8 9 10 \u0026gt;\u0026gt;\u0026gt; Author.objects.values_list(\u0026#39;name\u0026#39;, \u0026#39;entry__headline\u0026#39;) \u0026lt;QuerySet [(\u0026#39;Noam Chomsky\u0026#39;, \u0026#39;Impressions of Gaza\u0026#39;),(\u0026#39;George Orwell\u0026#39;, \u0026#39;Why Socialists Do Not Believe in Fun\u0026#39;), (\u0026#39;George Orwell\u0026#39;, \u0026#39;In Defence of English Cooking\u0026#39;),(\u0026#39;Don Quixote\u0026#39;, None)]\u0026gt; # 类似地，当查询反向外键时，对于没有任何作者的条目，返回None。 \u0026gt;\u0026gt;\u0026gt; Entry.objects.values_list(\u0026#39;authors\u0026#39;) \u0026lt;QuerySet [(\u0026#39;Noam Chomsky\u0026#39;,), (\u0026#39;George Orwell\u0026#39;,), (None,)]\u0026gt; 9. dates() dates(field, kind, order='ASC')\n返回一个QuerySet，表示QuerySet内容中特定类型的所有可用日期的datetime.date对象列表。\nfield参数是模型的DateField的名称。 kind参数应为\u0026quot;year\u0026quot;，\u0026ldquo;month\u0026quot;或\u0026quot;day\u0026rdquo;。 结果列表中的每个datetime.date对象被截取为给定的类型。\n\u0026ldquo;year\u0026rdquo; 返回对应该field的所有不同年份值的列表。\n\u0026ldquo;month\u0026quot;返回字段的所有不同年/月值的列表。\n\u0026ldquo;day\u0026quot;返回字段的所有不同年/月/日值的列表。\norder参数默认为\u0026rsquo;ASC\u0026rsquo;，或者\u0026rsquo;DESC\u0026rsquo;。 它指定如何排序结果。\n例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026gt;\u0026gt;\u0026gt; Entry.objects.dates(\u0026#39;pub_date\u0026#39;, \u0026#39;year\u0026#39;) [[datetime.date](2005, 1, 1)] \u0026gt;\u0026gt;\u0026gt; Entry.objects.dates(\u0026#39;pub_date\u0026#39;, \u0026#39;month\u0026#39;) [[datetime.date](2005, 3, 1)] \u0026gt;\u0026gt;\u0026gt; Entry.objects.dates(\u0026#39;pub_date\u0026#39;, \u0026#39;day\u0026#39;) [[datetime.date](2005, 3, 20)] \u0026gt;\u0026gt;\u0026gt; Entry.objects.dates(\u0026#39;pub_date\u0026#39;, \u0026#39;day\u0026#39;, order=\u0026#39;DESC\u0026#39;) [[datetime.date](2005, 2, 20)] \u0026gt;\u0026gt;\u0026gt; Entry.objects.filter(headline__contains=\u0026#39;Lennon\u0026#39;).dates(\u0026#39;pub_date\u0026#39;, \u0026#39;day\u0026#39;) [[datetime.date](2005, 3, 20)] 10. datetimes() datetimes(field_name, kind, order='ASC', tzinfo=None)\n返回QuerySet，为datetime.datetime对象的列表，表示QuerySet内容中特定种类的所有可用日期。\nfield_name应为模型的DateTimeField的名称。\nkind参数应为\u0026quot;hour\u0026rdquo;，\u0026ldquo;minute\u0026rdquo;，\u0026ldquo;month\u0026rdquo;，\u0026ldquo;year\u0026rdquo;，\u0026ldquo;second\u0026quot;或\u0026quot;day\u0026rdquo;。\n结果列表中的每个datetime.datetime对象被截取到给定的类型。\norder参数默认为\u0026rsquo;ASC\u0026rsquo;，或者\u0026rsquo;DESC\u0026rsquo;。 它指定如何排序结果。\ntzinfo参数定义在截取之前将数据时间转换到的时区。\n11. none() none()\n调用none()将创建一个不返回任何对象的查询集，并且在访问结果时不会执行任何查询。 1 2 3 4 5 6 7 8 9 10 11 例子： \u0026gt;\u0026gt;\u0026gt; Entry.objects.none() \u0026lt;QuerySet []\u0026gt; \u0026gt;\u0026gt;\u0026gt; from django.db.models.query import EmptyQuerySet \u0026gt;\u0026gt;\u0026gt; isinstance(Entry.objects.none(), EmptyQuerySet) True 12. all() all()\n返回当前QuerySet（或QuerySet子类）的副本。通常用于获取全部QuerySet对象。 13. union() union(*other_qs, all=False)\nDjango中的新功能1.11。也就是集合中并集的概念！\n使用SQL的UNION运算符组合两个或更多个QuerySet的结果。例如：\nqs1.union(qs2, qs3)\n默认情况下，UNION操作符仅选择不同的值。 要允许重复值，请使用all=True参数。 14. intersection() intersection(*other_qs)\nDjango中的新功能1.11。也就是集合中交集的概念！\n使用SQL的INTERSECT运算符返回两个或更多个QuerySet的共有元素。例如：\nqs1.intersection(qs2, qs3)\n15. difference() difference(*other_qs)\nDjango中的新功能1.11。也就是集合中差集的概念！\n使用SQL的EXCEPT运算符只保留QuerySet中的元素，但不保留其他QuerySet中的元素。例如：\nqs1.difference(qs2, qs3)\n16. select_related() select_related(*fields)\n沿着外键关系查询关联的对象的数据。这会生成一个复杂的查询并引起性能的损耗，但是在以后使用外键关系时将不需要再次数据库查询。\n下面的例子解释了普通查询和select_related()查询的区别。 下面是一个标准的查询：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # 访问数据库。 e = Entry.objects.get(id=5) # 再次访问数据库以得到关联的Blog对象。 b = [e.blog] 下面是一个select_related查询： # 访问数据库。 e = Entry.objects.select_related(\u0026#39;blog\u0026#39;).get(id=5) # 不会访问数据库，因为e.blog已经在前面的查询中获得了。 b = [e.blog] select_related()可用于objects任何的查询集： from django.utils import timezone # Find all the blogs with entries scheduled to be published in the future. blogs = set() for e in Entry.objects.filter(pub_date__gt=[timezone.now]()).select_related(\u0026#39;blog\u0026#39;): # 没有select_related()，下面的语句将为每次循环迭代生成一个数据库查询,以获得每个entry关联的blog。 blogs.add([e.blog]) filter()和select_related()的顺序不重要。 下面的查询集是等同的： Entry.objects.filter(pub_date__gt=[timezone.now].select_related(\u0026#39;blog\u0026#39;) Entry.objects.select_related(\u0026#39;blog\u0026#39;).filter(pub_date__gt=[timezone.now]()) 可以沿着外键查询。 如果有以下模型：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from django.db import models class City(models.Model): # ... pass class Person(models.Model): # ... hometown = models.ForeignKey( City, on_delete=models.SET_NULL, blank=True, null=True, ) class Book(models.Model): # ... author = models.ForeignKey(Person, on_delete=models.CASCADE) 调用Book.objects.select_related(\u0026lsquo;author__hometown\u0026rsquo;).get(id=4)将缓存相关的Person 和相关的City：\n1 2 3 4 5 6 7 8 9 10 11 b = Book.objects.select_related(\u0026#39;author__hometown\u0026#39;).get(id=4) p = [b.author] # Doesn\u0026#39;t hit the database. c = p.hometown # Doesn\u0026#39;t hit the database. b = Book.objects.get(id=4) # No select_related() in this example. p = [b.author] # Hits the database. c = p.hometown # Hits the database. 在传递给select_related()的字段中，可以使用任何ForeignKey和OneToOneField。\n在传递给select_related()的字段中，还可以反向引用OneToOneField。也就是说，可以回溯到定义OneToOneField 的字段。 此时，可以使用关联对象字段的related_name，而不要指定字段的名称。\n17. prefetch_related() prefetch_related(*lookups)\n在单个批处理中自动检索每个指定查找的相关对象。\n与select_related类似，但是策略是完全不同的。\n假设有这些模型：\n1 2 3 4 5 6 7 8 9 10 11 from django.db import models class weightping(models.Model): name = models.CharField(max_length=30) class Pizza(models.Model): name = models.CharField(max_length=50) weightpings = models.ManyToManyField(weightping) def __str__(self): # __unicode__ on Python 2 return \u0026#34;%s (%s)\u0026#34; % ( self.name, \u0026#34;, \u0026#34;.join(weightping.name for weightping in self.weightpings.all()), ) 并运行：\n1 2 3 \u0026gt;\u0026gt;\u0026gt; Pizza.objects.all() [\u0026#34;Hawaiian (ham, pineapple)\u0026#34;, \u0026#34;Seafood (prawns, smoked salmon)\u0026#34; 问题是每次QuerySet要求Pizza.objects.all()查询数据库，因此self.weightpings.all()将在Pizza Pizza.__str__()中的每个项目的weightpings表上运行查询。\n可以使用prefetch_related减少为只有两个查询：\nPizza.objects.all().prefetch_related('weightpings')\n这意味着现在每次self.weightpings.all()被调用，不会再去数据库查找，而是在一个预取的QuerySet缓存中查找。\n还可以使用正常连接语法来执行相关字段的相关字段。 假设在上面的例子中增加一个额外的模型：\n1 2 3 4 5 class Restaurant(models.Model): pizzas = models.ManyToManyField(Pizza, related_name=\u0026#39;restaurants\u0026#39;) best_pizza = models.ForeignKey(Pizza, related_name=\u0026#39;championed_by\u0026#39;) 以下是合法的：\nRestaurant.objects.prefetch_related('pizzas__weightpings')\n这将预取所有属于餐厅的比萨饼，和所有属于那些比萨饼的配料。 这将导致总共3个查询 - 一个用于餐馆，一个用于比萨饼，一个用于配料。 Restaurant.objects.prefetch_related('best_pizza__weightpings')\n这将获取最好的比萨饼和每个餐厅最好的披萨的所有配料。 这将在3个表中查询 - 一个为餐厅，一个为“最佳比萨饼”，一个为配料。\n当然，也可以使用best_pizza来获取select_related关系，以将查询数减少为2：\nRestaurant.objects.select_related('best_pizza').prefetch_related('best_pizza__weightpings')\n18. extra() extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)\n有些情况下，Django的查询语法难以简单的表达复杂的WHERE子句，对于这种情况,可以在extra()生成的SQL从句中注入新子句。使用这种方法作为最后的手段，这是一个旧的API，在将来的某个时候可能被弃用。仅当无法使用其他查询方法表达查询时才使用它。 例如：\n1 2 3 4 qs.extra( select={\u0026#39;val\u0026#39;: \u0026#34;select col from sometable where othercol = %s\u0026#34;}, select_params=(someparam,), ) 相当于：\nqs.annotate(val=RawSQL(\u0026quot;select col from sometable where othercol = %s\u0026quot;, (someparam,)))\n19. defer() defer(*fields)\n在一些复杂的数据建模情况下，模型可能包含大量字段，其中一些可能包含大尺寸数据（例如文本字段），将它们转换为Python对象需要花费很大的代价。\n当最初获取数据时不知道是否需要这些特定字段的情况下，如果正在使用查询集的结果，可以告诉Django不要从数据库中检索它们。\n通过传递字段名称到defer()实现不加载：\nEntry.objects.defer(\u0026quot;headline\u0026quot;, \u0026quot;body\u0026quot;)\n具有延迟加载字段的查询集仍将返回模型实例。\n每个延迟字段将在你访问该字段时从数据库中检索（每次只检索一个，而不是一次检索所有的延迟字段）。\n可以多次调用defer()。 每个调用都向延迟集添加新字段：\n延迟body和headline两个字段。 Entry.objects.defer(\u0026quot;body\u0026quot;).filter(rating=5).defer(\u0026quot;headline\u0026quot;)\n字段添加到延迟集的顺序无关紧要。对已经延迟的字段名称再次defer()没有问题（该字段仍将被延迟）。\n可以使用标准的双下划线符号来分隔关联的字段，从而加载关联模型中的字段：\nBlog.objects.select_related().defer(\u0026quot;entry__headline\u0026quot;, \u0026quot;entry__body\u0026quot;)\n如果要清除延迟字段集，将None作为参数传递到defer()： 立即加载所有的字段。 my_queryset.defer(None)\ndefer()方法（及其兄弟，only()）仅适用于高级用例，它们提供了数据加载的优化方法。\n20. only() only(*fields)\nonly()方法与defer()相反。\n如果有一个模型几乎所有的字段需要延迟，使用only()指定补充的字段集可以使代码更简单。\n假设有一个包含字段biography、age和name的模型。 以下两个查询集是相同的，就延迟字段而言：\nPerson.objects.defer(\u0026ldquo;age\u0026rdquo;, \u0026ldquo;biography\u0026rdquo;) Person.objects.only(\u0026ldquo;name\u0026rdquo;) 每当你调用only()时，它将替换立即加载的字段集。因此，对only()的连续调用的结果是只有最后一次调用的字段被考虑：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # This will defer all fields except the headline. Entry.objects.only(\u0026#34;body\u0026#34;, \u0026#34;rating\u0026#34;).only(\u0026#34;headline\u0026#34;) 由于defer()以递增方式动作（向延迟列表中添加字段），因此你可以结合only()和defer()调用： # Final result is that everything except \u0026#34;headline\u0026#34; is deferred. Entry.objects.only(\u0026#34;headline\u0026#34;, \u0026#34;body\u0026#34;).defer(\u0026#34;body\u0026#34;) # Final result loads headline and body immediately (only() replaces any # existing set of fields). Entry.objects.defer(\u0026#34;body\u0026#34;).only(\u0026#34;headline\u0026#34;, \u0026#34;body\u0026#34;) 当对具有延迟字段的实例调用save()时，仅保存加载的字段。\n21. using() using(alias)\n如果正在使用多个数据库，这个方法用于指定在哪个数据库上查询QuerySet。方法的唯一参数是数据库的别名，定义在DATABASES。 例如：\n1 2 3 4 5 6 7 # queries the database with the \u0026#39;default\u0026#39; alias. \u0026gt;\u0026gt;\u0026gt; Entry.objects.all() # queries the database with the \u0026#39;backup\u0026#39; alias \u0026gt;\u0026gt;\u0026gt; Entry.objects.using(\u0026#39;backup\u0026#39;) 22. select_for_update() select_for_update(nowait=False, skip_locked=False)\n返回一个锁住行直到事务结束的查询集，如果数据库支持，它将生成一个SELECT \u0026hellip; FOR UPDATE语句。 例如：\nentries = Entry.objects.select_for_update().filter(author=request.user)\n所有匹配的行将被锁定，直到事务结束。这意味着可以通过锁防止数据被其它事务修改。\n一般情况下如果其他事务锁定了相关行，那么本查询将被阻塞，直到锁被释放。使用select_for_update(nowait=True)将使查询不阻塞。如果其它事务持有冲突的锁,那么查询将引发DatabaseError异常。也可以使用select_for_update(skip_locked=True)忽略锁定的行。nowait和skip_locked是互斥的。\n目前，postgresql，oracle和mysql数据库后端支持select_for_update()。但是，MySQL不支持nowait和skip_locked参数。\n23. raw() raw(raw_query, params=None, translations=None)\n接收一个原始的SQL查询，执行它并返回一个django.db.models.query.RawQuerySet实例。\n这个RawQuerySet实例可以迭代，就像普通的QuerySet一样。\n四、不返回QuerySets的API 以下的方法不会返回QuerySets，但是作用非常强大，尤其是粗体显示的方法，需要背下来。 方法名 解释 get() 获取单个对象\ncreate() 创建对象，无需save()\nget_or_create() 查询对象，如果没有找到就新建对象\nupdate_or_create() 更新对象，如果没有找到就创建对象\nbulk_create()\n批量创建对象\ncount() 统计对象的个数\nin_bulk()\n根据主键值的列表，批量返回对象\niterator()\n获取包含对象的迭代器\nlatest() 获取最近的对象\nearliest() 获取最早的对象\nfirst() 获取第一个对象\nlast() 获取最后一个对象\naggregate() 聚合操作\nexists() 判断queryset中是否有对象\nupdate() 批量更新对象\ndelete() 批量删除对象\nas_manager() 获取管理器\n1. get() get(**kwargs)\n返回按照查询参数匹配到的单个对象，参数的格式应该符合Field lookups的要求。\n如果匹配到的对象个数不只一个的话，触发MultipleObjectsReturned异常\n如果根据给出的参数匹配不到对象的话，触发DoesNotExist异常。例如：\nEntry.objects.get(id='foo') # raises Entry.DoesNotExist\nDoesNotExist异常从django.core.exceptions.ObjectDoesNotExist继承，可以定位多个DoesNotExist异常。 例如： 1 2 3 4 5 6 7 from django.core.exceptions import ObjectDoesNotExist try: e = Entry.objects.get(id=3) b = Blog.objects.get(id=1) except ObjectDoesNotExist: print(\u0026#34;Either the entry or blog doesn\u0026#39;t exist.\u0026#34;) 如果希望查询器只返回一行，则可以使用get()而不使用任何参数来返回该行的对象： entry = Entry.objects.filter(...).exclude(...).get()\n2. create() create(**kwargs)\n在一步操作中同时创建并且保存对象的便捷方法. p = Person.objects.create(first_name=\u0026quot;Bruce\u0026quot;, last_name=\u0026quot;Springsteen\u0026quot;)\n等于:\np = Person(first_name=\u0026quot;Bruce\u0026quot;, last_name=\u0026quot;Springsteen\u0026quot;)\np.save(force_insert=True)\n参数force_insert表示强制创建对象。如果model中有一个你手动设置的主键，并且这个值已经存在于数据库中, 调用create()将会失败并且触发IntegrityError因为主键必须是唯一的。如果你手动设置了主键，做好异常处理的准备。 3. get_or_create() get_or_create(defaults=None, **kwargs)\n通过kwargs来查询对象的便捷方法（如果模型中的所有字段都有默认值，可以为空），如果该对象不存在则创建一个新对象。\n该方法返回一个由(object, created)组成的元组，元组中的object 是一个查询到的或者是被创建的对象， created是一个表示是否创建了新的对象的布尔值。\n对于下面的代码：\n1 2 3 4 5 6 7 8 9 try: obj = Person.objects.get(first_name=\u0026#39;John\u0026#39;, last_name=\u0026#39;Lennon\u0026#39;) except Person.DoesNotExist: obj = Person(first_name=\u0026#39;John\u0026#39;, last_name=\u0026#39;Lennon\u0026#39;, birthday=date(1940, 10, 9)) obj.save() 如果模型的字段数量较大的话，这种模式就变的非常不易用了。 上面的示例可以用get_or_create()重写 :\n1 2 3 4 5 obj, created = Person.objects.get_or_create( first_name=\u0026#39;John\u0026#39;, last_name=\u0026#39;Lennon\u0026#39;, defaults={\u0026#39;birthday\u0026#39;: date(1940, 10, 9)}, ) 任何传递给get_or_create()的关键字参数，除了一个可选的defaults，都将传递给get()调用。 如果查找到一个对象，返回一个包含匹配到的对象以及False 组成的元组。 如果查找到的对象超过一个以上，将引发MultipleObjectsReturned。如果查找不到对象，get_or_create()将会实例化并保存一个新的对象，返回一个由新的对象以及True组成的元组。新的对象将会按照以下的逻辑创建: 1 2 3 4 5 6 7 params = {k: v for k, v in kwargs.items() if \u0026#39;__\u0026#39; not in k} params.update({k: v() if callable(v) else v for k, v in defaults.items()}) obj = self.model(**params) obj.save() 它表示从非\u0026rsquo;defaults\u0026rsquo; 且不包含双下划线的关键字参数开始。然后将defaults的内容添加进来，覆盖必要的键，并使用结果作为关键字参数传递给模型类。\n如果有一个名为defaults__exact的字段，并且想在get_or_create()时用它作为精确查询，只需要使用defaults，像这样：\nFoo.objects.get_or_create(defaults__exact='bar', defaults={'defaults': 'baz'})\n当你使用手动指定的主键时，get_or_create()方法与create()方法有相似的错误行为 。 如果需要创建一个对象而该对象的主键早已存在于数据库中，IntegrityError异常将会被触发。\n这个方法假设进行的是原子操作，并且正确地配置了数据库和正确的底层数据库行为。如果数据库级别没有对get_or_create中用到的kwargs强制要求唯一性（unique和unique_together），方法容易导致竞态条件，可能会有相同参数的多行同时插入。（简单理解，kwargs必须指定的是主键或者unique属性的字段才安全。）\n最后建议只在Django视图的POST请求中使用get_or_create()，因为这是一个具有修改性质的动作，不应该使用在GET请求中，那样不安全。\n可以通过ManyToManyField属性和反向关联使用get_or_create()。在这种情况下，应该限制查询在关联的上下文内部。 否则，可能导致完整性问题。\n例如下面的模型：\n1 2 3 4 5 6 7 8 9 class Chapter(models.Model): title = models.CharField(max_length=255, unique=True) class Book(models.Model): title = models.CharField(max_length=256) chapters = models.ManyToManyField(Chapter) 可以通过Book的chapters字段使用get_or_create()，但是它只会获取该Book内部的上下文：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026gt;\u0026gt;\u0026gt; book = Book.objects.create(title=\u0026#34;Ulysses\u0026#34;) \u0026gt;\u0026gt;\u0026gt; book.chapters.get_or_create(title=\u0026#34;Telemachus\u0026#34;) (\u0026lt;Chapter: Telemachus\u0026gt;, True) \u0026gt;\u0026gt;\u0026gt; book.chapters.get_or_create(title=\u0026#34;Telemachus\u0026#34;) (\u0026lt;Chapter: Telemachus\u0026gt;, False) \u0026gt;\u0026gt;\u0026gt; Chapter.objects.create(title=\u0026#34;Chapter 1\u0026#34;) \u0026lt;Chapter: Chapter 1\u0026gt; \u0026gt;\u0026gt;\u0026gt; book.chapters.get_or_create(title=\u0026#34;Chapter 1\u0026#34;) # Raises IntegrityError 发生这个错误是因为尝试通过Book “Ulysses”获取或者创建“Chapter 1”，但是它不能，因为它与这个book不关联，但因为title 字段是唯一的它仍然不能创建。 在Django1.11在defaults中增加了对可调用值的支持。\n4. update_or_create() update_or_create(defaults=None, **kwargs)\n类似前面的get_or_create()。\n通过给出的kwargs来更新对象的便捷方法， 如果没找到对象，则创建一个新的对象。defaults是一个由 (field, value)对组成的字典，用于更新对象。defaults中的值可以是可调用对象（也就是说函数等）。\n该方法返回一个由(object, created)组成的元组,元组中的object是一个创建的或者是被更新的对象， created是一个标示是否创建了新的对象的布尔值。\nupdate_or_create方法尝试通过给出的kwargs 去从数据库中获取匹配的对象。 如果找到匹配的对象，它将会依据defaults 字典给出的值更新字段。\n像下面的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 defaults = {\u0026#39;first_name\u0026#39;: \u0026#39;Bob\u0026#39;} try: obj = Person.objects.get(first_name=\u0026#39;John\u0026#39;, last_name=\u0026#39;Lennon\u0026#39;) for key, value in defaults.items(): setattr(obj, key, value) obj.save() except Person.DoesNotExist: new_values = {\u0026#39;first_name\u0026#39;: \u0026#39;John\u0026#39;, \u0026#39;last_name\u0026#39;: \u0026#39;Lennon\u0026#39;} new_values.update(defaults) obj = Person(**new_values) obj.save() 如果模型的字段数量较大的话，这种模式就变的非常不易用了。 上面的示例可以用update_or_create() 重写:\n1 2 3 4 5 6 7 obj, created = Person.objects.update_or_create( first_name=\u0026#39;John\u0026#39;, last_name=\u0026#39;Lennon\u0026#39;, defaults={\u0026#39;first_name\u0026#39;: \u0026#39;Bob\u0026#39;}, ) kwargs中的名称如何解析的详细描述可以参见get_or_create()。\n和get_or_create()一样，这个方法也容易导致竞态条件，如果数据库层级没有前置唯一性会让多行同时插入。\n在Django1.11在defaults中增加了对可调用值的支持。\n5. bulk_create() bulk_create(objs, batch_size=None)\n以高效的方式（通常只有1个查询，无论有多少对象）将提供的对象列表插入到数据库中： 1 2 3 4 5 6 7 \u0026gt;\u0026gt;\u0026gt; Entry.objects.bulk_create([ ... Entry(headline=\u0026#39;This is a test\u0026#39;), ... Entry(headline=\u0026#39;This is only a test\u0026#39;), ... ]) 注意事项：\n不会调用模型的save()方法，并且不会发送pre_save和post_save信号。\n不适用于多表继承场景中的子模型。\n如果模型的主键是AutoField，则不会像save()那样检索并设置主键属性，除非数据库后端支持。\n不适用于多对多关系。\nbatch_size参数控制在单个查询中创建的对象数。\n6. count() count()\n返回在数据库中对应的QuerySet对象的个数。count()永远不会引发异常。 例如：\n1 2 3 4 5 6 7 # 返回总个数. Entry.objects.count() # 返回包含有\u0026#39;Lennon\u0026#39;的对象的总数 Entry.objects.filter(headline__contains=\u0026#39;Lennon\u0026#39;).count() 7. in_bulk() in_bulk(id_list=None)\n获取主键值的列表，并返回将每个主键值映射到具有给定ID的对象的实例的字典。 如果未提供列表，则会返回查询集中的所有对象。 例如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026gt;\u0026gt;\u0026gt; Blog.objects.in_bulk([1]) {1: \u0026lt;Blog: Beatles Blog\u0026gt;} \u0026gt;\u0026gt;\u0026gt; Blog.objects.in_bulk([1, 2]) {1: \u0026lt;Blog: Beatles Blog\u0026gt;, 2: \u0026lt;Blog: Cheddar Talk\u0026gt;} \u0026gt;\u0026gt;\u0026gt; Blog.objects.in_bulk([]) {} \u0026gt;\u0026gt;\u0026gt; Blog.objects.in_bulk() {1: \u0026lt;Blog: Beatles Blog\u0026gt;, 2: \u0026lt;Blog: Cheddar Talk\u0026gt;, 3: \u0026lt;Blog: Django Weblog\u0026gt;} 如果向in_bulk()传递一个空列表，会得到一个空的字典。\n在旧版本中，id_list是必需的参数，现在是一个可选参数。\n8. iterator() iterator()\n提交数据库操作，获取QuerySet，并返回一个迭代器。\nQuerySet通常会在内部缓存其结果，以便在重复计算时不会导致额外的查询。而iterator()将直接读取结果，不在QuerySet级别执行任何缓存。对于返回大量只需要访问一次的对象的QuerySet，这可以带来更好的性能，显著减少内存使用。\n请注意，在已经提交了的iterator()上使用QuerySet会强制它再次提交数据库操作，进行重复查询。此外，使用iterator()会导致先前的prefetch_related()调用被忽略，因为这两个一起优化没有意义。\n9. latest() latest(field_name=None)\n使用日期字段field_name，按日期返回最新对象。\n下例根据Entry的\u0026rsquo;pub_date\u0026rsquo;字段返回最新发布的entry：\nEntry.objects.latest('pub_date')\n如果模型的Meta指定了get_latest_by，则可以将latest()参数留给earliest()或者field_name。 默认情况下，Django将使用get_latest_by中指定的字段。\nearliest()和latest()可能会返回空日期的实例,可能需要过滤掉空值：\nEntry.objects.filter(pub_date__isnull=False).latest('pub_date')\n10. earliest() earliest(field_name=None)\n类同latest()。\n11. first() first()\n返回结果集的第一个对象, 当没有找到时返回None。如果QuerySet没有设置排序,则将会自动按主键进行排序。例如： p = Article.objects.order_by('title', 'pub_date').first()\nfirst()是一个简便方法，下面的例子和上面的代码效果是一样： 1 2 3 4 try: p = Article.objects.order_by(\u0026#39;title\u0026#39;, \u0026#39;pub_date\u0026#39;)[0] except IndexError: p = None 12. last() last()\n工作方式类似first()，只是返回的是查询集中最后一个对象。\n13. aggregate() aggregate(args, *kwargs)\n返回汇总值的字典（平均值，总和等）,通过QuerySet进行计算。每个参数指定返回的字典中将要包含的值。\n使用关键字参数指定的聚合将使用关键字参数的名称作为Annotation 的名称。 匿名参数的名称将基于聚合函数的名称和模型字段生成。 复杂的聚合不可以使用匿名参数，必须指定一个关键字参数作为别名。\n例如，想知道Blog Entry 的数目：\n1 2 3 4 from django.db.models import Count q = Blog.objects.aggregate(Count(\u0026#39;entry\u0026#39;)) {\u0026#39;entry__count\u0026#39;: 16} 通过使用关键字参数来指定聚合函数，可以控制返回的聚合的值的名称：\n1 2 3 q = Blog.objects.aggregate(number_of_entries=Count(\u0026#39;entry\u0026#39;)) {\u0026#39;number_of_entries\u0026#39;: 16} 14. exists() exists()\n如果QuerySet包含任何结果，则返回True，否则返回False。\n查找具有唯一性字段（例如primary_key）的模型是否在一个QuerySet中的最高效的方法是：\n1 2 3 4 5 entry = Entry.objects.get(pk=123) if some_queryset.filter(pk=entry.pk).exists(): print(\u0026#34;Entry contained in queryset\u0026#34;) 它将比下面的方法快很多，这个方法要求对QuerySet求值并迭代整个QuerySet：\n1 2 if entry in some_queryset: print(\u0026#34;Entry contained in QuerySet\u0026#34;) 若要查找一个QuerySet是否包含任何元素：\n1 2 3 4 5 if some_queryset.exists(): print(\u0026#34;There is at least one object in some_queryset\u0026#34;) 将快于： if some_queryset: print(\u0026#34;There is at least one object in some_queryset\u0026#34;) 15. update() update(**kwargs)\n对指定的字段执行批量更新操作，并返回匹配的行数（如果某些行已具有新值，则可能不等于已更新的行数）。\n例如，要对2010年发布的所有博客条目启用评论，可以执行以下操作：\nEntry.objects.filter(pub_date__year=2010).update(comments_on=False)\n可以同时更新多个字段 （没有多少字段的限制）。 例如同时更新comments_on和headline字段： Entry.objects.filter(pub_date__year=2010).update(comments_on=False, headline='This is old')\nupdate()方法无需save操作。唯一限制是它只能更新模型主表中的列，而不是关联的模型，例如不能这样做：\nEntry.objects.update(blog__name='foo') # Won't work!\n仍然可以根据相关字段进行过滤：\nEntry.objects.filter(blog__id=1).update(comments_on=True)\nupdate()方法返回受影响的行数：\n1 2 3 4 5 6 7 8 9 10 11 Entry.objects.filter(id=64).update(comments_on=True) 1 \u0026gt;\u0026gt;\u0026gt; Entry.objects.filter(slug=\u0026#39;nonexistent-slug\u0026#39;).update(comments_on=True) 0 \u0026gt;\u0026gt;\u0026gt; Entry.objects.filter(pub_date__year=2010).update(comments_on=False) 132 如果你只是更新一下对象，不需要为对象做别的事情，最有效的方法是调用update()，而不是将模型对象加载到内存中。 例如，不要这样做：\n1 2 3 4 5 e = Entry.objects.get(id=10) e.comments_on = False e.save() 建议如下操作：\nEntry.objects.filter(id=10).update(comments_on=False)\n用update()还可以防止在加载对象和调用save()之间的短时间内数据库中某些内容可能发生更改的竞争条件。\n如果想更新一个具有自定义save()方法的模型的记录，请循环遍历它们并调用save()，如下所示：\n1 2 3 for e in Entry.objects.filter(pub_date__year=2010): e.comments_on = False e.save() 16. delete() delete()\n批量删除QuerySet中的所有对象，并返回删除的对象个数和每个对象类型的删除次数的字典。\ndelete()动作是立即执行的。\n不能在QuerySet上调用delete()。\n例如，要删除特定博客中的所有条目：\n1 2 3 4 5 b = Blog.objects.get(pk=1) # Delete all the entries belonging to this Blog. Entry.objects.filter(blog=b).delete() (4, {\u0026#39;weblog.Entry\u0026#39;: 2, \u0026#39;weblog.Entry_authors\u0026#39;: 2}) 默认情况下，Django的ForeignKey使用SQL约束ON DELETE CASCADE，任何具有指向要删除的对象的外键的对象将与它们一起被删除。 像这样：\n1 2 3 4 5 blogs = Blog.objects.all() # This will delete all Blogs and all of their Entry objects. blogs.delete() (5, {\u0026#39;weblog.Blog\u0026#39;: 1, \u0026#39;weblog.Entry\u0026#39;: 2, \u0026#39;weblog.Entry_authors\u0026#39;: 2}) 这种级联的行为可以通过的ForeignKey的on_delete参数自定义。（什么时候要改变这种行为呢？比如日志数据，就不能和它关联的主体一并被删除！）\ndelete()会为所有已删除的对象（包括级联删除）发出pre_delete和post_delete信号。\n17. as_manager() classmethod as_manager()\n一个类方法，返回Manager的实例与QuerySet的方法的副本 ","permalink":"https://luenci.com/en/posts/django%E7%9A%84queryset%E8%AF%A6%E8%A7%A3/","summary":"\u003cp\u003e从数据库中查询出来的结果一般是一个集合，这个集合叫做 QuerySet。\u003c/p\u003e\n\u003ch1 id=\"一queryset何时被提交\"\u003e一、QuerySet何时被提交\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在内部，创建、过滤、切片和传递一个QuerySet不会真实操作数据库，在你对查询集提交之前，不会发生任何实际的数据库操作。可以使用下列方法对QuerySet提交查询操作：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"迭代\"\u003e迭代\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eQuerySet是可迭代的，在首次迭代查询集时执行实际的数据库查询。 例如， 下面的语句会将数据库中所有Entry的headline打印出来：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e Entry\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eall():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eheadline)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e切片：如果使用切片的”step“参数，Django 将执行数据库查询并返回一个列表。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pickling缓存\"\u003ePickling/缓存\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003erepr()\u003c/p\u003e","title":""},{"content":"Golang 的值传递 先导文章：（正经版）面试官：切片作为函数参数是传值还是传引用？\nGo语言中的 new 和 make 主要区别如下：\nmake 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据； new 分配返回的是指针，即类型 *Type。make 返回引用，即 Type； new 分配的空间被清零。make 分配空间后，会进行初始化； 传入参数和传出参数 传入参数为本身有值，传入函数让函数使用；传出参数本身没值，从函数中带出值（相当于函数的返回值）。 函数参数为指针 将指针作为参数传入某个函数时，函数内部会复制指针，也就是会同时出现两个指针指向原有的内存空间，所以 Go 语言中传指针也是传值。\n传值 当我们验证了 Go 语言中大多数常见的数据结构之后，其实能够推测出 Go 语言在传递参数时使用了传值的方式，接收方收到参数时会对这些参数进行复制；了解到这一点之后，在传递数组或者内存占用非常大的结构体时，我们应该尽量使用指针作为参数类型来避免发生数据拷贝进而影响性能。\n函数小结 通过堆栈传递参数，入栈的顺序是从右到左，而参数的计算是从左到右； 函数返回值通过堆栈传递并由调用者预先分配内存空间； 调用函数时都是传值，接收方会对入参进行复制再计算； golang 的内存分配之堆和栈 栈 可以简单得理解成一次函数调用内部申请到的内存，它们会随着函数的返回把内存还给系统。 下面来看看一个例子：\n1 2 3 4 func **F**() { temp :**=** make([]**int**, 0, 20) ... } 上面的例子，内函数内部申请的临时变量，即使你是用make申请到的内存，如果发现在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配比堆上快很多。\n下面在看看一个堆的例子：\n1 2 3 4 func **F**() []**int**{ a :**=** make([]**int**, 0, 20) **return** a } 而上面这段代码，申请的代码和上面的一模一样，但是申请后作为返回值返回了，编译器会认为在退出函数之后还有其他地方在引用，当函数返回之后并不会将其内存归还。那么就申请到堆里。\n如果变量都分配到堆上，堆不像栈可以自动清理。它会引起Go频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销。\n堆和栈相比 堆适合不可预知的大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形成内存碎片。 栈内存分配则会非常快，栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块。之后要通过垃圾回收才能释放。 逃逸分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import \u0026#34;fmt\u0026#34; func main() { resPtr := test3() fmt.Println(\u0026#34;rePtr:\u0026#34;, *resPtr) } func test3() *string { // 没有被返回，没有逃逸 name := \u0026#34;lynn\u0026#34; p0 := \u0026amp;name fmt.Println(\u0026#34;p0\u0026#34;, *p0) // 地址返回 内存逃逸 city := \u0026#34;上海\u0026#34; ptr := \u0026amp;city fmt.Println(\u0026#34;地址为:\u0026#34;, ptr) return ptr } 查看gcflags 追踪内存分配 1 2 3 go build --gcflags \u0026#34;-m -m -l\u0026#34; 10.内存逃逸.go \u0026gt; 1.txt 2\u0026gt;\u0026amp;1 grep -E \u0026#34;name|city\u0026#34; 1.txt --color 扩展阅读：Golang 内存分配之逃逸分析\n","permalink":"https://luenci.com/en/posts/golang%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/","summary":"\u003ch1 id=\"golang-的值传递\"\u003eGolang 的值传递\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e先导文章：\u003ca href=\"https://juejin.cn/post/6888117219213967368\"\u003e（正经版）面试官：切片作为函数参数是传值还是传引用？\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eGo语言中的 new 和 make 主要区别如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emake 只能用来分配及初始化类型为 slice、map、chan 的数据。new 可以分配任意类型的数据；\u003c/li\u003e\n\u003cli\u003enew 分配返回的是指针，即类型 *Type。make 返回引用，即 Type；\u003c/li\u003e\n\u003cli\u003enew 分配的空间被清零。make 分配空间后，会进行初始化；\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"传入参数和传出参数\"\u003e传入参数和传出参数\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e传入参数为本身有值，传入函数让函数使用；传出参数本身没值，从函数中带出值（相当于函数的返回值）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"函数参数为指针\"\u003e函数参数为指针\u003c/h2\u003e\n\u003cp\u003e将指针作为参数传入某个函数时，函数内部会复制指针，也就是会同时出现两个指针指向原有的内存空间，所以 Go 语言中传指针也是传值。\u003c/p\u003e\n\u003ch2 id=\"传值\"\u003e传值\u003c/h2\u003e\n\u003cp\u003e当我们验证了 Go 语言中大多数常见的数据结构之后，其实能够推测出 Go 语言在传递参数时使用了传值的方式，接收方收到参数时会对这些参数进行复制；了解到这一点之后，\u003cstrong\u003e在传递数组或者内存占用非常大的结构体时，我们应该尽量使用指针作为参数类型来避免发生数据拷贝进而影响性能\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"函数小结\"\u003e函数小结\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e通过堆栈传递参数，入栈的顺序是从右到左，而参数的计算是从左到右；\u003c/li\u003e\n\u003cli\u003e函数返回值通过堆栈传递并由调用者预先分配内存空间；\u003c/li\u003e\n\u003cli\u003e调用函数时都是传值，接收方会对入参进行复制再计算；\u003c/li\u003e\n\u003c/ol\u003e","title":""},{"content":"selenium常用API find_element_by_xxx 返回第一个符合条件WebElement元素 find_elements_by_xxx 返回符合条件所有元素包含了 WebEelemnt 列表 函数 作用 find_element_by_class_name 通过class查询元素 find_element_by_id 通过ID查询元素 find_element_by_name 通过name查询元素 find_element_by_tag_name 通过标签名称 find_element_by_css_selector css样式选择 find_element_by_link_text 通过链接内容查找 find_element_by_partial_link_text 通过链接内容包含的内容查找，模糊查询 find_element_by_xpath 通过xpath查找数据 获取元素属性和文本内容 1 2 3 4 5 6 7 8 #获取属性 element.get_attribute（\u0026#39;属性名”） #获取文本内容 element.text # 输入框输入内容 input_element.send_keys（\u0026#39;Luenci\u0026#39;） # 元素点击 element.click() 三种等待方式 当控制浏览器时，浏览器正在加载页面同时又去获取数据导致浏览器寻找不到需要操作的元素引发异常。 方式一：强制等待，浪费时间 time.sleep（秒数） 方式二：隐性等待，无法控制Ajax请求 browser.implicit1y_wait（等待时间） 方式三：显性等待，每个元素都可以自己定义检查条件。手动编写方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #显性等待-手动编写 t = time.time（） #定义超时时间 timeout = 60 while True： try： #超时时间间隔 time.sleep（0.1） ur1_element = browser.find_element_by_class_name（\u0026#34;fav ur1\u0026#34;） break except： #超时处理 if time.time（）- t \u0026gt; timeout： break pass 系统提供显性等待API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 导入显性等待的API需要的模块 # 1等待对象模块 from selenium.webdriver.support.wait import WebDriverwait # 2导入等待条件模块 from selenium.webdriver.support import expected_conditions as EC # 3导入查询元素模块 from selenium.webdriver.common.by import By # 1.创建等待对象 # 参数一浏览器对象 # 参数二超时时间 # 参数三检查元素时间间隔 wait = WebDriverwait（browser，5.0，0.5） # 2.通过等待对象获取元素 # presence_of_element_located 检查元素是否存在，如果存在就返回如果不存在就继续检查 # visibility_of_element_located 检查元素是否可见 linkelement = s wait.until（EC.presence_of_element_located（（By.CLASS_NAME，\u0026#34;favurl\u0026#34;） link_element.click（） 12306爬虫实现 完成代码见：https://github.com/Lucareful/12306_Tickets\n实现步骤 1.访问列表页 2.通过时间判定选择点击预订 3.点击账号登录 4.输入用户名和密码（15523750230） 5.截图获取验证码图片 6.发送打码平台获取识别数字 7.定义8个点击坐标 8.模拟点击坐标 9.点击登录 10.点击选择人物 11.点击提交订单 12.点击确认订单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 # -*- coding: utf-8 -*- import json import time from selenium import webdriver from selenium.webdriver import ActionChains from selenium.webdriver.support.wait import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.by import By from PIL import Image from io import BytesIO # 判断YDMHTTP模块是否在python环境中（我的是不在，所以加上去） import sys sys.path.insert(1, r\u0026#34;YDMHTTP.py\u0026#34;) from YDMHTTP import decode browser = webdriver.Chrome() browser.maximize_window() linktypeid = \u0026#34;dc\u0026#34; fs = \u0026#34;北京\u0026#34; ts = \u0026#34;武汉\u0026#34; date = \u0026#34;2020-01-13\u0026#34; flag = \u0026#34;N,N,Y\u0026#34; base_url = \u0026#39;https://kyfw.12306.cn/otn/leftTicket/init?linktypeid={}\u0026amp;fs={},BJP\u0026amp;ts={},WHN\u0026amp;date={}\u0026amp;flag={}\u0026#39; url = base_url.format(linktypeid, fs, ts, date, flag) browser.get(url) wait = WebDriverWait(browser, 10, 0.5) # 通过时间判定选择预定车次 # 寻找tr标签中的 属性id 已 ’ticket_‘ 开头的数据 tr_list = wait.until(EC.visibility_of_all_elements_located((By.XPATH, \u0026#39;//tr[starts-with(@id, \u0026#34;ticket_\u0026#34;)]\u0026#39;))) for tr in tr_list: date_string = tr.find_element_by_class_name(\u0026#34;start-t\u0026#34;).text # 判断时间是否在符合你想要的时间范围中 tr.find_element_by_class_name(\u0026#39;no-br\u0026#39;).click() # print(date_string) break # 点击账号 异步加载需要显性等待 wait.until(EC.visibility_of_element_located((By.LINK_TEXT, \u0026#34;账号登录\u0026#34;))).click() # browser.find_element_by_link_text(\u0026#34;账号登录\u0026#34;).click() # 输入用户名和密码（我将我的用户名和密码保存在了json文件中，若别人使用需要更改） with open(\u0026#34;account.json\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: account = json.load(f) browser.find_element_by_id(\u0026#34;J-userName\u0026#34;).send_keys(account[\u0026#34;username\u0026#34;]) browser.find_element_by_id(\u0026#34;J-password\u0026#34;).send_keys(account[\u0026#34;password\u0026#34;]) # 获取全屏截图 full_img_data = browser.get_screenshot_as_png() # 截取验证图片 login_img_element = wait.until((EC.visibility_of_element_located((By.ID, \u0026#34;J-loginImg\u0026#34;)))) # 计算截图位置 # 截取验证码的位置 scale = 2.0 x1 = login_img_element.location[\u0026#34;x\u0026#34;] y1 = login_img_element.location[\u0026#34;y\u0026#34;] x2 = x1 + login_img_element.size[\u0026#34;width\u0026#34;] * scale y2 = y1 + login_img_element.size[\u0026#34;height\u0026#34;] * scale cut_info = (x1, y1, x2, y2) # 把全屏图片构建成全屏图片操作对象 full_img = Image.open(BytesIO(full_img_data)) # 通过截图信息对象截取图片 cut_img = full_img.crop(cut_info) # 把图片保存到本地 cut_img.save(\u0026#39;demo.png\u0026#39;) # 将验证图片发送到打码平台 result = decode(\u0026#39;demo.png\u0026#39;, codetype=6701) # 定义八个点击坐标点 positions = [ (7.30*25, 140), (10.58*25, 140), (13.83*25, 140), (17.11*25, 140), (7.30*25, 250), (10.58*25, 250), (13.83*25, 250), (17.05*25, 250) ] # 模拟点击坐标 for num in result: position = positions[int(num) - 1] # 动作对象 ActionChains(browser).move_to_element_with_offset(login_img_element, position[0]/2, position[1]/2).click().perform() # 点击登录 browser.find_element_by_id(\u0026#34;J-login\u0026#34;).click() # 点击选择乘车人 wait.until(EC.visibility_of_element_located((By.ID, \u0026#34;normalPassenger_0\u0026#34;))) # 点击提交订单 browser.find_element_by_id(\u0026#34;submitOrder_id\u0026#34;).click() time.sleep(5) ","permalink":"https://luenci.com/en/posts/12306%E8%87%AA%E5%8A%A8%E6%8A%A2%E7%A5%A8/","summary":"\u003ch1 id=\"selenium常用api\"\u003eselenium常用API\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind_element_by_xxx\u003c/code\u003e  返回第一个符合条件\u003ccode\u003eWebElement\u003c/code\u003e元素\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efind_elements_by_xxx\u003c/code\u003e  返回符合条件所有元素包含了 \u003ccode\u003eWebEelemnt \u003c/code\u003e列表\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e函数\u003c/th\u003e\n          \u003cth\u003e作用\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_class_name\u003c/td\u003e\n          \u003ctd\u003e通过class查询元素\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_id\u003c/td\u003e\n          \u003ctd\u003e通过ID查询元素\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_name\u003c/td\u003e\n          \u003ctd\u003e通过name查询元素\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_tag_name\u003c/td\u003e\n          \u003ctd\u003e通过标签名称\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_css_selector\u003c/td\u003e\n          \u003ctd\u003ecss样式选择\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_link_text\u003c/td\u003e\n          \u003ctd\u003e通过链接内容查找\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_partial_link_text\u003c/td\u003e\n          \u003ctd\u003e通过链接内容包含的内容查找，模糊查询\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efind_element_by_xpath\u003c/td\u003e\n          \u003ctd\u003e通过xpath查找数据\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"获取元素属性和文本内容\"\u003e获取元素属性和文本内容\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#获取属性\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eelement\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget_attribute\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;属性名”）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#获取文本内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eelement\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 输入框输入内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einput_element\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esend_keys\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Luenci\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 元素点击\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eelement\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eclick()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"三种等待方式\"\u003e三种等待方式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e当控制浏览器时，浏览器正在加载页面同时又去获取数据导致浏览器寻找不到需要操作的元素引发异常。\u003c/li\u003e\n\u003cli\u003e方式一：强制等待，浪费时间\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etime.sleep（秒数）\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e方式二：隐性等待，无法控制Ajax请求\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebrowser.implicit1y_wait（等待时间）\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e方式三：显性等待，每个元素都可以自己定义检查条件。手动编写方式\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#显性等待-手动编写\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003et \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e time\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etime\u003cspan style=\"color:#f85149\"\u003e（）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#定义超时时间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeout \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e60\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ewhile\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003etry\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#超时时间间隔\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        time\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esleep\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e0.1\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ur1_element \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e browser\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efind_element_by_class_name\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;fav ur1\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#ff7b72\"\u003ebreak\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eexcept\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#超时处理\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e time\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etime\u003cspan style=\"color:#f85149\"\u003e（）\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e t \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e timeout\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \t\u003cspan style=\"color:#ff7b72\"\u003ebreak\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"系统提供显性等待api\"\u003e系统提供显性等待API\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 导入显性等待的API需要的模块\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 1等待对象模块\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eselenium.webdriver.support.wait\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e WebDriverwait\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 2导入等待条件模块\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eselenium.webdriver.support\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e expected_conditions \u003cspan style=\"color:#ff7b72\"\u003eas\u003c/span\u003e EC\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 3导入查询元素模块\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eselenium.webdriver.common.by\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e By\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 1.创建等待对象\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 参数一浏览器对象\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 参数二超时时间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 参数三检查元素时间间隔\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewait \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e WebDriverwait\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003ebrowser\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e5.0\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e0.5\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 2.通过等待对象获取元素\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# presence_of_element_located 检查元素是否存在，如果存在就返回如果不存在就继续检查\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# visibility_of_element_located 检查元素是否可见\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elinkelement \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e s wait\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003euntil\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003eEC\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epresence_of_element_located\u003cspan style=\"color:#f85149\"\u003e（（\u003c/span\u003eBy\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eCLASS_NAME\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;favurl\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elink_element\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eclick\u003cspan style=\"color:#f85149\"\u003e（）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"12306爬虫实现\"\u003e12306爬虫实现\u003c/h1\u003e\n\u003cp\u003e完成代码见：https://github.com/Lucareful/12306_Tickets\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实现步骤\n\u003cul\u003e\n\u003cli\u003e1.访问列表页\u003c/li\u003e\n\u003cli\u003e2.通过时间判定选择点击预订\u003c/li\u003e\n\u003cli\u003e3.点击账号登录\u003c/li\u003e\n\u003cli\u003e4.输入用户名和密码（15523750230）\u003c/li\u003e\n\u003cli\u003e5.截图获取验证码图片\u003c/li\u003e\n\u003cli\u003e6.发送打码平台获取识别数字\u003c/li\u003e\n\u003cli\u003e7.定义8个点击坐标\u003c/li\u003e\n\u003cli\u003e8.模拟点击坐标\u003c/li\u003e\n\u003cli\u003e9.点击登录\u003c/li\u003e\n\u003cli\u003e10.点击选择人物\u003c/li\u003e\n\u003cli\u003e11.点击提交订单\u003c/li\u003e\n\u003cli\u003e12.点击确认订单\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"12306自动化抢票实现"},{"content":"C 语言中 void* 详解及应用 void 在英文中作为名词的解释为 \u0026ldquo;空虚、空间、空隙\u0026rdquo;，而在 C 语言中，void 被翻译为**\u0026ldquo;无类型\u0026rdquo;，相应的void *** 为**\u0026ldquo;无类型指针\u0026rdquo;**。\nvoid 似乎只有\u0026quot;注释\u0026quot;和限制程序的作用，当然，这里的\u0026quot;注释\u0026quot;不是为我们人提供注释，而是为编译器提供一种所谓的注释。\nvoid 的作用 1.对函数返回的限定，这种情况我们比较常见。\n2.对函数参数的限定，这种情况也是比较常见的。\n一般我们常见的就是这两种情况：\n当函数不需要返回值值时，必须使用void限定，这就是我们所说的第一种情况。例如：void func（int a,char *b）。 当函数不允许接受参数时，必须使用void限定，这就是我们所说的第二种情况。例如：int func(void)。 void 指针的使用规则 \\1. void 指针可以指向任意类型的数据，就是说可以用任意类型的指针对 void 指针对 void 指针赋值。例如：\n1 2 3 int *a； void *p； p=a； 如果要将 void 指针 p 赋给其他类型的指针，则需要强制类型转换，就本例而言：a=（int *）p。在内存的分配中我们可以见到 void 指针使用：内存分配函数 malloc 函数返回的指针就是 void * 型，用户在使用这个指针的时候，要进行强制类型转换，也就是显式说明该指针指向的内存中是存放的什么类型的数据 (int *)malloc(1024) 表示强制规定 malloc 返回的 void* 指针指向的内存中存放的是一个个的 int 型数据。\n\\2. 在 ANSI C 标准中，不允许对 void 指针进行一些算术运算如 p++ 或 p+=1 等，因为既然 void 是无类型，那么每次算术运算我们就不知道该操作几个字节，例如 char 型操作 sizeof(char) 字节，而 int 则要操作 sizeof(int) 字节。而在 GNU 中则允许，因为在默认情况下，GNU 认为 void * 和 char * 一样，既然是确定的，当然可以进行一些算术操作，在这里sizeof(*p)==sizeof(char)。\nvoid 几乎只有\u0026quot;注释\u0026quot;和限制程序的作用，因为从来没有人会定义一个 void 变量，让我们试着来定义：\n1 void a; 这行语句编译时会出错，提示**\u0026ldquo;illegal use of type \u0026lsquo;void\u0026rsquo;\u0026rdquo;**。即使 void a 的编译不会出错，它也没有任何实际意义。\n众所周知，如果指针 p1 和 p2 的类型相同，那么我们可以直接在 p1 和 p2 间互相赋值；如果 p1 和 p2 指向不同的数据类型，则必须使用强制类型转换运算符把赋值运算符右边的指针类型转换为左边指针的类型。\n1 2 3 4 5 6 float *p1; int *p2; p1 = p2; //其中p1 = p2语句会编译出错， //提示“\u0026#39;=\u0026#39; : cannot convert from \u0026#39;int *\u0026#39; to \u0026#39;float *\u0026#39;”，必须改为： p1 = (float *)p2; 而 void * 则不同，任何类型的指针都可以直接赋值给它，无需进行强制类型转换。\n1 2 3 void *p1; int *p2; p1 = p2; 但这并不意味着，void * 也可以无需强制类型转换地赋给其它类型的指针。因为\u0026quot;无类型\u0026quot;可以包容\u0026quot;有类型\u0026quot;，而\u0026quot;有类型\u0026quot;则不能包容\u0026quot;无类型\u0026quot;。\n小心使用 void 指针类型:\n按照 ANSI(American National Standards Institute) 标准，不能对 void 指针进行算法操作，即下列操作都是不合法的：\n1 2 3 4 5 6 7 void * pvoid; pvoid++; //ANSI：错误 pvoid += 1; //ANSI：错误 //ANSI标准之所以这样认定，是因为它坚持：进行算法操作的指针必须是确定知道其指向数据类型大小的。 //例如： int *pint; pint++; //ANSI：正确 pint++ 的结果是使其增大 sizeof(int)。\n但是 GNU 则不这么认定，它指定 void * 的算法操作与 char * 一致。因此下列语句在 GNU 编译器中皆正确：\n1 2 pvoid++; //GNU：正确 pvoid += 1; //GNU：正确 pvoid++ 的执行结果是其增大了 1。\n在实际的程序设计中，为迎合 ANSI 标准，并提高程序的可移植性，我们可以这样编写实现同样功能的代码：\n1 2 3 void * pvoid; ((char *)pvoid)++; //ANSI：错误；GNU：正确 (char *)pvoid += 1; //ANSI：错误；GNU：正确 GNU 和 ANSI 还有一些区别，总体而言，GNU 较 ANSI 更\u0026quot;开放\u0026quot;，提供了对更多语法的支持。但是我们在真实设计时，还是应该尽可能地迎合 ANSI 标准。 如果函数的参数可以是任意类型指针，那么应声明其参数为void *。\n**注：**void 指针可以任意类型的数据，可以在程序中给我们带来一些好处，函数中形为指针类型时，我们可以将其定义为 void 指针，这样函数就可以接受任意类型的指针。如：\n典型的如内存操作函数 memcpy 和 memset 的函数原型分别为：\n1 2 void * memcpy(void *dest, const void *src, size_t len); void * memset ( void * buffer, int c, size_t num ); 这样，任何类型的指针都可以传入 memcpy 和 memset 中，这也真实地体现了内存操作函数的意义，因为它操作的对象仅仅是一片内存，而不论这片内存是什么类型（参见 C 语言实现泛型编程）。如果 memcpy 和 memset 的参数类型不是 void *，而是 char *，那才叫真的奇怪了！这样的 memcpy 和 memset 明显不是一个\u0026quot;纯粹的，脱离低级趣味的\u0026quot;函数！void 的出现只是为了一种抽象的需要，如果你正确地理解了面向对象中\u0026quot;抽象基类\u0026quot;的概念，也很容易理解 void 数据类型。正如不能给抽象基类定义一个实例，我们也不能定义一个 void（让我们类比的称 void 为\u0026quot;抽象数据类型\u0026quot;）变量。\n原文地址：https://www.cnblogs.com/wuyudong/p/c-void-point.html\n","permalink":"https://luenci.com/en/posts/c-%E8%AF%AD%E8%A8%80%E4%B8%AD-void-%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/","summary":"\u003ch1 id=\"c-语言中-void-详解及应用\"\u003eC 语言中 void* 详解及应用\u003c/h1\u003e\n\u003cp\u003evoid 在英文中作为名词的解释为 \u003cstrong\u003e\u0026ldquo;空虚、空间、空隙\u0026rdquo;\u003c/strong\u003e，而在 C 语言中，void 被翻译为**\u0026ldquo;无类型\u0026rdquo;\u003cstrong\u003e，相应的\u003c/strong\u003evoid *** 为**\u0026ldquo;无类型指针\u0026rdquo;**。\u003c/p\u003e\n\u003cp\u003evoid 似乎只有\u0026quot;注释\u0026quot;和限制程序的作用，当然，这里的\u0026quot;注释\u0026quot;不是为我们人提供注释，而是为编译器提供一种所谓的注释。\u003c/p\u003e","title":"C 语言中 void* 详解及应用"},{"content":" 参考：\nhttps://juejin.im/post/5aa783b76fb9a028d663d70a\nhttps://www.cnblogs.com/wj-1314/p/10496253.html\nSession是存储在服务器端的，Cookie是存储在客户端的 Cookie的概念 Cookie是客户端用户信息的一种机制，用来记录用户的一些信息，实际上Cookie是服务器在本地机器上存储的一小段文本，并随着每次请求发送到服务器。 Cookie与Session的区别 cookie数据存放在客户的浏览器（客户端）上，session数据放在服务器上，但是服务端的session的实现对客户端的cookie有依赖关系的。 cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session； session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE； 一个服务器最多在客户端浏览器上保存20个Cookie； 一个浏览器最多保存300个Cookie 单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能超过3K； 上面的数据只是HTTP的Cookie规范，但是在浏览器大战的今天，一些浏览器为了打败对手，为了展示自己的能力起见，可能对Cookie规范“扩展”了一些，例如每个Cookie的大小为8KB，最多可保存500个Cookie等！但也不会出现将你的硬盘占满的可能\nCookie与session的实现原理 上图很明显的展示了Django的session和cookie的实现原理。\n服务器会生成两份相同的cookie字符串，一份保存在本地，一份发向请求的浏览器。\n浏览器将会受到的cookie字符串保存下来，当下次再发请求时，会将信息与这段cookie一同发送到服务器，服务器得到这段cookie会与本地保存的那份判断是否相同，如果相同就表示用户已经登录成功，保存用户登录成功的状态。\nDjango的session保存在数据库中的数据相当于一个大字典，key为cookie的字符串，value仍是一个字典，字典的key和value为用户设置的相关信息，这样就可以方便的存取session里面的信息。\ncookie和session内容 cookie内容主要包括：key，value，过期时间，路径和域。路径和域一起构成了cookie的作用范围。 cookie的使用由浏览器按照一定的规则在后台自动发送给服务器的，浏览器检查所在存储的cookie，如果某个cookie的作用范围大于等于将要请求的资源所在位置，将cookie附在请求资源的HTTP请求头上发给服务器。 cookie的生命周期跟过期时间相关，如果不设置过期时间，成为会话cookie，保存在内存中，关闭浏览器窗口，cookie消失。如果设置过期时间，浏览器会把cookie写入硬盘，这些cookie仍然有效，知道超过设定的过期时间。 存在硬盘上的cookie可以在同一个浏览器不同进程间共享，比如两个Chrome窗口。存在内存的，不同浏览器不同的处理方式 session内容，服务器使用类似Python字典的key value 的形式存储，存储session方式很多，数据库，缓存，文件，加密cookie，数据库加缓存。 Cookie的用途 服务器使用Cookie来跟踪客户端状态 保存购物车 显示上次登录名 Cookie与HTTP头 Cookie是通过HTTP请求和响应头在客户端和服务器端传递的：\nCookie： 请求头，客户端发送给服务器端；\n格式：Cookie：a=A；b=B；c=C。即多个Cookie用分号离开；\nSet-Cookie： 响应头，服务器端发送给客户端。\n一个Cookie对象一个Set-Cookie：\nSet-Cookie：a=A\nSet-Cookie：b = B\nSet-Cookie：c=C\nCookie的覆盖 如果服务器端发送重复的Cookie，那么会覆盖原有的Cookie。 cookies是浏览器为Web服务器存储的一小段信息。每次浏览器从某个服务器请求页面时，它向服务器会送之前收到的cookies，它保存在浏览器下的某个文件夹下。 Cookie的使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # 登录校验 from django.shortcuts import render, redirect # Create your views here. def login(request): print(request.COOKIES) print(request.session) if request.method == \u0026#34;POST\u0026#34;: name = request.POST.get(\u0026#34;user\u0026#34;) pwd = request.POST.get(\u0026#34;passwd\u0026#34;) if name == \u0026#39;luenci\u0026#39; and pwd == \u0026#39;123\u0026#39;: ret = redirect(\u0026#34;/index/\u0026#34;) ret.set_cookie(\u0026#39;name\u0026#39;, \u0026#39;luenci\u0026#39;) return ret return render(request, \u0026#39;login.html\u0026#39;, locals()) def index(request): # {\u0026#39;Hm_lvt_ca9c9aeca6d24b987c40c4c8ad091e42\u0026#39;: \u0026#39;1591770252,1591772319\u0026#39;, # \u0026#39;csrftoken\u0026#39;: \u0026#39;DP9BWOWgK1fGi5goPqAlFhR4tX2TC4eXL2NuIC6TjrObLc6IwmGmup0r5M5sCZBH\u0026#39;, # \u0026#39;sessionid\u0026#39;: \u0026#39;edvrn0uevgi556t8wrlvh2iqg0xzmm92\u0026#39;, # \u0026#39;name\u0026#39;: \u0026#39;luenci\u0026#39;} print(request.COOKIES) if request.COOKIES.get(\u0026#39;name\u0026#39;, None) == \u0026#39;luenci\u0026#39;: name = request.COOKIES.get(\u0026#39;name\u0026#39;, None) return render(request, \u0026#39;index.html\u0026#39;, locals()) else: return redirect(\u0026#39;/login/\u0026#39;) Session概述 session就是在服务器端的“Cookie”，将用户数据保存在服务器端，远比保存在用户端要安全，方便和快捷的多。Session依赖于Cookie，但是与Cookie不同的地方就是在于session将所有的数据都放在服务器端，用户浏览器的cookie中只会保存一个非明文的识别信息，比如哈希值。 Session是服务器端技术，利用这个技术，服务器在运行时可以为每一个用户的浏览器创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问该服务器中的其他web资源时，其他web资源再从用户各自的session中取出数据为用户服务。 Django的Session机器会向请求的浏览器发送cookie字符串。同时也会保存在本地一份，用来验证浏览器登录是否为同一用户。他存在于服务器，Django默认会把session存入数据库中。 Session依赖于Cookie，如果浏览器不能保存cookie，那么session就失效了。因为他需要浏览器的cookie和session做对比。session就是用来在服务器端保存用户的会话状态 Session的作用 session下次通过cookie中的sessionID（键）获取用户信息值（值）\n1，会话保持，记住用户的登录状态（WEB网站，分布式架构） 2，避免了敏感信息保存在客户端，防止客户端修改cookie信息（和cookie的区别） session的过期时间 session的过期时间：django默认设置是2周 ，如果session过期，浏览器再携带之前的cookie就不能免登陆了。因为cookie已经失效了。\n前端：如果超出了session的过期时间，那么浏览器会自动将对应的cookie删除掉\n后端：django没有对过期的session做任何处理\n删除后台保留的一些过期的session信息 1 python manage.py clearsessions 当然，如果用户在过期时间内主动退出登录，那么django会将该用户对应的session数据给删除掉 （request.session.flush()） 但是如果用户在登录完以后没有主动退出，并且超出了过期时间，用户需要重新登录，但django中的过期session是不清除的，需要定期清理过期的session数据。 Session的保存方式 Session是大多数网站都需要具备的功能，Django为我们提供了一个通用的session框架，并且可以使用多种session数据的保存方式：\n保存在数据库内 保存到缓存 保存到文件内 保存到cookie内 通常情况下，没有特别需求的话，请使用保存在数据库内的方式，尽量不要保存在cookie内。\ndjango的session框架支持匿名会话，封装了cookies的发送和接收过程。cookie包含一个会话ID而不是数据本身（除非你使用的是基于后端的cookie） django的会话框架完全的，唯一的基于cookie。它不像PHP一样，把会话的ID放在URL中，那样不仅使得URL变得丑陋，而且使得你的网站易于受到通过Referer头部进行窃取会话ID的攻击。 Session的使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # 登录校验 from django.shortcuts import render, redirect # Create your views here. def login(request): print(\u0026#34;Cookies:\u0026#34;, request.COOKIES) print(\u0026#34;Session:\u0026#34;, request.session) if request.method == \u0026#34;POST\u0026#34;: name = request.POST.get(\u0026#34;user\u0026#34;) pwd = request.POST.get(\u0026#34;passwd\u0026#34;) if name == \u0026#39;luenci\u0026#39; and pwd == \u0026#39;123\u0026#39;: # Cookie Session request.session[\u0026#34;is_login\u0026#34;] = True request.session[\u0026#34;user\u0026#34;] = name return redirect(\u0026#39;/index/\u0026#39;) return render(request, \u0026#39;login.html\u0026#39;, locals()) def index(request): # {\u0026#39;Hm_lvt_ca9c9aeca6d24b987c40c4c8ad091e42\u0026#39;: \u0026#39;1591770252,1591772319\u0026#39;, # \u0026#39;csrftoken\u0026#39;: \u0026#39;DP9BWOWgK1fGi5goPqAlFhR4tX2TC4eXL2NuIC6TjrObLc6IwmGmup0r5M5sCZBH\u0026#39;, # \u0026#39;sessionid\u0026#39;: \u0026#39;edvrn0uevgi556t8wrlvh2iqg0xzmm92\u0026#39;, # \u0026#39;name\u0026#39;: \u0026#39;luenci\u0026#39;} # print(request.COOKIES) if request.session.get(\u0026#34;is_login\u0026#34;, None): name = request.session.get(\u0026#34;user\u0026#34;, None) return render(request, \u0026#34;index.html\u0026#34;, locals()) else: return redirect(\u0026#39;/login/\u0026#39;) ","permalink":"https://luenci.com/en/posts/django%E7%9A%84cookie%E5%92%8Csession/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://juejin.im/post/5aa783b76fb9a028d663d70a\"\u003ehttps://juejin.im/post/5aa783b76fb9a028d663d70a\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.cnblogs.com/wj-1314/p/10496253.html\"\u003ehttps://www.cnblogs.com/wj-1314/p/10496253.html\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSession是存储在服务器端的，Cookie是存储在客户端的\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cookie的概念\"\u003eCookie的概念\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCookie是客户端用户信息的一种机制，用来记录用户的一些信息，实际上Cookie是服务器在\u003cstrong\u003e本地机器\u003c/strong\u003e上存储的一小段文本，并随着每次请求发送到服务器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cookie与session的区别\"\u003eCookie与Session的区别\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ecookie数据存放在客户的浏览器（客户端）上，session数据放在服务器上，但是服务端的session的实现对客户端的cookie有依赖关系的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\u003c/strong\u003e，考虑到安全应当使用session；\u003c/li\u003e\n\u003cli\u003esession会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE；\u003c/li\u003e\n\u003cli\u003e一个服务器最多在客户端浏览器上保存20个Cookie；\u003c/li\u003e\n\u003cli\u003e一个浏览器最多保存300个Cookie\u003c/li\u003e\n\u003cli\u003e单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能超过3K；\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e上面的数据只是HTTP的Cookie规范，但是在浏览器大战的今天，一些浏览器为了打败对手，为了展示自己的能力起见，可能对Cookie规范“扩展”了一些，例如每个Cookie的大小为8KB，最多可保存500个Cookie等！但也不会出现将你的硬盘占满的可能\u003c/p\u003e","title":"Cookie和Session知识"},{"content":"失传的 C 结构体打包技艺（转） 转自： https://fishc.com.cn/forum.php?mod=viewthread\u0026tid=83418\u0026extra=page%3D2%26filter%3Dtypeid%26typeid%3D571\n作者：Eric S. Raymond 原文链接：http://www.catb.org/esr/structure-packing\n谁应阅读本文 如果你在内存容量受限的嵌入式系统中写程序，或者编写操作系统内核代码，就有必要了解这项技术。如果数据集巨大，应用时常逼近内存极限，这项技术会有所帮助。倘若你非常非常关心如何最大限度地减少处理器缓存段（cache-line）未命中情况的发生，这项技术也有所裨益。\n2013 年底，我大量应用了一项 C 语言优化技术，这项技术是我早在二十余年前就已掌握的，但彼时之后，鲜有使用。\n通过精心调整结构成体员的顺序，可以在这种情况下大幅减少内存占用。其效果显著——在上述案例中，可以减少 40% 的内存空间。程序应用于更大的软件仓库，也不会因内存耗尽而崩溃。\n事出有因。计算机科学课程（正确地）引导人们远离微观优化，转而寻求更理想的算法。计算成本一路走低，令压榨内存的必要性变得越来越低。旧日里，黑客们通过在陌生的硬件架构中跌跌撞撞学习 —— 如今已不多见。\n首先需要了解的是，对于现代处理器，C 编译器在内存中放置基本 C 数据类型的方式受到约束，以令内存的访问速度更快。\n用行话来说，x86 和 ARM 上的基本 C 类型是“自对齐（self-aligned）”的。关于指针，无论 32 位（4 字节）还是 64 位（8 字节）也都是自对齐的。\n我提到“现代处理器”，是因为有些老平台强迫 C 程序违反对齐规则（例如，为 int 指针分配一个奇怪的地址并试图使用它），不仅令速度减慢，还会导致非法指令错误。例如 Sun SPARC 芯片就有这种问题。事实上，如果你下定决心，并恰当地在处理器中设置标志位（e18），在 x86 平台上，也能引发这种错误。\n你还可以通过 pragma 指令（通常为 ）强迫编译器不采用处理器惯用的对齐规则。但请别随意运用这种方式，因为它强制生成开销更大、速度更慢的代码。通常，采用我在下文介绍的方式，可以节省相同或相近的内存。 #pragma pack\n我们来看一个关于变量在内存中分布的简单案例。思考形式如下的一系列变量声明，它们处在一个 C 模块的顶层。\n然而实际情况（在 x86、ARM 或其他采用自对齐类型的平台上）如下。存储 p 需要自对齐的 4 或 8 字节空间，这取决于机器字的大小。这是指针对齐 —— 极其严格。\n1 2 3 4 5 6 1. char *p; /* 4 or 8 bytes */ 2. char c; /* 1 byte */ 3. char pad[3]; /* 3 bytes */ 4. int x; /* 4 bytes */ 字符数组 pad[3] 意味着在这个结构体中，有 3 个字节的空间被浪费掉了。老派术语将其称之为“废液（slop）”。\n1 2 3 1. char *p; 2. char c; 3. short x; 在这个例子中，实际分布将会是：\n1 2 3 1. char *p; 2. char c; 3. long x; 我们将得到：\n1 2 3 1. char c; 2. char *p; 3. int x; 假如实际内存分布可以写成下面这样：\n首先，在此例中，N 将为 0，x 的地址紧随 p 之后，能确保是与指针对齐的，因为指针的对齐要求总比 int 严格。\n不过更有可能的情况是，c 将被映射为机器字的首字节。于是乎 M 将会用于填充，以使 p 指针对齐——32 位系统中为 3 字节，64 位系统中为 7 字节。\n倘若你希望这些变量占用的空间更少，那么可以交换 x 与 c 的次序。\n在讲述这部分内容前，我们先对标量数组做个说明。在具有自对齐类型的平台上，char、short、int、long 和指针数组都没有内部填充，每个成员都与下一个成员自动对齐。\n通常情况下，结构体实例以其最宽的标量成员为基准进行对齐。编译器之所以如此，是因为此乃确保所有成员自对齐，实现快速访问最简便的方法。\n假如你对此有疑惑，ANSI C 提供了一个 宏，可用于读取结构体成员位移。\n1 2 3 4 5 1. struct foo1 { 2. char *p; 3. char c; 4. long x; 5. }; 假定处在 64 位系统中，任何 struct fool 的实例都采用8字节对齐。不出所料，其内存分布将会像下面这样：\n1 2 3 4 5 6 7 8 9 10 11 1. struct foo2 { 2. char c; /* 1 byte */ 3. char pad[7]; /* 7 bytes */ 4. char *p; /* 8 bytes */ 5. long x; /* 8 bytes */ 6. }; 如果成员是互不关联的变量，c便可能从任意位置起始，pad的大小则不再固定。因为struct foo2的指针需要与其最宽的成员为基准对齐，这变得不再可能。现在 c 需要指针对齐，接下来填充的7个字节被锁定了。\n结构体尾填充的通用法则是：编译器将会对结构体进行尾填充，直至它的跨步地址。这条法则决定了 sizeof() 的返回值。\n1 2 3 4 5 6 7 1. struct foo3 { 2. char *p; /* 8 bytes */ 3. char c; /* 1 byte */ 4. }; 5. 6. struct foo3 singleton; 7. struct foo3 quad[4]; 复制代码\n你以为 的值是 9，但实际是 16。它的跨步地址是 。于是，在 quad 数组中，每个成员都有 7 字节的尾填充，因为下个结构体的首个成员需要在 ８ 字节边界上对齐。内存分布就好像这个结构是这样声明的：\n1 2 3 4 1. struct foo4 { 2. short s; /* 2 bytes */ 3. char c; /* 1 byte */ 4. }; 因为 s 只需要 2 字节对齐，跨步地址仅在 c 的 1 字节之后，整个 struct foo4 也只需要 1 字节的尾填充。形式如下：\n的返回值将为 4。\n1 2 3 4 5 6 7 1. struct foo5 { 2. short s; 3. char c; 4. int flip:1; 5. int nybble:4; 6. int septet:7; 7. }; 关于位域需要了解的是，它们是由字（或字节）层面的掩码和移位指令实现的。从编译器的角度来看，struct foo5 中的位域就像 ２ 字节、16 位的字符数组，只用到了其中 12 位。为了使结构体的长度是其最宽成员长度 的整数倍，接下来进行了填充。\n1 2 3 4 5 6 7 8 9 1. struct foo6 { 2. char c; 3. struct foo5 { 4. ​ char *p; 5. ​ short x; 6. } inner; 7. }; 内层结构体成员 char *p 强迫外层结构体与内层结构体指针对齐一致。在 64 位系统中，实际的内存分布将类似这样：\n理解了编译器在结构体中间和尾部插入填充的原因与方式后，我们来看看如何榨出这些废液。此即结构体打包的技艺。\n消除废液最简单的方式，是按对齐值递减重新对结构体成员排序。即让所有指针对齐成员排在最前面，因为在 64 位系统中它们占用 8 字节；然后是 4 字节的 int；再然后是 2 字节的 short，最后是字符。\n1 2 3 4 5 1. struct foo7 { 2. char c; 3. struct foo7 *p; 4. short x; 5. }; 将隐含的废液写明，形式如下：\n1 2 3 4 5 6 7 1. struct foo8 { 2. struct foo8 *p; 3. short x; 4. char c; 5. }; 考虑到自对齐，我们看到所有数据域之间都不需填充。因为有较严对齐要求（更长）成员的跨步地址对不太严对齐要求的（更短）成员来说，总是合法的对齐地址。重打包过的结构体只需要尾填充：\n注意，重新打包不能确保在所有情况下都能节省空间。将这项技术应用于更靠前 struct foo6 的那个例子，我们得到：\n1 2 3 4 5 6 7 8 9 10 1. struct foo9 { 2. struct foo9_inner { 3. char *p; /* 8 bytes */ 4. int x; /* 4 bytes */ 5. char pad[4]; /* 4 bytes */ 6. } inner; 7. char c; /* 1 byte */ 8. char pad[7]; /* 7 bytes */ 9. }; 结果还是 24 字节，因为 c 无法作为内层结构体的尾填充。要想节省空间，你需要得新设计数据结构。 棘手的标量案例\n#define 请当心，重打包结构体时，枚举型变量通常是 int，这与编译器相关；但也可能是 short、long、甚至默认为 char。编译器可能会有 预处理指令或命令行选项指定枚举的尺寸。\n以上两种情况，最好用 来检查存储尺寸。\n尽管按尺寸重排是最简单的消除废液的方式，却不一定是正确的方式。还有两个问题需要考量：可读性与缓存局部性。\n笨拙地、机械地重排结构体可能有损可读性。倘若有可能，最好这样重排成员：将语义相关的数据放在一起，形成连贯的组。最理想的情况是，结构体的设计应与程序的设计相通。\n为保持可读性所做的工作（将相关和同时访问的数据放在临近位置）也会提高缓存段的局部性。这些都是需要明智地重排，并对数据的存取模式了然于心的原因。\n是的，某些时候，这种做法与前文将相关数据放入与缓存段长度相同块的做法矛盾。多线程的确是个难题。缓存段弹跳和其他多线程优化问题是很高级的话题，值得单独为它们写份指导。这里我所能做的，只是让你了解有这些问题存在。 其他打包技术\n你可能会有一点儿存取时间的损失，但只要将工作集合压缩得足够小，那点损失可以靠避免缓存未命中补偿。\n这不仅减小了结构体的可见尺寸，还可以消除废液和/或创造额外的机会来进行重新排序。这种良性串连的效果不难被触发。\nclang 编译器有个 Wpadded 选项，可以生成有关对齐和填充的信息。\n读者可以下载一段程序源代码 ，验证上文有关标量和结构体尺寸的结论。\n理解这些规则的第二个层次是，知其何时及如何会被打破。在我学习它们的日子里（1980 年代早期），我们把不理解这些规则的人称为“所有机器都是 VAX 综合症”的牺牲品。记住，世上所有电脑并非都是 PC。\n","permalink":"https://luenci.com/en/posts/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8C%85%E6%8A%80%E8%89%BA/","summary":"\u003ch1 id=\"失传的-c-结构体打包技艺转\"\u003e失传的 C 结构体打包技艺（转）\u003c/h1\u003e\n\u003cp\u003e转自： \u003ca href=\"https://fishc.com.cn/forum.php?mod=viewthread\u0026amp;tid=83418\u0026amp;extra=page%3D2%26filter%3Dtypeid%26typeid%3D571\"\u003ehttps://fishc.com.cn/forum.php?mod=viewthread\u0026tid=83418\u0026extra=page%3D2%26filter%3Dtypeid%26typeid%3D571\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Eric_S._Raymond\"\u003e作者：Eric S. Raymond\u003c/a\u003e\n原文链接：http://www.catb.org/esr/structure-packing\u003c/p\u003e\n\u003ch2 id=\"谁应阅读本文\"\u003e\u003cstrong\u003e谁应阅读本文\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e如果你在内存容量受限的嵌入式系统中写程序，或者编写操作系统内核代码，就有必要了解这项技术。如果数据集巨大，应用时常逼近内存极限，这项技术会有所帮助。倘若你非常非常关心如何最大限度地减少处理器缓存段（cache-line）未命中情况的发生，这项技术也有所裨益。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e2013 年底，我大量应用了一项 C 语言优化技术，这项技术是我早在二十余年前就已掌握的，但彼时之后，鲜有使用。\u003c/p\u003e\n\u003cp\u003e通过精心调整结构成体员的顺序，可以在这种情况下大幅减少内存占用。其效果显著——在上述案例中，可以减少 40% 的内存空间。程序应用于更大的软件仓库，也不会因内存耗尽而崩溃。\u003c/p\u003e\n\u003cp\u003e事出有因。计算机科学课程（正确地）引导人们远离微观优化，转而寻求更理想的算法。计算成本一路走低，令压榨内存的必要性变得越来越低。旧日里，黑客们通过在陌生的硬件架构中跌跌撞撞学习 —— 如今已不多见。\u003c/p\u003e","title":"C结构体打包技艺"},{"content":"ps:先举三反一，再举一反三，学习就应该是这样，先模仿，再改进，最后实现自己的创意！\t\u0026ndash;小甲鱼论坛\nC语言中各种数据类型所占用的存储空间的大小 int\u0026mdash;32位\t四个字节\nfloat \u0026mdash;32位\t四个字节\nchar\u0026mdash;8位\t一个字节\ndouble\u0026mdash;-64位\t8个字节\nbool\u0026mdash;-16位\t2个字节\nlong\u0026mdash;-32位\t四个字节\n整数类型 下表列出了关于标准整数类型的存储大小和值范围的细节：\n类型 存储大小 值范围 char 1 字节 -128 到 127 或 0 到 255 unsigned char 1 字节 0 到 255 signed char 1 字节 -128 到 127 int 2 或 4 字节 -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 unsigned int 2 或 4 字节 0 到 65,535 或 0 到 4,294,967,295 short 2 字节 -32,768 到 32,767 unsigned short 2 字节 0 到 65,535 long 4 字节 -2,147,483,648 到 2,147,483,647 unsigned long 4 字节 0 到 4,294,967,295 浮点类型 下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：\n类型 存储大小 值范围 精度 float 4 字节 1.2E-38 到 3.4E+38 6 位小数 double 8 字节 2.3E-308 到 1.7E+308 15 位小数 long double 16 字节 3.4E-4932 到 1.1E+4932 19 位小数 void 类型 void 类型指定没有可用的值。它通常用于以下三种情况下：\n序号 类型与描述 1 函数返回为空 C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status); 2 函数参数为空 C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 int rand(void); 3 指针指向 void 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 void *malloc( size_t size ); 返回指向 void 的指针，可以转换为任何数据类型。 C语言运算符优先级 优先级 运算符 名称或含义 使用形式 结合方向 说明 1 [] 数组下标 数组名[常量表达式] 左到右 () 圆括号 （表达式）/函数名(形参表) . 成员选择（对象） 对象.成员名 -\u0026gt; 成员选择（指针） 对象指针-\u0026gt;成员名 2 - 负号运算符 -表达式 右到左 单目运算符 (类型) 强制类型转换 (数据类型)表达式 ++ 自增运算符 ++变量名/变量名++ 单目运算符 \u0026ndash; 自减运算符 \u0026ndash;变量名/变量名\u0026ndash; 单目运算符 * 取值运算符 *指针变量 单目运算符 \u0026amp; 取地址运算符 \u0026amp;变量名 单目运算符 ! 逻辑非运算符 !表达式 单目运算符 ~ 按位取反运算符 ~表达式 单目运算符 sizeof 长度运算符 sizeof(表达式) 3 / 除 表达式/表达式 左到右 双目运算符 * 乘 表达式*表达式 双目运算符 % 余数（取模） 整型表达式/整型表达式 双目运算符 4 + 加 表达式+表达式 左到右 双目运算符 - 减 表达式-表达式 双目运算符 5 \u0026laquo; 左移 变量\u0026laquo;表达式 左到右 双目运算符 \u0026raquo; 右移 变量\u0026raquo;表达式 双目运算符 6 \u0026gt; 大于 表达式\u0026gt;表达式 左到右 双目运算符 \u0026gt;= 大于等于 表达式\u0026gt;=表达式 双目运算符 \u0026lt; 小于 表达式\u0026lt;表达式 双目运算符 \u0026lt;= 小于等于 表达式\u0026lt;=表达式 双目运算符 7 == 等于 表达式==表达式 左到右 双目运算符 != 不等于 表达式!= 表达式 双目运算符 8 \u0026amp; 按位与 表达式\u0026amp;表达式 左到右 双目运算符 9 ^ 按位异或 表达式^表达式 左到右 双目运算符 10 | 按位或 表达式|表达式 左到右 双目运算符 11 \u0026amp;\u0026amp; 逻辑与 表达式\u0026amp;\u0026amp;表达式 左到右 双目运算符 12 || 逻辑或 表达式||表达式 左到右 双目运算符 13 ?: 条件运算符 表达式1? 表达式2: 表达式3 右到左 三目运算符 14 = 赋值运算符 变量=表达式 右到左 /= 除后赋值 变量/=表达式 *= 乘后赋值 变量*=表达式 %= 取模后赋值 变量%=表达式 += 加后赋值 变量+=表达式 -= 减后赋值 变量-=表达式 \u0026laquo;= 左移后赋值 变量\u0026laquo;=表达式 \u0026raquo;= 右移后赋值 变量\u0026raquo;=表达式 \u0026amp;= 按位与后赋值 变量\u0026amp;=表达式 ^= 按位异或后赋值 变量^=表达式 |= 按位或后赋值 变量|=表达式 15 , 逗号运算符 表达式,表达式,… 左到右 从左向右顺序运算 注：同一优先级的运算符，运算次序由结合方向所决定。\nbreak和continue语句区别 break语句\n结束当前循环\ncontinue语句\n跳过本次循环 二维下标直接索引和指针间接索引的相互转化 1 2 3 4 *（array + i） = array[i] *(*(array + i) + j) = array[i][j] *(*(*(array + i) + j) + K) = array[i][j][k] ... 二维数组和数组指针的关系 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // // Created by Luenci on 2019/10/5. // #include \u0026lt;stdio.h\u0026gt; int main(){ int array[2][3] = {{0, 1, 2}, {4, 5, 6}}; int (*p)[3] = array; printf(\u0026#34;**(p+1): %d\\n\u0026#34;, **(p+1)); printf(\u0026#34;**(array+1): %d\\n\u0026#34;, **(array+1)); printf(\u0026#34;array[1][0]: %d\\n\u0026#34;, array[1][0]); printf(\u0026#34;*(*(p+1)+2): %d\\n\u0026#34;, *(*(p+1)+2)); printf(\u0026#34;*(*(array+1)+2): %d\\n\u0026#34;, *(*(array+1)+2)); printf(\u0026#34;array[1][2]: %d\\n\u0026#34;, array[1][2]); return 0; } void指针和NULL指针 Void指针 void指针我们把它称之为通用指针，就是可以指向任意类型的数据。也就是说，任何类型的指针都可以赋值给void指针。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // // Created by Luenci on 2019/10/5. // #include \u0026lt;stdio.h\u0026gt; int main(){ int num = 1024; int *pi = \u0026amp;num; char *ps = \u0026#34;Luenci\u0026#34;; void *pv; pv = pi; printf(\u0026#34;pi:%p, pv:%p\\n\u0026#34;, pi,pv); printf(\u0026#34;*pv:%d\\n\u0026#34;, *(int *)pv); pv = (char *)ps; printf(\u0026#34;ps:%p, pv:%p\\n\u0026#34;, ps, pv); printf(\u0026#34;*pv:%s\\n\u0026#34;, (char *)pv); return 0; } NULL指针 当你还不清楚要将指针初始值为什么地址时，请先将它初始化为**NULL**；在对指针进行解引用时，先检查该指针是否为NULL。这种策略可以为今后编写大型程序 节省大量的\t调试时间。\n1 #define NULL ((void *)0) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // // Created by Luenci on 2019/10/5. // #include \u0026lt;stdio.h\u0026gt; int null_pointer(){ int *p1; int *p2 = NULL; printf(\u0026#34;%d\\n\u0026#34;, *p1); printf(\u0026#34;%d\\n\u0026#34;, *p2); return 0; } 指向指针的指针 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int main(){ int num = 520; int *p = \u0026amp;num; int **pp = \u0026amp;p; printf(\u0026#34;num: %d\\n\u0026#34;, num); printf(\u0026#34;*p: %d\\n\u0026#34;, *p); printf(\u0026#34;**PP: %d\\n\u0026#34;, **pp); printf(\u0026#34;\u0026amp;p: %p, pp:%p\\n\u0026#34;, \u0026amp;p, pp); printf(\u0026#34;\u0026amp;num:%p, p:%p, *pp:%p\\n\u0026#34;, \u0026amp;num,p,*pp); return 0; } out: num: 520 *p: 520 **PP: 520 \u0026amp;p: 0061FF14, pp:0061FF14 \u0026amp;num:0061FF18, p:0061FF18, *pp:0061FF18 指针数组和指向指针的指针 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 int pointer_array(){ char *cBooks[] = { \u0026#34;\u0026lt;c程序设计语言\u0026gt;\u0026#34;, \u0026#34;\u0026lt;c专家编程\u0026gt;\u0026#34;, \u0026#34;\u0026lt;c和指针\u0026gt;\u0026#34;, \u0026#34;\u0026lt;c prime plus\u0026gt;\u0026#34;, \u0026#34;\u0026lt;C study\u0026gt;\u0026#34; }; char **byLuenci; char **byGood[4]; byLuenci = \u0026amp;cBooks[4]; byGood[0] = \u0026amp;cBooks[0]; byGood[1] = \u0026amp;cBooks[1]; byGood[2] = \u0026amp;cBooks[2]; byGood[3] = \u0026amp;cBooks[3]; printf(\u0026#34;Luenci拥有的书: %s\\n\u0026#34;, *byLuenci); printf(\u0026#34;Luenci喜欢的图书有：\\n\u0026#34;); int i; for (int i = 0; i \u0026lt; 4; ++i) { printf(\u0026#34;%s\\n\u0026#34;,*byGood[i]); } return 0; } out: Luenci拥有的书: \u0026lt;C study\u0026gt; Luenci喜欢的图书有： \u0026lt;c程序设计语言\u0026gt; \u0026lt;c专家编程\u0026gt; \u0026lt;c和指针\u0026gt; \u0026lt;c prime plus\u0026gt; 常量 定义 1 2 3 4 5 6 7 8 9 10 11 520，‘a’, 3.14 #define price 520 #define A \u0026#39;a\u0026#39; #define PI 3.14 // 使用const关键字修饰 const int price = 520; const char A = \u0026#39;a\u0026#39;; const float pi = 3.14; 指向常量的指针 指针可以修改为指向不同的常量 指针可以修改为指向不同的变量 可以通过解引用来读取指针指向的数据 不可以通过解引用修改指针指向的数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;stdio.h\u0026gt; int main(){ int num =520; const int cnum = 880; const int *pc = \u0026amp;cnum; printf(\u0026#34;cnum:%d, \u0026amp;cum:%p \\n\u0026#34;, cnum, \u0026amp;cnum); printf(\u0026#34;*pc:%d, pc:%p\\n\u0026#34;, *pc, pc); pc = \u0026amp;num; printf(\u0026#34;num:%d, \u0026amp;num:%p \\n\u0026#34;, num, \u0026amp;num); printf(\u0026#34;*pc:%d, pc:%p\\n\u0026#34;, *pc, pc); return 0; } 函数 结构 1 2 3 4 类型名 函数名（参数列表） { 函数体 } 函数的声明 所谓的声明（Declaration），就是告诉编译器我要是用这个函数，你现在没有找到它的定义不要紧，请不要报错，稍后我将会把它补上。\n函数的参数和返回值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // // Created by Luenci on 2019/10/8. // #include \u0026lt;stdio.h\u0026gt; void print_c(); int sum(int n); int max(int x, int y); int max(int x, int y){ // a？b:c 当a的值为真时，返回b的值；否则返回c的值 return x \u0026gt; y ? x:y; } int sum(int n){ int result = 0; do { result += n; }while (n-- \u0026gt; 0); return result; } void print_c(){ printf(\u0026#34; ###### \\n\u0026#34;); printf(\u0026#34;## ##\\n\u0026#34;); printf(\u0026#34;## \\n\u0026#34;); printf(\u0026#34;## \\n\u0026#34;); printf(\u0026#34;## ##\\n\u0026#34;); printf(\u0026#34; ###### \\n\u0026#34;); } int main(){ print_c(); int n,x,y; // printf(\u0026#34;请输入n的值：\u0026#34;); printf(\u0026#34;请输入x,y的值：\u0026#34;); // scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;x, \u0026amp;y); // printf(\u0026#34;1+2+3+...+(n-1)+n的结果是：%d\\n\u0026#34;,sum(n)); printf(\u0026#34;x,y中最大值的值为：%d\\n\u0026#34;, max(x,y)); return 0; } 形参和实参 用于数据传输，形参就相当与一个占位符，只在函数内部有效。 传值和传址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // // Created by Luenci on 2019/10/8. // #include \u0026lt;stdio.h\u0026gt; void swap(int *x, int *y); void swap(int *x, int *y){ int *temp; printf(\u0026#34;In swap 互换前：x %d, y %d\\n\u0026#34;, *x,*y); temp = *x; *x = *y; *y = temp; printf(\u0026#34;In swap 互换后：x %d, y %d\\n\u0026#34;, *x,*y); } int main(){ int x = 3, y = 5; printf(\u0026#34;In main 互换前：x %d, y %d\\n\u0026#34;, x,y); swap(\u0026amp;x,\u0026amp;y); printf(\u0026#34;In main 互换后：x %d, y %d\\n\u0026#34;, x,y); return 0; } 传数组 实际上传过去的是数组的地址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void get_array(int b[10]){ printf(\u0026#34;sizeof b: %d\\n\u0026#34;, sizeof(b)); } int main(){ int a[10] = {0,1,2,3,4,5,6,7,8,9}; printf(\u0026#34;sizeof a:%d\\n\u0026#34;, sizeof(a)); get_array(a); out: sizeof a:40 sizeof b: 4 可变参数 引入 头文件**#include\u0026lt;stdarg.h\u0026gt;** 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // // Created by Luenci on 2019/10/8. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdarg.h\u0026gt; int sum(int n, ...); int sum(int n, ...){ int i; int sum = 0; va_list vap; va_start(vap, n); for(i = 0; i \u0026lt; n; i++){ sum += va_arg(vap, int); } va_end(vap); return sum; } int main(){ int result,result2,result3; result = sum(3,1,2,-3); printf(\u0026#34;result:%d\\n\u0026#34;, result); result2 = sum(4,2,2,4,2); printf(\u0026#34;result2:%d\\n\u0026#34;, result2); result3 = sum(4,2,8,4,-2); printf(\u0026#34;result3:%d\\n\u0026#34;, result3); return 0; } 指针函数 使用指针变量作为函数的返回值，就是指针函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // // Created by Luenci on 2019/10/8. // #include \u0026lt;stdio.h\u0026gt; char *getchartchar(); char *getchart(char c){ switch (c) { case \u0026#39;A\u0026#39;: return \u0026#34;Apple\u0026#34;; case \u0026#39;B\u0026#39;: return \u0026#34;Banana\u0026#34;; case \u0026#39;C\u0026#39;: return \u0026#34;Cat\u0026#34;; case \u0026#39;D\u0026#39;: return \u0026#34;Dog\u0026#34;; default: return \u0026#34;None\u0026#34;; } } int main(){ char input; printf(\u0026#34;请输入一个字母：\u0026#34;); scanf(\u0026#34;%c\u0026#34;, \u0026amp;input); printf(\u0026#34;%s\\n\u0026#34;, getchart(input)); return 0; } in:A out:Apple PS:不要返回局部变量的指针 函数指针 指针函数 - - \u0026gt; *int p(); 函数指针 - - \u0026gt; *int (p)(); 函数指针作为参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // // Created by Luenci on 2019/10/8. // #include \u0026lt;stdio.h\u0026gt; int add(int, int); int sub(int, int); int clac(int (*fp)(int, int), int, int); int add(int num1, int num2){ return num1 + num2; } int sub(int num1, int num2){ return num1 - num2; } int clac(int (*fp)(int, int), int num1, int num2){ return (*fp)(num1, num2); } int main(){ printf(\u0026#34;3 + 5 = %d\\n\u0026#34;, clac(add, 3,5)); printf(\u0026#34;3 - 5 = %d\\n\u0026#34;, clac(sub, 3,5)); return 0; } 函数指针作为返回值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // // Created by Luenci on 2019/10/10. // #include \u0026lt;stdio.h\u0026gt; int add(int, int); int sub(int, int); int calc(int (*)(int, int), int, int); int (*slect(char))(int,int); int add(int num1, int num2){ return num1 + num2; } int sub(int num1, int num2){ return num1 - num2; } int calc(int (*fp)(int, int),int num1, int num2){ return (*fp)(num1, num2); } int (*slect(char op))(int, int){ switch(op){ case \u0026#39;+\u0026#39;: return add; case \u0026#39;-\u0026#39;: return sub; } } int main(){ int num1, num2; char op; int (*fp)(int, int); printf(\u0026#34;请输入一个式子 (如 1+3) :\u0026#34;); scanf(\u0026#34;%d%c%d\u0026#34;, \u0026amp;num1, \u0026amp;op, \u0026amp;num2); fp = slect(op); printf(\u0026#34;%d %c %d = %d\\n\u0026#34;, num1, op, num2, calc(fp, num1, num2)); return 0; } 局部变量和全局变量 局部变量 不同函数的变量无法相互访问 全局变量 如果不对全局变量进行初始化，那么它会自动初始化为0. 如果函数在内部存在一个与全局变量同名的局部变量，编译器不会报错，而是在函数中屏蔽全局变量。 exsten关键字 告诉编译器我等下会定义变量，不要报错 不要大量的使用全局变量 使用全局变量会使你的程序占用更多的内存，因为全局变量从定义时候开始，知道程序退出才释放。 污染命名空间 提高了程序耦合性 作用域和链接属性 当变量被定义在不同的位置时，它的作用域的范围是不一样的，这个作用范围就是我们所说的作用域 C语言编译器可以确认四种不同类型的作用域： 代码块的作用域 文件作用域 原型作用域 函数作用域 代码块作用域（Block scope） 在代码块中定义的变量，具有代码块作用域。作用范围是从变量定义的位置开始，到标志代码块结束的大括号（}）处。 文件作用域（file scope） 任何在代码块之外声明的标识符都具有文件作用域，作用域的范围是从他们的声明位置开始，到文件的结尾处都是可以访问的。 原型作用域（prototype scope） 原型作用域只适用于那些在函数原型中声明的参数名。 函数作用域（function scope） 函数作用域只适合于goto语句的标签，作用将goto语句得标签限制在同一个函数内部，以防止出现重名的标签。 定义和声明 当一个变量被定义的时候，编译器为变量申请内存空间并填充值 当一个变量被声明的时候，编译器就知道该变量被定义在其他地方 声明是通知编译器该变量名及相关的类型已经存在，不需要再为此申请内存空间。 局部变量即是定义又是声明 定义只能来一次，否则就叫做重复定义某个同名的变量；而声明可以由你很多次。 链接属性 external（外部的）\n多个文件中声明的同名标识符表示一个实体\ninternal（内部的）\n单个文件中声明的同名标识符表示同一个实体 none（无）\n声明的同名标识符被当做独立的不同实体 只有具备文件作用域的标识符才能拥有external或internal的链接属性，其他作用域的标识符都是none属性。\n默认情况下，具备文件的作用域的标识符拥有external属性。也就是说该标识符允许跨文件访问。对于external属性的标识符，无论在不同文件中声明多少次，表示的都是一个实体。\n使用static关键字可以使得原先拥有的external属性的标识符变为internal属性。这里有两点需要注意：\n使用static关键字修改链接属性，只对具有文件作用域的标识符生效（对于拥有其他作用域的标志符是另一种功能） 链接属性只能修改一次，也就是说一旦将标识符的链接属性改为internal，就无法变回external。 生存期和存储类型 C语言变量拥有两种生存周期 静态存储器\n自动存储器\n具有文件作用域的变量属于静态存储器，函数也属于静态存储器。属于静态存储器的变量在程序执行期间将一直占据存储空间，直到程序关闭才释放\n具有代码块作用域的变量一般情况下属于自动存储器。属于自动存储期的变量在代码块结束时将自动释放。\n存储类型 存储类型其实是指存储变量值的内存类型，C语言提供了五种类型。 auto register static extern typedef ","permalink":"https://luenci.com/en/posts/c%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B01/","summary":"\u003cp\u003e\u003cem\u003eps:先举三反一，再举一反三，学习就应该是这样，先模仿，再改进，最后实现自己的创意！\t\t\t\t\t\u0026ndash;小甲鱼论坛\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"c语言中各种数据类型所占用的存储空间的大小\"\u003eC语言中各种数据类型所占用的存储空间的大小\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eint\u0026mdash;32位\t四个字节\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003efloat \u0026mdash;32位\t四个字节\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003echar\u0026mdash;8位\t一个字节\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003edouble\u0026mdash;-64位\t8个字节\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ebool\u0026mdash;-16位\t2个字节\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003elong\u0026mdash;-32位\t四个字节\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"整数类型\"\u003e整数类型\u003c/h3\u003e\n\u003cp\u003e下表列出了关于标准整数类型的存储大小和值范围的细节：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e类型\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e存储大小\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e值范围\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003echar\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e-128 到 127 或 0 到 255\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eunsigned char\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0 到 255\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003esigned char\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e-128 到 127\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eint\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 或 4 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eunsigned int\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 或 4 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0 到 65,535 或 0 到 4,294,967,295\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eshort\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e-32,768 到 32,767\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eunsigned short\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0 到 65,535\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003elong\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e-2,147,483,648 到 2,147,483,647\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eunsigned long\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e0 到 4,294,967,295\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"浮点类型\"\u003e浮点类型\u003c/h3\u003e\n\u003cp\u003e下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e类型\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e存储大小\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e值范围\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e精度\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003efloat\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e4 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1.2E-38 到 3.4E+38\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e6 位小数\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003edouble\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e8 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e2.3E-308 到 1.7E+308\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e15 位小数\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003elong double\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e16 字节\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e3.4E-4932 到 1.1E+4932\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e19 位小数\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"void-类型\"\u003evoid 类型\u003c/h3\u003e\n\u003cp\u003evoid 类型指定没有可用的值。它通常用于以下三种情况下：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e序号\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e类型与描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e函数返回为空\u003c/strong\u003e C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 \u003cstrong\u003evoid exit (int status);\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e函数参数为空\u003c/strong\u003e C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 \u003cstrong\u003eint rand(void);\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003e指针指向 void\u003c/strong\u003e 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 \u003cstrong\u003evoid *malloc( size_t size );\u003c/strong\u003e 返回指向 void 的指针，可以转换为任何数据类型。\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"c语言笔记（1）"},{"content":"先举三反一，再举一反三，学习就应该是这样，先模仿，再改进，最后实现自己的创意！\t\u0026ndash;小甲鱼论坛\n递归 调用函数本身 设置递归结束条件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // // Created by Luenci on 2019/10/11. // #include \u0026lt;stdio.h\u0026gt; void fun(void); long fact(int num); void fun(void){ static int count = 10; printf(\u0026#34;Hi\\n\u0026#34;); if (count--){ fun(); } } long fact(int num){ long result; if(num \u0026gt; 0){ result = num * fact(num-1); } else{ result = 1; } return result; } int main(void){ // fun(); int num; long re; printf(\u0026#34;请输入您要求阶乘的数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;num); re = fact(num); printf(\u0026#34;%d\u0026#34;, re); return 0; } 汉罗塔 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include\u0026lt;stdio.h\u0026gt; void hanoi(int n, char x, char y, char z); void hanoi(int n, char x, char y, char z){ if(n==1){ printf(\u0026#34;%c --\u0026gt; %c \\n\u0026#34;, x,z); } else{ // 将前n-1个圆盘借助z移动到y hanoi(n-1, x, z, y); printf(\u0026#34;%c --\u0026gt; %c \\n\u0026#34;, x,z); // 将前n-1个圆盘借助x移动到z hanoi(n-1, y, x, z); } } int main(void){ int n; printf(\u0026#34;请输入您的层数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); hanoi(n, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;); return 0; } 快速排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // Created by Luenci on 2019/10/11. // #include \u0026lt;stdio.h\u0026gt; void quick_sort(int array[], int left, int right); void quick_sort(int array[], int left, int right) { int i = left, j = right; int temp; // 交换的中间变量 int pivot; // 基准点 pivot = array[(left + right) / 2]; while (i \u0026lt;= j) { // 从右往左找到大于等于基准点的元素 while (array[i] \u0026lt; pivot) { i++; } // 从右到左找到小于等于基准点的元素 while (array[j] \u0026gt; pivot) { j--; } // 如果 i \u0026lt;= j,则互换 if (i \u0026lt;= j) { temp = array[i]; array[i] = array[j]; array[j] = temp; i++; j++; } } if (left \u0026lt; j) { quick_sort(array, left, j); } if (i \u0026lt; right) { quick_sort(array, i, right); } } int main(void){ int array[] = {73, 108, 111, 101, 78, 109, 66, 48, 88, 135}; int i, length; // 计算数组的长度 length = sizeof(array) / sizeof(array[0]); quick_sort(array, 0, length-1); printf(\u0026#34;排序后的结果是：\u0026#34;); for (i = 0; i \u0026lt; length; i++){ printf(\u0026#34;%d ,\u0026#34;, array[i]); } putchar(\u0026#39;\\n\u0026#39;); return 0; } 动态内存管理 malloc 申请动态内存空间 free 释放动态内存空间 calloc 申请并初始化一系列内存空间 realloc 重新分配内训空间 malloc函数 函数原型\nvoid *malloc（size_t size） malloc函数向系统申请分配size个字节的内存空间，并返回一个指向这块空间的地址。\n如果函数调用成功，返回一个指向申请的内存空间的指针，由于返回类型是void 指针（void * ）， 所以它是可以被转换成任何类型的数据；如果函数调用失败，返回值是NULL。另外，如果size的参数设置为0，返回值也可能是NULL，但这并不意味着函数调用失败。\nfree函数 函数原型 void free（void *ptr） free函数释放ptr参数指向的内存空间。该内存空间必须是有malloc，calloc或realloc函数申请的。否则，该函数将导致未定义行为。如果ptr参数是NULL，则不执行任何操作。注意：该函数并不会修改ptr参数的值，所以调用后仍然指向原来的地方（变为非法空间）。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // // Created by Luenci on 2019/10/12. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(void){ int *ptr; ptr = (int *)malloc(sizeof(int)); if(ptr == NULL){ printf(\u0026#34;分配内存失败\u0026#34;); exit(1); } printf(\u0026#34;请输入一个整数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, ptr); printf(\u0026#34;您输入的整数是:%d\\n\u0026#34;, *ptr); free(ptr); printf(\u0026#34;您输入的整数是:%d\\n\u0026#34;, *ptr); return 0; } 内存泄漏 隐式内存泄漏 用完内存块没有及时使用free函数释放 丢失内存块的地址 初始化内存空间 mem开头的函数被编入字符串标准库，函数的声明包含在string.h这个头文件中： memset \u0026ndash; 使用一个常量字节填充空间 memcpy \u0026ndash; 拷贝内存空间 memmove \u0026ndash; 拷贝内存空间 memcmp \u0026ndash; 比较内存空间 memchr \u0026ndash; 在内存空间中搜索一个字符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // // Created by Luenci on 2019/10/12. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define N 10 int main(void){ int *ptr = NULL; int i; ptr = (int *)malloc(N * sizeof(int)); if(ptr == NULL){ exit(1); } memset(ptr, 0, N * sizeof(int)); for (i= 0; i \u0026lt; N; i++) { printf(\u0026#34;%d \u0026#34;, ptr[i]); } // putchar(\u0026#34;\\n\u0026#34;); putchar(\u0026#39;\\n\u0026#39;); free(ptr); return 0; } /* 1、含义不同。 用单引号引起的一个字符实际上代表一个整数，整数值对应于该字符在编译器采用的字符集中的序列值。而一般我们的编译器采用的都是ASCII字符集。因此\u0026#39;s\u0026#39;的含义其实和十进制数115的含义是一致的。 而用双引号引起的字符串，代表的是一个指向无名数组起始字符的指针。 2、大小不同。 用单引号引起的一个字符大小就是一个字节。 而用双引号引起的字符串大小是字符的总大小+1，因为用双引号引起的字符串会在字符串末尾添加一个二进制为0的字符\u0026#39;\\0\u0026#39;。 */ calloc函数 函数原型 void *calloc(size_t nmemb, sizet_t size); calloc函数在内存中动态地申请nmemb个长度为size的连续内存空间（即申请的总空间尺寸为nmemb * size），这些内存空间全部被初始化为 0. calloc函数与malloc函数的一个重要区别是： calloc函数在申请完内存后，自动初始化该内存空间为零 malloc函数不进行初始化操作，里面数据是随机的 1 2 3 4 5 6 7 8 // 两者等价 // calloc() 分配内存空间并初始化 int *ptr = （int *）calloc（8， sizeof（int））； //malloc()分配内存空间并用memset（）初始化 int *ptr = (int *)malloc(8 * sizeof(int))； memset(prt, 0, 8 * sizeof(int)); realloc函数 如果ptr参数为NULL，那么调用该函数就相当于调用malloc（size） 如果size参数为0，并且ptr参数不为NULL，那么调用该函数就相当于调用free（ptr） 除非ptr参数为NULL，否则ptr的值必须由先前调用malloc，calloc或realloc函数返回。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(void){ int i, num; int count = 0; int *ptr = NULL;// 注意这里必须初始化为NULL do { printf(\u0026#34;请输入一个整数：（输入-1表示结束）\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;num); count++; ptr = (int *)realloc(ptr, count * sizeof(int)); if(ptr == NULL){ exit(1); } ptr[count-1] = num; }while(num != -1); printf(\u0026#34;输入的整数分别是：\u0026#34;); for (int i = 0; i \u0026lt;count ; i++) { printf(\u0026#34;%d \u0026#34;, ptr[i]); } free(ptr); return 0; } c语言的内存布局 代码段 代码段（Text segment）通常是指用来存放在程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读。在代码段中，也有可能包含一些只读的常熟变量，例如字符串常量等。 BSS段 BSS段（BSS segment/Uninitialized data segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BBS是英文Block Started Symbol的简称，这个区段中的数据在程序运行前将被自动初始化为数字0。 堆 堆是用于存放进程中被动态分配的内存段，它的大小并不固定，可动态扩展或缩小。当进程调用malloc等函数分配内存时，新分配的内存就被动态调价到对上；当利用free等函数释放内存时，被释放的内存从堆中被剔除。 栈 栈是函数执行的内存区域，通常和堆共享同一片区域。 堆和栈的区别 申请方式 堆是由程序员手动申请 栈时系统自动分配 释放方式 堆是由程序员手动释放 栈由系统自动释放 生存周期 堆的生存周期由动态申请到程序员主动释放位置，不同函数之间均可自由访问。 栈的生存周期由函数调用开始到函数返回时结束，函数之间的局部变量不能互相访问。 高级宏定义 本质就是替换 内联函数 在程序函数调用时，直接展开，而不是去查找调用。\n内联函数嵌入调用者代码中的操作是一种优化操作，因此只有进行优化编译时才会执行代码嵌入处理。若编译过程中没有使用优化选项**‘-o’**，那么内联函数的代码就不会真正地嵌入到函数调用者代码中，而是只作为普通函数调用来处理。\n内联函数虽然节省了函数调用的时间消耗，但由于每一个函数出现的地方都要进行替换，因此增加了代码的编译时间。另外，并不是所有的函数都能变成内联函数\n现在的编译器也很智能，就算你不写inline，它也会自动将一些函数优化成内联函数\n不带参数的宏定义 为了和普通的变量进行区分，宏的名字通常我们约定是由大写字母组成\n宏定义只是简单地进行替换，并且由于预处理是在编译之前进行，而编译工作的任务之一就是语法检查，所以编译器不会对宏定义进行语法检查\n宏定义不是说明或语句，在末尾不必加分号\n宏定义的作用是从定义的位置开始到整个程序的结束\n可以用 #undef 来终止宏定义的作用域\n宏定义允许嵌套\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; #define PI 3.14 int main(){ int r; float s; printf(\u0026#34;请输入圆的半径：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;r); // #undef PI 终止宏定义 s = PI * r * r; printf(\u0026#34;圆的面积是：%.2f\\n\u0026#34;, s); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // // Created by Luenci on 2019/10/13. // // 宏定义的嵌套 #include \u0026lt;stdio.h\u0026gt; #define R 6371 #define PI 3.14 #define V PI * R * R * R * 4 / 3 int main(){ printf(\u0026#34;地球的体积是：%.2f\\n\u0026#34;, V); } 带参数的宏定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // // Created by Luenci on 2019/10/13. // //带参数的宏定义 #include \u0026lt;stdio.h\u0026gt; #define MAX(x,y) ((x) \u0026gt; (y) ? (x) : (y)) int main(){ int x,y; printf(\u0026#34;请输入两个数：\u0026#34;); scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;x, \u0026amp;y); printf(\u0026#34;%d是最大的那个数！\\n\u0026#34;, MAX(x, y)); } \u0026lsquo;#\u0026rsquo; 和 \u0026lsquo;##\u0026rsquo; \u0026lsquo;#\u0026rsquo; 和 \u0026lsquo;##\u0026lsquo;是两个预处理运算符 在带参数的宏定义中， #运算符后面应该跟着一个参数，预处理器会把这个参数转换为一个字符串。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; #define STR(s) # s int main(void){ printf(STR(Hlloc %s num = %d), STR(Luenci), 520); return 0; } out : Hlloc Luenci num = 520 \u0026lsquo;##\u0026lsquo;运算符被称为记号连接运算符，我们可以使用\u0026rsquo;##\u0026lsquo;运算符连接两个参数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; #define TOGETHER(x,y) x ## y int main(void){ printf(\u0026#34;%d\\n\u0026#34;, TOGETHER(2,50)); return 0; } // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; #define TOGETHER(x,y) x ## y int main(void){ printf(\u0026#34;%d\\n\u0026#34;, TOGETHER(2,50)); return 0; } out: 250 可变参数 之前学习了如何让函数支持可变参数，带参数的宏定义是使用可变参数的：\n1 #define SHOWLIST（...） printf（#__VA_ARGS__） 其中**\u0026hellip;**表示可变参数，\n1 #__VA_ARGS__ 在预处理中被实际的参数集所替代。\n1 2 3 4 5 6 7 8 9 10 11 12 #include \u0026lt;stdio.h\u0026gt; #define SHOWLIST(...) printf(#__VA_ARGS__) int main(void){ SHOWLIST(Luenci,5 20, 3.14 \\n); return 0; } out: Luenci,5 20, 3.14 1 2 3 4 5 6 7 8 9 10 11 12 13 #include \u0026lt;stdio.h\u0026gt; #define SHOWLIST(format, ...) printf(#format, ##__VA_ARGS__) int main(void){ SHOWLIST(num = %d\\n,520); SHOWLIST(hello Luenci\\n); return 0; } out: num = 520 hello Luenci ","permalink":"https://luenci.com/en/posts/c%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B02/","summary":"\u003cp\u003e\u003cem\u003e先举三反一，再举一反三，学习就应该是这样，先模仿，再改进，最后实现自己的创意！\t\t\t\t\t\u0026ndash;小甲鱼论坛\u003c/em\u003e\u003c/p\u003e\n\u003ch1 id=\"递归\"\u003e递归\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e调用函数本身\u003c/li\u003e\n\u003cli\u003e设置递归结束条件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Created by Luenci on 2019/10/11.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efun\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efact\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efun\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Hi\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e (count\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efun\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efact\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e num){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003elong\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e(num \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e num \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efact\u003c/span\u003e(num\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//    fun();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003elong\u003c/span\u003e re;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入您要求阶乘的数：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003enum);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    re \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efact\u003c/span\u003e(num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e, re);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"汉罗塔\"\u003e汉罗塔\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e#include\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehanoi\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e x, \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e y, \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e z);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehanoi\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e x, \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e y, \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e z){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e(n\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%c --\u0026gt; %c \u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, x,z);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 将前n-1个圆盘借助z移动到y\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehanoi\u003c/span\u003e(n\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e, x, z, y);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%c --\u0026gt; %c \u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, x,z);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 将前n-1个圆盘借助x移动到z\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehanoi\u003c/span\u003e(n\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e, y, x, z);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入您的层数：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003en);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehanoi\u003c/span\u003e(n, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;X\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Y\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Z\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"快速排序\"\u003e快速排序\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Created by Luenci on 2019/10/11.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003equick_sort\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e array[], \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003equick_sort\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e array[], \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e left, j \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e temp;   \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 交换的中间变量\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e pivot; \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 基准点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pivot \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e array[(left \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e right) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;=\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 从右往左找到大于等于基准点的元素\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#ff7b72\"\u003ewhile\u003c/span\u003e (array[i] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e pivot) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 从右到左找到小于等于基准点的元素\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#ff7b72\"\u003ewhile\u003c/span\u003e (array[j] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e pivot) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            j\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 如果 i \u0026lt;= j,则互换\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;=\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            temp \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e array[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            array[i] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e array[j];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            array[j] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e temp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            j\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003equick_sort\u003c/span\u003e(array, left, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003equick_sort\u003c/span\u003e(array, i, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e array[] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#a5d6ff\"\u003e73\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e108\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e111\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e101\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e78\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e109\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e66\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e48\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e88\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e135\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e i, length;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 计算数组的长度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e    length \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003esizeof\u003c/span\u003e(array) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003esizeof\u003c/span\u003e(array[\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003equick_sort\u003c/span\u003e(array, \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e, length\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;排序后的结果是：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e length; i\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%d ,\u0026#34;\u003c/span\u003e, array[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eputchar\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"c语言笔记（2）"},{"content":"结构体 结构体声明 1 2 3 4 5 6 7 struct Book { 结构体成员1; 结构体成员2; 结构体成员3; ...... }; 定义结构体类型变量\nstruct 结构体名称 结构体变量名 访问结构体变量\n要访问结构体成员，我们需要引入一个新的运算符——点号(.)运算符。比如book.title就是引用book结构体的title成员，它是一个字符数组。 初始结构体的指定成员值\n其语法和数组指定初始化元素类似，不过结构体指定初始化成员使用点号（.）运算符和成员名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; struct Book{ char title[128]; char author[40]; float price; unsigned int data; char publisher[40]; }book; int main(void){ // struct Book book1; printf(\u0026#34;请输入书名：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book.title); printf(\u0026#34;请输入作者：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book.author); printf(\u0026#34;请输入售价：\u0026#34;); scanf(\u0026#34;%f\u0026#34;, \u0026amp;book.price); printf(\u0026#34;请输入出版日期：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;book.data); printf(\u0026#34;请输入出版社：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book.publisher); printf(\u0026#34;\\n====数据录入完毕====\\n\\n\u0026#34;); printf(\u0026#34;书名：%s\\n\u0026#34;, book.title); printf(\u0026#34;作者：%s\\n\u0026#34;, book.author); printf(\u0026#34;售价：%.2f\\n\u0026#34;, book.price); printf(\u0026#34;出版日期：%d\\n\u0026#34;, book.data); printf(\u0026#34;出版社：%s\\n\u0026#34;, book.publisher); return 0; } 结构体嵌套 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; struct Data{ int year; int month; int day; }; struct Book{ char title[128]; char author[40]; float price; struct Data data; char publisher[40]; }book = { // 初始化 \u0026#34;c学习\u0026#34;, \u0026#34;Luenci\u0026#34;, 48.8, {2019,11,13}, \u0026#34;文华出版社\u0026#34; }; int main(void){ printf(\u0026#34;\\n====数据录入为====\\n\\n\u0026#34;); printf(\u0026#34;书名：%s\\n\u0026#34;, book.title); printf(\u0026#34;作者：%s\\n\u0026#34;, book.author); printf(\u0026#34;售价：%.2f\\n\u0026#34;, book.price); printf(\u0026#34;出版日期：%d%d%d\\n\u0026#34;, book.data.year, book.data.month, book.data.day); printf(\u0026#34;出版社：%s\\n\u0026#34;, book.publisher); return 0; } out 书名：c学习 作者：Luenci 售价：48.80 出版日期：20191113 出版社：文华出版社 结构体数组 第二种方法是先声明一个结构体类型（如上例子中Book），再用此类型定义一个结构体数组： 1 2 3 4 5 6 7 8 9 10 11 12 13 struct 结构体名称 { 结构体成员; }; struct 结构体名称 数组名[长度]; // 初始化结构体数组 struct Book book[3] = { {\u0026#34;《零基础学c》\u0026#34;, \u0026#34;Luenci\u0026#34;, 49.5, {2016, 11, 22}, \u0026#34;清华大学出版社\u0026#34;}， {\u0026#34;《零基础学c》\u0026#34;, \u0026#34;Luenci\u0026#34;, 49.5, {2016, 11, 22}, \u0026#34;清华大学出版社\u0026#34;}， {\u0026#34;《零基础学c》\u0026#34;, \u0026#34;Luenci\u0026#34;, 49.5, {2016, 11, 22}, \u0026#34;清华大学出版社\u0026#34;}， }； 结构体指针 1 2 struct Book *ptr； ptr = \u0026amp;book； 通过结构体指针访问结构体成员 (*结构体指针).成员名 结构体指针-\u0026gt;成员名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // // Created by Luenci on 2019/10/13. // #include \u0026lt;stdio.h\u0026gt; struct Data{ int year; int month; int day; }; struct Book{ char title[128]; char author[40]; float price; struct Data data; char publisher[40]; }book = { // 初始化 \u0026#34;c学习\u0026#34;, \u0026#34;Luenci\u0026#34;, 48.8, {2019,11,13}, \u0026#34;文华出版社\u0026#34; }; int main(void){ struct Book *ptr; ptr = \u0026amp;book; printf(\u0026#34;\\n====数据录入为====\\n\\n\u0026#34;); printf(\u0026#34;书名：%s\\n\u0026#34;, (*ptr).title); printf(\u0026#34;作者：%s\\n\u0026#34;, (*ptr).author); printf(\u0026#34;售价：%.2f\\n\u0026#34;, (*ptr).price); printf(\u0026#34;出版日期：%d%d%d\\n\u0026#34;, (*ptr).data.year, (*ptr).data.month, (*ptr).data.day); printf(\u0026#34;出版社：%s\\n\u0026#34;, (*ptr).publisher); printf(\u0026#34;书名：%s\\n\u0026#34;, ptr-\u0026gt;title); printf(\u0026#34;作者：%s\\n\u0026#34;, ptr-\u0026gt;author); printf(\u0026#34;售价：%.2f\\n\u0026#34;, ptr-\u0026gt;price); printf(\u0026#34;出版日期：%d%d%d\\n\u0026#34;, ptr-\u0026gt;data.year, ptr-\u0026gt;data.month, ptr-\u0026gt;data.day); printf(\u0026#34;出版社：%s\\n\u0026#34;, ptr-\u0026gt;publisher); return 0; } out: ====数据录入为==== 书名：c学习 作者：Luenci 售价：48.80 出版日期：20191113 出版社：文华出版社 链表 单链表 1 2 3 4 5 graph LR head --\u0026gt; A A[信息域- 指针] --\u0026gt; B[信息域- 指针] B[信息域- 指针] --\u0026gt; c[信息域- 指针] c[信息域- 指针] --\u0026gt; NULL 头插法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 // ------------ 头插法实现链表的插入 --------------- // // Created by Luenci on 2019/10/14. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; struct Book{ char title[128]; char author[40]; struct Book *next; }; void getInput(struct Book *book){ printf(\u0026#34;请输入书名：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book-\u0026gt;title); printf(\u0026#34;请输入作者：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book-\u0026gt;author); } void add_book(struct Book **library){ struct Book *book, *temp; book = (struct Book *)malloc(sizeof(struct Book)); if(book == NULL){ printf(\u0026#34;分配内存失败\u0026#34;); exit(1); } getInput(book); if (*library != NULL){ temp = *library; *library = book; book-\u0026gt;next = temp; } else{ *library = book; book-\u0026gt;next = NULL; } } void printLibrary(struct Book *library){ struct Book *book; int count = 1; book = library; while(book != NULL){ printf(\u0026#34;Book%d: \u0026#34;, count); printf(\u0026#34;书名：%s\u0026#34;, book-\u0026gt;title); printf(\u0026#34;作者:%s\u0026#34;, book-\u0026gt;author); book = book-\u0026gt;next; count++; } } void releaseLibrary(struct Book *library){ while(library != NULL){ library = library-\u0026gt;next; free(library); } } int main(void){ struct Book *library = NULL; int ch; while (1){ printf(\u0026#34;请问你是否需要录入书籍信息（Y/N）:\u0026#34;); do{ ch = getchar(); }while (ch != \u0026#39;Y\u0026#39; \u0026amp;\u0026amp; ch != \u0026#39;N\u0026#39;); if (ch == \u0026#39;Y\u0026#39;){ add_book(\u0026amp;library); } else{ break; } } printf(\u0026#34;请问你是否需要打印书籍信息（Y/N）:\u0026#34;); do{ ch = getchar(); }while (ch != \u0026#39;Y\u0026#39; \u0026amp;\u0026amp; ch != \u0026#39;N\u0026#39;); if (ch == \u0026#39;Y\u0026#39;){ printLibrary(library); } releaseLibrary(library); return 0; } 尾插法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // // Created by Luenci on 2019/10/14. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; struct Book{ char title[128]; char author[40]; struct Book *next; }; void getInput(struct Book *book){ printf(\u0026#34;请输入书名：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book-\u0026gt;title); printf(\u0026#34;请输入作者：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book-\u0026gt;author); } void add_book2(struct Book **library){ /* ------------ 尾插法 ------------- */ struct Book *book,*temp; book = (struct Book *)malloc(sizeof(struct Book)); if(book == NULL){ printf(\u0026#34;分配内存失败\u0026#34;); exit(1); } getInput(book); if (*library != NULL){ temp = *library; // 定位单链表的尾部位置 while (temp-\u0026gt;next != NULL){ temp = temp-\u0026gt;next; } // 插入数据 temp-\u0026gt;next = book; book-\u0026gt;next = NULL; } else{ *library = book; book-\u0026gt;next = NULL; } } void printLibrary(struct Book *library){ struct Book *book; int count = 1; book = library; while(book != NULL){ printf(\u0026#34;Book%d: \u0026#34;, count); printf(\u0026#34;书名：%s\u0026#34;, book-\u0026gt;title); printf(\u0026#34;作者:%s\u0026#34;, book-\u0026gt;author); book = book-\u0026gt;next; count++; } } void releaseLibrary(struct Book **library){ struct Book *temp; while(library != NULL){ temp = *library; *library = (*library)-\u0026gt;next; free(temp); } } int main(void){ struct Book *library = NULL; int ch; while (1){ printf(\u0026#34;请问你是否需要录入书籍信息（Y/N）:\u0026#34;); do{ ch = getchar(); }while (ch != \u0026#39;Y\u0026#39; \u0026amp;\u0026amp; ch != \u0026#39;N\u0026#39;); if (ch == \u0026#39;Y\u0026#39;){ add_book2(\u0026amp;library); } else{ break; } } printf(\u0026#34;请问你是否需要打印书籍信息（Y/N）:\u0026#34;); do{ ch = getchar(); }while (ch != \u0026#39;Y\u0026#39; \u0026amp;\u0026amp; ch != \u0026#39;N\u0026#39;); if (ch == \u0026#39;Y\u0026#39;){ printLibrary(library); } releaseLibrary(\u0026amp;library); return 0; } 尾插法改进 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 // // Created by Luenci on 2019/10/14. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; struct Book{ char title[128]; char author[40]; struct Book *next; }; void getInput(struct Book *book); void add_book(struct Book **library); void getInput(struct Book *book); void add_book2(struct Book **library); void printLibrary(struct Book *library); struct Book *searchBook(struct Book *library, char *target); void releaseLibrary(struct Book **library); void printBook(struct Book *book); void getInput(struct Book *book){ printf(\u0026#34;请输入书名：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book-\u0026gt;title); printf(\u0026#34;请输入作者：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, book-\u0026gt;author); } void add_book(struct Book **library){ /* ----------- 头插法 ------------- */ struct Book *book, *temp; book = (struct Book *)malloc(sizeof(struct Book)); if(book == NULL){ printf(\u0026#34;分配内存失败\u0026#34;); exit(1); } getInput(book); if (*library != NULL){ temp = *library; *library = book; book-\u0026gt;next = temp; } else{ *library = book; book-\u0026gt;next = NULL; } } void add_book2(struct Book **library){ /* ------------ 尾插法 ------------- */ struct Book *book; static struct Book *tail; book = (struct Book *)malloc(sizeof(struct Book)); if(book == NULL){ printf(\u0026#34;分配内存失败\u0026#34;); exit(1); } getInput(book); if (*library != NULL){ tail-\u0026gt;next = book; book-\u0026gt;next = NULL; } else{ *library = book; book-\u0026gt;next = NULL; } tail = book; } void printLibrary(struct Book *library){ struct Book *book; int count = 1; book = library; while(book != NULL){ printf(\u0026#34;Book%d: \u0026#34;, count); printf(\u0026#34;书名：%s\u0026#34;, book-\u0026gt;title); printf(\u0026#34;作者:%s\u0026#34;, book-\u0026gt;author); book = book-\u0026gt;next; count++; } } void releaseLibrary(struct Book **library){ struct Book *temp; while(library != NULL){ temp = *library; *library = (*library)-\u0026gt;next; free(temp); } } struct Book *searchBook(struct Book *library, char *target){ struct Book *book; book = library; while (book != NULL){ // C 语言把任何非零和非空的值假定为 true，把零或 null 假定为 false if (!strcmp(book-\u0026gt;title, target) || !strcmp(book-\u0026gt;author, target)){ break; } book = book-\u0026gt;next; } return book; } void printBook(struct Book *book){ printf(\u0026#34;书名: %s\\n\u0026#34;, book-\u0026gt;title); printf(\u0026#34;作者: %s\\n\u0026#34;, book-\u0026gt;author); } int main(void){ struct Book *library = NULL; struct Book *book; char *input[128]; int ch; while (1){ printf(\u0026#34;请问你是否需要录入书籍信息（Y/N）:\u0026#34;); do{ ch = getchar(); }while (ch != \u0026#39;Y\u0026#39; \u0026amp;\u0026amp; ch != \u0026#39;N\u0026#39;); if (ch == \u0026#39;Y\u0026#39;){ add_book2(\u0026amp;library); } else{ break; } } printf(\u0026#34;请问你是否需要打印书籍信息（Y/N）:\u0026#34;); do{ ch = getchar(); }while (ch != \u0026#39;Y\u0026#39; \u0026amp;\u0026amp; ch != \u0026#39;N\u0026#39;); if (ch == \u0026#39;Y\u0026#39;){ printLibrary(library); } printf(\u0026#34;\\n请输入书名或作者：\u0026#34;); scanf(\u0026#34;%s\u0026#34;, input); book = searchBook(library, input); if(book == NULL){ printf(\u0026#34;很抱歉没能找到！\\n\u0026#34;); } else{ do{ printf(\u0026#34;已找到符合条件的书籍...\\n\u0026#34;); printBook(book); } while ((book = searchBook(book-\u0026gt;next, input)) != NULL); } releaseLibrary(\u0026amp;library); return 0; } 链表的插入 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // // Created by Luenci on 2019/10/16. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; struct Node{ int value; struct Node *next; }; void insertNode(struct Node **head, int value); void printNode(struct Node *head); void insertNode(struct Node **head, int value){ struct Node *previous; struct Node *current; struct Node *new; current = *head; previous = NULL; while (current != NULL \u0026amp;\u0026amp; current-\u0026gt;value \u0026lt; value){ previous = current; current = current-\u0026gt;next; } new = (struct Node *)malloc(sizeof(struct Node)); if (new == NULL){ printf(\u0026#34;分配内存失败！\\n\u0026#34;); exit(1); } new-\u0026gt;value = value; new-\u0026gt;next = current; if (previous == NULL){ *head = new; } else{ previous-\u0026gt;next = new; } } void printNode(struct Node *head){ struct Node *current; current = head; while (current != NULL){ printf(\u0026#34;%d \u0026#34;, current-\u0026gt;value); current = current-\u0026gt;next; } putchar(\u0026#39;\\n\u0026#39;); } int main(){ struct Node *head = NULL; int input; while (1){ printf(\u0026#34;请输入一个整数（-1结束）：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;input); if(input == -1){ break; } insertNode(\u0026amp;head, input); printNode(head); } return 0; } 链表的删除 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 // // Created by Luenci on 2019/10/16. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; struct Node{ int value; struct Node *next; }; void insertNode(struct Node **head, int value); void printNode(struct Node *head); void delectNode(struct Node **head, int value); void insertNode(struct Node **head, int value){ struct Node *previous; struct Node *current; struct Node *new; current = *head; previous = NULL; while (current != NULL \u0026amp;\u0026amp; current-\u0026gt;value \u0026lt; value){ previous = current; current = current-\u0026gt;next; } new = (struct Node *)malloc(sizeof(struct Node)); if (new == NULL){ printf(\u0026#34;分配内存失败！\\n\u0026#34;); exit(1); } new-\u0026gt;value = value; new-\u0026gt;next = current; if (previous == NULL){ *head = new; } else{ previous-\u0026gt;next = new; } } void delectNode(struct Node **head, int value){ struct Node *previous; struct Node *current; current = *head; previous = NULL; while (current != NULL \u0026amp;\u0026amp; current-\u0026gt;value != value){ previous = current; current = current-\u0026gt;next; } if (current == NULL){ printf(\u0026#34;找不到匹配的节点\u0026#34;); return; } else{ if(previous == NULL){ *head = current-\u0026gt;next; } else{ previous-\u0026gt;next = current-\u0026gt;next; } free(current); } } void printNode(struct Node *head){ struct Node *current; current = head; while (current != NULL){ printf(\u0026#34;%d \u0026#34;, current-\u0026gt;value); current = current-\u0026gt;next; } putchar(\u0026#39;\\n\u0026#39;); } int main(){ struct Node *head = NULL; int input; printf(\u0026#34;开始测试插入整数...\\n\u0026#34;); while (1){ printf(\u0026#34;请输入一个整数（-1结束）：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;input); if(input == -1){ break; } insertNode(\u0026amp;head, input); printNode(head); } printf(\u0026#34;开始测试删除整数...\\n\u0026#34;); while (1){ printf(\u0026#34;请输入一个整数（-1结束）：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;input); if(input == -1){ break; } delectNode(\u0026amp;head, input); printNode(head); } return 0; } 内存池 优点：\n设计内存池的目标是为了保证服务器长时间高效的运行，通过对申请空间小而申请频繁的对象进行有效管理，减少内存碎片的产生，合理分配管理用户内存，从而减少系统中出现有效空间足够，而无法分配大块连续内存的情况。 结论：\n内存池基本上满足初期设计目标，但是她并不是完美的，有缺陷，比如,不能申请大于256字节的内存空间，无内存越界检查，无内存自动回缩功能等。只是这些对我们的影响还不是那么重要。 typedef基础 相比起宏定义的直接替换， typedef是对类型的封装。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // // Created by Luenci on 2019/10/16. // #include\u0026lt;stdio.h\u0026gt; typedef int integer; int main(void){ integer a; int b; a = 1; b = a; printf(\u0026#34;a = %u\\n\u0026#34;, a); printf(\u0026#34;b = %d\\n\u0026#34;, b); printf(\u0026#34;size of a = %d\\n\u0026#34;, sizeof(a)); return 0; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // // Created by Luenci on 2019/10/16. // #include\u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; typedef struct Data{ int year; int mouth; int day; } DATA, *PDATA; int main(void){ struct Data *data; data = (PDATA)malloc(sizeof(DATA)); if (data == NULL){ printf(\u0026#34;内存分配失败！\\n\u0026#34;); exit(1); } data-\u0026gt;year = 2019; data-\u0026gt;mouth = 10; data-\u0026gt;day = 16; printf(\u0026#34;%d-%d-%d\\n\u0026#34;, data-\u0026gt;year, data-\u0026gt;mouth, data-\u0026gt;day); } 进阶Typedef 在变成中使用typedef目的一般有两个： 一个是给变量起一个容易记住且意义明确的别名 另一个是简化一些比较复杂的类型声明 共用体 共用体的所有成员共享同一个内存地址。 1 2 3 4 5 6 union 共用体名称 { 共用成员1； 共用成员2； 共用成员3； }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // // Created by Luenci on 2019/10/19. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; union Test{ int i; double pi; char str[6]; }; int main(void){ union Test test; test.i = 50; test.pi = 1.2; strcpy(test.str, \u0026#34;Luenci\u0026#34;); printf(\u0026#34;addr of test.i:%p\\n\u0026#34;, \u0026amp;test.i); printf(\u0026#34;addr of test.pi:%p\\n\u0026#34;, \u0026amp;test.pi); printf(\u0026#34;addr of test.str:%p\\n\u0026#34;, \u0026amp;test.str); printf(\u0026#34;value of test.i:%d\\n\u0026#34;, test.i); printf(\u0026#34;value of test.i:%.2f\\n\u0026#34;, test.pi); printf(\u0026#34;value of test.i:%s\\n\u0026#34;, test.str); return 0; } out： addr of test.i:0061FF18 addr of test.pi:0061FF18 addr of test.str:0061FF18 value of test.i:1852142924 value of test.i:0.00 value of test.i:Luenci ​\n枚举类型 如果一个变量只有几种可能的值，那么就可以将其定义为枚举（enumeration）类型。 1 2 3 4 5 // 声明 enum 枚举类型名称 {枚举值名称, 枚举值名称...} // 定义 enum 枚举类型名称 枚举变量1, 枚举变量; ​\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // Created by Luenci on 2019/10/19. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;time.h\u0026gt; int main(void){ enum Week {sun, mon, tue, wed, thu, fri, sat}; enum Week today; struct tm *p; time_t t; time(\u0026amp;t); p = localtime(\u0026amp;t); today = p-\u0026gt;tm_wday; switch (today){ case mon: case tue: case wed: case thu: case fri: printf(\u0026#34;学习！！！\\n\u0026#34;); break; case sat: case sun: printf(\u0026#34;放假！\\n\u0026#34;); break; default: printf(\u0026#34;Error!\\n\u0026#34;); } return 0; } 位域 使用位域的做法是在结构体定义时，在结构体成员后面使用冒号（：）和数字来表示该成员所占的位数。 无名位域 位域成员可以没有名称，只要给出数据类型和位宽即可 1 2 3 4 5 6 7 struct Test { unsigned int x:100; unsigned int y:200; unsigned int z:300; unsigned int :424; }; 单片机 单片机（Microcontrollers）是一种集成电路芯片，是采用超大规模集成电路技术把具有数据处理能力的中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/0口和中新系统、定时器/计数器等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、A/D转换器等电路）集成到一块硅片上构成的一个小而完善的微型计算机条统，在工业控制领域广泛应用。 位操作 逻辑位运算符 按位取反（~） 逻辑位运算符中优先级最高的是按位取反运算符，它的运算符是一个~符号，作用是将1变成0，将0变成1： 按位与（\u0026amp;） 优先级第二高的是按位与运算符，它的运算符是一个\u0026amp;符号（而逻辑与是两个\u0026amp;符号） 按位异或（^） 优先级排第三的是按位异或运算符，它的运算符是一个个符号，只有当两个操作数对应的二进制位不同时，它的结果才为1，否则为0： 按位或（|） 逻辑位运算符中优先级最低的是按位或运算符，它的运算符是一个|符号（而逻辑或是两个I符号） 和赋值号结合 这四个运算符，除了按位取反只有一个操作数之外，其它三个都可以跟赋值号（=）结合到一块，使得代码更加简洁！ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // // Created by Luenci on 2019/10/19. // #include \u0026lt;stdio.h\u0026gt; int main(void){ int mask = 0xFF; int v1 = 0xABCDEF; int v2 = 0xABCDEF; int v3 = 0xABCDEF; v1 \u0026amp;= mask; v2 |= mask; v3 ^= mask; printf(\u0026#34;v1 = 0x%x\\n\u0026#34;, v1); printf(\u0026#34;v2 = 0x%x\\n\u0026#34;, v2); printf(\u0026#34;v3 = 0x%x\\n\u0026#34;, v3); return 0; } out: v1 = 0xef v2 = 0xabcdff v3 = 0xabcd10 移位运算符 A = 0011 1100\n左移位运算符 二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。 A \u0026laquo; 2 将得到 240，即为 1111 0000 右移位运算符 二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 A \u0026raquo; 2 将得到 15，即为 0000 1111 一些未定义行为 左移、右移运算符右边的操作数如果是为负数，或者右边的操作数火于左边操作数支持的最大宽度，那么表达式的结果均是属于“未定义行为”。 左边的操作数是有符号还是无符号数其实也对移位运算符有着不同的影响。无等号数肯定没问题，因为这时候变量里边所有的位都用于表示该数值的大小。但如果是有符号数，那就要区别对待了，因为有符号数的左边第一位是符号位，所以如果恰好这个操作数是个负数，那么移动之后是否覆盖符号位的决定权还是落到了编译器上。 文件操作 文件概念 计算机文件（或称文件、电脑档案、档亲），是存储在基种长期储存设备或临时存储设备中的一段数据流，并且归属于计算机文件系统管理之下。所谓“长期储存设备”一般指磁盘、光盘、磁带等。而“短期存储设备”一般指计算机内存。需要注意的是，存储于长期存储设备的文件不一定是长期存储的，有些也可能是程序或条统运行中产生的临时数据，并于程序或系统退出后删除。 打开文件 您可以使用 fopen( ) 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 FILE 的一个对象，类型 FILE 包含了所有用来控制流的必要的信息。下面是这个函数调用的原型：\n1 FILE *fopen( const char * filename, const char * mode ); 在这里，filename 是字符串，用来命名文件，访问模式 mode 的值可以是下列值中的一个：\n模式 描述 r 打开一个已有的文本文件，允许读取文件。 w 打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。 a 打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。 r+ 打开一个文本文件，允许读写文件。 w+ 打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。 a+ 打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。 如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：\n1 \u0026#34;rb\u0026#34;, \u0026#34;wb\u0026#34;, \u0026#34;ab\u0026#34;, \u0026#34;rb+\u0026#34;, \u0026#34;r+b\u0026#34;, \u0026#34;wb+\u0026#34;, \u0026#34;w+b\u0026#34;, \u0026#34;ab+\u0026#34;, \u0026#34;a+b\u0026#34; 关闭文件 为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：\n1 int fclose( FILE *fp ); 如果成功关闭文件，fclose( ) 函数返回零，如果关闭文件时发生错误，函数返回 EOF。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 stdio.h 中的常量。\nC 标准库提供了各种函数来按字符或者以固定长度字符串的形式读写文件。\n写入文件 下面是把字符写入到流中的最简单的函数：\n1 int fputc( int c, FILE *fp ); 函数 fputc() 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 EOF。您可以使用下面的函数来把一个以 null 结尾的字符串写入到流中：\n1 int fputs( const char *s, FILE *fp ); 函数 fputs() 把字符串 s 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 EOF。您也可以使用 int fprintf(FILE *fp,const char *format, \u0026hellip;) 函数来写把一个字符串写入到文件中。\n读写单个字符 fgetc函数 描述 C 库函数 char *fgets(char *str, int n, FILE *stream) 从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。\n声明 下面是 fgets() 函数的声明。\n1 char *fgets(char *str, int n, FILE *stream) 参数 str \u0026ndash; 这是指向一个字符数组的指针，该数组存储了要读取的字符串。 n \u0026ndash; 这是要读取的最大字符数（包括最后的空字符）。通常是使用以 str 传递的数组长度。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了要从中读取字符的流。 返回值 如果成功，该函数返回相同的 str 参数。如果到达文件末尾或者没有读取到任何字符，str 的内容保持不变，并返回一个空指针。\n如果发生错误，返回一个空指针。\ngetc函数 描述 C 库函数 int getc(FILE *stream) 从指定的流 stream 获取下一个字符（一个无符号字符），并把位置标识符往前移动。\n声明 下面是 getc() 函数的声明。\n1 int getc(FILE *stream) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了要在上面执行操作的流。 返回值 该函数以无符号 char 强制转换为 int 的形式返回读取的字符，如果到达文件末尾或发生读错误，则返回 EOF\n单个字符写入 fputc函数 描述 C 库函数 int fputc(int char, FILE *stream) 把参数 char 指定的字符（一个无符号字符）写入到指定的流 stream 中，并把位置标识符往前移动。\n声明 下面是 fputc() 函数的声明。\n1 int fputc(int char, FILE *stream) 参数 char \u0026ndash; 这是要被写入的字符。该字符以其对应的 int 值进行传递。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了要被写入字符的流。 返回值 如果没有发生错误，则返回被写入的字符。如果发生错误，则返回 EOF，并设置错误标识符。\nputs函数 描述 C 库函数 int putc(int char, FILE *stream) 把参数 char 指定的字符（一个无符号字符）写入到指定的流 stream 中，并把位置标识符往前移动。\n声明 下面是 putc() 函数的声明。\n1 int putc(int char, FILE *stream) 参数 char \u0026ndash; 这是要被写入的字符。该字符以其对应的 int 值进行传递。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了要被写入字符的流。 返回值 该函数以无符号 char 强制转换为 int 的形式返回写入的字符，如果发生错误则返回 EOF。\n区别 fgetc（fputc）函数和getc （putc）函数两个的功和描述基本上是一模一样的，它们的区别主要在于实现上：fgetc（fputc）是一个函数；而getc （putc）则是一个宏的实现 一般来说宏产生较大的代码，但是避免了函数调用的堆栈操作，所以速度会比较快。 由于getc是由宏实现的，对其参数可能有不止一次的调用，所以不能使用带有副作用（side effects）的参数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // // Created by Luenci on 2019/10/20. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(void){ FILE *fp1; FILE *fp2; int ch; if ((fp1 = fopen(\u0026#34;D:\\\\c_study\\\\test.txt\u0026#34;, \u0026#34;r\u0026#34;)) == NULL){ printf(\u0026#34;打开文件失败！\\n\u0026#34;); exit(EXIT_FAILURE); } if ((fp2 = fopen(\u0026#34;D:\\\\c_study\\\\demo2.txt\u0026#34;, \u0026#34;w\u0026#34;)) == NULL){ printf(\u0026#34;打开文件夹失败！\\n\u0026#34;); exit(EXIT_FAILURE); } while ((ch = fgetc((fp1))) != EOF){ fputc(ch, fp2); } fclose(fp1); fclose(fp2); return 0; } 读写整个字符串 fgets函数 描述 C 库函数 char *fgets(char *str, int n, FILE *stream) 从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。\n声明 下面是 fgets() 函数的声明。\n1 char *fgets(char *str, int n, FILE *stream) 参数 str \u0026ndash; 这是指向一个字符数组的指针，该数组存储了要读取的字符串。 n \u0026ndash; 这是要读取的最大字符数（包括最后的空字符）。通常是使用以 str 传递的数组长度。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了要从中读取字符的流。 返回值 如果成功，该函数返回相同的 str 参数。 如果到达文件末尾或者没有读取到任何字符，str 的内容保持不变，并返回一个空指针。 如果发生错误，返回一个空指针。 fputs函数 描述 C 库函数 int fputs(const char *str, FILE *stream) 把字符串写入到指定的流 stream 中，但不包括空字符。\n声明 下面是 fputs() 函数的声明。\n1 int fputs(const char *str, FILE *stream) 参数 str \u0026ndash; 这是一个数组，包含了要写入的以空字符终止的字符序列。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了要被写入字符串的流。 返回值 该函数返回一个非负值，如果发生错误则返回 EOF。\nfeof()函数 描述 C 库函数 int feof(FILE *stream) 测试给定流 stream 的文件结束标识符。\n声明 下面是 feof() 函数的声明。\n1 int feof(FILE *stream) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了流。 返回值 当设置了与流关联的文件结束标识符时，该函数返回一个非零值，否则返回零。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // // Created by Luenci on 2019/10/20. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define MAX 1024 int main(void){ FILE *fp1; char buff[MAX]; if ((fp1 = fopen(\u0026#34;D:\\\\c_study\\\\demo3.txt\u0026#34;, \u0026#34;w\u0026#34;)) == NULL){ printf(\u0026#34;打开文件失败！\\n\u0026#34;); exit(EXIT_FAILURE); } fputs(\u0026#34;Luenci 的文件操作1 。\\n\u0026#34;, fp1); fputs(\u0026#34;Luenci 的文件操作2 。\\n\u0026#34;, fp1); fclose(fp1); if ((fp1 = fopen(\u0026#34;D:\\\\c_study\\\\demo3.txt\u0026#34;, \u0026#34;r\u0026#34;)) == NULL){ printf(\u0026#34;打开文件失败！\\n\u0026#34;); exit(EXIT_FAILURE); } while (!feof(fp1)){ fgets(buff, MAX, fp1); printf(\u0026#34;%s\u0026#34;, buff); } fclose(fp1); return 0; } 格式化读写文件 fprintf（）函数 描述 C 库函数 int fprintf(FILE *stream, const char *format, \u0026hellip;) 发送格式化输出到流 stream 中。\n声明 下面是 fprintf() 函数的声明。\n1 int fprintf(FILE *stream, const char *format, ...) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了流。\nformat \u0026ndash; 这是 C 字符串，包含了要被写入到流 stream 中的文本。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。format 标签属性是\n1 %[flags][width][.precision][length]specifier ，具体讲解如下：\nspecifier（说明符） 输出 c 字符 d 或 i 有符号十进制整数 e 使用 e 字符的科学科学记数法（尾数和指数） E 使用 E 字符的科学科学记数法（尾数和指数） f 十进制浮点数 g 自动选择 %e 或 %f 中合适的表示法 G 自动选择 %E 或 %f 中合适的表示法 o 有符号八进制 s 字符的字符串 u 无符号十进制整数 x 无符号十六进制整数 X 无符号十六进制整数（大写字母） p 指针地址 n 无输出 % 字符 flags（标识） 描述 - 在给定的字段宽度内左对齐，默认是右对齐（参见 width 子说明符）。 + 强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。 (space) 如果没有写入任何符号，则在该值前面插入一个空格。 # 与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。 与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。 与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。 0 在指定填充 padding 的数字左边放置零（0），而不是空格（参见 width 子说明符）。 width（宽度） 描述 (number) 要输出的字符的最小数目。如果输出的值短于该数，结果会用空格填充。如果输出的值长于该数，结果不会被截断。 * 宽度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。 .precision（精度） 描述 .number 对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。 对于 e、E 和 f 说明符：要在小数点后输出的小数位数。 对于 g 和 G 说明符：要输出的最大有效位数。 对于 s: 要输出的最大字符数。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。 对于 c 类型：没有任何影响。 当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。 .* 精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。 length（长度） 描述 h 参数被解释为短整型或无符号短整型（仅适用于整数说明符：i、d、o、u、x 和 X）。 l 参数被解释为长整型或无符号长整型，适用于整数说明符（i、d、o、u、x 和 X）及说明符 c（表示一个宽字符）和 s（表示宽字符字符串）。 L 参数被解释为长双精度型（仅适用于浮点数说明符：e、E、f、g 和 G）。 附加参数 \u0026ndash; 根据不同的 format 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 format 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。 返回值 如果成功，则返回写入的字符总数，否则返回一个负数。\nfread()函数 描述 C 库函数 size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream) 从给定流 stream 读取数据到 ptr 所指向的数组中。\n声明 下面是 fread() 函数的声明。\n1 size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream) 参数 ptr \u0026ndash; 这是指向带有最小尺寸 size*nmemb 字节的内存块的指针。 size \u0026ndash; 这是要读取的每个元素的大小，以字节为单位。 nmemb \u0026ndash; 这是元素的个数，每个元素的大小为 size 字节。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输入流。 返回值 成功读取的元素总数会以 size_t 对象返回，size_t 对象是一个整型数据类型。如果总数与 nmemb 参数不同，则可能发生了一个错误或者到达了文件末尾。\nfwrite（）函数 描述 C 库函数 size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) 把 ptr 所指向的数组中的数据写入到给定流 stream 中。\n声明 下面是 fwrite() 函数的声明。\n1 size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) 参数 ptr \u0026ndash; 这是指向要被写入的元素数组的指针。 size \u0026ndash; 这是要被写入的每个元素的大小，以字节为单位。 nmemb \u0026ndash; 这是元素的个数，每个元素的大小为 size 字节。 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流。 返回值 如果成功，该函数返回一个 size_t 对象，表示元素的总数，该对象是一个整型数据类型。如果该数字与 nmemb 参数不同，则会显示一个错误。\n文件随机读写 ftell（）函数 描述 C 库函数 long int ftell(FILE *stream) 返回给定流 stream 的当前文件位置。\n声明 下面是 ftell() 函数的声明。\n1 long int ftell(FILE *stream) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了流。 返回值 该函数返回位置标识符的当前值。如果发生错误，则返回 -1L，全局变量 errno 被设置为一个正值。\nrewind() 函数 描述 C 库函数 void rewind(FILE *stream) 设置文件位置为给定流 stream 的文件的开头。\n声明 下面是 rewind() 函数的声明。\n1 void rewind(FILE *stream) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了流。 fseek() 函数 描述 C 库函数 int fseek(FILE *stream, long int offset, int whence) 设置流 stream 的文件位置为给定的偏移 offset，参数 offset 意味着从给定的 whence 位置查找的字节数。\n声明 下面是 fseek() 函数的声明。\n1 int fseek(FILE *stream, long int offset, int whence) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了流。 offset \u0026ndash; 这是相对 whence 的偏移量，以字节为单位。 whence \u0026ndash; 这是表示开始添加偏移 offset 的位置。它一般指定为下列常量之一： 常量 描述 SEEK_SET 文件的开头 SEEK_CUR 文件指针的当前位置 SEEK_END 文件的末尾 返回值 如果成功，则该函数返回零，否则返回非零值。\n可移植性问题 想要编写可移植的代码，就需要考虑以下问题：\n对于以二进制模式打开的文件，fseek函数在某些操作系统可能不支持SEEK_END位置。 一对于以文本模式打开的文件，fseek函数的whence参数只能取SEEK_SET才是有意义的，并且传递给offset参数的值要么是0，要么是上一次对同个文件调用fte11函数获得的返回值。 标准流和错误处理 文件流 标准输入（stdin） 标准输入（stdout） 标准错误输出（stderr） 重定向 由于标准输出和标准错误输出通常都是直接打印到屏幕上，为了区分宅们，我们可以使用Linux shell的重定向功能：\n重定向标准输入使用 \u0026lt; 重定向标准输出使用 〉 重定向标准错误输出使用 2〉 错误处理 错误指示器 - ferror（）\n描述 C 库函数 int ferror(FILE *stream) 测试给定流 stream 的错误标识符。\n声明 下面是 ferror() 函数的声明。\n1 int ferror(FILE *stream) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了流。 返回值 如果设置了与流关联的错误标识符，该函数返回一个非零值，否则返回一个零值。\n使用clearerr函数可以人为地清除文件末尾指示器和错误指示器的状态。\nferror函数只能检测是否出错，但无法获取错误原因。不过，大多数系统函数在出现错误的时候会将错误原因记录在errno中。\nperror函数可以直观地打印出错误原因。\n描述 C 库函数 void perror(const char *str) 把一个描述性错误消息输出到标准错误 stderr。首先输出字符串 str，后跟一个冒号，然后是一个空格。\n声明 下面是 perror() 函数的声明。\n1 void perror(const char *str) 参数 str \u0026ndash; 这是 C 字符串，包含了一个自定义消息，将显示在原本的错误消息之前。 返回值 该函数不返回任何值\nstrerror（）函数直接返回错误码对应的错误信息。\n描述 C 库函数 char *strerror(int errnum) 从内部数组中搜索错误号 errnum，并返回一个指向错误消息字符串的指针。strerror 生成的错误字符串取决于开发平台和编译器。\n声明 下面是 strerror() 函数的声明。\n1 char *strerror(int errnum) 参数 errnum \u0026ndash; 错误号，通常是 errno。 返回值 该函数返回一个指向错误字符串的指针，该错误字符串描述了错误 errnum。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // // Created by Luenci on 2019/10/20. // #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;errno.h\u0026gt; int main(void){ FILE *fp; if(fp = fopen(\u0026#34;bucunzai.txt\u0026#34;, \u0026#34;r\u0026#34;) == NULL){ printf(\u0026#34;出错啦，原因就是：%d\\n\u0026#34;, errno); fprintf(stderr, \u0026#34;出错啦，原因就是：%s\u0026#34;, strerror(errno) ); perror(\u0026#34;出错啦，原因就是：\u0026#34;); // fputs(\u0026#34;打开文件失败！\\n\u0026#34;, stderr); exit(EXIT_FAILURE); } fclose(fp); return 0; } I/O 缓冲区 标准I/O提供的三种类型的缓冲模式 按块执行\n按块缓存也称为全缓存，即在填满缓冲区后才进行实际的设备读写操作； 按行执行\n按行缓存是指在接收到换行符（\u0026rsquo;\\n\u0026rsquo;）之前，数据都是先缓存在缓冲区的； 不缓存\n也就是允许你直接读写设备上的数据。 setvbuf()函数 描述 C 库函数 int setvbuf(FILE *stream, char *buffer, int mode, size_t size) 定义流 stream 应如何缓冲。\n声明 下面是 setvbuf() 函数的声明。\n1 int setvbuf(FILE *stream, char *buffer, int mode, size_t size) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象标识了一个打开的流。 buffer \u0026ndash; 这是分配给用户的缓冲。如果设置为 NULL，该函数会自动分配一个指定大小的缓冲。 mode \u0026ndash; 这指定了文件缓冲的模式： 模式 描述 _IOFBF 全缓冲：对于输出，数据在缓冲填满时被一次性写入。对于输入，缓冲会在请求输入且缓冲为空时被填充。 _IOLBF 行缓冲：对于输出，数据在遇到换行符或者在缓冲填满时被写入，具体视情况而定。对于输入，缓冲会在请求输入且缓冲为空时被填充，直到遇到下一个换行符。 _IONBF 无缓冲：不使用缓冲。每个 I/O 操作都被即时写入。buffer 和 size 参数被忽略。 size \u0026ndash;这是缓冲的大小，以字节为单位。 返回值 如果成功，则该函数返回 0，否则返回非零值。\nfflush（）函数 描述 C 库函数 int fflush(FILE *stream) 刷新流 stream 的输出缓冲区。\n声明 下面是 fflush() 函数的声明。\n1 int fflush(FILE *stream) 参数 stream \u0026ndash; 这是指向 FILE 对象的指针，该 FILE 对象指定了一个缓冲流。 返回值 如果成功，该函数返回零值。如果发生错误，则返回 EOF，且设置错误标识符（即 feof）\n","permalink":"https://luenci.com/en/posts/c%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B03/","summary":"\u003ch1 id=\"结构体\"\u003e结构体\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e结构体声明\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e Book\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f85149\"\u003e结构体成员\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f85149\"\u003e结构体成员\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f85149\"\u003e结构体成员\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t......\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e定义结构体类型变量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estruct 结构体名称 结构体变量名\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e访问结构体变量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e要访问结构体成员，我们需要引入一个新的运算符——点号(.)运算符。比如book.title就是引用book结构体的title成员，它是一个字符数组。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e初始结构体的指定成员值\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e其语法和数组指定初始化元素类似，不过结构体指定初始化成员使用点号（.）运算符和成员名\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Created by Luenci on 2019/10/13.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e Book{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e title[\u003cspan style=\"color:#a5d6ff\"\u003e128\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e author[\u003cspan style=\"color:#a5d6ff\"\u003e40\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003efloat\u003c/span\u003e price;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e data;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e publisher[\u003cspan style=\"color:#a5d6ff\"\u003e40\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}book;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//    struct Book book1;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入书名：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e, book.title);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入作者：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e, book.author);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入售价：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%f\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003ebook.price);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入出版日期：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026amp;\u003c/span\u003ebook.data);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入出版社：\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003escanf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;%s\u0026#34;\u003c/span\u003e, book.publisher);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e====数据录入完毕====\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;书名：%s\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.title);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;作者：%s\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.author);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;售价：%.2f\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.price);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;出版日期：%d\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.data);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;出版社：%s\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.publisher);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"结构体嵌套\"\u003e结构体嵌套\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// Created by Luenci on 2019/10/13.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-weight:bold;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e Data{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e year;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e month;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e day;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e Book{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e title[\u003cspan style=\"color:#a5d6ff\"\u003e128\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e author[\u003cspan style=\"color:#a5d6ff\"\u003e40\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003efloat\u003c/span\u003e price;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003estruct\u003c/span\u003e Data data;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003echar\u003c/span\u003e publisher[\u003cspan style=\"color:#a5d6ff\"\u003e40\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}book \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;c学习\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Luenci\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e48.8\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#a5d6ff\"\u003e2019\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e13\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;文华出版社\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#ff7b72\"\u003evoid\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e====数据录入为====\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;书名：%s\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.title);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;作者：%s\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.author);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;售价：%.2f\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.price);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;出版日期：%d%d%d\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.data.year, book.data.month, book.data.day);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;出版社：%s\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e, book.publisher);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e书名：\u003c/span\u003ec学习\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e作者：\u003c/span\u003eLuenci\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e售价：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e48.80\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e出版日期：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e20191113\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e出版社：文华出版社\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"c语言笔记（3）"},{"content":" 写在前面：关于Django的部署问题网上有很多教程，但是每个人的配置环境和遇到的情况都一样，所以在此记录下我部署过程中遇到的问题\n**看官方文档：**https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html（特别重要！！！）\n环境介绍 阿里云主机（Ubuntu系统） virtualenv虚拟环境 python3版本 Django 2.0.3 版本 uwsgi 2.0.19版本 Nginx/1.10.3 (Ubuntu) nginx目录介绍 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 . ├── [drwxr-xr-x] conf.d ├── [-rw-r--r--] fastcgi.conf ├── [-rw-r--r--] fastcgi_params ├── [-rw-r--r--] koi-utf ├── [-rw-r--r--] koi-win ├── [-rw-r--r--] mime.types ├── [-rw-r--r--] nginx.conf ├── [-rw-r--r--] proxy_params ├── [-rw-r--r--] scgi_params ├── [drwxr-xr-x] sites-available │ └── [-rw-r--r--] default ├── [drwxr-xr-x] sites-enabled │ └── [lrwxrwxrwx] default -\u0026gt; /etc/nginx/sites-available/default ├── [drwxr-xr-x] snippets │ ├── [-rw-r--r--] fastcgi-php.conf │ └── [-rw-r--r--] snakeoil.conf ├── [-rw-r--r--] uwsgi_params └── [-rw-r--r--] win-utf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 相关目录和文件作用 client_body_temp # Nginx所有配置文件的目录 conf #配置文件目录（.default 文件为对应的默认文件） fastcgi.conf # fastcgi相关参数的配置文件 fastcgi_params # fastcgi的参数文件 koi-utf # 媒体类型 koi-win # 媒体类型 mime.types #当 Web 服务器收到静态的资源文件请求时，依据请求文件的后缀名在服务器的 MIME 配置文件中找到对应的 MIME Type，再根据 MIME Type 设置 HTTP Response 的Content-Type，然后浏览器根据 Content-Type 的值处理文件 nginx.conf #Nginx主配置文件 scgi_params # scgi的配置文件 uwsgi_params # uwsgi 和 nginx的通信文件 win-utf # html #默认解析的静态文件目录 50x.html #错误页面优雅替代文件 index.html #网站首页配置文件 logs #日志目录 access.log #访问日志，包含所有访问记录 error.log #错误日志，包含访问出错的记录 nginx.pid Nginx运行的进程号，同ps -ef | grep nginx 第一行的进程号 sbin #Nginx可执行文件目录 nginx #Nginx 启动文件 koi-utf、koi-win、win-utf 是与编码转换有关的配置文件 其他带 temp 的为临时目录 ASGI 是为了支持异步网络服务器和应用而新出现的Python 标准。\n注意问题 在阿里云上面部署的时候，需要注意nginx的配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # nginx的配置 server_name 你的主机ip; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. #try_files $uri $uri/ =404; include uwsgi_params; uwsgi_pass 你的主机ip:端口; } location /static { alias /home/myblog/static; } location /media { alias /home/myblog/media; } 虚拟环境的问题：\n在阿里云主机上如果直接用virtualenv创建虚拟环境会出现一些问题，因为系统默认的是python2的版本，需要指定版本\n1 virtualenv -p /usr/bin/python3 venv/ 后记 安装配置的过程是漫长痛苦的，尤其是找不到思路的时候。所以要静下心来，多读官方文档！！！多读官方文档！！！多读官方文档！！！仔细的检查配置，项目跑起来的那一刻是很激动开心的。 ","permalink":"https://luenci.com/en/posts/django+nginx+uwsgi%E9%83%A8%E7%BD%B2%E6%BC%AB%E8%B0%88/","summary":"\u003cblockquote\u003e\n\u003cp\u003e写在前面：关于Django的部署问题网上有很多教程，但是每个人的配置环境和遇到的情况都一样，所以在此记录下我部署过程中遇到的问题\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e**看官方文档：**\u003ca href=\"https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html\"\u003ehttps://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html\u003c/a\u003e（特别重要！！！）\u003c/p\u003e","title":"django+nginx+uwsgi部署漫谈"},{"content":"编写URL 编写规则 ​\t为了使其规范性，在每个新创建的App中设置独立的静态资源和模板文件夹并添加一个空白的.py文件，命为urls.py。如下是创建app中的文件结构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 frist/ migrations/\t# 数据库前后是否有变化，生成出迁移文件 static/\t# 创建App后存放App中的静态资源文件，自己手动添加 templates/\t# 创建App后存放App中的模板文件，自己手动添加 __init__.py admin.py apps.py models.py tests.py urls.py\t# 创建App后由系统总路由映射到App的路由文件，自己手动添加 view.py 系统总路由和app的路由分发配置 1 2 3 4 5 6 7 8 # 根目录的urls.py from django.contrib import admin from django.urls import path,admin urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;\u0026#39;,include(\u0026#39;frist.urls\u0026#39;))\t# 引入app中的urls.py ] 代码详解:\nfrom django.contrib import admin:导入Admin功能模块. from django.urls import path,admin:导入URL编写模块. urlpatterns:整个项目的URL集合,每个元素代表一条URL信息. path('admin/', admin.site.urls):设定Admin的URL.'admin/'代表127.0.0.1/admin地址信息,admin后面的斜杠是路径分隔符;admin.site.urls是URL的处理函数,也称为视图函数. path('',include('frist.urls'))\t:URL为空,代表网站的域名,即127.0.0.1,通常是网站的首页;include将该URL分发给app的urls.py处理. 1 2 3 4 5 6 7 # app下的urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;,views.index)\t# 调用和url匹配的视图函数 ] 当根目录的URL分发给app中的URL处理后,下一步就是根据所匹配的URL进行视图的调用.\n在Views中编写相应的视图函数。如下：\n1 2 3 4 5 # index的views.py from django.http import HttpResponse # creat you views here. def index(request): return HttpResponse(\u0026#34;hello world\u0026#34;) 视图函数的参数必须设置为request，该参数代表当前用户的请求对象，该对象包含用户名，请求内容和请求方式等信息，执行完成后必须使用return将处理结果返回。\n带变量的URL ​\t在日常开发中，有时候一个URL可以代表多个不同的页面，如编写带有日期的URL，若根据前面的编写方式，按一年计算，则需要开发者编写365个不同的URL才能实现。这种做法是不可取的，因此，Django在编写URL时，可以对URL设置变量值，使URL具有多样性。\n​\tURL的变量类型有字符类型，整型，slug和uuid，常用的是字符类型和整型。说明如下：\n字符类型：匹配任何非空字符串，但不含斜杠。如果没有指定类型，默认使用该类型。 整形：匹配0和正整数 slug：可理解为注释，后缀或附属等概念，常作为URL的解释性字符。可匹配任何ASCII字符以及连接符和下画线，能使URL更加清晰易懂。比如网页的标题是“13岁的孩子”，其URL地址可以设置为“13-sui-de-hai-zi“。 uuid：匹配一个uuid格式的对象。为了防止冲突，规定必须使用破折号并且所有字母必须小写，例如0201203-3213-31e-321c34d435 （未待完续）\n","permalink":"https://luenci.com/en/posts/django%E4%B9%8Burl%E8%A7%84%E5%88%99/","summary":"\u003ch1 id=\"编写url\"\u003e编写URL\u003c/h1\u003e\n\u003ch2 id=\"编写规则\"\u003e编写规则\u003c/h2\u003e\n\u003cp\u003e​\t为了使其规范性，在每个新创建的App中设置独立的静态资源和模板文件夹并添加一个空白的\u003ccode\u003e.py\u003c/code\u003e文件，命为\u003ccode\u003eurls.py\u003c/code\u003e。如下是创建app中的文件结构：\u003c/p\u003e","title":"Django之编写URL"},{"content":"render方法参数 request: 是一个固定参数。 template_name: templates 中定义的文件, 要注意路径名. 比如’templates\\polls\\index.html’, 参数就要写‘polls\\index.html’ context: 要传入文件中用于渲染呈现的数据, 默认是字典格式 content_type: 生成的文档要使用的MIME 类型。默认为DEFAULT_CONTENT_TYPE 设置的值。 status: http的响应代码,默认是200. using: 用于加载模板使用的模板引擎的名称。 request对象方法和属性 request.scheme # 代表请求的方案,http或者https request.body# 原始HTTP请求主体为字节串。这对于以不同于常规HTML格式的方式处理数据很有用：二进制图像，XML有效负载等。对于处理常规格式的数据，请使用 HttpRequest.POST。 request.path # 请求的路径,比如请求127.0.0.1/org/list,那这个值就是/org/list request.get_full_path() # 获取完整的请求路径 request.method # 表示请求使用的http方法,GET或者POST请求 request.encoding # 表示提交数据的编码方式 request.GET # 获取GET请求 request.POST # 获取post的请求,比如前端提交的用户密码,可以通过request.POST.get()来获取 NOTICED：如果使用 POST 上传文件的话，文件信息将包含在 FILES 属性中\nrequest.COOKIES #包含所有的cookie\nrequest.META #一个标准的Python 字典，包含所有的HTTP 首部。具体的头部信息取决于客户端和服务器，下面是一些示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。 CONTENT_TYPE —— 请求的正文的MIME 类型。 HTTP_ACCEPT —— 响应可接收的Content-Type。 HTTP_ACCEPT_ENCODING —— 响应可接收的编码。 HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。 HTTP_HOST —— 客服端发送的HTTP Host 头部。 HTTP_REFERER —— Referring 页面。 HTTP_USER_AGENT —— 客户端的user-agent 字符串。 QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。 REMOTE_ADDR —— 客户端的IP 地址。 REMOTE_HOST —— 客户端的主机名。 REMOTE_USER —— 服务器认证后的用户。 REQUEST_METHOD —— 一个字符串，例如\u0026#34;GET\u0026#34; 或\u0026#34;POST\u0026#34;。 SERVER_NAME —— 服务器的主机名。 SERVER_PORT —— 服务器的端口（是一个字符串） request.user #一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。 如果用户当前没有登录，user 将设置为 django.contrib.auth.models.AnonymousUser 的一个实例。你可以通过 s_authenticated() 区分它们 把request传给前端的时候,前端可以通过 if request.user.is_authenticated判断用户时候登录 request.session #一个既可读又可写的类似于字典的对象，表示当前的会话 response对象 Httpresponse对象对于 Httpreques对象来说，是由 django自动创建的，但是， Httpresponse对象就必须我们自己创建。每个view请求处理方法必须返回一个 Httpresponse对象。 Httpresponse类在djangohttpHttprespons\n在 Httpresponse对象上扩展的常用方法：\n页面渲染\nrender() render to response() 页面跳转：\nredirect(\u0026quot;路径\u0026quot;) locals()：可以直接将函数中所有的变里传给模板\n内置变量过滤器filter ​ 可以理解为python中的内置函数，过滤器是模板的特有语法，通过前端来过滤部分数据。注意filter只能传递一个参数(也可以说是两个参数，因为第一个个参数已经固定，就是被处理的那个)。 格式：\n1 `{{` var|method:parameter`}}` method表示过滤器部分过滤器如下 过滤器 说明 举例 first 取列表第一个元素 last 取列表最后元素 capfirst 首字母大写 logging配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #下面就是logging的配置 LOGGING = { \u0026#39;version\u0026#39;: 1, # 指明dictConnfig的版本，目前就只有一个版本 \u0026#39;disable_existing_loggers\u0026#39;: False, # 表示是否禁用所有的已经存在的日志配置 \u0026#39;formatters\u0026#39;: { # 格式器 \u0026#39;verbose\u0026#39;: { # 详细 \u0026#39;format\u0026#39;: \u0026#39;%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s\u0026#39; }, \u0026#39;standard\u0026#39;: { # 标准 \u0026#39;format\u0026#39;: \u0026#39;[%(asctime)s] [%(levelname)s] %(message)s\u0026#39; }, }, # handlers：用来定义具体处理日志的方式，可以定义多种，\u0026#34;default\u0026#34;就是默认方式，\u0026#34;console\u0026#34;就是打印到控制台方式。file是写入到文件的方式，注意使用的class不同 \u0026#39;handlers\u0026#39;: { # 处理器，在这里定义了两个个处理器 \u0026#39;console\u0026#39;: { \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;class\u0026#39;: \u0026#39;logging.StreamHandler\u0026#39;, \u0026#39;stream\u0026#39;: \u0026#39;ext://sys.stdout\u0026#39;, # 文件重定向的配置，将打印到控制台的信息都重定向出去 python manage.py runserver \u0026gt;\u0026gt; /home/aea/log/test.log # \u0026#39;stream\u0026#39;: open(\u0026#39;/home/aea/log/test.log\u0026#39;,\u0026#39;a\u0026#39;), #虽然成功了，但是并没有将所有内容全部写入文件，目前还不清楚为什么 \u0026#39;formatter\u0026#39;: \u0026#39;standard\u0026#39; # 制定输出的格式，注意 在上面的formatters配置里面选择一个，否则会报错 }, \u0026#39;file\u0026#39;: { \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;class\u0026#39;: \u0026#39;logging.FileHandler\u0026#39;, \u0026#39;filename\u0026#39;: os.path.join(BASE_DIR,\u0026#39;debug.log\u0026#39;), #这是将普通日志写入到日志文件中的方法， \u0026#39;formatter\u0026#39;: \u0026#39;standard\u0026#39; }, \u0026#39;default\u0026#39;: { \u0026#39;level\u0026#39;:\u0026#39;DEBUG\u0026#39;, \u0026#39;class\u0026#39;:\u0026#39;logging.handlers.RotatingFileHandler\u0026#39;, \u0026#39;filename\u0026#39;: os.path.join(BASE_DIR,\u0026#39;All.log\u0026#39;), #日志输出文件 \u0026#39;maxBytes\u0026#39;: 1024*1024*5, #文件大小 \u0026#39;backupCount\u0026#39;: 5, #备份份数 \u0026#39;formatter\u0026#39;:\u0026#39;standard\u0026#39;, #使用哪种formatters日志格式 }, # 上面两种写入日志的方法是有区别的，前者是将控制台下输出的内容全部写入到文件中，这样做的好处就是我们在views代码中的所有print也会写在对应的位置 # 第二种方法就是将系统内定的内容写入到文件，具体就是请求的地址、错误信息等，小伙伴也可以都使用一下然后查看两个文件的异同。 }, \u0026#39;loggers\u0026#39;: { # log记录器，配置之后就会对应的输出日志 # django 表示就是django本身默认的控制台输出，就是原本在控制台里面输出的内容，在这里的handlers里的file表示写入到上面配置的file-/home/aea/log/jwt_test.log文件里面 # 在这里的handlers里的console表示写入到上面配置的console-/home/aea/log/test.log文件里面 \u0026#39;django\u0026#39;: { \u0026#39;handlers\u0026#39;: [\u0026#39;console\u0026#39;,\u0026#39;file\u0026#39;], # 这里直接输出到控制台只是请求的路由等系统console，当使用重定向之后会把所有内容输出到log日志 \u0026#39;level\u0026#39;: \u0026#39;DEBUG\u0026#39;, \u0026#39;propagate\u0026#39;: True, }, \u0026#39;django.request \u0026#39;:{ \u0026#39;handlers\u0026#39;: [\u0026#39;console\u0026#39;,\u0026#39;file\u0026#39;], \u0026#39;level\u0026#39;: \u0026#39;WARNING\u0026#39;, # 配合上面的将警告log写入到另外一个文件 \u0026#39;propagate\u0026#39;: True, }, \u0026#39;django.db.backends\u0026#39;: { \u0026#39;handlers\u0026#39;: [\u0026#39;file\u0026#39;], # 指定file handler处理器，表示只写入到文件 \u0026#39;level\u0026#39;:\u0026#39;DEBUG\u0026#39;, \u0026#39;propagate\u0026#39;: True, }, }, } ORM的增删改查 增加数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #方式一创建记录 b = Book(name=\u0026#34;python基础\u0026#34;, price=99, author=\u0026#34;luenci\u0026#34;, pub_date=\u0026#34;2020-06-14\u0026#34;) b.save() #方法二创建数据 Book.objects.create(name=\u0026#34;python基础\u0026#34;, price=99, author=\u0026#34;luenci\u0026#34;, pub_date=\u0026#34;2020-06-14\u0026#34;) # 便捷方法 dic = { \u0026#39;name\u0026#39;: \u0026#39;go基础\u0026#39;, \u0026#39;price\u0026#39;: 99, \u0026#39;author\u0026#39;: \u0026#39;luenci\u0026#39;, \u0026#39;pub_date\u0026#39;: \u0026#39;2020-06-13\u0026#39; } Book.objects.create(**dic) 更新数据 1 2 3 4 5 6 7 8 9 10 11 # 方法一：(推荐用) Book.objects.filter(author=\u0026#39;luenci\u0026#39;).update(price=100) # 方法二 b = Book.objects.get(name=\u0026#39;go基础\u0026#39;) print(b) # \u0026lt;QuerySet [\u0026lt;Book: Book object (3)\u0026gt;] b.price = 8.9 b.save() print(type(b)) # \u0026lt;class \u0026#39;app01.models.Book\u0026#39;\u0026gt; return HttpResponse(\u0026#34;修改成功\u0026#34;) 删除数据 1 Book.objects.filter(name=\u0026#34;go基础\u0026#34;).delete() 查找数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # 获取所有对象 book_list = Book.objects.all() # 对name去重 book_list = Book.objects.all().values(\u0026#34;name\u0026#34;).distinct() # 统计 book_list = Book.objects.all().values(\u0026#34;name\u0026#34;).distinct().count() # 查询的是对象的集合，即使只有一个对象也是集合的形式 book_list = Book.objects.filter(author=\u0026#39;luenci\u0026#39;) book_list = Book.objects.first() book_list = Book.objects.last() # 指定查询到一个对象 book_list = Book.objects.get(id=7) # 查询作者为luenci出版的书名.（字典的集合） book_list1 = Book.objects.filter(author=\u0026#39;luenci\u0026#39;).values(\u0026#39;name\u0026#39;, \u0026#39;price\u0026#39;) # 查询作者为luenci出版的书名.（列表的集合） book_list2 = Book.objects.filter(author=\u0026#39;luenci\u0026#39;).values_list(\u0026#39;name\u0026#39;, \u0026#39;price\u0026#39;) # \u0026lt;QuerySet [{\u0026#39;name\u0026#39;: \u0026#39;go基础\u0026#39;, \u0026#39;price\u0026#39;: 99.0}, {\u0026#39;name\u0026#39;: \u0026#39;python基础\u0026#39;, \u0026#39;price\u0026#39;: 99.0}, {\u0026#39;name\u0026#39;: \u0026#39;python基础\u0026#39;, \u0026#39;price\u0026#39;: 66.0}\u0026gt; print(book_list1) #\u0026lt;QuerySet [(\u0026#39;go基础\u0026#39;, 99.0), (\u0026#39;python基础\u0026#39;, 99.0), (\u0026#39;python基础\u0026#39;, 66.0), (\u0026#39;docker基础\u0026#39;, 8.9)]\u0026gt; print(book_list2) ","permalink":"https://luenci.com/en/posts/django%E5%8F%82%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/","summary":"\u003ch2 id=\"render方法参数\"\u003e\u003ccode\u003erender\u003c/code\u003e方法参数\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erequest\u003c/code\u003e: 是一个固定参数。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etemplate_name\u003c/code\u003e: \u003ccode\u003etemplates\u003c/code\u003e 中定义的文件, 要注意路径名. 比如\u003ccode\u003e’templates\\polls\\index.html’\u003c/code\u003e, 参数就要写\u003ccode\u003e‘polls\\index.html’\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econtext\u003c/code\u003e: 要传入文件中用于渲染呈现的数据, 默认是字典格式\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econtent_type\u003c/code\u003e: 生成的文档要使用的MIME 类型。默认为DEFAULT_CONTENT_TYPE 设置的值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estatus\u003c/code\u003e: http的响应代码,默认是200.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eusing\u003c/code\u003e: 用于加载模板使用的模板引擎的名称。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"request对象方法和属性\"\u003e\u003ccode\u003erequest\u003c/code\u003e对象方法和属性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erequest.scheme\u003c/code\u003e   # 代表请求的方案,http或者https\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.body\u003c/code\u003e# 原始HTTP请求主体为字节串。这对于以不同于常规HTML格式的方式处理数据很有用：二进制图像，XML有效负载等。对于处理常规格式的数据，请使用 \u003ccode\u003eHttpRequest.POST\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.path\u003c/code\u003e   # 请求的路径,比如请求\u003ccode\u003e127.0.0.1/org/list\u003c/code\u003e,那这个值就是\u003ccode\u003e/org/list\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.get_full_path()\u003c/code\u003e # 获取完整的请求路径\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.method\u003c/code\u003e  # 表示请求使用的http方法,GET或者POST请求\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.encoding\u003c/code\u003e # 表示提交数据的编码方式\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.GET\u003c/code\u003e     # 获取GET请求\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequest.POST\u003c/code\u003e    # 获取post的请求,比如前端提交的用户密码,可以通过\u003ccode\u003erequest.POST.get()\u003c/code\u003e来获取\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTICED：如果使用 POST 上传文件的话，文件信息将包含在 FILES 属性中\u003c/strong\u003e\u003c/p\u003e","title":"Django参数和模板"},{"content":"ORM多表操作 API 函数 说明 all() 查询所有结果 filter(**kwargs) 包含了与所给筛选条件相匹配的对象 get(**kwargs) 返回与所给筛选条件相匹配的对象，返回结果有且只有一个， 如果符合筛选条件的对象超过一个或者没有都会抛出错误。 exclude(**kwargs) 它包含了与所给筛选条件不匹配的对象 order_by(*field) 对查询结果排序 用法:order_by (\u0026ldquo;price\u0026rdquo;) DESC 降序 reverse(): 对查询结果反向排序 count() 返回数据库中匹配查询(QuerySet)的对象数量 first() 返回第一条记录 last() 返回最后一条记录 exists() 如果QuerySet包含数据，就返回True，否则返回False 相当于limit 1(用途查询这个表中是否有值) values(*field) 用法:Book.objects.all.values(‘title’,‘price’) 返回值是\u0026lt;queryset[{‘title’:‘aa’,‘pirce’:12},{}] values_list(*field): 用法:Book.objects.all.values_list(‘title’,‘price’) 返回值是\u0026lt;queryset[(‘aa’,12),(‘bb’,33)] distinct() 从返回结果中剔除重复纪录 用法:Book.objects.all.values(‘title’,‘price’).distinct() 错误用法 Book.objects.all.distinct() 因为id不相同,其他相同,无法去重 模糊查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __exact 精确等于 like ‘aaa’ __iexact 精确等于 忽略大小写 ilike ‘aaa’ __contains 是否包含 like ‘%aaa%’ __icontains 包含 忽略大小写 ilike ‘%aaa%’，但是对于sqlite来说，contains的作用效果等同于icontains。 __gt 大于 __gte 大于等于 __lt 小于 __lte 小于等于 __in 存在于一个list范围内 __startswith 以…开头 __istartswith 以…开头 忽略大小写 __endswith 以…结尾 __iendswith 以…结尾，忽略大小写 __range 在…范围内 __year 日期字段的年份 __month 日期字段的月份 __day 日期字段的日 __isnull=True/False __isnull=True 与 __exact=None的区别 外键的定义 1 2 3 4 5 6 7 8 9 10 11 # modeld.py class Book(models.Model): name = models.CharField(max_length=20) price = models.FloatField() pub_date = models.DateField() publish = models.ForeignKey(\u0026#34;Publish\u0026#34;,on_delete=models.CASCADE) class Publish(models.Model): name = models.CharField(max_length=32) city = models.CharField(max_length=32) on_delete的参数 CASCADE:这就是默认的选项，级联删除，你无需显性指定它。 PROTECT: 保护模式，如果采用该选项，删除的时候，会抛出ProtectedError错误。 SET_NULL: 置空模式，删除的时候，外键字段被设置为空，前提就是blank=True, null=True,定义该字段的时候，允许为空。 SET_DEFAULT: 置默认值，删除的时候，外键字段设置为默认值，所以定义外键的时候注意加上一个默认值。 SET(): 自定义一个值，该值只能是对应的实体了 DO_NOTHING:不采取行动。如果您的数据库后端强制执行参照完整性，会造成IntegrityError，除非您手动将SQL 约束ON DELETE添加到数据库字段。 一对多之对象查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # 通过外键实现关联查询 # 一对多： book_obj ————————————》一定是一个对象 book_obj = Book.objects.get(name=\u0026#34;python进阶\u0026#34;) print(book_obj.publish) print(book_obj.publish.name) print(book_obj.publish.city) # 查询出版社出版的所有书籍和价格 # 方法一 pub_obj = Publish.objects.filter(name=\u0026#34;人民出版社\u0026#34;)[0] ret = Book.objects.filter(publish=pub_obj).values(\u0026#34;name\u0026#34;,\u0026#34;price\u0026#34;) print(ret) # \u0026lt;QuerySet [{\u0026#39;name\u0026#39;: \u0026#39;linux运维\u0026#39;, \u0026#39;price\u0026#39;: 77.0}]\u0026gt; # 方法二 pub_obj = Publish.objects.filter(name=\u0026#34;机械出版社\u0026#34;)[0] print(pub_obj.book_set.all()) # \u0026lt;QuerySet [\u0026lt;Book: python进阶\u0026gt;]\u0026gt; print(type(pub_obj.book_set.all())) # \u0026lt;class \u0026#39;django.db.models.query.QuerySet\u0026#39;\u0026gt; print(pub_obj.book_set.all().values(\u0026#34;name\u0026#34;, \u0026#34;price\u0026#34;)) 多对多对象添加 1 2 3 4 5 6 7 # 多对多添加信息 book_obj = Book.objects.get(id=2) author_obj = Author.objects.get(id=1) # 添加关系 book_obj.author.add(author_obj) # 删除关系 book_obj.author.remove(author_obj) 聚合查询与分组查询 聚合查询: aggregate(*args, **kwargs) 1 2 3 4 5 6 #1.聚合 aggregate:返回值是一个字典 from django.db.models import Avg,Max,Min,Count #问题:查询所有书籍的平均价格,最高价格,最低价格 ret = Book.objects.all().aggregate(avg_price=Avg(\u0026#39;price\u0026#39;),max_price = Max(\u0026#39;price\u0026#39;),min_price=Min(\u0026#39;price\u0026#39;)) print(ret) aggregate()是QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。 分组查询 annotate(*args, **kwargs) 表单模型.objects.values(\u0026ldquo;group by 分组字段\u0026rdquo;).annotate(聚合函数(\u0026lsquo;聚合字段\u0026rsquo;)) F查询 Django 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取模的操作。 Q查询 filter() 等方法中的关键字参数查询都是一起进行“AND” 的。 如果你需要执行更复杂的查询（例如OR语句），你可以使用Q对象 ","permalink":"https://luenci.com/en/posts/django%E7%9A%84orm%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/","summary":"\u003ch1 id=\"orm多表操作\"\u003eORM多表操作\u003c/h1\u003e\n\u003ch2 id=\"api\"\u003eAPI\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e函数\u003c/th\u003e\n          \u003cth\u003e说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eall()\u003c/td\u003e\n          \u003ctd\u003e查询所有结果\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efilter(**kwargs)\u003c/td\u003e\n          \u003ctd\u003e包含了与所给筛选条件相匹配的对象\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eget(**kwargs)\u003c/td\u003e\n          \u003ctd\u003e返回与所给筛选条件相匹配的对象，返回结果有且只有一个， 如果符合筛选条件的对象超过一个或者没有都会抛出错误。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eexclude(**kwargs)\u003c/td\u003e\n          \u003ctd\u003e它包含了与所给筛选条件不匹配的对象\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eorder_by(*field)\u003c/td\u003e\n          \u003ctd\u003e对查询结果排序 用法:order_by (\u0026ldquo;price\u0026rdquo;)  \u003ccode\u003eDESC\u003c/code\u003e 降序\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ereverse():\u003c/td\u003e\n          \u003ctd\u003e对查询结果反向排序\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ecount()\u003c/td\u003e\n          \u003ctd\u003e返回数据库中匹配查询(\u003ccode\u003eQuerySet\u003c/code\u003e)的对象数量\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efirst()\u003c/td\u003e\n          \u003ctd\u003e返回第一条记录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003elast()\u003c/td\u003e\n          \u003ctd\u003e返回最后一条记录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eexists()\u003c/td\u003e\n          \u003ctd\u003e如果\u003ccode\u003eQuerySet\u003c/code\u003e包含数据，就返回\u003ccode\u003eTrue\u003c/code\u003e，否则返回\u003ccode\u003eFalse\u003c/code\u003e 相当于\u003ccode\u003elimit 1\u003c/code\u003e(用途查询这个表中是否有值)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003evalues(*field)\u003c/td\u003e\n          \u003ctd\u003e用法:\u003ccode\u003eBook.objects.all.values(‘title’,‘price’)\u003c/code\u003e 返回值是\u003ccode\u003e\u0026lt;queryset[{‘title’:‘aa’,‘pirce’:12},{}]\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003evalues_list(*field):\u003c/td\u003e\n          \u003ctd\u003e用法:\u003ccode\u003eBook.objects.all.values_list(‘title’,‘price’)\u003c/code\u003e 返回值是\u003ccode\u003e\u0026lt;queryset[(‘aa’,12),(‘bb’,33)]\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003edistinct()\u003c/td\u003e\n          \u003ctd\u003e从返回结果中剔除重复纪录 用法:\u003ccode\u003eBook.objects.all.values(‘title’,‘price’).distinct()\u003c/code\u003e 错误用法 \u003ccode\u003eBook.objects.all.distinct()\u003c/code\u003e 因为id不相同,其他相同,无法去重\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"模糊查询\"\u003e模糊查询\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cmd\" data-lang=\"cmd\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__exact \t精确等于 like ‘aaa’\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__iexact \t精确等于 忽略大小写 ilike ‘aaa’\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__contains  是否包含 like ‘\u003cspan style=\"color:#79c0ff\"\u003e%aaa%\u003c/span\u003e’\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__icontains 包含 忽略大小写 ilike ‘\u003cspan style=\"color:#79c0ff\"\u003e%aaa%\u003c/span\u003e’，但是对于sqlite来说，contains的作用效果等同于icontains。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__gt \t\t大于\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__gte \t\t大于等于\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__lt \t\t小于\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__lte \t\t小于等于\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__in \t\t存在于一个list范围内\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__startswith 以…开头\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__istartswith 以…开头 忽略大小写\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__endswith  以…结尾\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__iendswith 以…结尾，忽略大小写\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__range \t在…范围内\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__year \t\t日期字段的年份\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__month \t日期字段的月份\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__day \t\t日期字段的日\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__isnull=True/False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__isnull=True 与 __exact=None的区别\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c!-- more --\u003e\n\u003ch2 id=\"外键的定义\"\u003e外键的定义\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# modeld.py\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eBook\u003c/span\u003e(models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eModel):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eCharField(max_length\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    price \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eFloatField()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pub_date \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eDateField()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    publish \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eForeignKey(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Publish\u0026#34;\u003c/span\u003e,on_delete\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eCASCADE)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003ePublish\u003c/span\u003e(models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eModel):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eCharField(max_length\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e32\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    city \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eCharField(max_length\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e32\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"on_delete的参数\"\u003e\u003ccode\u003eon_delete\u003c/code\u003e的参数\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCASCADE\u003c/code\u003e:这就是默认的选项，级联删除，你无需显性指定它。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePROTECT\u003c/code\u003e: 保护模式，如果采用该选项，删除的时候，会抛出\u003ccode\u003eProtectedError\u003c/code\u003e错误。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSET_NULL\u003c/code\u003e: 置空模式，删除的时候，外键字段被设置为空，前提就是\u003ccode\u003eblank=True\u003c/code\u003e, \u003ccode\u003enull=True\u003c/code\u003e,定义该字段的时候，允许为空。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSET_DEFAULT\u003c/code\u003e: 置默认值，删除的时候，外键字段设置为默认值，所以定义外键的时候注意加上一个默认值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSET()\u003c/code\u003e: 自定义一个值，该值只能是对应的实体了\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDO_NOTHING\u003c/code\u003e:不采取行动。如果您的数据库后端强制执行参照完整性，会造成\u003ccode\u003eIntegrityError\u003c/code\u003e，除非您手动将SQL 约束\u003ccode\u003eON DELETE\u003c/code\u003e添加到数据库字段。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"一对多之对象查询\"\u003e一对多之对象查询\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 通过外键实现关联查询\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 一对多： book_obj ————————————》一定是一个对象\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook_obj \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Book\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(name\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;python进阶\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(book_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epublish)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(book_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epublish\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(book_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epublish\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ecity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 查询出版社出版的所有书籍和价格\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 方法一\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epub_obj \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Publish\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efilter(name\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;人民出版社\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eret \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Book\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efilter(publish\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003epub_obj)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003evalues(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;price\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(ret) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# \u0026lt;QuerySet [{\u0026#39;name\u0026#39;: \u0026#39;linux运维\u0026#39;, \u0026#39;price\u0026#39;: 77.0}]\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 方法二\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epub_obj \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Publish\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efilter(name\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;机械出版社\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pub_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ebook_set\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eall())  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# \u0026lt;QuerySet [\u0026lt;Book: python进阶\u0026gt;]\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(type(pub_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ebook_set\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eall()))  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# \u0026lt;class \u0026#39;django.db.models.query.QuerySet\u0026#39;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pub_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ebook_set\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eall()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003evalues(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;price\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"多对多对象添加\"\u003e多对多对象添加\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 多对多添加信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook_obj \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Book\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(id\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eauthor_obj \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Author\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(id\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 添加关系\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eauthor\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eadd(author_obj)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 删除关系\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook_obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eauthor\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eremove(author_obj)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"聚合查询与分组查询\"\u003e聚合查询与分组查询\u003c/h2\u003e\n\u003ch3 id=\"聚合查询\"\u003e聚合查询:\u003c/h3\u003e\n\u003ch4 id=\"aggregateargs-kwargs\"\u003e\u003ccode\u003eaggregate\u003c/code\u003e(*args, **kwargs)\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#1.聚合  aggregate:返回值是一个字典\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edjango.db.models\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e Avg,Max,Min,Count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#问题:查询所有书籍的平均价格,最高价格,最低价格\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eret \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Book\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eall()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eaggregate(avg_price\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003eAvg(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;price\u0026#39;\u003c/span\u003e),max_price \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Max(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;price\u0026#39;\u003c/span\u003e),min_price\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003eMin(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;price\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(ret)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaggregate()\u003c/code\u003e是\u003ccode\u003eQuerySet\u003c/code\u003e 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"分组查询\"\u003e分组查询\u003c/h2\u003e\n\u003ch3 id=\"annotateargs-kwargs\"\u003eannotate(*args, **kwargs)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e表单模型.objects.values(\u0026ldquo;group by 分组字段\u0026rdquo;).annotate(聚合函数(\u0026lsquo;聚合字段\u0026rsquo;))\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"f查询\"\u003eF查询\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDjango 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取模的操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"q查询\"\u003eQ查询\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efilter() 等方法中的关键字参数查询都是一起进行“AND” 的。 如果你需要执行更复杂的查询（例如OR语句），你可以使用Q对象\u003c/li\u003e\n\u003c/ul\u003e","title":"Django的ORM多表操作"},{"content":"Django的Field详解（转载） 本文转载于：https://www.cnblogs.com/ellisonzhang/p/10679054.html\n字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 1、models.AutoField　自增列 = int(11) 如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。 2、models.CharField　字符串字段 必须 max_length 参数 3、models.BooleanField　布尔类型=tinyint(1) 不能为空，Blank=True 4、models.ComaSeparatedIntegerField　用逗号分割的数字=varchar 继承CharField，所以必须 max_lenght 参数 5、models.DateField　日期类型 date 对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。 6、models.DateTimeField　日期类型 datetime 同DateField的参数 7、models.Decimal　十进制小数类型 = decimal 必须指定整数位max_digits和小数位decimal_places 8、models.EmailField　字符串类型（正则表达式邮箱） =varchar 对字符串进行正则表达式 9、models.FloatField　浮点类型 = double 10、models.IntegerField　整形 11、models.BigIntegerField　长整形 integer_field_ranges = { \u0026#39;SmallIntegerField\u0026#39;: (-32768, 32767), \u0026#39;IntegerField\u0026#39;: (-2147483648, 2147483647), \u0026#39;BigIntegerField\u0026#39;: (-9223372036854775808, 9223372036854775807), \u0026#39;PositiveSmallIntegerField\u0026#39;: (0, 32767), \u0026#39;PositiveIntegerField\u0026#39;: (0, 2147483647), } 12、models.IPAddressField　字符串类型（ip4正则表达式） 13、models.GenericIPAddressField　字符串类型（ip4和ip6是可选的） 参数protocol可以是：both、ipv4、ipv6 验证时，会根据设置报错 14、models.NullBooleanField　允许为空的布尔类型 15、models.PositiveIntegerFiel　正Integer 16、models.PositiveSmallIntegerField　正smallInteger 17、models.SlugField　减号、下划线、字母、数字 18、models.SmallIntegerField　数字 数据库中的字段有：tinyint、smallint、int、bigint 19、models.TextField　字符串=longtext 20、models.TimeField　时间 HH:MM[:ss[.uuuuuu]] 21、models.URLField　字符串，地址正则表达式 22、models.BinaryField　二进制 23、models.ImageField 图片 24、models.FilePathField 文件 参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 1、null=True 数据库中字段是否可以为空 2、blank=True django的 Admin 中添加数据时是否可允许空值 3、primary_key = False 主键，对AutoField设置主键后，就会代替原来的自增 id 列 4、auto_now 和 auto_now_add auto_now 自动创建---无论添加或修改，都是当前操作的时间 auto_now_add 自动创建---永远是创建时的时间 5、choices sex_choice=((“F”,“FEMAL”),(“M”,’Male’),)　#admin专用下拉选项 gender=models.CharFiled(max_length=2,choice=sex_choice) 6、max_length 7、default　默认值 8、verbose_name　Admin中字段的显示名称 9、name|db_column　数据库中的字段名称 10、unique=True　不允许重复 11、db_index = True　数据库索引 12、editable=True　在Admin里是否可编辑 13、error_messages=None　错误提示 14、auto_created=False　自动创建 15、help_text　在Admin中提示帮助信息 16、validators=[] 17、upload-to ","permalink":"https://luenci.com/en/posts/django%E7%9A%84field%E8%AF%A6%E8%A7%A3/","summary":"\u003ch1 id=\"django的field详解转载\"\u003eDjango的Field详解（转载）\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文转载于：https://www.cnblogs.com/ellisonzhang/p/10679054.html\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"字段\"\u003e字段\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eAutoField　　自增列 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e int(\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　如果没有的话\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e默认会生成一个名称为 id 的列\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e如果要显示的自定义一个自增列\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e必须将给列设置为主键 primary_key\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eCharField　　字符串字段\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　必须 max_length 参数\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eBooleanField　　布尔类型\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003etinyint(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　不能为空\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003eBlank\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eComaSeparatedIntegerField　　用逗号分割的数字\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003evarchar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　继承CharField\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e所以必须 max_lenght 参数\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eDateField　　日期类型 date\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　对于参数\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003eauto_now \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e 则每次更新都会更新这个时间\u003cspan style=\"color:#f85149\"\u003e；\u003c/span\u003eauto_now_add 则只是第一次创建添加\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e之后的更新不再改变\u003cspan style=\"color:#f85149\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eDateTimeField　　日期类型 datetime\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　同DateField的参数\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eDecimal　　十进制小数类型 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e decimal\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　必须指定整数位max_digits和小数位decimal_places\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e8\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eEmailField　　字符串类型\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003e正则表达式邮箱\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003evarchar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　对字符串进行正则表达式\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e9\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eFloatField　　浮点类型 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eIntegerField　　整形\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eBigIntegerField　　长整形\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　integer_field_ranges \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　　　\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;SmallIntegerField\u0026#39;\u003c/span\u003e: (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e32768\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e32767\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　　　\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;IntegerField\u0026#39;\u003c/span\u003e: (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2147483648\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e2147483647\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　　　\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;BigIntegerField\u0026#39;\u003c/span\u003e: (\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e9223372036854775808\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e9223372036854775807\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　　　\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;PositiveSmallIntegerField\u0026#39;\u003c/span\u003e: (\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e32767\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　　　\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;PositiveIntegerField\u0026#39;\u003c/span\u003e: (\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e2147483647\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e12\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eIPAddressField　　字符串类型\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003eip4正则表达式\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e13\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eGenericIPAddressField　　字符串类型\u003cspan style=\"color:#f85149\"\u003e（\u003c/span\u003eip4和ip6是可选的\u003cspan style=\"color:#f85149\"\u003e）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　参数protocol可以是\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003eboth\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003eipv4\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003eipv6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　验证时\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e会根据设置报错\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e14\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eNullBooleanField　　允许为空的布尔类型\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e15\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ePositiveIntegerFiel　　正Integer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e16\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ePositiveSmallIntegerField　　正smallInteger\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e17\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSlugField　　减号\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003e下划线\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003e字母\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003e数字\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eSmallIntegerField　　数字\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　数据库中的字段有\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003etinyint\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003esmallint\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003eint\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003ebigint\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e19\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eTextField　　字符串\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003elongtext\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eTimeField　　时间 HH:MM[:ss[\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003euuuuuu]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e21\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eURLField　　字符串\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e地址正则表达式\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eBinaryField　　二进制\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e23\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eImageField   图片\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e24\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e、\u003c/span\u003emodels\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eFilePathField 文件\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"参数\"\u003e参数\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cmd\" data-lang=\"cmd\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1、null=True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　数据库中字段是否可以为空\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2、blank=True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　django的 Admin 中添加数据时是否可允许空值\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e3、primary_key = False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　主键，对AutoField设置主键后，就会代替原来的自增 id 列\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e4、auto_now 和 auto_now_add\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　auto_now   自动创建---无论添加或修改，都是当前操作的时间\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e　　auto_now_add  自动创建---永远是创建时的时间\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5、choices\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sex_choice=((“F”,“FEMAL”),(“M”,’Male’),)　　　　#admin专用下拉选项    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    gender=models.CharFiled(max_length=2,choice=sex_choice)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e6、max_length\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e7、default　　默认值\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e8、verbose_name　　Admin中字段的显示名称\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e9、name|db_column　　数据库中的字段名称\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10、unique=True　　不允许重复\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e11、db_index = True　　数据库索引\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e12、editable=True　　在Admin里是否可编辑\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e13、error_messages=None　　错误提示\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e14、auto_created=False　　自动创建\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e15、help_text　　在Admin中提示帮助信息\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e16、validators=[]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e17、upload-to\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Django的ORM字段介绍"},{"content":"Django简介 背景 2003诞生 它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的 MVT（框架） Models 模型 数据库\nViews 视图 放和拿\nTemplate 模板 前端\nFrom 表单 django 会根据你后台数据库字段及表单层的设计对应的给你创建HTML关于表单的代码 Django优点 对象关系映射（Object Relational Mapping ORM）：通过定义映射类来构建数据模型，将模型与关系型数据库连接起来，使用ORM框架内置的数据库接口可实现复杂的数据操作。（简单来说就是把数据库的语句换成了python可识别的语言） URL设计：开发者可以设计任意的URL（网站地址）， 而且支持使用正则表达式设计。 模板系统：提供可扩展的模板语言，模板之间具有可继承性。 表单处理：可以生成各种表单模型，而且表单具有有效性检验功能。 Cache系统：完善的缓存系统，可支持多种缓存方式 用户管理系统：提供用户认证，权限设置和用户组功能，功能扩展性强。 国际化：内置国际化系统，方便开发出多语言的网站。 admin管理系统：内置admin管理系统，系统的扩展性强。 Django项目目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 用django-admin startproject demo 创建一个demo项目 文件结构如下： demo/\t# 最外层 这个是整个项目的容器文件夹，可以随意改名字 demo/\t# 内层的demo 是这个项目中关于配置文件的一个管理文件夹，这个不允许改名字 __init__.py\t#初始化文件，代表这个文件夹是一个包，一个模块，demo文件夹就是一个模块了 settings.py # 这个是整个项目的配置文件，配置中间，配置邮件等 urls.py\t# django项目的总路由配置文件。网站的地址信息 wsgi.py\t# 全称为Python Web Server Gateway Interface，即为python服务器网关接口，\t是python应用与Web服务器之间的接口，用于Django项目在服务器上的部署和上线，一 般不需要修改 manage.py\t# 命令行工具，允许以多种方式与项目交互。 可输入 python manage.py help 查看\t该工具的具体用法 Django的创建的App目录 使用命令创建app： python manage.py startapp frist\n创建了App必须把App名称添加到INSTALL_APPS里面。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 frist/ migrations/\t# 数据库前后是否有变化，生成出迁移文件 static/\t# 创建App后存放App中的静态资源文件，自己手动添加 templates/\t# 创建App后存放App中的模板文件，自己手动添加 __init__.py admin.py apps.py models.py tests.py urls.py\t# 创建App后由系统总路由映射到App的路由文件，自己手动添加 view.py Django（settings）配置全览 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 \u0026#34;\u0026#34;\u0026#34; Django settings for mysite project. Generated by \u0026#39;django-admin startproject\u0026#39; using Django 2.1.2. For more information on this file, see https://docs.djangoproject.com/en/2.1/weightics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ \u0026#34;\u0026#34;\u0026#34; import os # 项目路径 # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/ # 密匙配置 # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \u0026#39;#g$qgqkee8csvp67l$(8ugkx%+i_9k%mbykw-%9zpbnyn!bb!=\u0026#39; # 调试模式 # SECURITY WARNING: don\u0026#39;t run with debug turned on in production! DEBUG = True # 域名访问权限 ALLOWED_HOSTS = [\u0026#39;*\u0026#39;] # App列表 # Application definition INSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;myblog\u0026#39;, \u0026#39;article\u0026#39;, ] MIDDLEWARE = [ \u0026#39;django.middleware.security.SecurityMiddleware\u0026#39;, \u0026#39;django.contrib.sessions.middleware.SessionMiddleware\u0026#39;, \u0026#39;django.middleware.common.CommonMiddleware\u0026#39;, \u0026#39;django.middleware.csrf.CsrfViewMiddleware\u0026#39;, \u0026#39;django.contrib.auth.middleware.AuthenticationMiddleware\u0026#39;, \u0026#39;django.contrib.messages.middleware.MessageMiddleware\u0026#39;, \u0026#39;django.middleware.clickjacking.XFrameOptionsMiddleware\u0026#39;, ] ROOT_URLCONF = \u0026#39;mysite.urls\u0026#39; TEMPLATES = [ { \u0026#39;BACKEND\u0026#39;: \u0026#39;django.template.backends.django.DjangoTemplates\u0026#39;, \u0026#39;DIRS\u0026#39;: [BASE_DIR, \u0026#39;templates\u0026#39;], \u0026#39;APP_DIRS\u0026#39;: True, \u0026#39;OPTIONS\u0026#39;: { \u0026#39;context_processors\u0026#39;: [ \u0026#39;django.template.context_processors.debug\u0026#39;, \u0026#39;django.template.context_processors.request\u0026#39;, \u0026#39;django.contrib.auth.context_processors.auth\u0026#39;, \u0026#39;django.contrib.messages.context_processors.messages\u0026#39;, # 自定义模版全局变量(默认变量) \u0026#39;article.views.global_settings\u0026#39;, ], }, }, ] WSGI_APPLICATION = \u0026#39;mysite.wsgi.application\u0026#39; # Database # https://docs.djangoproject.com/en/2.1/ref/settings/#databases DATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: os.path.join(BASE_DIR, \u0026#39;db.sqlite3\u0026#39;), } } # Password validation # https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { \u0026#39;NAME\u0026#39;:\u0026#39;django.contrib.auth.password_validation.UserAttributeSimilarityValidator\u0026#39;, }, { \u0026#39;NAME\u0026#39;: \u0026#39;django.contrib.auth.password_validation.MinimumLengthValidator\u0026#39;, }, { \u0026#39;NAME\u0026#39;: \u0026#39;django.contrib.auth.password_validation.CommonPasswordValidator\u0026#39;, }, { \u0026#39;NAME\u0026#39;: \u0026#39;django.contrib.auth.password_validation.NumericPasswordValidator\u0026#39;, }, ] # Internationalization # https://docs.djangoproject.com/en/2.1/weightics/i18n/ LANGUAGE_CODE = \u0026#39;zh-Hans\u0026#39; TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/2.1/howto/static-files/ STATIC_URL = \u0026#39;/static/\u0026#39; STATIC_ROOT = os.path.join(BASE_DIR, \u0026#34;static/\u0026#34;) 项目路径 BASE_DIR：主要通过os模块读取当前项目在系统的具体路径，该代码在创建项目时自动生成，一般情况无需修改\n密匙配置SECRET_KEY：是一个随机值，在项目创建的时候自动生成，一般情况下无需修改。主要用于重要的数据\t加密处理，提高系统的安全性，避免遭到攻击者的恶意破坏。密匙主要用于用户密码，CSRF机制和会话Session等数据加密。\n1 2 3 4 5 * 用户密码：Django内置一套用户管理系统，该系统具有用户认证和存储用户信息等功能，在创建用户的时候，将用户的密码通过密匙进行加密处理，保证用户的安全性。 * CSRF机制：该机制主要用于表单提交，防止窃取网站的用户信息来制造恶意请求 * 会话Session：Session的信息存放在Cookies，以一串随机的字符串表示，用于标识当前访问网站的用户身份，记录相关用户信息。 调试模式DEBUG：该值为布尔类型。如果在开发调试阶段应设置为True，在开发调试过程中会自动检测代码是否 发生更改，根据检测结果执行是否刷新重启系统。如果项目部署上线，将其改为False，否则会泄露系统的相关信息。\n域名访问权限ALLOWED_HOSTS:设置可访问的域名，默认值为空。当DEBUG为True并且ALLOWED_HOSTS为空时，项目只允许以localhost或127.0.0.1在浏览器上访问启动。当DEBUG为False时，ALLOWED_HOSTS为必填项，否则程序无法启动，如果想允许所有域名访问，可设置ALLOW_HOSTS=[\u0026rsquo;*\u0026rsquo;]。\nApp列表INSTALLED_APPS：告诉Django有哪些App。在创建项目时已有admin，auth，和session等配置等信息，这些都是Django内置的应用功能，各个功能说明如下。\n1 2 3 4 5 6 * admin:内置的后台管理系统。 * auth：内置的用户认证系统。 * contenttypes：记录项目中所有的model元数据（Django的ORM框架）。 * session：Session会话功能，用于标识当前访问网站的 用户身份，记录相关用户信息。 * message：消息提示功能。 * staticfiles：查找静态资源路径。 静态资源（static） 1 2 3 4 5 6 7 8 9 10 11 12 # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/2.1/howto/static-files/ STATIC_URL = \u0026#39;/static/\u0026#39;\tSTATIC_ROOT = os.path.join(BASE_DIR, \u0026#34;static/\u0026#34;) # 设置根目录的静态资源文件夹static STATICFILES_DIRS = [ os.path.join(BASE_DIR, \u0026#39;static\u0026#39;), # 设置App的静态资源文件夹 os.path.join(BASE_DIR, \u0026#39;/static\u0026#39;)， ] ​\n​\tCSS也称层叠样式表（Cascading Style Sheets），是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。\n​\tJavaScript是一种直译式脚本语言，也是一种动态类型，弱类型，基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。\nSTATIC_URL是必须配置的属性而且属性值不能为空。如果没有配置STATICFILES_DIRS，则STATIC_URL只能识别App里的static静态资源文件夹。\nSTATICFILES_DIRS是可选配置属性，属性值为列表或元组格式，每个列表（元组）元素代表一个静态资源文件夹，这些文件夹可行命名。\n在浏览器上访问项目的静态资源时，无论项目的静态资源文件夹是如何命名的，在浏览器上，静态资源的上级目录必须为static，而static而STATIC_URL的属性值,因为STATIC_URL也是静态资源的起始URL。\n​ 除此之外，静态资源配置还有STATIC_ROOT，其作用是方便在服务器上部署项目，实现服务器和项目之间的映射。\nSTATIC_URL和STATICFILES_DIRS区别\nSTATIC_URL是必须配置的属性而且属性的值不能为空。如果没有配置STATICFILES_DIRS,则STATIC_URL只能识别App里面的static静态资源文件夹。 STATICFILES_DIRS是可选配置属性，属性值为列表或元组格式，每个列表（元组）元素代表一个静态资源文件夹，这些文件夹可自行命名。 在浏览器上访问项目的静态资源时，无论项目的静态资源文件夹是如何命名的，在浏览器上，静态资源的上级目录必须为static，而static是STATIC_URL的属性值，因为STATIC_URL也是静态资源的起始URL。 模板路径（template） 在web开发中，模板是一种较为特殊的HTML文档。这个HTML文档嵌入了一些能够让Python识别的变量和指令，然后程序解析这些变量和指令，生成完整的HTML网页并返回给用户浏览。模板是Django里面的MTV框架模式的T部分，配置模板路径是Django在解析模板时，如何找到模板所在的位置。创建项目时，Django以有初始的模板配置信息。如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 TEMPLATES = [ { \u0026#39;BACKEND\u0026#39;: \u0026#39;django.template.backends.django.DjangoTemplates\u0026#39;, \u0026#39;DIRS\u0026#39;: [BASE_DIR, \u0026#39;templates\u0026#39;], \u0026#39;APP_DIRS\u0026#39;: True, \u0026#39;OPTIONS\u0026#39;: { \u0026#39;context_processors\u0026#39;: [ \u0026#39;django.template.context_processors.debug\u0026#39;, \u0026#39;django.template.context_processors.request\u0026#39;, \u0026#39;django.contrib.auth.context_processors.auth\u0026#39;, \u0026#39;django.contrib.messages.context_processors.messages\u0026#39;, # 自定义模版全局变量(默认变量) \u0026#39;article.views.global_settings\u0026#39;, ], }, }, ] 模板信息是以列表格式呈现的，每个元素具有不同的含义，说明如下：\nBACKEND：定义模板引擎，用于识别模板里面的变量和指令。内置的模板引擎有DjangoTemplate和jinjia2.Jinjia2，每个模板引擎都有自己的变量和指令语法。\nDIRS：设置模板所在的路径，告诉Django在那个地方查找模板的位置，默认为空列表\nAPP_DIRS:是否在App里面查找模板文件\nOPTIONS：用于填充在RequestContext中上下文调用函数，一般情况下不做任何修改。\n数据库设置（Databases） 在settings文件下 有一个DATABASES属性\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 DATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, # 数据库引擎 \u0026#39;NAME\u0026#39;: os.path.join(BASE_DIR, \u0026#39;db.sqlite3\u0026#39;), # 本地sqllite3数据库位置 \u0026#39;USER\u0026#39;: # 用户名 \u0026#39;PASSWORD\u0026#39;: # 数据库密码 \u0026#39;HOST\u0026#39;:\t# 数据库主机地址 } } #\t默认的django使用sqllite3作为数据库 # django提供四种 ENGINE 数据库引擎 #\tdjango.db.backends.mysql #\tdjango.db.backends.oracle #\tdjango.db.backends.splite3 #\t如果你使用的是 PostgreSQL 或者Mysql的话，已经是先创建了数据库，但是默认的SQLlite不需要 sqlite3 轻量级数据库（数据存放在文件里面）\n在Django连接MYSQL数据库时候如果提示django.db.utils.OperationalError的错误信息，这是因为MYSQL8.0版本的密码加密方式发生了变化，8.0版本的用户密码采用的是cha2加密方法。\n解决方法，把SQL语句将8.0版本加密方法改回原来的加密方式。\n1 2 3 # newpassword 是我们设置的用户密码 ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;newpassword\u0026#39;; FLUSH PRIVILEGES; 中间件（Middlewere） 中间件（Middleware）是处理Django的request和response对象的钩子。当用户在网站中进行单击某个按钮等操作时，这个动作是用户向网站发送请求（request）；而网页会根据用户的操作返回相关的网页内容，这个过程称为响应处理（response）。从请求到响应的过程中，当Django接收到用户的请求时，Django首先经过中间件处理请求消息，执行相关的处理，然后将处理结果返回给用户，中间件的执行流程如图：\n如上图，中间件的作用主要是处理用户的请求信息。开发者也可以根据自己的开发需求自定义中间件，只要将自定义的中间件添加到配置属性MIDDLEWARE中即可激活。一般情况下，Django默认的中间件配置均可满足大部分的开发需求。\n1 2 3 4 5 6 7 \u0026#39;django.middleware.security.SecurityMiddleware\u0026#39;, \u0026#39;django.contrib.sessions.middleware.SessionMiddleware\u0026#39;, \u0026#39;django.middleware.common.CommonMiddleware\u0026#39;, \u0026#39;django.middleware.csrf.CsrfViewMiddleware\u0026#39;, \u0026#39;django.contrib.auth.middleware.AuthenticationMiddleware\u0026#39;, \u0026#39;django.contrib.messages.middleware.MessageMiddleware\u0026#39;, \u0026#39;django.middleware.clickjacking.XFrameOptionsMiddleware\u0026#39;, 配置属性MIDDLEWARE的数据格式为列表类型，每个中间件的设置顺序是固定的，如果随意变更中间件很容易导致程序异常，每个中间件的说明如下：\nSecurityMiddleware：内置的安全机制，保护用户与网站的通信安全。 SessionMiddleware：会话Session。 LocaleModdleware：支持中文语言。 CommonMiddleware：处理请求信息，规范化请求内容。 CsrViewMiddleware：开启CSRF防护功能。 AuthenticationMiddleware：开启内置的用户认证系统。 MessageMiddleware：开启内置的信息提示功能。 XFrameOptionsMiddleware：防止恶意程序点击劫持。 修改时区及语言 LANGUAGE_CODE = \u0026rsquo;en-us\u0026rsquo; #语言\nTIME_ZONE = \u0026lsquo;UTC\u0026rsquo; #时区\n1 2 LANGUAGE_CODE = \u0026#39;zh-Hans\u0026#39; TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; 开启测试服务器 用来展示你创建出来的空项目 /home/Publc_Class/5-17-django框架/ python3 manage.py runserver 0.0.0.0:9090 开启了一个测试服务器 runserver 可以让你在浏览器看到效果，但是这个是测试服务器，压力不过百 创建默认数据库 因为django自带的admin界面，首先需要数据库来支持\n我们来先创建出一个数据库 1 2 3 4 makemigrations 数据库前后是否有变化，生成出迁移文件 migrate 根据迁移文件 来对应的执行SQL语句 python3 manage.py makemigrations python3 manage.py migrate 如果数据库创建完成，那么目录结构下和manage.py同级的就会有一个db.splite3文件\n有了这个数据库，就可以创建超级用户来管理admin界面啦！\n为admin界面创建超级用户\n数据库有了，要创建超级用户\npython3 manage.py createsuperuser 1 2 3 4 5 Username (leave blank to use \u0026#39;root\u0026#39;): root Email address: 2573799357@qq.com Password: Password (again): Superuser created successfully. ","permalink":"https://luenci.com/en/posts/django%E9%85%8D%E7%BD%AE%E5%88%9D%E5%90%AF/","summary":"\u003ch1 id=\"django简介\"\u003eDjango简介\u003c/h1\u003e\n\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e2003诞生 它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"mvt框架\"\u003eMVT（框架）\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eModels 模型 数据库\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eViews 视图 放和拿\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTemplate 模板 前端\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrom 表单 \u003ccode\u003edjango\u003c/code\u003e 会根据你后台数据库字段及表单层的设计对应的给你创建HTML关于表单的代码\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"django优点\"\u003eDjango优点\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e对象关系映射（Object Relational Mapping ORM）：通过定义映射类来构建数据模型，将模型与关系型数据库连接起来，使用ORM框架内置的数据库接口可实现复杂的数据操作。（简单来说就是把数据库的语句换成了python可识别的语言）\u003c/li\u003e\n\u003cli\u003eURL设计：开发者可以设计任意的URL（网站地址）， 而且支持使用正则表达式设计。\u003c/li\u003e\n\u003cli\u003e模板系统：提供可扩展的模板语言，模板之间具有可继承性。\u003c/li\u003e\n\u003cli\u003e表单处理：可以生成各种表单模型，而且表单具有有效性检验功能。\u003c/li\u003e\n\u003cli\u003eCache系统：完善的缓存系统，可支持多种缓存方式\u003c/li\u003e\n\u003cli\u003e用户管理系统：提供用户认证，权限设置和用户组功能，功能扩展性强。\u003c/li\u003e\n\u003cli\u003e国际化：内置国际化系统，方便开发出多语言的网站。\u003c/li\u003e\n\u003cli\u003eadmin管理系统：内置admin管理系统，系统的扩展性强。\u003c/li\u003e\n\u003c/ul\u003e","title":"Django简介"},{"content":" 原文转载自：https://www.jianshu.com/p/5e322fb5b61c（简书：爱吃鱼de大猫）\n当你使用 Django 框架构建 Python Web 应用程序时，在某些时候需要将用户从一个URL重定向到另一个URL。本指南将提供 HTTP 重定向所需要了解的所有知识，以及在 Django 中该如何处理。\n完成本教程，你将学到：\n能够将用户从一个URL重定向到另一个URL 了解临时重定向和永久重定向之间的区别 使用重定向时避免常见陷阱 本教程假设你熟悉Django应用程序的基本构建块，如视图和URL模式。\n一个超简单的 Django 重定向例子 在 Django 中，通过从视图返回HttpResponseRedirect或HttpResponsePermanentRedirect的实例，可以将用户重定向到另一个URL。要做到这一点，最简单的方法是使用模块 django.shortcuts 中的函数 redirect()。比如：\n1 2 3 4 5 6 # views.py from django.shortcuts import redirect def redirect_view(request): response = redirect(\u0026#39;/redirect-success/\u0026#39;) return response 只需在你的视图中将新的 URL 作为参数调用 redirect() 即可搞定。 该视图函数将返回一个 HttpResponseRedirect 类。\n注意，如同其他视图一样，返回的重定向URL必须在你的 urls.py 中注册：\n1 2 3 4 5 6 7 8 9 # urls.py from django.urls import path from .views import redirect_view urlpatterns = [ path(\u0026#39;/redirect/\u0026#39;, redirect_view) # ... more URL patterns here ] 假定这个是 Django 项目的主 urls.py 文件，现在 URL/redirect/ 将被重定向到 /redirect-success/。此外，为避免硬编码 URL，你可以用视图、URL 模式或者模型的名字来调用 redirect() 。通过传递关键字参数Permanent=True来创建永久重定向。\n好了，你需要了解的 Django 重定向就这么多。为让这篇教程配得上“终极指南”这个标题，下面我们将进一步探讨 redirect() 函数、HTTP 状态码以及 HttpRedirectResponse 类型。我们从头开始，从一个基本的问题开始。\n为什么要使用重定向？ 我们为什么要将用户的访问重定向到不同的 URL 地址？我们看看 Django 项目是怎么回答的：\n当你未登录并请求需要身份验证的URL(如Django管理员)时，Django会将你重定向到登录页面 成功登录后，Django会将你重定向到最初请求的URL 当你使用Django管理员更改密码时，系统会将你重定向到指示更改成功的页面 当你在Django管理员中创建对象时，Django会将你重定向到对象列表。 如果不使用重定向来实现会是什么样子？\n如果用户必须登录才能查看页面，则可以简单地显示类似“单击此处登录”之类的页面。这样子做也行，但它是对用户不友好的。\n另外，像 http://bit.ly 这样的短网址是重定向派上用场的另一个例子：你在浏览器的地址栏中键入一个短URL，然后被重定向到一个长而笨重的URL的页面。\n此外，重定向不仅仅是为了方便。重定向是引导用户正确使用 Web 应用程序的基本工具。在用户进行带有副作用的操作(如创建或删除对象)后，最佳做法是重定向到另一个URL，以防止意外执行该操作两次。\n下面的代码示例演示通常是如何处理表单的，一个用户在成功提交表单后会被重定向到另一个URL：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from django import forms from django.http import HttpResponseRedirect from django.shortcuts import redirect, render def send_message(name, message): # Code for actually sending the message goes here class ContactForm(forms.Form): name = forms.CharField() message = forms.CharField(widget=forms.Textarea) def contact_view(request): # The request method \u0026#39;POST\u0026#39; indicates # that the form was submitted if request.method == \u0026#39;POST\u0026#39;: # 1 # Create a form instance with the submitted data form = ContactForm(request.POST) # 2 # Validate the form if form.is_valid(): # 3 # If the form is valid, perform some kind of # operation, for example sending a message send_message( form.cleaned_data[\u0026#39;name\u0026#39;], form.cleaned_data[\u0026#39;message\u0026#39;] ) # After the operation was successful, # redirect to some other page return redirect(\u0026#39;/success/\u0026#39;) # 4 else: # 5 # Create an empty form instance form = ContactForm() return render(request, \u0026#39;contact_form.html\u0026#39;, {\u0026#39;form\u0026#39;: form}) 此视图的目的是用来处理和显示用户发送消息时的联系人表单。它有几个步骤：\n首先，视图查看请求方法。当用户访问连接到此视图的URL时，浏览器执行GET请求 如果使用POST请求调用视图，则POST发送的数据将用于实例化ContactForm对象 如果表单有效，则将表单数据传递给send_message()。此函数与此上下文无关，因此此处未显示 发送消息后，视图返回到URL/SUCCESS/的重定向。这是我们重点关注的一步。为简单起见，这里对URL进行了硬编码（后面讲如何避免这种情况） 如果视图接收到一个GET请求(或者确切地说，任何一种不是POST请求的请求)，它将创建一个ContactForm实例并使用django.lowcuts.ender()来呈现Contact_form.html模板 如果用户现在刷新页面，则只重新加载/SUCCESS/URL。如果没有重定向，重新加载页面将重新提交表单并发送另一条消息 幕后：HTTP重定向的工作原理 现在你知道为什么重定向有意义了，但是它们是如何工作的呢？让我们快速回顾一下，当你在Web浏览器的地址栏中输入URL时会发生什么。\nHTTP 快速入门 假设你已经创建了一个带“HelloWorld”视图的Django应用程序，该视图处理路径/hello/。如果使用django开发服务器运行应用程序，完整的 url 将是 http://127.0.0.1:8000/hello/ 。\n当你在浏览器中输入该 URL 时，它将连接到IP地址为127.0.0.1的服务器的端口8000，并发送对路径 /hello/ 的 HTTP GET 请求。服务器返回 HTTP响应来回应。\nHTTP 是基于文本的，因此查看客户端和服务器之间的前后通信比较容易。你可以使用命令行工具 curl 加上选项 -include 查看包括标头的完整HTTP响应，如下所示：\n1 2 3 4 5 6 7 8 9 $ curl --include http://127.0.0.1:8000/hello/ HTTP/1.1 200 OK Date: Sun, 01 Jul 2018 20:32:55 GMT Server: WSGIServer/0.2 CPython/3.6.3 Content-Type: text/html; charset=utf-8 X-Frame-Options: SAMEORIGIN Content-Length: 11 Hello World HTTP 响应第一行为包含状态代码和状态信息状态行。后面跟着任意数量的 HTTP 标头。空行表示标头的结尾和响应正文的开头，正文为服务器发回的实际数据。\nHTTP 重定向状态码 重定向的响应是怎么样的呢？为简单起见，我们假设路径 /redirect/ 是经由 redirect_view() 处理，如果你访问 http://127.0.0.1:8000/redirect/ ，使用 curl 工具的话，命令行提示信息应该类似这样：\n1 2 3 4 5 6 7 8 $ curl --include http://127.0.0.1:8000/redirect/ HTTP/1.1 302 Found Date: Sun, 01 Jul 2018 20:35:34 GMT Server: WSGIServer/0.2 CPython/3.6.3 Content-Type: text/html; charset=utf-8 Location: /redirect-success/ X-Frame-Options: SAMEORIGIN Content-Length: 0 响应跟前面的例子很类似，只有少许的差别，重定向的响应：\n返回不同的状态代码(302 VS 200) 包含具有相对URL的位置标头（Location: /redirect-success/） 以空行结尾，因为重定向响应的正文为空 主要区别在于状态码。HTTP 规范具体规定如下：\n302(Found)状态代码指示目标资源暂时位于不同的URI下。由于有时可能会更改重定向，因此客户端应该继续为将来的请求使用有效的请求URI。服务器应在响应中生成一个位置标头字段，其中包含一个 URI 对不同 URI 的引用。客户端可以使用位置字段值进行自动重定向。来源\n也就是说，当服务器返回一个 302 状态码，它的意思是告诉客户端：“嘿，此刻，您正在寻找的东西可以在另一个位置找到”。\n规范中的一个关键短语是“可以使用位置字段值进行自动重定向”。这意味着您不能强制客户端加载另一个URL。客户端可以选择等待用户确认，也可以决定根本不加载URL。\n现在你已经了解了，重定向只是一个带有3xx状态代码和位置标头的HTTP响应。关键点是，HTTP重定向类似于通常的HTTP响应，但具有空主体、3xx状态代码和位置标头。要理解的就这么多，下面我们回到 Django 中，首先了解3xx状态码中的两种重定向，并了解它们在 Web 开发中的重要性。\n临时与永久重定向 HTTP标准指定了多个重定向状态代码，所有代码都在3xx范围内。两个最常见的状态代码是 301（永久重定向）和 302（Found/发现）。\n状态码302表示临时重定向。临时重定向是指：“此刻，你正在寻找的东西可以在另一个地址找到”。把它想象成一个商店的标志，上面写着：“我们的商店目前因装修而关闭。请到我们拐角处的另一家店”。由于这只是暂时的，所以下次购物时还是要检查原来的地址。\n注意：在 HTTP1.0 规范中，状态代码302的说明是临时重定向。HTTP 1.1中已更改为 Found 。\n顾名思义，永久重定向应该是永久的。永久重定向会告诉浏览器：“你要查找的内容不再位于此地址。它现在这个新地址上，再也不会在老地址上了”。永久重定向就像商店的标牌，上面写着“我们搬家了，我们的新店就在拐角处”。这个变化是永久性的，所以下次你想去商店的时候，你可以直接去新的地址。\n注意：永久重定向可能会产生一些意想不到的后果。在使用永久重定向之前请完成本指南，或者跳到“永久重定向是永久的”一节了解。\n浏览器在处理重定向时的行为大致差不多：当URL返回永久重定向响应时，此响应将被缓存。下一次浏览器遇到旧URL时，它会记住重定向并直接请求新地址。 缓存重定向可以节省不必要的请求，并提供更好、更快的用户体验。此外，临时重定向和永久重定向之间的区别会与搜索引擎优化相关。\nDjango 中的重定向 现在你知道了，重定向只是一个带有 3xx 状态代码和位置标头的 HTTP 响应。你完全可以手工从常规HttpResponse对象构建这样的响应：\n1 2 3 4 def hand_crafted_redirect_view(request): response = HttpResponse(status=302) response[\u0026#39;Location\u0026#39;] = \u0026#39;/redirect/success/\u0026#39; return response 这个在技术上是可行的，但它涉及到相当多的输入。\nHTTPResponseRedirect 类 使用 HttpResponseRedirect 类可以帮助我们减少输入, 它是 HttpResponse 的一个子类。 你只需要把需要重定向的 URL 作为第一个参数生成实例，初始化时会正确地匹配状态码和报文地址头：\n1 2 def redirect_view(request): return HttpResponseRedirect(\u0026#39;/redirect/success/\u0026#39;) 在命令行中使用 HttpResponseRedirect 类的演示：\n1 2 3 4 5 6 \u0026gt;\u0026gt;\u0026gt; from django.http import HttpResponseRedirect \u0026gt;\u0026gt;\u0026gt; redirect = HttpResponseRedirect(\u0026#39;/redirect/success/\u0026#39;) \u0026gt;\u0026gt;\u0026gt; redirect.status_code 302 \u0026gt;\u0026gt;\u0026gt; redirect[\u0026#39;Location\u0026#39;] \u0026#39;/redirect/success/\u0026#39; 还有一个用于永久重定向的类：HttpResponsePermanentRedirect 名字很直观。它的工作原理与 HttpResponseRedirect 相同，唯一的区别是它的状态代码为301(永久移动)。\n注意：在上面的示例中，重定向URL是硬编码的。对URL进行硬编码是一种不好的做法：如果URL发生了变化，你必须搜索所有的代码并改为正确的URL。下面我们来修复这个缺陷。\n我们可以使用 django.urls.reverse() 来构建URL，但是还有一种更方便的方法。\nredirect() 函数 为了使你的工作更轻松，Django提供了你在前面简介中已经看到的通用快捷函数: django.shortcuts.redirect()。\n可以使用以下命令调用此函数：\n带有get_absolute_url()方法的模型实例或任何其他对象。 URL或视图名称以及位置和/或关键字参数。 URL 它将采取适当的步骤将参数转换为URL并返回HTTPResponseRedirect。如果传递Permanent=True，它将返回HttpResponsePermanentRedirect的实例，从而导致永久重定向。\n下面有三个示例来说明不同的用法：\n传入模型： 1 2 3 4 5 from django.shortcuts import redirect def model_redirect_view(request): product = Product.objects.filter(featured=True).first() return redirect(product) redirect() 将调用 product.get_absolute_url() 并将结果用作重定向目标。如果给定的类(在本例中为Product)没有 get_absolute_url() 方法，则抛出 TypeError 异常。\n传入URL名称和参数： 1 2 3 4 5 6 from django.shortcuts import redirect def fixed_featured_product_view(request): ... product_id = settings.FEATURED_PRODUCT_ID return redirect(\u0026#39;product_detail\u0026#39;, product_id=product_id) redirect() 将尝试使用给定的参数来调换 URL。本例中假设你的 URL 模式中采用以下模式:\n1 path(\u0026#39;/product/\u0026lt;product_id\u0026gt;/\u0026#39;, \u0026#39;product_detail_view\u0026#39;, name=\u0026#39;product_detail\u0026#39;) 传入 URL: 1 2 3 4 from django.shortcuts import redirect def featured_product_view(request): return redirect(\u0026#39;/products/42/\u0026#39;) redirect() 将处理任何包含/或.的字符串。作为URL并将其用作重定向目标。\n基于类的视图 RedirectView 重定向 如果你的视图只返回一个重定向，那么可以使用基于类的视图django.views.generic.base.RedirectView。\n你可以通过定制 RedirectView 各种属性来满足你的需要。\n如果类具有.url属性，则它将用作重定向URL。字符串格式占位符将被替换为URL中的命名参数：\n1 2 3 4 5 6 7 8 9 10 11 12 13 # urls.py from django.urls import path from .views import SearchRedirectView urlpatterns = [ path(\u0026#39;/search/\u0026lt;term\u0026gt;/\u0026#39;, SearchRedirectView.as_view()) ] # views.py from django.views.generic.base import RedirectView class SearchRedirectView(RedirectView): url = \u0026#39;https://google.com/?q=%(term)s\u0026#39; URL模式定义了一个参数，用于在SearchRedirectView中构建重定向URL。应用程序中的路径 /search/kittens/ 将被重定向到 https://google.com/?q=kittens。\n你还可以将关键字参数url传递给urlPatterns中的as_view()，而不需通过重写 RedirectView 子类的 url 属性来实现：\n1 2 3 4 5 6 7 #urls.py from django.views.generic.base import RedirectView urlpatterns = [ path(\u0026#39;/search/\u0026lt;term\u0026gt;/\u0026#39;, RedirectView.as_view(url=\u0026#39;https://google.com/?q=%(term)s\u0026#39;)), ] 你同样可以通过重写 get_redirect_url() 来获得完全地自定义重定向行为：\n1 2 3 4 5 6 7 8 9 10 from random import choice from django.views.generic.base import RedirectView class RandomAnimalView(RedirectView): animal_urls = [\u0026#39;/dog/\u0026#39;, \u0026#39;/cat/\u0026#39;, \u0026#39;/parrot/\u0026#39;] is_permanent = True def get_redirect_url(*args, **kwargs): return choice(self.animal_urls) 这个基于类的视图将重定向到从 .animal_urls 中随机选择的 URL。\ndjango.views.generic.base.RedirectView 为定制提供了更多的挂钩。以下是完整的列表：\n.url 如果设置了此属性，则它应该是一个带有要重定向到的URL字符串。如果它包含像%(name)s这样的字符串格式占位符，它们将被传递给视图的关键字参数替代展开。\n.pattern_name 如果设置了此属性，则它应该是要重定向到的URL模式的名称。传递给视图的任何位置参数和关键字参数都用于URL模式互换。\n.permanent 如果此属性为 True，视图将返回永久重定向。默认情况下为 False。\n.query_string 如果此属性为 True，则视图将任何提供的查询字符串附加到重定向URL。如果为false(默认值)，则废弃查询字符串。\nget_redirect_url(*args, **kwargs) 此方法负责构建重定向URL。如果此方法不返回任何值，视图将返回 410 Gone 状态。\n默认实现首先检查.url。它将.url视为“旧式”格式字符串，使用传递给视图的任何命名URL参数来展开任何命名格式说明符。如果未设置.url，则检查是否设置了.mode_name。如果是，它将使用它来互换它接收到的任何位置参数和关键字参数的URL。你可以通过覆盖此方法以任何方式更改该行为。只需确保它返回一个包含URL字符串。\n注意：基于类的视图是一个强大的概念，但是比较难理解它。与常规的基于函数的视图不同，在常规的基于函数的视图中，代码流程相对简单，而基于类的视图是由混合和基类组成的复杂层次结构组成的。\n要理解基于类的视图，一个很好的工具是基于类的网站视图。\n通过这个简单的基于函数的视图，你可以实现从面的示例中RandomAnimalView的功能：\n1 2 3 4 5 6 from random import choice from django.shortcuts import redirect def random_animal_view(request): animal_urls = [\u0026#39;/dog/\u0026#39;, \u0026#39;/cat/\u0026#39;, \u0026#39;/parrot/\u0026#39;] return redirect(choice(animal_urls)) 正如代码，基于类的方法在增加一些隐藏的复杂性的同时并没有提供任何明显的好处。这就提出了一个问题：什么时候应该使用RedirectView？\n如果你想在urls.py中直接添加重定向，那么使用RedirectView是有意义的。但是，如果你发现自己正在重写get_redirect_url，那么基于函数的视图可能更容易理解，并且对于未来的功能扩展也更灵活。\n高级用法 一旦知道使用 django.shortcuts.redirect()，那么重定向到一个不同的URL就非常简单了。但是有几个高级用例并不那么明显。 通过重定向传递参数。 有时，你希望将一些参数传递给要重定向到的视图。最佳选择是在重定向URL的查询字符串中传递数据，这意味着重定向的URL类似于：http://example.com/redirect-path/?parameter=value 假设你希望从 some_view() 重定向到 product_view()，还要传递一个可选的参数：\n1 2 3 4 5 6 7 8 9 10 11 12 13 from django.urls import reverse from urllib.parse import urlencode def some_view(request): ... base_url = reverse(\u0026#39;product_view\u0026#39;) # 1 /products/ query_string = urlencode({\u0026#39;category\u0026#39;: category.id}) # 2 category=42 url = \u0026#39;{}?{}\u0026#39;.format(base_url, query_string) # 3 /products/?category=42 return redirect(url) # 4 def product_view(request): category_id = request.GET.get(\u0026#39;category\u0026#39;) # 5 # Do something with category_id 这段代码有点多，我们分步来探讨：\n首先，使用 django.urls.verse() 获取到 product_view() 的URL映射。 接下来，你必须构建查询字符串。这是问号之后的部分。建议此时使用 urllib.urlparse.urlcode()，因为它正确处理任何特殊字符的编码。 现在使用问号将 base_ur l和 query_string 连接起来。格式字符串可以很好地实现这一点。 最后，将 url 传递给 django.shortcuts.redirect() 或某个重定向响应类。 在重定向目标 product_view() 中，该参数将在request.GET字典中可用。而参数可能会丢失，因此应使用requests.GET.get('category')而不是requests.GET['category']。当参数不存在时，前者不返回任何值，而后者将引发异常。\n注意：请确保验证从查询字符串读取的任何数据。看起来这些数据是在你自己的控制之下，因为是你创建了重定向URL。\n实际上，重定向可以被用户操作，如同任何其他的用户输入那样不能被信任。如果没有正确的验证，攻击者可能会获得未经授权的访问。\n特殊重定向码 Django 为状态代码 301 和 302 提供 HTTP 响应类。这些应该涵盖了大多数用例，但是如果你必须返回状态代码303、307或308，那么你可以很容易地创建自己的响应类。只需简单地继承 HttpResponseRedirectBase 并在子类中重写STATUS_CODE属性：\n1 2 class HttpResponseTemporaryRedirect(HttpResponseRedirectBase): status_code = 307 或者，你可以使用 django.shortcuts.redirect() 方法来创建响应对象并更改返回值。当你有要重定向到的视图、URL或模型的名字时，此方法可行：\n1 2 3 4 def temporary_redirect_view(request): response = redirect(\u0026#39;success_view\u0026#39;) response.status_code = 307 return response 注意：实际上还有第三个类，它的状态代码在3xx范围内：HttpResponseNotModified，它的状态代码304。它指示URL的内容尚未更改，客户端可以使用缓存版本。\n有人可能会说，304并未修改响应重定向到一个URL的缓存版本，但这有点牵强。因此，它不再列在 HTTP 标准的 “重定向3xx” 部分中。\n陷阱 重定向到并不会重定向的位置 django.shortcuts.redirect() 的简单性可能具有欺骗性。函数本身不执行重定向：它只返回一个重定向响应对象。你必须从视图(或在中间件中)返回此响应对象。否则，不会产生重定向。\n但是，即使你知道仅仅调用 redirect() 是不够的，也很容易进行简单的重构时将此错误引入工作的应用程序中。这里有一个例子来说明这一点。\n假设我们正在构建一个商店，并且有一个负责显示产品的视图。如果产品不存在，则重定向到主页：\n1 2 3 4 5 6 def product_view(request, product_id): try: product = Product.objects.get(pk=product_id) except Product.DoesNotExist: return redirect(\u0026#39;/\u0026#39;) return render(request, \u0026#39;product_detail.html\u0026#39;, {\u0026#39;product\u0026#39;: product}) 现在，你需要添加第二个视图来显示产品的客户评论。如果产品不存在它还应该重定向到主页，因此作为第一步，你可以将此功能从 product_view() 提取到辅助函数 get_product_or_redirect() 中：\n1 2 3 4 5 6 7 8 9 def get_product_or_redirect(product_id): try: return Product.objects.get(pk=product_id) except Product.DoesNotExist: return redirect(\u0026#39;/\u0026#39;) def product_view(request, product_id): product = get_product_or_redirect(product_id) return render(request, \u0026#39;product_detail.html\u0026#39;, {\u0026#39;product\u0026#39;: product}) 不幸的是，在重构之后，重定向不再起作用。 redirect() 的结果是从 get_product_or_redirect() 返回的，但 product_view() 不没有返回它。它将被传递给模板。根据在 product_detail.html模板中使用 product 变量的方式，这可能不会导致错误消息，而只是显示空值。\n重定向循环 在处理重定向时，你可能会意外地创建一个重定向循环，方法是让URL A返回指向URL B的重定向，而URL B返回到URL A的重定向，以此类推。大多数HTTP客户端检测到这种重定向循环，并在多次请求后显示错误消息。\n不幸的是，这种错误可能很难发现，因为服务器端的一切看起来都很好。除非你的用户抱怨此问题，否则唯一可能出现问题的迹象是，你收到了来自一个客户端的多个请求，这些请求都会导致快速连续的重定向响应，但没有一个状态为200 OK的响应。\n以下是重定向循环的一个简单示例：\n1 2 3 4 5 def a_view(request): return redirect(\u0026#39;another_view\u0026#39;) def another_view(request): return redirect(\u0026#39;a_view\u0026#39;) 这个例子说明了原理，但过于简单化了。在现实生活中遇到的重定向循环可能更难发现。让我们来看一个更详细的例子：\n1 2 3 4 5 6 7 8 9 10 11 12 def featured_products_view(request): featured_products = Product.objects.filter(featured=True) if len(featured_products == 1): return redirect(\u0026#39;product_view\u0026#39;, kwargs={\u0026#39;product_id\u0026#39;: featured_products[0].id}) return render(request, \u0026#39;featured_products.html\u0026#39;, {\u0026#39;product\u0026#39;: featured_products}) def product_view(request, product_id): try: product = Product.objects.get(pk=product_id, in_stock=True) except Product.DoesNotExist: return redirect(\u0026#39;featured_products_view\u0026#39;) return render(request, \u0026#39;product_detail.html\u0026#39;, {\u0026#39;product\u0026#39;: product}) featured_products_view() 获取所有特定的产品，也就是说，Product 实例的 .featured 属性被设置为True。如果只有一个特定产品存在，它将直接重定向到 product_view()。否则，它将用 featured_products 查询集渲染一个模板。\nproduct_view 与上一节看起来很相似，但它有两个微小的区别：\n该视图试图获取一个库存产品，将.in_stock设置为True来指示该产品。 如果没有产品库存，视图将重定向到 featured_products_view()。 这种逻辑工作的不错，直到你的商店成为自己成功的牺牲品，而你目前拥有的某种特色产品脱销为止。如果你将.in_stock设置为 False，但忘记将.featured也设置为False，那么任何访问 feature_product_view() 的访问者都将被困在重定向循环中。\n没有防止此类错误的万全方法，一个好的起点是检查要重定向到的视图是否使用了重定向本身。\n永久重定向是永久的 永久重定向可能类似于糟糕的纹身：在当时，它们可能看起来是个好主意，但一旦你意识到它们是一个错误，就很难摆脱它们。\n当浏览器收到URL的永久重定向响应时，它会无限期地缓存此响应。你将来任何时候再请求旧的 URL，浏览器都不会再费事地加载它而是直接加载新URL。\n指示浏览器重新加载曾经返回过永久重定向的URL可能会非常困难。Google Chrome在缓存重定向方面尤为激进。\n为什么这会成为个问题？\n假设你希望使用 Django 构建 Web 应用程序。你可以在 myawesomedjangowebapp.com 注册你的域名。作为第一步，你可以在https://myawesomedjangowebapp.com/blog/ 安装了一个博客应用程序，并构建了邮件列表。\n你的站点 https://myawesomedjangowebapp.com/ 的主页仍在建设中，因此你将主页重定向到 https://myawesomedjangowebapp.com/blog/ 。之所以决定使用永久重定向，是因为听说永久重定向是缓存的，缓存会让访问变得更快，因为速度是 Google 搜索结果排名的一个因素，所以速度越快越好。\n结果，你不仅是一位优秀的开发人员，而且还是一位才华横溢的作家。你的博客变得流行起来，你创建的邮件列表也不断增长。几个月后，你的应用程序准备就绪。它现在有了一个闪亮的主页，你决定移除重定向。\n你发送一封带有特殊折扣码的通知电子邮件到你已经相当大的运营邮件列表。你靠坐在电脑前，等待注册通知的滚动。\n可怕的是，你邮箱里充满了困惑的访问者发来的信息，他们想要访问你的应用程序，但总是被重定向到你的博客。\n什么情况？当你的博客读者访问 https://myawesomedjangowebapp.com/ 时，重定向仍然处于活动状态，将会跳转到 https://myawesomedjangowebapp.com/blog/ 。因为这是一个永久的重定向，所以这个URL会缓存在他们的浏览器中。\n当他们点击你发布公告邮件中的链接时，他们的浏览器不会查找你的新主页而会直接访问你的博客。此时你不是在庆祝你的项目成功启动，而是忙于指导你的用户如何通过 chrome://net-internals 来重置其浏览器的缓存。\n永久重定向的永久性质也会在本地计算机上开发时给你制造麻烦。让我们回到为 myawesomedjangowebapp.com 实现永久重定向的时刻。\n你启动开发服务器并打开 http://127.0.0.1:8000/ 。如预期那样，应用程序将你的浏览器访问重定向到 http://127.0.0.1:8000/blog/ 。当你对项目感到满意后，你关闭开发服务器去吃个午饭。\n当你吃饱回来，准备处理一些客户端的工作，需要对主页进行一些简单的更改，因此你启动开发服务器，打开客户端，但是异常情况发生了。这是怎么回事？主页被破坏了，它现在返回404！忙碌一下午，你过了一段时间才注意到你正被重定向到项目中已经不存在的 http://127.0.0.1:8000/blog/ 。对于浏览器来说，URL http://127.0.0.1:8000/ 现在是否服务于一个完全不同的应用程序并不重要。最重要的是这个 URL 曾经返回到http://127.0.0.1:8000/blog/ 的永久重定向。\n从这个故事的启示是，你计划今后不再打算再次使用的网址才安排永久重定向。永久重定向的地方，你必须意识到它们的后果。即使你确信你确实需要永久重定向，最好还是先实现临时重定向，并且只有在你100%确定一切正常工作后才切换到永久重定向。\n未经验证的重定向可能导致安全问题 从安全的角度来看，重定向是一种相对安全的技术。攻击者无法通过重定向攻击网站。毕竟，重定向只是重定向到一个URL，这个URL攻击者只需在浏览器地址栏中键入即可。\n但是，如果你使用某种类型的用户输入(如URL参数)，重定向URL时没有将其正确验证，则攻击者可能会利用此输入进行网络钓鱼攻击。这种重定向称为开放重定向或未经验证的重定向。\n有一些合法的重定向到的URL用例来自用户的输入。Django的登录视图就是一个很好的例子。它接受一个URL参数Next，该参数包含用户登录后重定向到的页面的URL。要在登录后将用户重定向到其配置文件，URL可能如下所示：\nhttps://myawesomedjangowebapp.com/login/?next=/profile/\nDjango确实验证了下一个参数，但是这里我们假设它没有验证下一个参数。在没有验证的情况下，攻击者可以创建URL，将用户重定向到其控制下的网站，例如：\nhttps://myawesomedjangowebapp.com/login/?next=https://myawesomedjangowebapp.co/profile/\n然后，myawesomedjangowebapp.co 网站可能会显示一条错误消息，并诱使用户再次输入他们的凭据。\n避免开放重定向的最佳方法是在构建重定向URL时不使用任何用户输入。\n如果不能确定重定向URL是否安全，可以使用函数 django.utils.http.is_safe_url() 对其进行验证。文档字符串很好地解释了它的用法：\nis_safe_url(url, host=None, allowed_hosts=None, require_https=False) 如果url是安全重定向(即不会指向其他主机并使用安全方案)，则返回True。空 url 总是返回 False。如果 require_https 为 True（默认为 False），则只有 https 被视为有效方案。\n我们来看一些例子。\n相对URL被认为是安全的：\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; # Import the function first. \u0026gt;\u0026gt;\u0026gt; from django.utils.http import is_safe_url \u0026gt;\u0026gt;\u0026gt; is_safe_url(\u0026#39;/profile/\u0026#39;) True 通常认为指向其他主机的URL不安全：\n1 2 \u0026gt;\u0026gt;\u0026gt; is_safe_url(\u0026#39;https://myawesomedjangowebapp.com/profile/\u0026#39;) False 如果在 ALLOWED_HOSTS中 提供了指向另一个主机的URL，则该URL被认为是安全的：\n1 2 3 \u0026gt;\u0026gt;\u0026gt; is_safe_url(\u0026#39;https://myawesomedjangowebapp.com/profile/\u0026#39;, ... allowed_hosts={\u0026#39;myawesomedjangowebapp.com\u0026#39;}) True 如果参数 require_https 为True，则使用 http 方案的URL被视为不安全：\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; is_safe_url(\u0026#39;http://myawesomedjangowebapp.com/profile/\u0026#39;, ... allowed_hosts={\u0026#39;myawesomedjangowebapp.com\u0026#39;}, ... require_https=True) False 总结 到此终于结束了关于HTTP重定向的 Django 指南。现在你已经了解了重定向的各个方面，从HTTP协议的低级细节到Django中处理它们的高级方式。\n你了解了HTTP重定向在幕后看起来如何，不同的状态代码是什么，以及永久重定向和临时重定向有何不同。这些知识并不是Django所特有的，对于任何语言的Web开发都是有价值的。\n现在，你可以使用 Django 执行重定向，可以使用重定向响应类 HttpResponseRedirect 和 HttpResponsePermanentRedirect，也可以使用方便函数django.lowcuts.redirect()。你看到了一些高级用例的解决方案，并知道如何避免常见的陷阱。\n如果你有任何关于HTTP重定向的问题和建议，请在下面留言，同时，祝你重定向愉快！\n","permalink":"https://luenci.com/en/posts/django-%E9%87%8D%E5%AE%9A%E5%90%91%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/","summary":"\u003cblockquote\u003e\n\u003cp\u003e原文转载自：https://www.jianshu.com/p/5e322fb5b61c（简书：\u003ca href=\"https://www.jianshu.com/u/a4b0307eac4d\"\u003e爱吃鱼de大猫\u003c/a\u003e）\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e当你使用 Django 框架构建 Python Web 应用程序时，在某些时候需要将用户从一个URL重定向到另一个URL。本指南将提供 HTTP 重定向所需要了解的所有知识，以及在 Django 中该如何处理。\u003c/p\u003e","title":"Django重定向指南（转载）"},{"content":"IaaS、PaaS、SaaS 的区别 基础设施(infrastructure)、平台(platform)和软件(software)\n其实就是云计算的三个分层，基础设施在最下端，平台在中间，软件在顶端，分别是分别是Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)\nIaaS: Infrastructure-as-a-Service(基础设施即服务) 有了IaaS，你可以将硬件外包到别的地方去。IaaS公司会提供场外服务器，存储和网络硬件，你可以租用。节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。\n一些大的IaaS公司包括Amazon, Microsoft, VMWare, Rackspace和Red Hat.不过这些公司又都有自己的专长，比如Amazon和微软给你提供的不只是IaaS，他们还会将其计算能力出租给你来host你的网站。\nPaaS: Platform-as-a-Service(平台即服务) 第二层就是所谓的PaaS，某些时候也叫做中间件。你公司所有的开发都可以在这一层进行，节省了时间和资源。PaaS公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统。这节省了你在硬件上的费用，也让分散的工作室之间的合作变得更加容易。网页应用管理，应用设计，应用虚拟主机，存储，安全以及应用开发协作工具等。\n一些大的PaaS提供者有Google App Engine,Microsoft Azure，Force.com,Heroku，Engine Yard。最近兴起的公司有AppFog,Mendix和Standing Cloud.\nSaaS: Software-as-a-Service(软件即服务) 第三层也就是所谓SaaS。这一层是和你的生活每天接触的一层，大多是通过网页浏览器来接入。任何一个远程服务器上的应用都可以通过网络来运行，就是SaaS了。 docker知识 Docker 是世界领先的软件容器平台 Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 的cgroup，namespace，以及AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进 程，因此也称其为容器。Docker最初实现是基于 LXC. Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。 用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。 物理机 物理机，对应采购的服务器设备，又叫裸设备，bare metal，比如普通的主机。笔记本电脑，台式电脑都可以叫物理机。 虚拟机 虚拟机，与现在流行的“云计算”的概念的有着紧密联系，虚拟机的概念在IaaS层，即基础设施即服务部分，可以自行学习一下。为了让全人类能够像使用自来水、电一样使用计算资源，我们需要在几百上千台物理机上部署虚拟化软件，如vmware等等，使得他们的表现就像一台巨大的计算机。同时它还具有灵活性和解耦性，你可以在一台物理机上部署10台虚拟机，使得一台物理机的表现就像10台性能略差的服务器，当你不需要他们时，你又可以随时的回收资源重新分配。 容器 一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。\n容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。 容器化软件适用于基于Linux和Windows的应用，在任何环境中都能够始终如一地运行。 容器赋予了软件独立性 ，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。 容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。\nDocker思想 集装箱 标准化： ①运输方式 ② 存储方式 ③ API接口 隔离 Docker容器的特点 轻量 在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。\n标准 Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。\n安全 Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。\nDocker优势 一致的运行环境 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题 更快速的启动时间 可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。 隔离性 避免公用的服务器，资源会容易受到其他用户的影响。 弹性伸缩，快速扩展 善于处理集中爆发的服务器使用压力； 迁移方便 可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。 持续交付和部署 使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。 Docker基本概念 Docker 包括三个基本概念\n镜像（Image） 容器（Container） 仓库（Repository） 镜像（Image）—— 一个特殊的文件系统 操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而Docker 镜像（Image），就相当于是一个 root 文件系统。 Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。 Docker 设计时，就充分利用 Union FS的技术，将其设计为 分层存储的架构 。 镜像实际是由多层文件系统联合组成。 镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。 分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像 容器（Container)——镜像运行时的实体 镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。 容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。 按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据 ，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， 使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。 仓库（Repository）——集中存放镜像文件的地方 镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。 一个 Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。 通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过\u0026lt;仓库名\u0026gt;:\u0026lt;标签\u0026gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。 这里补充一下Docker Registry 公开服务和私有 Docker Registry的概念： Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。 最常使用的 Registry 公开服务是官方的 Docker Hub ，这也是默认的 Registry，并拥有大量的高质量的官方镜像，网址为：hub.docker.com/ 。在国内访问Docker Hub 可能会比较慢国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 时速云镜像库、网易云镜像服务、DaoCloud 镜像市场、阿里云镜像库等。 除了使用公开服务外，用户还可以在 本地搭建私有 Docker Registry 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。 Build, Ship, and Run Build（构建镜像） ： 镜像就像是集装箱包括文件以及运行环境等等资源。 Ship（运输镜像） ：主机和仓库间运输，这里的仓库就像是超级码头一样。 Run （运行镜像） ：运行的镜像就是一个容器，容器就是运行程序的地方。 ​ Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将Docker称为码头工人或码头装卸工，这和Docker的中文翻译搬运工人如出一辙。\n","permalink":"https://luenci.com/en/posts/docker%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"iaaspaassaas-的区别\"\u003e\u003ccode\u003eIaaS\u003c/code\u003e、\u003ccode\u003ePaaS\u003c/code\u003e、\u003ccode\u003eSaaS\u003c/code\u003e 的区别\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e基础设施(infrastructure)、平台(platform)和软件(software)\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e其实就是云计算的三个分层，基础设施在最下端，平台在中间，软件在顶端，分别是分别是\u003cstrong\u003eInfrastructure-as-a-Service\u003c/strong\u003e(\u003ccode\u003eIaaS\u003c/code\u003e)，\u003cstrong\u003ePlatform-as-a-Service\u003c/strong\u003e(\u003ccode\u003ePaaS\u003c/code\u003e)，\u003cstrong\u003eSoftware-as-a-Service\u003c/strong\u003e(\u003ccode\u003eSaaS\u003c/code\u003e)\u003c/p\u003e","title":"docker相关知识学习"},{"content":"基本概念 1.静态资源 ​\t一旦准备好资源，不在需要经常变化的资源.由于该资源不需要经常变化，所以可以提前准备.比如png/jpg/css/js等文件\n2.动态资源 ​\t和静态资源相反，这种资源会经常变化.比如，我们要编写一个电商网站，我们无法预测用户在浏览商品时选择什么样的条件。 根据用户选择条件不同，我们给用户提供可供选择的商品就不同.这种资源无法提前准备。\n3.模板文件 ​\t在用户搜索各种商品的时候，大家是否发现虽然大家的条件不同，但是显示商品的网页中除了那些商品信息整个网页的结构/布局几乎是一模一样的. ​\t而模板文件就是网页中通用的结构构成的一个页面.这个页面中不含有任何用户需要查看的数据，当用户查询数据的时候会将最终的结果放到模板中形成用户真正需要的页面。 ​\t这就好比，生活中一个毛坯房可以装饰上不同的风格.我们把模板文件转化为用户真正看到的网页的过程就称为模板替换.\n通信规范 服务器和浏览器之间通信使用HTTP协议 同理，框架和web服务器之间进行通信也需要一个协议为了简单明了，一个简单的协议（例子）：\n1、web服务器在接收到浏览器的动态套源请求的时候会将请求报文请求切割拆分为键值对放到一个字典中 2、web服务器调用框架提供的方法执行框架的功能并且传给框架一个字典 3、框架通过字典取出用户请求根据请求产生处理状态/响应头信息/响应体 4、框架通过返回值将处理状态/响应头信息/响应体给服务器，完成一次动态资源请求的过程 Flask程序运行过程 1.当客户端想要获取资源时，一般会通过浏览器发起HTTP请求。\n2.此时，Web服务器会把来自客户端的所有请求都交给Flask程序实例\n3.程序实例使用Werkzeug来做路由分发（URL请求和视图函数之间的对应关系）。\n4.根据每个URL请求，找到具体的视图函数并进行调用。\n在Flask程序中，路由的实现一般是通过程序实例的装饰器实现。 5.Flask调用视图函数后，可以返回两种内容：\n字符串内容：将视图函数的返回值作为响应的内容，返回给客户端（浏览器） HTML模版内容：获取到数据后，把数据传入HTML模板文件中，板引擎负责渲染HTTP响应数据，然后返回响应数据给客户端（浏览器） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from flask import Flask, render_template # 创建flask应用实例 app = Flask(__name__) # 定义路由及是视图函数（装饰器路由） # 路由默认只支持GET请求方式，如需要支持别的请求需要添加 @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#34;POST\u0026#34;]) def index(): # return \u0026#34;Hello Flask\u0026#34;z return render_template(\u0026#34;index.html\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39; app.run() 路由传参 1 2 3 4 5 6 7 8 9 # 使用一个视图函数 来显示不同用户的订单信息 # \u0026lt;\u0026gt;路由定义的参数，\u0026lt;\u0026gt;内需要起个名字 # int：限定参数类型为int类型，其他的不解析 # -大致原理是将参数强转为int，如果成功，则可以进行路由匹配 # -如果参数无法转换成功，就无法匹配该路由 @app.route(\u0026#39;/orders/\u0026lt;int:order_id\u0026gt;\u0026#39;) def get_order_id(order_id): print(type(order_id)) return \u0026#39;order_id %s\u0026#39; % order_id Jinja2模板引擎 模板 在前面的示例中，视图函数的主要作用是生成请求的响应，这是最简单的请求。实际上，视图函数有两个作用：处理业务逻辑和返回响应内容。在大型应用中，把业务逻辑和表现内容放在一起，会增加代码的复杂度和维护成本。本节学到的模板，它的作用即是承担视图函数的另一个作用，即返回响应内容。 模板其实是一个包含响应文本的文件，其中用占位符（变量）表示动态部分，告诉模板引擎其具体的值需要从使用的数据中获取\n使用真实值替换变量，再返回最终得到的字符串，这个过程称为“渲染”\nFlask是使用Jinja2这个模板引擎来渲染模板\n使用模板的好处：\n视图函数只负责业务逻辑和数据处理（业务逻辑方面）\n而模板则取到视图函数的数据结果进行展示（视图展示方面）\n代码结构清晰，耦合度低\nJinJia2 两个概念：\nJinja2：是Python下一个被广泛应用的模板引擎，是由Python实现的模板语言，他的设计思想来源于Django的模板引擎，并扩展了其语法和一系列强大的功能，其是Flask内置的模板语言。\n模板语言：是一种被设计来自动生成文档的简单文本格式，在模板语言中，一般都会把一些变量传给模板，替换模板的特定位置上预先定义好的占位变量名。\n渲染模版函数\nFlask提供的render_template 函数封装了该模板引擎\nrender_template函数的第一个参数是模板的文件名，后面的参数都是键值对，表示模板中变量对应的真实值。\n1 2 3 4 @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#34;POST\u0026#34;]) def index(): name = \u0026#39;Luenci\u0026#39; return render_template(\u0026#34;index.html\u0026#34;, name=name) 使用方法 变量代码块 用 来表示变量名， 这种 语法叫做变量代码块 )\n字典和列表的使用 控制代码块 过滤器 Web表单 web表单是web应用程序的基本功能。 它是HTML页面中负责数据采集的部件。表单有三个部分组成：表单标签、表单域、表单按钮。表单允许用户输入数据，负责HTML页面数据采集，通过表单将用户输入的数据提交给服务器。 在Flask中，为了处理web表单，我们一般使用Flask-WTF扩展，它封装了WTForms，并且它有验证表单数据的功能 字段对象 说明 StringField 文本字段 TextAreaField 多行文本字段 PasswordField 密码文本字段 HiddenField 隐藏文件字段 DateField 文本字段，值为 datetime.date 文本格式 DateTimeField 文本字段，值为 datetime.datetime 文本格式 IntegerField 文本字段，值为整数 DecimalField 文本字段，值为decimal.Decimal FloatField 文本字段，值为浮点数 BooleanField 复选框，值为True 和 False RadioField 一组单选框 SelectField 下拉列表 SelectMutipleField 下拉列表，可选择多个值 FileField 文件上传字段 SubmitField 表单提交按钮 FormField 把表单作为字段嵌入另一个表单 FieldList 一组指定类型的字段 WTForms常用验证函数 验证函数 说明 DataRequired 确保字段中有数据 EqualTo 比较两个字段的值，常用于比较两次密码输入 Length 验证输入的字符串长度 NumberRange 验证输入的值在数字范围内 URL 验证URL AnyOf 验证输入值在可选列表中 NoneOf 验证输入值不在可选列表中 使用 Flask-WTF 需要配置参数 SECRET_KEY\nCSRF_ENABLED是为了CSRF（跨站请求伪造）保护。 SECRET_KEY用来生成加密令牌，当CSRF激活的时候，该设置会根据设置的密匙生成加密令牌。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 设置密匙 app.secret_key = \u0026#39;luenci\u0026#39; @app.route(\u0026#39;/login.html\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def login(): if request.method == \u0026#34;POST\u0026#34;: # 获取表单的数据 username = request.form.get(\u0026#39;username\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;) print(username, password) if username == \u0026#39;\u0026#39;: flash(\u0026#39;请填写邮箱\u0026#39;)\telif password == \u0026#39;\u0026#39;: flash(\u0026#39;请设置密码\u0026#39;) else: return \u0026#39;sucess\u0026#39; return render_template(\u0026#34;login_demo.html\u0026#34;) Flask-WTF实现表单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from flask_wtf import FlaskForm # 导入文本字段，密码字段，和提交按钮 from wtforms import StringField, PasswordField, SubmitField # 创建表单类 class LoginFrom(FlaskForm): username = StringField(\u0026#34;用户名\u0026#34;) password1 = PasswordField(\u0026#34;密码\u0026#34;) password2 = PasswordField(\u0026#34;确认密码\u0026#34;) submit = SubmitField(\u0026#34;提交\u0026#34;) @app.route(\u0026#39;/form\u0026#39;, methods=[\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;]) def form_demo(): # 创建表单实例 form_login = LoginFrom() return render_template(\u0026#34;login_demo.html\u0026#34;, form=form_login) ","permalink":"https://luenci.com/en/posts/flask%E6%A1%86%E6%9E%B6/","summary":"\u003ch1 id=\"基本概念\"\u003e基本概念\u003c/h1\u003e\n\u003ch2 id=\"1静态资源\"\u003e1.静态资源\u003c/h2\u003e\n\u003cp\u003e​\t一旦准备好资源，不在需要经常变化的资源.由于该资源不需要经常变化，所以可以提前准备.比如\u003ccode\u003epng/jpg/css/js\u003c/code\u003e等文件\u003c/p\u003e\n\u003ch2 id=\"2动态资源\"\u003e2.动态资源\u003c/h2\u003e\n\u003cp\u003e​\t和静态资源相反，这种资源会经常变化.比如，我们要编写一个电商网站，我们无法预测用户在浏览商品时选择什么样的条件。\n根据用户选择条件不同，我们给用户提供可供选择的商品就不同.这种资源无法提前准备。\u003c/p\u003e","title":"flask框架学习"},{"content":"git config 配置 Git 的相关参数。\nGit 一共有3个配置文件：\n仓库级的配置文件：在仓库的 .git/.gitconfig，该配置文件只对所在的仓库有效。 全局配置文件：Mac 系统在 ~/.gitconfig，Windows 系统在 C:\\Users\\\u0026lt;用户名\u0026gt;\\.gitconfig。 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 /usr/local/git）的 etc 文件夹中的 gitconfig。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # 查看配置信息 # --local：仓库级，--global：全局级，--system：系统级 $ git config \u0026lt;--local | --global | --system\u0026gt; -l # 查看当前生效的配置信息 $ git config -l # 编辑配置文件 # --local：仓库级，--global：全局级，--system：系统级 $ git config \u0026lt;--local | --global | --system\u0026gt; -e # 添加配置项 # --local：仓库级，--global：全局级，--system：系统级 $ git config \u0026lt;--local | --global | --system\u0026gt; --add \u0026lt;name\u0026gt; \u0026lt;value\u0026gt; # 获取配置项 $ git config \u0026lt;--local | --global | --system\u0026gt; --get \u0026lt;name\u0026gt; # 删除配置项 $ git config \u0026lt;--local | --global | --system\u0026gt; --unset \u0026lt;name\u0026gt; # 配置提交记录中的用户信息 $ git config --global user.name \u0026lt;用户名\u0026gt; $ git config --global user.email \u0026lt;邮箱地址\u0026gt; # 更改Git缓存区的大小 # 如果提交的内容较大，默认缓存较小，提交会失败 # 缓存大小单位：B，例如：524288000（500MB） $ git config --global http.postBuffer \u0026lt;缓存大小\u0026gt; # 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态 $ git config --global color.ui true # 配置可以缓存密码，默认缓存时间15分钟 $ git config --global credential.helper cache # 配置密码的缓存时间 # 缓存时间单位：秒 $ git config --global credential.helper \u0026#39;cache --timeout=\u0026lt;缓存时间\u0026gt;\u0026#39; # 配置长期存储密码 $ git config --global credential.helper store git clone 从远程仓库克隆一个版本库到本地。\n1 2 3 4 5 6 7 8 # 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下 $ git clone \u0026lt;远程仓库的网址\u0026gt; # 指定本地仓库的目录 $ git clone \u0026lt;远程仓库的网址\u0026gt; \u0026lt;本地目录\u0026gt; # -b 指定要克隆的分支，默认是master分支 $ git clone \u0026lt;远程仓库的网址\u0026gt; -b \u0026lt;分支名称\u0026gt; \u0026lt;本地目录\u0026gt; git init 初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。\n1 2 # 初始化本地仓库，在当前目录下生成 .git 文件夹 $ git init git status 查看本地仓库的状态。\n1 2 3 4 5 6 7 # 查看本地仓库的状态 $ git status # 以简短模式查看本地仓库的状态 # 会显示两列，第一列是文件的状态，第二列是对应的文件 # 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中 $ git status -s git remote 操作远程库。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 列出已经存在的远程仓库 $ git remote # 列出远程仓库的详细信息，在别名后面列出URL地址 $ git remote -v $ git remote --verbose # 添加远程仓库 $ git remote add \u0026lt;远程仓库的别名\u0026gt; \u0026lt;远程仓库的URL地址\u0026gt; # 修改远程仓库的别名 $ git remote rename \u0026lt;原远程仓库的别名\u0026gt; \u0026lt;新的别名\u0026gt; # 删除指定名称的远程仓库 $ git remote remove \u0026lt;远程仓库的别名\u0026gt; # 修改远程仓库的 URL 地址 $ git remote set-url \u0026lt;远程仓库的别名\u0026gt; \u0026lt;新的远程仓库URL地址\u0026gt; git branch 操作 Git 的分支命令。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 列出本地的所有分支，当前所在分支以 \u0026#34;*\u0026#34; 标出 $ git branch # 列出本地的所有分支并显示最后一次提交，当前所在分支以 \u0026#34;*\u0026#34; 标出 $ git branch -v # 创建新分支，新的分支基于上一次提交建立 $ git branch \u0026lt;分支名\u0026gt; # 修改分支名称 # 如果不指定原分支名称则为当前所在分支 $ git branch -m [\u0026lt;原分支名称\u0026gt;] \u0026lt;新的分支名称\u0026gt; # 强制修改分支名称 $ git branch -M [\u0026lt;原分支名称\u0026gt;] \u0026lt;新的分支名称\u0026gt; # 删除指定的本地分支 $ git branch -d \u0026lt;分支名称\u0026gt; # 强制删除指定的本地分支 $ git branch -D \u0026lt;分支名称\u0026gt; git checkout 检出命令，用于创建、切换分支等。\n1 2 3 4 5 6 7 8 9 10 11 12 # 切换到已存在的指定分支 $ git checkout \u0026lt;分支名称\u0026gt; # 创建并切换到指定的分支，保留所有的提交记录 # 等同于 \u0026#34;git branch\u0026#34; 和 \u0026#34;git checkout\u0026#34; 两个命令合并 $ git checkout -b \u0026lt;分支名称\u0026gt; # 创建并切换到指定的分支，删除所有的提交记录 $ git checkout --orphan \u0026lt;分支名称\u0026gt; # 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响 $ git checkout \u0026lt;文件路径\u0026gt; git cherry-pick 把已经提交的记录合并到当前分支。\n1 2 # 把已经提交的记录合并到当前分支 $ git cherry-pick \u0026lt;commit ID\u0026gt; git add 把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 把指定的文件添加到暂存区中 $ git add \u0026lt;文件路径\u0026gt; # 添加所有修改、已删除的文件到暂存区中 $ git add -u [\u0026lt;文件路径\u0026gt;] $ git add --update [\u0026lt;文件路径\u0026gt;] # 添加所有修改、已删除、新增的文件到暂存区中，省略 \u0026lt;文件路径\u0026gt; 即为当前目录 $ git add -A [\u0026lt;文件路径\u0026gt;] $ git add --all [\u0026lt;文件路径\u0026gt;] # 查看所有修改、已删除但没有提交的文件，进入一个子命令系统 $ git add -i [\u0026lt;文件路径\u0026gt;] $ git add --interactive [\u0026lt;文件路径\u0026gt;] git commit 将暂存区中的文件提交到本地仓库中。\n1 2 3 4 5 6 7 8 9 10 11 12 # 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息 $ git commit # 把暂存区中的文件提交到本地仓库中并添加描述信息 $ git commit -m \u0026#34;\u0026lt;提交的描述信息\u0026gt;\u0026#34; # 把所有修改、已删除的文件提交到本地仓库中 # 不包括未被版本库跟踪的文件，等同于先调用了 \u0026#34;git add -u\u0026#34; $ git commit -a -m \u0026#34;\u0026lt;提交的描述信息\u0026gt;\u0026#34; # 修改上次提交的描述信息 $ git commit --amend git fetch 从远程仓库获取最新的版本到本地的 tmp 分支上。\n1 2 3 4 5 # 将远程仓库所有分支的最新版本全部取回到本地 $ git fetch \u0026lt;远程仓库的别名\u0026gt; # 将远程仓库指定分支的最新版本取回到本地 $ git fetch \u0026lt;远程主机名\u0026gt; \u0026lt;分支名\u0026gt; git merge 合并分支。\n1 2 # 把指定的分支合并到当前所在的分支下 $ git merge \u0026lt;分支名称\u0026gt; git diff 比较版本之间的差异。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改 $ git diff # 比较暂存区中的文件和上次提交时的差异 $ git diff --cached $ git diff --staged # 比较当前文件和上次提交时的差异 $ git diff HEAD # 查看从指定的版本之后改动的内容 $ git diff \u0026lt;commit ID\u0026gt; # 比较两个分支之间的差异 $ git diff \u0026lt;分支名称\u0026gt; \u0026lt;分支名称\u0026gt; # 查看两个分支分开后各自的改动内容 $ git diff \u0026lt;分支名称\u0026gt;...\u0026lt;分支名称\u0026gt; git pull 从远程仓库获取最新版本并合并到本地。 首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。\n1 2 # 从远程仓库获取最新版本。 $ git pull git push 把本地仓库的提交推送到远程仓库。\n1 2 3 4 5 6 # 把本地仓库的分支推送到远程仓库的指定分支 $ git push \u0026lt;远程仓库的别名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt; # 删除指定的远程仓库的分支 $ git push \u0026lt;远程仓库的别名\u0026gt; :\u0026lt;远程分支名\u0026gt; $ git push \u0026lt;远程仓库的别名\u0026gt; --delete \u0026lt;远程分支名\u0026gt; git log 显示提交的记录。\n1 2 3 4 5 6 7 8 # 打印所有的提交记录 $ git log # 打印从第一次提交到指定的提交的记录 $ git log \u0026lt;commit ID\u0026gt; # 打印指定数量的最新提交的记录 $ git log -\u0026lt;指定的数量\u0026gt; git reset 还原提交记录。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 重置暂存区，但文件不受影响 # 相当于将用 \u0026#34;git add\u0026#34; 命令更新到暂存区的内容撤出暂存区，可以指定文件 # 没有指定 commit ID 则默认为当前 HEAD $ git reset [\u0026lt;文件路径\u0026gt;] $ git reset --mixed [\u0026lt;文件路径\u0026gt;] # 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改 $ git reset \u0026lt;commit ID\u0026gt; $ git reset --mixed \u0026lt;commit ID\u0026gt; # 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改 # 相当于调用 \u0026#34;git reset --mixed\u0026#34; 命令后又做了一次 \u0026#34;git add\u0026#34; $ git reset --soft \u0026lt;commit ID\u0026gt; # 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了 $ git reset --hard \u0026lt;commit ID\u0026gt; git revert 生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。\n1 2 # 生成一个新的提交来撤销某次提交 $ git revert \u0026lt;commit ID\u0026gt; git tag 操作标签的命令。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 打印所有的标签 $ git tag # 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录 $ git tag \u0026lt;标签名称\u0026gt; [\u0026lt;commit ID\u0026gt;] # 添加带有描述信息的附注标签，可以指定之前的提交记录 $ git tag -a \u0026lt;标签名称\u0026gt; -m \u0026lt;标签描述信息\u0026gt; [\u0026lt;commit ID\u0026gt;] # 切换到指定的标签 $ git checkout \u0026lt;标签名称\u0026gt; # 查看标签的信息 $ git show \u0026lt;标签名称\u0026gt; # 删除指定的标签 $ git tag -d \u0026lt;标签名称\u0026gt; # 将指定的标签提交到远程仓库 $ git push \u0026lt;远程仓库的别名\u0026gt; \u0026lt;标签名称\u0026gt; # 将本地所有的标签全部提交到远程仓库 $ git push \u0026lt;远程仓库的别名\u0026gt; –tags git mv 重命名文件或者文件夹。\n1 2 # 重命名指定的文件或者文件夹 $ git mv \u0026lt;源文件/文件夹\u0026gt; \u0026lt;目标文件/文件夹\u0026gt; git rm 删除文件或者文件夹。\n1 2 3 4 5 6 7 8 # 移除跟踪指定的文件，并从本地仓库的文件夹中删除 $ git rm \u0026lt;文件路径\u0026gt; # 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除 $ git rm -r \u0026lt;文件夹路径\u0026gt; # 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件 $ git rm --cached Git操作场景示例 1. 删除掉本地不存在的远程分支 多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch --all 依然会显示该远程分支，可使用下列的命令进行删除：\n1 2 3 4 5 6 # 使用 pull 命令，添加 -p 参数 $ git pull -p # 等同于下面的命令 $ git fetch -p $ git fetch --prune origin 来源：https://www.jianshu.com/p/93318220cdce\n","permalink":"https://luenci.com/en/posts/git%E5%91%BD%E4%BB%A4/","summary":"\u003ch2 id=\"git-config\"\u003egit config\u003c/h2\u003e\n\u003cp\u003e配置 Git 的相关参数。\u003c/p\u003e\n\u003cp\u003eGit 一共有3个配置文件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e仓库级的配置文件：在仓库的 \u003ccode\u003e.git/.gitconfig\u003c/code\u003e，该配置文件只对所在的仓库有效。\u003c/li\u003e\n\u003cli\u003e全局配置文件：Mac 系统在 \u003ccode\u003e~/.gitconfig\u003c/code\u003e，Windows 系统在 \u003ccode\u003eC:\\Users\\\u0026lt;用户名\u0026gt;\\.gitconfig\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 \u003ccode\u003e/usr/local/git\u003c/code\u003e）的 \u003ccode\u003eetc\u003c/code\u003e 文件夹中的 \u003ccode\u003egitconfig\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 查看配置信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# --local：仓库级，--global：全局级，--system：系统级\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;--\u003c/span\u003elocal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003esystem\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003el\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 查看当前生效的配置信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003el\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 编辑配置文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# --local：仓库级，--global：全局级，--system：系统级\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;--\u003c/span\u003elocal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003esystem\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003ee\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 添加配置项\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# --local：仓库级，--global：全局级，--system：系统级\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;--\u003c/span\u003elocal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003esystem\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eadd \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003ename\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003evalue\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 获取配置项\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;--\u003c/span\u003elocal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003esystem\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eget \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003ename\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 删除配置项\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;--\u003c/span\u003elocal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003esystem\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eunset \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003ename\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 配置提交记录中的用户信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal user\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e用户名\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal user\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eemail \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e邮箱地址\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 更改Git缓存区的大小\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 如果提交的内容较大，默认缓存较小，提交会失败\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 缓存大小单位：B，例如：524288000（500MB）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal http\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epostBuffer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#f85149\"\u003e缓存大小\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal color\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eui \u003cspan style=\"color:#79c0ff\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 配置可以缓存密码，默认缓存时间15分钟\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal credential\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ehelper cache\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 配置密码的缓存时间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 缓存时间单位：秒\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal credential\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ehelper \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;cache --timeout=\u0026lt;缓存时间\u0026gt;\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 配置长期存储密码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f85149\"\u003e$\u003c/span\u003e git config \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e--\u003c/span\u003eglobal credential\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ehelper store\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Git命令集合"},{"content":"JavaScript作用 表单动态检验（密码强度检测） 网页特效 服务端开发（Node.js） 桌面程序（Electron） APP（Cordova） 控制硬件 - 物联网（Ruff） 游戏小程序（cocos2d-js） HTML/CSS/JS的关系 HTML/CSS标记语言\u0026ndash;描述类语言 HTML决定网页结构和内容（决定看到什么），相当于人的身体 CSS决定网页呈现给用户的模样（决定好不好看），相当于给人穿衣服、化妆 JS脚本语言-编程类语言 实现业务逻辑和页面控制（决定功能），相当于人的各种动作 浏览器执行js 浏览器分成两部分：渲染引擎和JS引擎\n渲染引擎：用来解析HTML与CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit\nJS引擎：也称为JS解释器。用来读取网页中的JavaScript代码，对其处理后运行，比如chrome浏览器的V8\n浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。\nJS组成 1.ECMAScript ECMAScript是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMAScript语言的实现和扩展。 ECMAScript:ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。\n2.DOM——文档对象模型 文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。 通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。 3.BOM——浏览器对象模型 BOM（Browser Object Model，简称BOM）是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。 通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。 JS有3种书写 1.行内式JS 可以将单行或少量JS代码写在HTML标签的事件属性中（以on开头的属性），如：onclick 注意单双引号的使用：在HTML中我们推荐使用双引号，JS中我们推荐使用单引号 可读性差，在html中编写JS大量代码时，不方便阅读； 引号易错，引号多层嵌套匹配时，非常容易弄混； 特殊情况下使用 2.内嵌JS 1 2 3 \u0026lt;script\u0026gt; alert（\u0026#39;Hello World~！\u0026#39;）； \u0026lt;/script\u0026gt; 可以将多行JS代码写到\u0026lt;script\u0026gt;标签中 内嵌JS是学 习时常用的方式 3.外部JS文件 利于HTML页面代码结构化，把大段JS代码独立到HTML页面之外，既美观，也方便文件级别的复用 引用外部JS文件的script标签中间不可以写代码 适合于JS代码量比较大的情况 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!-- 2. 内嵌式的js --\u0026gt; \u0026lt;script\u0026gt; //alert(\u0026#39;Hello\u0026#39;) \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;my.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 1. 行内式的JS 直接写到元素内部 --\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Luenci\u0026#34; onclick=\u0026#34;alert(\u0026#39;hello world\u0026#39;)\u0026#34;\u0026gt; --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; JavaScript注释 1 2 3 //1.单行注释 ctrl + / /*2.多行注释默认的快捷键 shift + alt + a */ 2.多行注释vscode中修改多行注释的快捷键：ctrl + shift + / JavaScript输入输出语句 1 2 3 4 5 6 7 8 \u0026lt;script\u0026gt; // 这是一个输入框 prompt(\u0026#39;请输入您的年龄\u0026#39;); //alert 弹出警示框 alert(\u0026#39;计算的结果是：\u0026#39;); // console 控制台输出 给程序员测试用 console.log(\u0026#39;我是程序员\u0026#39;) \u0026lt;/script\u0026gt; 变量 声明变量 //声明变量 var age；//声明一个名称为age的变量 var是一个JS关键字，用来声明变量（variable变量的意思）。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序最管 age是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间 变量命名规范 由字母（A-Za-z）、数字（0-9）、下划线（）、美元符号（$）组 如：usrAge，num01，_name 严格区分大小写。 var app；和var App；是两个变量 不能以数字开头。 18age是错误的 不能是关键字、保留字。 例如：var、for、while 变量名必须有意义。 MMDBBD nl → age 遵守驼峰命名法。 首字母小写，后面单词的首字母需要大写。myFirstName 数据类型 JavaScript是一种弱类型或者说动态语言。\nJS把数据类型分为两类\n简单数据类型（Number，string，Boolean，Undefined，Null） 复杂数据类型（object） ###　数字型\nInfinity，代表无穷大，大于任何数值 Infinity，代表无穷小，小于任何数值 NaN，Not a number，代表一个非数值 isNaN（）这个方法用来判断非数字并且返回一个值如果是数字返回的是false如果不是数字返Turn 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;script\u0026gt; var num=1e；//num 数字型 var PI=3.14//PI数字型 //1.八进制0~7我们程序里面数字前面加0表示八进制 var numl=010； console.1og（num1）；// 010八进制转换为10进制就是8 var num2=012； console.1og（num2）； //2.十六进制e～9a~f#ffffff数字的前面加0x表示十六进制 var num3=0x9； console.1og（num3）； var num4=0xa； console.1og（num4）； // 数字型的最大值 console.log(Number.MAX_VALUE); // 数字型的最小值 console.log(Number.MIN_VALUE);\t\u0026lt;/script\u0026gt; out: 8 10 9 10 1.7976931348623157e+308 5e-324 字符串型String 1.字符串引号嵌套\nJS可以用单引号嵌套双引号，或者用双引号嵌套单引号（外双内单，外单内双)\n2.字符串转义符\n类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。\n转义符都是\\头的，常用的转义符及其说明如下：\n转义符 解释说明 \\n 换行符，n是newline的意思 \\ 斜杠 \\ \\' 单引号 \\\u0026quot; 双引号 \\t tab缩进 \\b 空格，b是blank的意思 布尔型 布尔类型有两个值：true和false，其中true表示真（对），而false表示假（错）。 布尔型和数字型相加的时候，true的值为1，false的值为0。 Undefined 和Null 一个声明后没有被赋值的变量会有一个默认值undefined（如果进行相连或者相加时，注意结果） 数据类型的转换 转换为字符串类型 方式 说明 案例 toString() 转成字符串 var num=1; alert(num.toString()） String()强制转换 转成字符串 var num=1；alert(String(num))； 加号拼接字符串 和字符串拼接的结果都是字符串 var num=1；alert(num+\u0026ldquo;我是字符串”)； toString()和String()使用方式不一样。 三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一种方式也称之为隐式转换。\n转换为数字型 方式 方式 案例 parselnt(string)函数 将string类型转成整数数值型 parselnt(‘78’) parseFloat（string）函数 将string类型转成浮点数数值型 parseFloat（\u0026ldquo;78.21\u0026rdquo;） Number（）强制转换函数 将string类型转换为数值型 Number(\u0026lsquo;12\u0026rsquo;) js隐式转换（- * / ） 利用算术运算隐式转换为数值型 \u0026lsquo;12\u0026rsquo; - 0 转换为布尔型 方式 说明 案例 Boolean()函数 其他类型转成布尔值 Boolean(\u0026lsquo;var\u0026rsquo;); 代表空、否定的值会被转换为false 如”、0、NaN、null、undefined 其余值都会被转换为true 编译型语言和解释型语言 编译器 在代码执行之前进行编译，生成中间代码文件 解释器 在运行时进行及时解释，并立即执行（当编译器以解释方式运行的时候，也称之为解释器） ","permalink":"https://luenci.com/en/posts/javascript%E7%9A%84%E7%AE%80%E4%BB%8B%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","summary":"\u003ch1 id=\"javascript作用\"\u003eJavaScript作用\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e表单动态检验（密码强度检测）\u003c/li\u003e\n\u003cli\u003e网页特效\u003c/li\u003e\n\u003cli\u003e服务端开发（Node.js）\u003c/li\u003e\n\u003cli\u003e桌面程序（Electron）\u003c/li\u003e\n\u003cli\u003eAPP（Cordova）\u003c/li\u003e\n\u003cli\u003e控制硬件 - 物联网（Ruff）\u003c/li\u003e\n\u003cli\u003e游戏小程序（cocos2d-js）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"htmlcssjs的关系\"\u003eHTML/CSS/JS的关系\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eHTML/CSS标记语言\u0026ndash;描述类语言\n\u003cul\u003e\n\u003cli\u003eHTML决定网页结构和内容（决定看到什么），相当于人的身体\u003c/li\u003e\n\u003cli\u003eCSS决定网页呈现给用户的模样（决定好不好看），相当于给人穿衣服、化妆\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJS脚本语言-编程类语言\n\u003cul\u003e\n\u003cli\u003e实现业务逻辑和页面控制（决定功能），相当于人的各种动作\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"浏览器执行js\"\u003e浏览器执行js\u003c/h1\u003e\n\u003cp\u003e浏览器分成两部分：渲染引擎和JS引擎\u003c/p\u003e","title":"JavaScript基本知识"},{"content":"方法 1 2 3 4 5 // 定义方法的格式 修饰符\t返回值类型\t方法名称(参数类型 参数名称，....){ 方法体; return 返回值; } 修饰符：现阶段的固定方法，public static 返回值类型：也就是方法最终产生的数据结果是什么类型 方法名称：方法的名字，规则和变量一样，小驼峰 参数类型：进入方法的数据对应的变量名称 方法体：方法需要做的事情，若干行代码 return：两个作用。 停止当前方法 将后面的结果数据返回值返还给调用处 返回值：也就是方法执行后最终产生的数据结果 return后面的“返回值”，必须和方法名称前面的“返回值类型”，保持对应\n注意事项 方法应该定义在类中，但是不能在方法 在定义方法。不能嵌套 方法定义的前后顺序无所谓 方法定义之后不会执行，若要执行，必须调用：单独调用，打印调用，赋值调用 如果方法有返回值，那么必须写上“return 返回值”，不能缺失 return后面的返回值类型必须和方法的返回值类型相同，对应。 对于一个void没有返回值的方法，没有返回值。 一个方法中可以含有多个return语句，但是必须保证同时只有一个会被执行到。 方法重载 多个方法的名称一样，但是参数列表不一样 优点：只需要记住唯一一个方法名称，就可以实现类似的多个功能 相关因素 参数个数不同 参数类型不同 参数的多类型顺序不同 无关因素 与参数的名称无关 与方法的返回值类型无关 数组 数组的概念：是一种容器，可以同时存放多个数据值。 数组的特点：\n1.数组是一种引用数据类型 2.数组当中的多个数据，类型必须统一 3.数组的长度在程序运行期间不可改变 数组声明 数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。 两种常见的初始化方式：\n1.动态初始化（指定长度）\n2.静态初始化（指定内容）\n动态初始化数组的格式：\n声明格式：数据类型[]数组名称=new数据类型[数组长度]； 静态初始化数组的格式：\n声明格式(标准)：数据类型[] 数组名称 = new 数据类型[] {元素1，元素2，...} 省略格式：数据类型[] 数组名称 = {元素1，元素2，...} 注意事项： 1.静态初始化没有直接指定长度，但是仍然会自动推算得到长度。\n2.静态初始化标准格式可以拆分成为两个步骤。\n3.动态初始化也可以拆分成为两个步骤。\n4.静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。\n如果不确定数组当中的具体内容，用动态初始化；否则，已经确定了具体的内容，用静态初始化\n使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值。\n规则如下：\n如果是整数类型，那么默认为0 如果是浮点类型，那么默认为0.0 如果是字符类型，那么默认为'\\u0000' 如果是布尔类型，那么默认为false 如果是引用类型，那么默认为null 静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。\n数组的长度一旦创建，程序运行期间，长度不可变\nJava中的内存划分 1.栈（Stack）：存放的都是方法中的局部变量。方法的运行一定要在栈当中运行。 局部变量：方法的参数，或者是方法内部的变量 作用域：一旦超出作用域，立刻从栈内存当中消失。 2.堆（Heap）：凡是new出来的东西，都在堆当中。 堆内存里面的东西都有一个地址值：16进制堆内存里面的数据，都有默认值。规则： 如果是整数默认为0 如果是浮点数默认为0.0 如果是字符默认为'\\u0000' 如果是布尔默认为false 如果是引用类型默认为null 3.方法区（Method Area）：存储.class相关信息，包含方法的信息。 4.本地方法栈（Native Method Stack）：与操作系统相关。 5.寄存器（PC Register）：与CPU相关。 一个数组的内存图\n所有的引用类型变量，都可以赋值为一个null值。代表其中什么都没有。\n面向对象 类是对一类事物的描述，是抽象的 对象是对一类事物的实例，是具体的 类是对象的模板，对象是类的实体 类的定义 类：是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物 属性：就是该事物的状态信息 行为：就是该事物能做什么 一个类的对象的内存图\n使用对象类型作为方法的参数\n成员变量和局部变量的区别 1.定义的位置不一样【重点】 局部变量：在方法的内部 成员变量：在方法的外部，直接写在类当中 2.作用范围不一样【重点】 局部变量：只有方法当中才可以使用，出了方法就不能再用 成员变量：整个类全都可以通用。 3.默认值不一样【重点】 局部变量：没有默认值，如果要想使用，必须手动进行赋值 成员变量：如果没有赋值，会有默认值，规则和数组一样 4.内存的位置不一样（了解） 局部变量：位于栈内存 成员变量：位于堆内存 5.生命周期不一样（了解） 局部变量：随着方法进栈而诞生，随着方法出栈而消失\n成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失\n面向对象三大特征：封装，继承，多态\n封装性在Java当中的体现：\n1.方法就是一种封装 2.关键字private也是一种封装封装就是将一些细节信息隐藏起来，对于外界不可见。 private关键字的作用 一旦使用了private关键字修饰，在同一个类中可以访问。但是其他类别不能直接访问 间接访问\n定义一对Getter/Setter方法 必须叫setXxx或者是getxxx[如果是布尔值（那么用isXXX的命名会泽）]命名规则。 对于Getter来说，不能有参数，返回值类型和成员变量对应； 对于setter来说，不能有返回值，参数类型和成员变量对应。 This关键字的作用 当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量 如果要访问类的成员变量需要用关键字：This 格式This.成员变量名 构造方法 构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。 格式：\n1 2 3 public 类名称（参数类型参数名称）{ 方法体 } 注意事项： 1.构造方法的名称必须和所在的类名称完全一样，就连大小写也要一样\n2.构造方法不要写返回值类型，连void都不写\n3.构造方法不能return一个具体的返回值\n4.如果没有编写任何构造方法，那么编译器将会默认赠送一个构造方法，没有参数、方法体什么事情都不做。\n5.一旦编写了至少一个构造方法，那么编译器将不再赠送。\n6.构造方法也是可以进行重载的。\n重载：方法名称相同，参数列表不同。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // java标准类 package object.oriented; /** * @author Luenci * @version 1.0 * @date 2019/12/6 10:50 */ public class BaseStudent { private String name; private int age; private char sex; // 无参数的构造方法 public BaseStudent() { System.out.println(\u0026#34;我是一个无参数的构造方法\u0026#34;); } // 全参数的构造方法 public BaseStudent(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; System.out.println(\u0026#34;我是一个全参数的构造方法\u0026#34;); } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } } API笔记 引用类型的一般使用步骤：\n1.导包\nimport 包路径.类名称；\n如果需要使用的目标类，和当前类位于同一个包下，则可以省略导包语句不写。\n只有java.lang包下的内容不需要导包，其他的包都需要import语句。\n2.创建\n类名称 对象名 = new 类名称（）； 3.使用\n对象名.成员方法名() 匿名对象 只有右边的对象，没有左边的名字和赋值运算符。 new 类名称().属性名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package object.oriented; import java.util.Scanner; /** * @author Luenci * @version 1.0 * @date 2019/12/7 17:34 */ public class AnonymousDemo { public static void main(String[] args) { // 匿名对象 new Student().eat(); // 匿名对象作为参数 // methiordParam(new Scanner(System.in)); // 匿名对象作为返回值 Scanner sc = methodReturn(); int num = sc.nextInt(); System.out.println(\u0026#34;您输入的是：\u0026#34; + num); } public static void methiordParam(Scanner sc) { int num = sc.nextInt(); System.out.println(\u0026#34;输入的是：\u0026#34; + num); } public static Scanner methodReturn() { return new Scanner(System.in); } } 对象数组 任何数据类型都可以作为数组里面的存储元素。 数组有一个缺点：一旦创建，程序运行期间长度不可以发生改变\nArrayList集合概述和使用 ArrayList集合的长度是可以随意变化的。 对于ArrayList来说，有一个尖括号\u0026lt;E\u0026gt;代表泛型。 泛型：也就是装在集合当中的所有元素，全都是统一的什么类型。 注意：泛型只能是引用类型，不能是基本类型 常用的ArrayList方法：\npublic boolean add（E e）：向集合当中添加元素，参数的类型和泛型一致。返回值代表添加是否成功。\n备注：对于ArrayList集合来说，add添加动作一定是成功的，所以返回值可用可不用。 但是对于其他集合（今后学习）来说，add添加动作不一定成功。\npublic E get（int index）：从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素。\npublic E remove（int index）：从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。\npublic int size（）：获取集合的尺寸长度，返回值是集合中包含的元素个数。\n如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。\n基本类型 包装类（引用类型，包装类都位于java.lang包下） short Short int Integer【特殊】 long Long char Character【特殊】 float Float double Double boolean Boolean 从 JDK 1.5+ 开始，支持自动装箱、自动拆箱。\n自动装箱：基本类型\u0026ndash;\u0026gt;包装类型\n自动拆箱：包装类型\u0026ndash;\u0026gt;基本类型\n字符串的概述和特点 字符串的特点：\n1.字符串的内容永不可变（字符串是常量）。【重点】 2.正是因为字符串不可改变，所以字符串是可以共享使用的。 3.字符串效果上相当于是char[]字符数组，但是底层原理是byte[]字节数组。 创建字符串的常见3+1种方式。 三种构造方法：\npublic String（）：创建一个空白字符串，不含有任何内容。 public String（char[] array）：根据字符数组的内容，来创建对应的字符串。 public String（byte[] array）：根据字节数组的内容，来创建对应的字符串。 一种直接创建： string str=\u0026quot;Hello\u0026quot;； 右边直接用双引号 字符串常量池 字符串常量池：程序当中直接写上的双引号字符串，就在字符串常量池中\n对于基本类型来说，==是进行数值的比较。\n对于引用类型来说，==是进行[地址值]的比较。\n内存划分：\n常用的API方法 ==是进行对象的地址值比较，如果需要字符串的内容比较，可以使用两个方法：\npublic boolean equals（Object obj）：参数可以是任何对象，只有参数是一个字符串并且内容相同的才会给true；否则返回false。\n注意事项：\n1.任何对象都能用Object进行接收。 2.equals方法具有对称性，也就是a.equals（b）和b.equals（a）效果一样。 3.如果比较双方一个常量一个变量，推荐把常量字符串写在前面。 推荐：\u0026quot;abc\u0026quot;.equals（str不推荐：str.equals（\u0026quot;abc\u0026quot;）\npublic boolean equalsIgnoreCase（String str）：忽略大小写，进行内容比较。 static关键字的介绍 如果一个成员变量使用了static关键字，那么这个变量不再属于对象自己，而是属于所在的类。\n多个对象共享同一份数据。 static关键字修饰成员变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package luenci.staticclass; /** * @author Luenci * @version 1.0 * @date 2019/12/12 16:18 * @info 学生类 */ public class Student { private int id; private String name; private int age; static String room = \u0026#34;Java一班\u0026#34;; private static int idCount = 0; public Student() { this.id = ++idCount; } public int getId() { return id; } public void setId(int id) { this.id = id; } public Student(String name, int age) { this.name = name; this.age = age; this.id = ++idCount; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public static String getRoom() { return room; } public static void setRoom(String room) { Student.room = room; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package luenci.staticclass; /** * @author Luenci * @version 1.0 * @date 2019/12/12 16:22 * @info 实例化例子 */ public class Demo1 { public static void main(String[] args) { Student stu1 = new Student(\u0026#34;Luenci\u0026#34;, 22); Student stu2 = new Student(\u0026#34;Lynn\u0026#34;, 22); System.out.println(\u0026#34;学号：\u0026#34; + stu1.getId() + \u0026#34;姓名：\u0026#34; + stu1.getName() + \u0026#34;年龄：\u0026#34; + stu1.getAge() + \u0026#34;班级：\u0026#34; + Student.room); System.out.println(\u0026#34;学号：\u0026#34; + stu2.getId() + \u0026#34;姓名：\u0026#34; + stu2.getName() + \u0026#34;年龄：\u0026#34; + stu2.getAge() + \u0026#34;班级：\u0026#34; + Student.room); } } static关键字修饰成员方法 一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。 如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。 如果有了static关键字，那么不需要创建对象，直接就能通过类名称来使用它。 无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用。 静态变量：类名称.静态变量 静态方法：类名称.静态方法（） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package luenci.staticclass; /** * @author Luenci * @version 1.0 * @date 2019/12/12 16:49 * @info 自定义方法类 */ public class myClass { int num; static int age; public void method() { System.out.println(\u0026#34;普通的成员方法\u0026#34;); System.out.println(num); System.out.println(age); } public static void methodStatic() { System.out.println(\u0026#34;静态方法\u0026#34;); // 错误访问 /*System.out.println(num);*/ System.out.println(age); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package luenci.staticclass; /** * @author Luenci * @version 1.0 * @date 2019/12/12 16:50 * @info static关键字修饰方法 */ public class Demo2 { public static void main(String[] args) { myClass obj = new myClass(); // 普通成员方法 对象名.成员方法（） obj.method(); // 静态方法 推荐用：类名称.静态方法（）调用 myClass.methodStatic(); // 在本类中调用自己的静态方法，可以省略类名称 myMethod(); } public static void myMethod(){ System.out.println(\u0026#34;自己的方法\u0026#34;); } } 注意事项： 1.静态不能直接访问非静态。 原因：因为在内存当中是【先】有的静态内容，【后】有的非静态内容。 \u0026ldquo;先人不知道后人，但是后人知道先人。” 2.静态方法当中不能用this关键字。 原因：this代表当前对象，通过谁调用的方法，谁就是当前对象。\nstatic内存图 静态代码块 特点：当第一次用到本类时，静态代码块执行唯一的一次。 静态内容总是优先于非静态，所以静态代码块比构造方法先执行。 静态代码块的典型用途： 用来一次性地对静态成员变量进行赋值。 Arrays类常用方法 java.util.Arrays是一个与数组相关的工具类，里面提供了大量静态方法，用来实现数组常见的操作。 public static String tostring（数组）：将参数数组变成字符串（按照默认格式：[元素1，元素2，元素3\u0026hellip;]） public static void sort（数组）：按照默认升序（从小到大）对数组的元素进行排序。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package luenci.array; import java.util.Arrays; /** * @author Luenci * @version 1.0 * @date 2019/12/12 17:25 * @info Arrays类的常见的使用方法 */ public class ArraysDemo { public static void main(String[] args) { int[] array = {1,2,3,4}; String str = Arrays.toString(array); System.out.println(str); int[] array1 = {1,4,5,9,2,5,7,0}; Arrays.sort(array1); System.out.println(Arrays.toString(array1)); String[] array2 = {\u0026#34;aaa\u0026#34;,\u0026#34;ccc\u0026#34;,\u0026#34;bbb\u0026#34;}; Arrays.sort(array2); System.out.println(Arrays.toString(array2)); } } out [1, 2, 3, 4] [0, 1, 2, 4, 5, 5, 7, 9] [aaa, bbb, ccc] 备注：\n1.如果是数值，sort默认按照升序从小到大排序\n2.如果是字符串，sort默认按照字母升序\n3.如果是自定义的类型，那么这个自定义的类需要有Comparable或者Comparator接口的支持。\nMath相关的类方法 java.util.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作。 public static double abs（double num）：获取绝对值。有多种重载。 public static double ceil（double num）：向上取整。 public static double floor（double num）：向下取整。 public static long round（double num）：四舍五入。 final关键字 final关键字代表最终、不可改变的。 常见四种用法 修饰类 当final关键字用来修饰一个类的时候，格式： public final class 类名称（//…} 含义：当前这个类不能有任何的子类。（太监类） 注意事项：一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写。（没法继承，没有儿子） 修饰方法 当final关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。 格式： 修饰符final 返回值类型方法名称（参数列表）（//方法体} 注意事项：对于类、方法来说，abstract关键字和final关键字不能同时使用，因为矛盾。 修饰局部变量 一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。 “一次赋值，终生不变” 对于基本类型来说，不可变说的是变量当中的【数据】不可改变 对于引用类型来说，不可变说的是变量当中的【地址值】不可改变\n修饰成员变量 由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。 对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。 必须保证类当中所有重载的构造方法，都最终会对final的成员变量进行赋值。 四种权限修饰符 类别 \\ 关键字 public protected （default）默认 private 同一个类 YES YES YES YES 同一个类 YES YES YES NO 不同包子类 YES YES NO NO 不同包非子类 YES NO NO NO 注意事项：（default）并不是关键字“default”，而是根本不写。\n内部类 如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。 例如：身体和心脏的关系。又如：汽车和发动机的关系。 分类： 成员内部类 局部内部类（包含匿名内部类） 成员内部类 成员内部类的定义格式：\n1 2 3 4 5 6 7 修饰符 class 外部类名称{ 修饰符 class 内部类名称{ // … } // ... } 注意：\n内用外，随意访问 外用内，需要内部类对象 如何使用成员内部类：\n1.间接方式：在外部类的方法当中，使用内部类；然后main只是调用外部类的方法。\n2.直接方式，公式：\n类名称 对象名=new 类名称（）； 【外部类名称.内部类名称对象名=new外部类名称（）.new内部类名称（）；】 内部类同名变量的访问\n如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量名 局部内部类 如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。\n“局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。\n定义格式：\n1 2 3 4 5 6 7 修饰符 class 外部类名称{ 修饰符 返回值 类型外部类方法名称（参数列表）{ class 局部内部类名称{ //… } } } 局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】\n备注：从Java 8+开始，只要局部变量事实不变，那么final关键字可以省略。\n原因：\n1.new出来的对象在堆内存当中。\n2.局部变量是跟着方法走的，在栈内存当中。\n3.方法运行结束之后，立刻出栈，局部变量就会立刻消失。\n4.但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。\n匿名内部类 如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】。\n匿名内部类的定义格式：\n1 2 3 接口名称 对象名 = new 接口名称（）{ //覆盖重写所有抽象方法 }； 对格式“new 接口名称（）{..}”进行解析： 1.new表示创建对象的动作 2.接口名称就是匿名内部类需要实现哪个接口 3.{.…}这才是匿含内部类的内容\n注意几点问题：\n1.匿名内部类，在【创建对象】的时候，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样的话，那么就必须使用单独定义的实现类了。\n2.匿名对象，在【调用方法】的时候，只能调用唯一一次。如果希望同一个对象，调用多次方法，那么必须给对象起个名字。\n3.匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】 强调：匿名内部类和匿名对象不是一回事\n注意事项 小节一下类的权限修饰符： public \u0026gt; protected \u0026gt;（default）\u0026gt; private定义一个类的时候，权限修饰符规则：\n1.外部类：public/（default）\n2.成员内部类：public/protected/（deffult）/private\n3.局部内部类：什么都不能加\n","permalink":"https://luenci.com/en/posts/java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","summary":"\u003ch1 id=\"方法\"\u003e方法\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e// 定义方法的格式\u003c/span\u003e\u003cspan style=\"color:#6e7681\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6e7681\"\u003e\u003c/span\u003e修饰符\u003cspan style=\"color:#6e7681\"\u003e\t\u003c/span\u003e返回值类型\u003cspan style=\"color:#6e7681\"\u003e\t\u003c/span\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e方法名称\u003c/span\u003e(参数类型\u003cspan style=\"color:#6e7681\"\u003e \u003c/span\u003e参数名称\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e....){\u003cspan style=\"color:#6e7681\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6e7681\"\u003e\t\u003c/span\u003e方法体;\u003cspan style=\"color:#6e7681\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6e7681\"\u003e\t\u003c/span\u003e\u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e\u003cspan style=\"color:#6e7681\"\u003e \u003c/span\u003e返回值;\u003cspan style=\"color:#6e7681\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6e7681\"\u003e\u003c/span\u003e}\u003cspan style=\"color:#6e7681\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e修饰符：现阶段的固定方法，\u003ccode\u003epublic static\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e返回值类型：也就是方法最终产生的数据结果是什么类型\u003c/li\u003e\n\u003cli\u003e方法名称：方法的名字，规则和变量一样，小驼峰\u003c/li\u003e\n\u003cli\u003e参数类型：进入方法的数据对应的变量名称\u003c/li\u003e\n\u003cli\u003e方法体：方法需要做的事情，若干行代码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereturn\u003c/code\u003e：两个作用。\n\u003cul\u003e\n\u003cli\u003e停止当前方法\u003c/li\u003e\n\u003cli\u003e将后面的结果数据返回值返还给调用处\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e返回值：也就是方法执行后最终产生的数据结果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003ereturn后面的“返回值”，必须和方法名称前面的“返回值类型”，保持对应\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"注意事项\"\u003e注意事项\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e方法应该定义在类中，但是不能在方法 在定义方法。不能嵌套\u003c/li\u003e\n\u003cli\u003e方法定义的前后顺序无所谓\u003c/li\u003e\n\u003cli\u003e方法定义之后不会执行，若要执行，必须调用：单独调用，打印调用，赋值调用\u003c/li\u003e\n\u003cli\u003e如果方法有返回值，那么必须写上“return 返回值”，不能缺失\u003c/li\u003e\n\u003cli\u003ereturn后面的返回值类型必须和方法的返回值类型相同，对应。\u003c/li\u003e\n\u003cli\u003e对于一个\u003ccode\u003evoid\u003c/code\u003e没有返回值的方法，没有返回值。\u003c/li\u003e\n\u003cli\u003e一个方法中可以含有多个\u003ccode\u003ereturn\u003c/code\u003e语句，但是必须保证同时只有一个会被执行到。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"方法重载\"\u003e方法重载\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e多个方法的名称一样，但是参数列表不一样\u003c/li\u003e\n\u003cli\u003e优点：只需要记住唯一一个方法名称，就可以实现类似的多个功能\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"相关因素\"\u003e相关因素\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e参数个数不同\u003c/li\u003e\n\u003cli\u003e参数类型不同\u003c/li\u003e\n\u003cli\u003e参数的多类型顺序不同\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"无关因素\"\u003e无关因素\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e与参数的名称无关\u003c/li\u003e\n\u003cli\u003e与方法的返回值类型无关\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"数组\"\u003e数组\u003c/h1\u003e\n\u003cp\u003e数组的概念：是一种容器，可以同时存放多个数据值。\n数组的特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1.数组是一种引用数据类型\u003c/li\u003e\n\u003cli\u003e2.数组当中的多个数据，类型必须统一\u003c/li\u003e\n\u003cli\u003e3.数组的长度在程序运行期间不可改变\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"数组声明\"\u003e数组声明\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。\n两种常见的初始化方式：\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e1.动态初始化（指定长度）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e2.静态初始化（指定内容）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e动态初始化数组的格式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e声明格式：\u003ccode\u003e数据类型[]数组名称=new数据类型[数组长度]；\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e静态初始化数组的格式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e声明格式(标准)：\u003ccode\u003e数据类型[] 数组名称 = new 数据类型[] {元素1，元素2，...}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e省略格式：\u003ccode\u003e数据类型[] 数组名称 = {元素1，元素2，...}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意事项：\n1.静态初始化没有直接指定长度，但是仍然会自动推算得到长度。\u003c/p\u003e\n\u003cp\u003e2.静态初始化标准格式可以拆分成为两个步骤。\u003c/p\u003e\n\u003cp\u003e3.动态初始化也可以拆分成为两个步骤。\u003c/p\u003e\n\u003cp\u003e4.静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果不确定数组当中的具体内容，用动态初始化；否则，已经确定了具体的内容，用静态初始化\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值。\u003c/p\u003e\n\u003cp\u003e规则如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果是整数类型，那么默认为\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果是浮点类型，那么默认为\u003ccode\u003e0.0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果是字符类型，那么默认为\u003ccode\u003e'\\u0000'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果是布尔类型，那么默认为\u003ccode\u003efalse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果是引用类型，那么默认为\u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e数组的长度一旦创建，程序运行期间，长度不可变\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e","title":"Java基本知识"},{"content":"Java语言简史 Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。 Java语言发展历史\n1995年Sun公司发布Java1.0版本 1997年发布Java1.1版本 1998年发布Java1.2版本 2000年发布Java1.3版本 2002年发布Java1.4版本 2004年发布Java5版本（更新频率较大） 2006年发布Java6版本 2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java7版本 2014年发布Java8版本（更新频率较大，市场占有率最大） 2017年9月发布Java9版本 2018年3月发布Java10版本 Java 平台的三个版本 作用：\n这使软件开发人员、服务提供商和设备生产商可以针对特定的市场进行开发： Java SE（Java Platform，Standard Edition） Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。 Java EE（Java Platform，Enterprise Edition） 这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。 Java ME（Java Platform，Micro Edition） 这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。 开发环境，推荐Eclipse,NetBeans,这两个IDE可以挂接对应的插件，进行开发。还有一点，那就是这三个应用，se,标准应用，以学习为主，由于界面，开发成本，速度等问题，很少用来做程序，但不是说，他不能做程序，Eclipse,NetBeans,都是javase写起来的。Me,移动设备应用，对于一些中高端应用还好了！以前用他做过手机游戏，呵呵呵！EE,企业级解决方案，开发套件全部免费，可控性好，安全性高，乃是当前B2B的规范。再者，这三个应用，都需要虚拟机的支持。\n字节 位（bit）：一个数字0或者一个数字1，代表一位。 字节（Byte）：每逢8位是一个字节，这是数据存储的最小单位。 1 2 3 4 5 6 7 8 1 Byte = 8 bit 1 KB = 1024 Byte 1 MB = 1024 KB 1 GB = 1024 MB 1 TB = 1024 GB 1 PB = 1024 TB 1 EB = 1024 PB 1 ZB = 1024 EB Java虚拟机——JVM JVM（Java Virtual Machine）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java最具吸引力的特性之一。我们编写的Java代码，都运行在JVM之上。 跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。 Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。\nJRE和JDK JRE（Java Runtime Environment）：是Java程序的运行时环境，包含Jvm和运行时所需要的核心类。 JDK（Java Development Kit）：是Java程序开发工具包，包含JRE]和开发人员使用的工具。 我们想要运行一个已有的Java程序，那么只需安装JRE即可。 我们想要开发一个全新java程序，那么必须安装JDK。 Java程序运行步骤 编写源程序， 后缀名为.java的文件 编译源程序， 用javac命令将后缀名为.java的源程序编译成.class的字节码文件 运行源程序， 用java命令 将.class文件在计算机上解释出来（JVM上运行）。 Java标识符 标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。\n命名规则：硬性要求\n标识符可以包含英文字母26个（区分大小写）、0-9数字、$（美元符号）和_（下划线）。\n标识符不能以数字开头。\n标识符不能是关键字。\n命名规范：软性建议(代码命名规范建议)\n类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。\n变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。\n方法名规范：同变量名。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package Luenci.demo; /** * @author Luenci * @version 1.0 * @date 2019/11/30 18:18 */ public class DemoCode1 { public static void main(String[] args){ // 字符串常量 和 字符常量（里面有且仅有一个字符） System.out.println(\u0026#34;我是字符串常量\u0026#34;); System.out.println(\u0026#39;h\u0026#39;); // 整数常量 System.out.println(200); System.out.println(-500); // 浮点数常量 System.out.println(0.22); System.out.println(0.8989); // 布尔常量 System.out.println(true); System.out.println(false); // 空常量:不能用来打印输出 // System.out.println(null); } } Java数据类型 Java的数据类型分为两大类：\n基本数据类型：整数、浮点数、字符、布尔。 引用数据类型：类、数组、接口。 基本数据类型 整数型 byte short int log 浮点型 float double 字符型 char 布尔型 boolean 数据类型 关键字 内存占用 取值范围 字节型 byte 1个字节 -128 - 127 短整型 short 2个字节 -32768 - 32767 整型 int（默认） 4个字节 -2^31 - 2^31-1 长整型 long 8个字节 -2^63 - 2^63.1 单精度浮点数 float 4个字节 1.4013E - 45-3.4028E+38 双精度浮点数 double（默认） 8个字节 4.9E-324 ~ 1.7977E+308 字符型 char 2个字节 0-65535 布尔类型 honlean 1个字节 true false 注意事项：\n字符串不是基本类型，而是引用类型。 浮点型可能只是一个近似值，并非精确的值。 数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节。 浮点数当中默认类型是double。如果一定要使用float类型，需要加上一个后缀F。 如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。 【作用域】：从定义变量的行开始，一直到直接所属的大括号结束为止。\n数据类型转换 自动类型转换（隐式） 特点：代码不需要进行特殊处理，自动完成 规则：数据范围从小到大 强制类型转换（显示） 特点：代码需要进行特殊的格式处理，不能自动完成 格式：范围小的类型 范围小的变量名 = （范围小的类型） 原本范围大的数据; 强制类型转换 （注意）\n使用时注意精度损失和数据溢出等情况\nbyte/short/char这三种类型都可以发生数学运算，例如加法“+”.\nbyte/short/char这三种类型在运算的时候，都会被首先提升成为int类型，然后再计算。\nboolean类型不能发生数据类型变换\nASCII码字符表 0 对应的ascill码值为 32 A 对应的ascill码值为 65 a 对应的ascill码值为 97 其余的向后推理即可\n运算符 算数运算符包括 解释 + 加法运算，字符串连接运算 - 减法运算 * 乘法运算 \\ 除法运算 % 取模运算，两个数字相除1取余数 ++, -- 自增自减运算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package Luenci.demo; /** * @author Luenci * @version 1.0 * @date 2019/12/2 20:45 */ public class OperatorDemo { public static void main(String[] args){ // 四则运算符 int a = 10,b = 25; System.out.println(a + b); System.out.println(a - b); System.out.println(a * b); System.out.println(a / b); // 用字符串进行连接的时候结果都会变成字符串 String str = \u0026#34;Luenci\u0026#34;; System.out.println(str + 404); // 单独使用的时候++在前和++在后没什么区别 // 和变量等在一起使用的时候是++在前的时候【先加后用】 // 和变量等在一起使用的时候是++在后的时候【先用后加】 int num=0; num++; System.out.println(num); System.out.println(\u0026#34;-------------- 分割线 -----------------\u0026#34;); int num1 = 20; System.out.println(num1++); // 20 System.out.println(num1); // 21 int num2 = 30; System.out.println(++num2); // 31 } } out: 35 -15 250 0 Luenci404 1 -------------- 分割线 ----------------- 20 21 31 常量不可使用 ++，\u0026ndash;\n赋值运算符其中 隐含了一个强制类型转换\n比较运算符 比较运算符类别 解释 == 比较两边的数据是否相等，相等结果为True \u0026lt; 比较左边的数据是否小于右边的数据，小于结果为True \u0026gt; 比较左边的数据是否大于右边的数据，大于结果为True \u0026lt;= 比较左边的数据是否小于或等于右边的数据，小于或等于结果为True \u0026gt;= 比较左边的数据是否大于或等于右边的数据，大于或等于结果为True != 比较两边的数据是否相等，不相等结果为True 逻辑运算符 与（并且）\u0026amp;\u0026amp;全都是true，才是true；否则就是false\n或（或者）||至少一个是true，就是true；全都是false， 才是false\n非（取反）！本来是true，变成false；本来是false，变成true\n编译器的两点优化 对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地为我们补上一个（byte）（short）（char）。 1.如果没有超过左侧的范围，编译器补上强转。 2.如果右侧超过了左侧范围，那么直接编译器报错。 编译器的常量优化\n在给变量进行赋值的时候，如果右侧的表达式当中全都是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。 如:short result=5+8；//等号右边全都是常量，没有任何变量参与运算编译之后，得到的.class字节码文件当中相当于【直接就是】：short result=13； 程序流程控制 判断语句 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package Luenci.method; import java.util.Scanner; /** * @author Luenci * @version 1.0 * @date 2019/12/3 17:39 */ public class ProcessControl { public static void main(String[] args){ // 从键盘处获得成绩值 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入您的成绩\u0026#34;); String score = sc.nextLine(); // 判断成绩优秀否 if ( Integer.parseInt(score) \u0026gt;= 90){ System.out.println(\u0026#34;您的成绩优秀\u0026#34;); } else if (Integer.parseInt(score) \u0026gt; 80 \u0026amp;\u0026amp; Integer.parseInt(score) \u0026lt; 90){ System.out.println(\u0026#34;你的成绩良好\u0026#34;); } else if (Integer.parseInt(score) \u0026gt; 60 \u0026amp;\u0026amp; Integer.parseInt(score) \u0026lt;80){ System.out.println(\u0026#34;您的成绩合格\u0026#34;); } else { System.out.println(\u0026#34;您的成绩不合格\u0026#34;); } } public static String getType(Object o){ return o.getClass().toString(); } } 选择结构 switch语句使用的注意事项： ​\t1.多个case后面的数值不可以重复。\n​\t2.switch后面小括号当中只能是下列数据类型：\n​\t基本数据类型：byte/short/char/int\n​\t引用数据类型：String字符串、enum枚举\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package Luenci.method; import java.util.Date; import java.text.SimpleDateFormat; /** * @author Luenci * @version 1.0 * @date 2019/12/4 11:30 */ public class SwitchDemo { public static void main(String[] args){ // 设置日期格式 // SimpleDateFormat df = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); // new Date()为获取当前系统时间 Date date = new Date(); // 使用SimpleDateFormat格式化日期 SimpleDateFormat df = new SimpleDateFormat(\u0026#34;EEEE\u0026#34;); String currSun = df.format(date); switch (currSun){ case \u0026#34;星期一\u0026#34;: System.out.println(currSun + \u0026#34;开始上班\u0026#34;); break; case \u0026#34;星期六\u0026#34;: System.out.println(currSun + \u0026#34;休息第一天\u0026#34;); break; case \u0026#34;星期五\u0026#34;: System.out.println(currSun + \u0026#34;放假前夕\u0026#34;); break; default: System.out.println(currSun + \u0026#34;上班中\u0026#34;); break; } } } 循环语句 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package Luenci.method; /** * @author Luenci * @version 1.0 * @date 2019/12/4 15:00 */ public class ForDemo { public static void main(String[] args){ int i,a; a = 0; for ( i = 1; i \u0026lt;= 100; i++){ a += i; } System.out.println(a); } } whlie循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package Luenci.method; import com.sun.jmx.snmp.internal.SnmpSubSystem; /** * @author Luenci * @version 1.0 * @date 2019/12/4 15:10 */ public class WhileDemo { public static void main(String[] args){ // 初始化语句 int a = 1; while (a \u0026lt; 10){ System.out.println(\u0026#34;打印\u0026#34; + a + \u0026#34;遍\u0026#34;); a++; } } } do \u0026hellip;while 循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package Luenci.method; /** * @author Luenci * @version 1.0 * @date 2019/12/4 15:13 */ public class DowhlieDemo { public static void main(String[] args){ // do ..... while 循环的第一次是\t无条件执行 int i = 1; do { System.out.println(\u0026#34;打印\u0026#34; + i + \u0026#34;遍\u0026#34;); i++; } while (i \u0026lt; 10); } } 三种循环的区别 1.如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do-while循环会执行至少一次。 2.for循环的变量在小括号当中定义，只有循环内部才可以使用。while循环和do-while循环初始化语句本来就在外面，所以出来循环之后还可以继续使用。 break关键字的用法有常见的两种 1.可以用在switch语句当中，一旦执行，整个switch语句立刻结束。\n2.还可以用在循环语句当中，一旦执行，整个循环语句立刻结束。打断循环。\n关于循环的选择，有一个小建议： 凡是次数确定的场景多用for循环；否则多用while循环。\n另一种循环控制语句是continue关键字。 一旦执行，立刻跳过当前次循环剩余内容，马上开始下一次循环 ","permalink":"https://luenci.com/en/posts/java%E7%AE%80%E4%BB%8B/","summary":"\u003ch2 id=\"java语言简史\"\u003eJava语言简史\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eJava语言是美国Sun公司（Stanford University Network），在1995年推出的高级编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eJava语言发展历史\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1995年Sun公司发布Java1.0版本\u003c/li\u003e\n\u003cli\u003e1997年发布Java1.1版本\u003c/li\u003e\n\u003cli\u003e1998年发布Java1.2版本\u003c/li\u003e\n\u003cli\u003e2000年发布Java1.3版本\u003c/li\u003e\n\u003cli\u003e2002年发布Java1.4版本\u003c/li\u003e\n\u003cli\u003e2004年发布Java5版本（更新频率较大）\u003c/li\u003e\n\u003cli\u003e2006年发布Java6版本\u003c/li\u003e\n\u003cli\u003e2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java7版本\u003c/li\u003e\n\u003cli\u003e2014年发布Java8版本（更新频率较大，市场占有率最大）\u003c/li\u003e\n\u003cli\u003e2017年9月发布Java9版本\u003c/li\u003e\n\u003cli\u003e2018年3月发布Java10版本\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"java-平台的三个版本\"\u003eJava 平台的三个版本\u003c/h2\u003e\n\u003cp\u003e作用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这使软件开发人员、服务提供商和设备生产商可以针对特定的市场进行开发：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"java-sejava-platformstandard-edition\"\u003eJava SE（Java Platform，Standard Edition）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eJava SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"java-eejava-platformenterprise-edition\"\u003eJava EE（Java Platform，Enterprise Edition）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"java-mejava-platformmicro-edition\"\u003eJava ME（Java Platform，Micro Edition）\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e开发环境，推荐Eclipse,NetBeans,这两个IDE可以挂接对应的插件，进行开发。还有一点，那就是这三个应用，se,标准应用，以学习为主，由于界面，开发成本，速度等问题，很少用来做程序，但不是说，他不能做程序，Eclipse,NetBeans,都是javase写起来的。Me,移动设备应用，对于一些中高端应用还好了！以前用他做过手机游戏，呵呵呵！EE,企业级解决方案，开发套件全部免费，可控性好，安全性高，乃是当前B2B的规范。再者，这三个应用，都需要虚拟机的支持。\u003c/p\u003e\u003c/blockquote\u003e","title":"Java语言概述"},{"content":"面向对象 三大特征：封装性，继承性，多态性。 继承是多态的前提，如果没有继承，就没有多态 继承主要解决的问题是：共性抽取 继承 父类也可以叫基类，超类\n子类也可以叫派生类\n子类可以访问父类的属性和方法，反之父类不能访问子类的属性和方法\n直接通过子类对象访问成员变量：\n等号左边是谁，就优先用谁，没有则向上找。 间接通过成员方法访问成员变量：\n该方法属于谁，就优先用谁，没有则向上找。 成员变量方法 局部变量：直接写成员变量名 本类的成员变量：this.成员变量名 父类的成员变量：super.成员变量名 成员方法的访问 在父子类的继承关系当中，创建子类对象，访问成员方法的规则： 创建的对象是谁，就优先用谁，如果没有则向上找。 注意事项： 无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类。\n方法的重载和重写 重写（Override）概念：在继承关系当中，方法的名称一样，参数列表也一样。 对比 重写（Override）：方法的名称一样，参数列表【也一样】。也称覆盖、覆写。\n重载（Overload）：方法的名称一样，参数列表【不一样】。\n方法的覆盖重写特点：创建的是子类对象，则优先用子类方法。\n方法覆盖重写的注意事项：\n1.必须保证父子类之间方法的名称相同，参数列表也相同。\n@Override：写在方法前面，用来检测是不是有效的正确覆盖重写。 这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。\n2.子类方法的返回值必须【小于等于】父类方法的返回值范围。\n提示：java.Lang.Object类是所有类的公共最高父类（祖宗类），java.Lang.String就是object的子类。\n3.子类方法的权限必须【大于等于】父类方法的权限修饰符。\n提示：public \u0026gt; protected \u0026gt;（default）\u0026gt; private备注：（default）不是关键字default，而是什么都不写，留空\n例子图 继承关系中，父子类构造方法的访问特点 1.子类构造方法当中有一个默认隐含的“super（）”调用，所以一定是先调用的父类构造，后执行的子类构造。 2.子类构造可以通过super关键字来调用父类重载构造。 3.super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。 总结： 子类必须调用父类构造方法，不写则系统会自动分配一个super（）；写了则用写的指定的super调用，super只能有一个，还必须是第一个。 super关键字的用法 1.在子类的成员方法中，访问父类的成员变量。 2.在子类的成员方法中，访问父类的成员方法。 3.在子类的构造方法中，访问父类的构造方法。 This关键字的用法 1.在本类的成员方法中，访问本类的成员变量。\n2.在本类的成员方法中，访问本类的另一个成员方法。\n3.在本类的构造方法中，访问本类的另一个构造方法。\n在第三种用法当中要注意： A.this（…）调用也必须是构造方法的第一个语句，唯一一个。 B.super和this两种构造调用，不能同时使用。\n关键字图解 Java继承的特点 单继承：一个类的直接父类只能有唯一个 多级继承 抽象方法 抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。 抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。 使用抽象类和抽象方法：\n1.不能直接创建new抽象类对象。\n2.必须用一个子类来继承抽象父类。\n3.子类必须覆盖重写抽象父类当中所有的抽象方法。\n覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上厉法体大括号了\n4.创建子类对象进行使用。\n注意事项 1.抽象类不能创建对象，如果创建，偏译无法通过而报错。只能创建其非抽象子类的对象。 理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\n2.抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。 理解：子类的构造方法中，有默认的super（），需要访问父类构造方法。\n3.抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。 理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。\n4.抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。 理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。\n接口 接口就是一种公共的规范标准 基本定义格式 接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。 public interface 接口名称{ //接口内容 } 备注：换成了关键字interface之后，编译生成的字节码文件仍然是：Java--\u0026gt;.class。 如果是Java 7，那么接口中可以包含的内容有： 1.常量 2.抽象方法 如果是Java 8，还可以额外包含有： 3.默认方法 4.静态方法 如果是Java 9，还可以额外包含有： 5.私有方法 接口使用步骤 1.接口不能直接使用，必须有一个\u0026quot;实现类”来实现该接口。 格式： public class 实现类名称 implements 接口名称{//…}\n2.接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。 实现：去掉abstract关键字，加上方法体大括号.\n3.创建实现类的对象，进行使用。\n注意事项： 如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。\n接口的默认方法 从Java 8开始，接口里允许定义默认方法。 格式：public default 返回值类型 方法名称（参数列表）{方法体....}\n备注：接口当中的默认方法，可以解决接口升级的问题。\n1.接口的默认方法，可以通过接口实现类对象，直接调用。\n2.接口的默认方法，也可以被接口实现类进行覆盖重写。\n接口的私有方法 从Java 9开始，接口当中允许定义私有方法。 1.普通私有方法，解决多个默认方法之间重复代码问题格式： private 返回值类型 方法名称（参数列表）{方法体....} 2.静态私有方法，解决多个静态方法之间重复代码问题格式： private static 返回值类型 方法名称（参数列表）{方法体} 接口的常量定义和使用 接口当中也可以定义**“成员变量**”，但是必须使用public static final三个关键字进行修饰。 从效果上看，这其实就是接口的【常量】。 格式： public static final 数据类型 常量名称 = 数据值；\n备注：一旦使用final关键字进行修饰，说明不可改变。\n注意事项： 1.接口当中的常量，可以省略public static final，注意：不写也照样是这样。 2.接口当中的常量，必须进行赋值；不能不赋值。 3.接口中常量的名称，使用完全大写的字母，用下划线进行分隔。（推荐命名规则则\n注意事项 使用接囗的时候，需要注意：\n1.接口是没有静态代码块或者构造方法的。 2.一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。 格式： public class MyInterfaceImpl implements MyInterfaceA，MyInterfaceBf{//覆盖重写所有抽象方法} 3.如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。 4.如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。 5.如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。 6.一个类如果父类当中的方法和接口当中的默认方法产生了冲突，优先用父类当中的方法。 接口间的多继承 1.类与类之间是单继承的。直接父类只有一个。\n2.类与接口之间是多实现的。一个类可以实现多个接口。\n3.接口与接口之间是多继承的。\n注意事项： 1.多个父接口当中的抽象方法如果重复，没关系。 2.多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写，【而且带着default关键字】\n多态 多态格式 代码当中体现多态性，其实就是一句话：父类引用指向子类对象。 格式： 父类名称 对象名 = new 子类名称(); 接口名称 对象名 = new 实现类名称(); 多态中的成员变量 1.直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。 2.间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。 多态中的成员方法 在多态的代码当中，成员方法的访问规则是：看new的是谁，就优先用谁，没有则向上找。\n口诀：编译看左边，运行看右边。 成员变量：编译看左边，运行还看左边。\n成员方法：编译看左边，运行看右边。\n对象的向上和向下转型 说明：如何才能知道一个父类引用的对象，本来是什么子类 格式： 对象 instanceof 类名称 这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面类型的实例。\n","permalink":"https://luenci.com/en/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","summary":"\u003ch1 id=\"面向对象\"\u003e面向对象\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e三大特征：封装性，继承性，多态性。\u003c/li\u003e\n\u003cli\u003e继承是多态的前提，如果没有继承，就没有多态\u003c/li\u003e\n\u003cli\u003e继承主要解决的问题是：\u003cstrong\u003e共性抽取\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"继承\"\u003e继承\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e父类也可以叫基类，超类\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e子类也可以叫派生类\u003c/p\u003e","title":"Java面向对象"},{"content":"Linux操作系统 \u0026ldquo;一切皆文件\u0026rdquo; 系统启动流程 引导图\n最初始阶段 当我们打开计算机电源，计算机会自动从主板的BlOS（Basic Input/output System）读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件（硬盘，网络接口，键盘，串口，并口）。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。\n下一步，计算机将从你所选择的存储设备中读取起始的512 bytes（比如光盘一开是的512 bytes，如果我们从光盘启动的话）。这512bytes叫做主引导记录MBR（master boot record）。MBR会告诉电脑从该设备的某一个分区（partition）来装载引导加载程序（boot loader）。Boot loader储存有操作系统（OS）的相关信息，比如操作系统名称，操作系统内核（kernel）所在位置等。常用的boot loader有GRUB和LILO。\n随后，boot loader会帮助我们加载kernel。kernel实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过kernel传达给硬件。Windows和Linux各自有自己kernel。\n狭义的操作系统就是指kernel，广义的操作系统包括kernel以及kernel之上的各种应用。\n（Linus Torvalds与其说是Linux之父，不如说是Linux kernel之父。他依然负责Linux kernel的开发和维护。至于Ubuntu，Red Hat，它们都是基于相同的kernel之上，囊括了不同的应用和界面构成的一个更加完整的操作系统版本。）实际上，我们可以在多个分区安装boot loader，每个boot loader对应不同的操作系统，在读取MBR的时候选择我们想要启动的boot loader。这就是多操作系统的原理。\n小结：BlOS -\u0026gt; MBR -\u0026gt; boot loader -\u0026gt; kernel\nkernel\n如果我们加载的是Linux kernel，Linux kernel开始工作。kernel会首先预留自己运行所需的内存空间，然后通过驱动程序（driver）检测计算机硬件。这样，操作系统就可以知道自己有哪些硬件可用。随后，kernel会启动一个init进程。它是Linux系统中的1号进程（Linux系统没有0号进程）。到此，kernel就完成了在计算机启动阶段的工作，交接给init来管理。 小结：kernel -\u0026gt; init process init process\n（根据boot loader的选项，Linux此时可以进入单用户模式（single user mode））。在此模式下，初始脚本还没有开始执行，我们可以检测并修复计算机可能存在的错误）随后，init会运行一系列的初始脚本（startup scripts），这些脚本是Linux中常见的shell scripts。这些脚本执行如下功能：\n设置计算机名称，时区，检测文件系统，挂载硬盘，清空临时文件，设置网络等 当这些初始脚本，操作系统已经完全准备好了，只是，还没有人可以登录！！！init会给出登录（login）对话框，或者是图形化的登录界面。\n输入用户名（比如说luenci）和密码，DONE！\n在此后的过程中，你将以用户（user）luenci的身份操作电脑。此外，根据你创建用户时的设定，Linux还会将你归到某个组（group）中，比如可以是stupid组，或者是luenci组。所以你将是用户luenci，同时是luenci组的组员。（注意，组luenci和用户luenci只是重名而已，就好想你可以叫Dell，同时还是Dell公司的老板一样。你完全也可以是用户luenci，同时为stupid组的组员）\n启动级别 7种运行级别\n运行级别（Runlevel）指的是Unix或者Linux等类Unix操作系统的运行模式，不同的运行模式下系统的功能也有所有不同。Linux 系统下通常分为7种运行级别，分别是从0到6。各级别介绍如下：\n0\u0026ndash;停机模式\n在这种模式下，系统处于停机状态，系统默认运行级别不能设为0，否则将不能正常启动。这个运行级别主要用于关闭任务，在/etc/rc0.d目录下的各个连接命令都是此级别的命令，在关闭系统时，这些命令将被逐个执行。它 们会杀掉所有进程、关闭虚拟内存和交换文件、卸载文件系统和交换分区。 1\u0026ndash; 单用户模式。\n在这种运行模下，系统处于单用户工作状态，登录用户具有root权限，文件系统被加载但是网络却没有被加载，因此也无法远程登陆。这个运行级别，只允一个用户从本地计算机上登录，/etc/rc1.d目录下的所有文件与此运行级别相关连，这个运行级别一般用于系统管理与维护。 2 - -多用户模式。\n用户可以通过网络进行登录，但没有NFS（Network File System），即网络文件统。/etc/rc2.d目录下所有文件与此级别相连。 3 - -完全多用户模式。\n用户可以通过网络进行登录，且有NFS，用户登陆后会进入控制台命令行模式。这也是缺省的运行模式，在这种运行级别下所有网络服务程序会一起运行。/etc/rc2.d录下的文件与此级别相连\n4 - -自定义模式。\n这是一种系统未使用的保留模式，/etc/rc4.d目录与此级别相连。这一级别是用户自定义的运行级别，用户可以根自己的需要进行一些自定义设置。如果想要运行这一级别的话，必须在rc3.d目录下放入连接文件，就像其他rc*.d目录下的文件，并指明是启动还是终止进程。 5 - -图形化模式。\n在 Linux 下运行X Window就是使用这一运行级别，用户登录后将进入图形化的GUI界面。在这一级别下除了DNS的named与级别3不同，其余的都相同。 6 \u0026ndash; 重启模式。\n系统正常关闭并重启，默认运行级别不能设为5，否则系统将不能正常启动。/etc/rc6.d目录与此级别相连。在这一运行级别下，不会关闭电源，/etc/rc6.d目录下的连接与rc0.d目录下的连接基本相同；不同之处在于，虽然它们都执行halt（关闭）命令，但是给halt传递的参数不同，所级别6会重新启动系统而0会关闭系统。 GRUB加密 GRUB程序和grub.conf文件 1）掌握GRUB的定义：GRUB是Grand Unified Boot loader（多重操作系统启动管理器）的缩写。 心 2）掌握grub的配置文件为：grub.conf设置grub Md5加密命令grub-md5-crypt Password=明文或password-md5密文（编辑grub配置文件的密码） Title red hat 标题 Password=明文或password--md5密文（加载内核系统引导必须的密码） BIOS加密 设置BIOS密码来防止更改GRU配置文件 但是这种方法可将主板电池扣下，主板自动还原，密码也失效了 没有绝对的安全，要不停的学习\n目录结构 在Linux或UNIX操作系统中，所有的文件和目录都被组织成一个以根节点开始的倒置的树状结构。 顶层根目录的表示 使用'/'来表示根目录 文件系统中的特殊目录 .表示当前目录，即用户所在的工作目录 ..表示父目录，即当前目录的上一层目录 ~代表当前用户的家目录（home） 一些重要目录 bin目录：用来存放常用的可执行文件 sbin目录：用来存放系统的可执行文件 home家目录：用来存放用户自己的文件或目录，其中，超级用户root的家目普通用户的家目录被存放在/home目录下，并使用用户名作为最后一级目的名称，如luenci用户的家目录为/home/luenci dev目录：设备文件目录 etc目录：配置文件目录 挂载点（目录）：通常可移除式硬件会被挂载在/media或/mnt目录之下 用户，群组，权限管理 /etc/passed文件中存放用户的信息 分别对应的是：用户名：密码：user_id：group_id：描述名：家目录（home）：登录后执行的命令 如果执行的登录命令为：/bin/bash则可以登录 如果执行的登录命令为：/sbin/nologin则不可以登录 user_id: 500以前id号为系统占用的 useradd命令的常用选项 -u：指定用户的UID -g：指定用户所属的群组 -d：指定用户的家目录 -c：指定用户的备注信息 -s：指定用户所用的shell -r: 删除用户 文件的权限管理 权限信息(用户权限(u);组权限(g);其他用户权限(0))；硬链接数；用户；用户组；文件大小；文件创建日期 r-\u0026gt;4 w-\u0026gt;2 x-\u0026gt;1 -开头代表一个文件类型\nd开头代表一个目录类型\nl开头代表一个软链接\nb（block）开头代表设备文件\np开头有代表管道文件\n对于可执行文件的运行 sh 可执行文件名 bash 可执行文件名 ./可执行文件名 . 可执行文件名 目录的权限管理 ll -d 目录查看目录的权限 更改文件的用户和组 chown 用户.组别 文件名 chown -R递归修改用户和组 文件合并 wc -l 文件名统计文件行数\n\u0026gt;以覆盖的方式写入内容\n\u0026gt;\u0026gt;以追加的方式写入内容\n解压和压缩命令 1、.tar 解包：tar xvf FileName.tar 打包：tar cvf FileName.tar DirName （注：tar是打包，不是压缩！）\n2、.gz\n解压1：gunzip FileName.gz 解压2：gzip -d FileName.gz 压缩：gzip FileName\n3、.tar.gz 和 .tgz\n解压：tar zxvf FileName.tar.gz 压缩：tar zcvf FileName.tar.gz DirName\n4、.bz2\n解压1：bzip2 -d FileName.bz2 解压2：bunzip2 FileName.bz2 压缩： bzip2 -z FileName\n5、.tar.bz2\n解压：tar jxvf FileName.tar.bz2 压缩：tar jcvf FileName.tar.bz2 DirName\n6、.bz\n解压1：bzip2 -d FileName.bz 解压2：bunzip2 FileName.bz\n7、.tar.bz\n解压：tar jxvf FileName.tar.bz\n8、.Z\n解压：uncompress FileName.Z 压缩：compress FileName\n9、.tar.Z\n解压：tar Zxvf FileName.tar.Z 压缩：tar Zcvf FileName.tar.Z DirName\n10、.zip\n解压：unzip FileName.zip 压缩：zip FileName.zip DirName\n11、.rar\n解压：rar x FileName.rar 压缩：rar a FileName.rar DirName\n12、.lha\n解压：lha -e FileName.lha 压缩：lha -a FileName.lha FileName\n13、.rpm\n解包：rpm2cpio FileName.rpm | cpio -div\nvim一些常见指令 快速在屏幕中移动光标的位置的命令\nH光标移动到这个屏幕的最上方那一行的第一个字符 M无标移动到这个屏幕的中央那一行的第一个字符 L无标移动到这个屏幕的最下那一行的第一个字符 G移动到文件的最后一行\ngg移动到文件的第一行\nctrl+ r恢复上一次操作\nu撤销上一个操作\nctrl+a跳到文件的首部\nctrl+e跳到文件的尾部\nyy复制\np粘贴到行尾\nP站贴到行头\nweight命令 第一行 字符 含义 weight - 10:03:19 当前系统时间 up 137 days , 10:40 系统已运行时间 2 user 在线用户 load average: 0.00, 0.01, 0.05 系统负载。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。 2 user，包含系统用户。\n第二行 字符 含义 Tasks : 92 total 总进程数 2 running 正在运行的进程数 90 sleeping 正在睡眠的进程数 0 sweightped 停止的进程数 0 zombie 僵尸进程数 僵尸进程:一个子进程在其父进程没有调用wait()或waitpid()的情况下退出。这个子进程就是僵尸进程。如果其父进程还存在而一直不调用wait，则该僵尸进程将无法回收，等到其父进程退出后该进程将被init回收。\n第三行 字符 含义 %Cpu(s): 0.3 us cpu占用率(%)，用户进程占用cpu百分率 0.3 sy 系统占用cpu百分率 0.0 ni 用户进程空间内改变过优先级的进程占用CPU百分比 99.3 id cpu空闲率 0.0 wa 等待IO的CPU时间百分比 0.0 hi 硬中断（Hardware IRQ）占用CPU的百分比 0.0 si 软中断（Software Interrupts）占用CPU的百分比 cpu的使用情况\n第四行 字符 含义 KiB Mem : 1016916 total 内存总量（我这里是1G） 82280 free 内存空闲量 233848 used 内存使用量 700788 buff/cache 缓存的内存量 内存使用率\n第五行 字符 含义 KiB Swap: 0 total 交换区总量 0 free 交换区空闲量 0 used 交换区使用量 swap分区\n第六行 字符 含义 PID 进程号 USER 进程创建者 PR 进程优先级 NI nice值。越小优先级越高，最小-20，最大20（用户设置最大19） VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA SHR 共享内存大小，单位kb S 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 %CPU 进程占用cpu百分比 %MEM 进程占用内存百分比 TIME+ 进程运行时间 COMMAND 进程名称 PR 越低优先级 越高，PRI(new)=PRI(old)+nice PR中的rt为实时进程优先级即rt_priority，prio=MAX_RT_PRIO - 1- p-\u0026gt;rt_priority MAX_RT_PRIO = 99，prio大小决定最终优先级。这样意味着rt_priority值越大，优先级越高而内核提供的修改优先级的函数，是修改rt_priority的值，所以越大，优先级越高。 例：改变优先级：进入weight后按“r”–\u0026gt;输入进程PID–\u0026gt;输入nice值\nweight命令（在进入weight后使用） P：以占据CPU百分比排序 M：以占据内存百分比排序 T：以累积占用CPU时间排序 q：退出命令：按q键退出weight查看页面 s：修改刷新时间间隔。按下s键，然后按下数字，即可修改刷新时间间隔为你输入的数字，单位为秒。例如：按下s键，在按数字1键，即可实现每秒刷新一次 k：终止指定的进程。按下k键\u0026ndash;\u0026gt;再输入要杀死的进程的pid\u0026ndash;\u0026gt;按enter键\u0026ndash;\u0026gt;(选择信号类型，以数字标示，默认15为杀死)本步可省略按enter键（常用为-9）\nfree命令 free free -m free -h ","permalink":"https://luenci.com/en/posts/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/","summary":"\u003ch1 id=\"linux操作系统\"\u003eLinux操作系统\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;一切皆文件\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"系统启动流程\"\u003e系统启动流程\u003c/h2\u003e\n\u003cp\u003e引导图\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502160423268.png\" alt=\"引导图\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e最初始阶段\n当我们打开计算机电源，计算机会自动从主板的\u003ccode\u003eBlOS\u003c/code\u003e（Basic Input/output System）读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件（硬盘，网络接口，键盘，串口，并口）。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e下一步，计算机将从你所选择的存储设备中读取起始的512 bytes（比如光盘一开是的512 bytes，如果我们从光盘启动的话）。这\u003ccode\u003e512bytes\u003c/code\u003e叫做主引导记录\u003ccode\u003eMBR\u003c/code\u003e（master boot record）。\u003ccode\u003eMBR\u003c/code\u003e会告诉电脑从该设备的某一个分区（partition）来装载引导加载程序（boot loader）。\u003ccode\u003eBoot loader\u003c/code\u003e储存有操作系统（OS）的相关信息，比如操作系统名称，操作系统内核（kernel）所在位置等。常用的\u003ccode\u003eboot loader\u003c/code\u003e有\u003ccode\u003eGRUB\u003c/code\u003e和\u003ccode\u003eLILO\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e随后，\u003ccode\u003eboot loade\u003c/code\u003er会帮助我们加载\u003ccode\u003ekernel\u003c/code\u003e。\u003ccode\u003ekernel\u003c/code\u003e实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过\u003ccode\u003ekernel\u003c/code\u003e传达给硬件。\u003ccode\u003eWindows\u003c/code\u003e和\u003ccode\u003eLinux\u003c/code\u003e各自有自己\u003ccode\u003ekernel\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e狭义的操作系统就是指\u003ccode\u003ekernel\u003c/code\u003e，广义的操作系统包括\u003ccode\u003ekernel\u003c/code\u003e以及\u003ccode\u003ekernel\u003c/code\u003e之上的各种应用。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e（Linus Torvalds与其说是Linux之父，不如说是\u003ccode\u003eLinux kernel\u003c/code\u003e之父。他依然负责\u003ccode\u003eLinux kernel\u003c/code\u003e的开发和维护。至于\u003ccode\u003eUbuntu\u003c/code\u003e，\u003ccode\u003eRed Hat\u003c/code\u003e，它们都是基于相同的\u003ccode\u003ekernel\u003c/code\u003e之上，囊括了不同的应用和界面构成的一个更加完整的操作系统版本。）实际上，我们可以在多个分区安装\u003ccode\u003eboot loader\u003c/code\u003e，每个\u003ccode\u003eboot loader\u003c/code\u003e对应不同的操作系统，在读取\u003ccode\u003eMBR\u003c/code\u003e的时候选择我们想要启动的boot loader。这就是多操作系统的原理。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e小结：\u003ccode\u003eBlOS -\u0026gt; MBR -\u0026gt; boot loader -\u0026gt; kernel\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ekernel\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果我们加载的是Linux kernel，Linux kernel开始工作。kernel会首先预留自己运行所需的内存空间，然后通过驱动程序（driver）检测计算机硬件。这样，操作系统就可以知道自己有哪些硬件可用。随后，kernel会启动一个init进程。它是Linux系统中的1号进程（Linux系统没有0号进程）。到此，kernel就完成了在计算机启动阶段的工作，交接给init来管理。\u003c/li\u003e\n\u003cli\u003e小结：\u003ccode\u003ekernel -\u0026gt; init process \u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einit process\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e（根据boot loader的选项，Linux此时可以进入单用户模式（single user mode））。在此模式下，初始脚本还没有开始执行，我们可以检测并修复计算机可能存在的错误）随后，init会运行一系列的初始脚本（startup scripts），这些脚本是Linux中常见的shell scripts。这些脚本执行如下功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e设置计算机名称，时区，检测文件系统，挂载硬盘，清空临时文件，设置网络等\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当这些初始脚本，操作系统已经完全准备好了，只是，还没有人可以登录！！！init会给出登录（login）对话框，或者是图形化的登录界面。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e输入用户名（比如说luenci）和密码，DONE！\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在此后的过程中，你将以用户（user）luenci的身份操作电脑。此外，根据你创建用户时的设定，Linux还会将你归到某个组（group）中，比如可以是stupid组，或者是luenci组。所以你将是用户luenci，同时是luenci组的组员。（注意，组luenci和用户luenci只是重名而已，就好想你可以叫Dell，同时还是Dell公司的老板一样。你完全也可以是用户luenci，同时为stupid组的组员）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"启动级别\"\u003e启动级别\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e7种运行级别\u003c/p\u003e\n\u003cp\u003e运行级别（\u003ccode\u003eRunlevel\u003c/code\u003e）指的是Unix或者Linux等类Unix操作系统的运行模式，不同的运行模式下系统的功能也有所有不同。Linux 系统下通常分为\u003ccode\u003e7\u003c/code\u003e种运行级别，分别是从\u003ccode\u003e0\u003c/code\u003e到\u003ccode\u003e6\u003c/code\u003e。各级别介绍如下：\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e0\u003c/code\u003e\u0026ndash;停机模式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在这种模式下，系统处于停机状态，系统默认运行级别不能设为\u003ccode\u003e0\u003c/code\u003e，否则将不能正常启动。这个运行级别主要用于关闭任务，在\u003ccode\u003e/etc/rc0.d\u003c/code\u003e目录下的各个连接命令都是此级别的命令，在关闭系统时，这些命令将被逐个执行。它 们会杀掉所有进程、关闭虚拟内存和交换文件、卸载文件系统和交换分区。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e1\u003c/code\u003e\u0026ndash; 单用户模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在这种运行模下，系统处于单用户工作状态，登录用户具有root权限，文件系统被加载但是网络却没有被加载，因此也无法远程登陆。这个运行级别，只允一个用户从本地计算机上登录，\u003ccode\u003e/etc/rc1.d\u003c/code\u003e目录下的所有文件与此运行级别相关连，这个运行级别一般用于系统管理与维护。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e2\u003c/code\u003e - -多用户模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户可以通过网络进行登录，但没有\u003ccode\u003eNFS\u003c/code\u003e（Network File System），即网络文件统。\u003ccode\u003e/etc/rc2.d\u003c/code\u003e目录下所有文件与此级别相连。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e3\u003c/code\u003e - -完全多用户模式。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e用户可以通过网络进行登录，且有\u003ccode\u003eNFS\u003c/code\u003e，用户登陆后会进入控制台命令行模式。这也是缺省的运行模式，在这种运行级别下所有网络服务程序会一起运行。\u003ccode\u003e/etc/rc2.d\u003c/code\u003e录下的文件与此级别相连\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e4\u003c/code\u003e - -自定义模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e这是一种系统未使用的保留模式，\u003ccode\u003e/etc/rc4.d\u003c/code\u003e目录与此级别相连。这一级别是用户自定义的运行级别，用户可以根自己的需要进行一些自定义设置。如果想要运行这一级别的话，必须在\u003ccode\u003erc3.d\u003c/code\u003e目录下放入连接文件，就像其他\u003ccode\u003erc*.d\u003c/code\u003e目录下的文件，并指明是启动还是终止进程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e5\u003c/code\u003e - -图形化模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在 Linux 下运行\u003ccode\u003eX Window\u003c/code\u003e就是使用这一运行级别，用户登录后将进入图形化的GUI界面。在这一级别下除了DNS的\u003ccode\u003enamed\u003c/code\u003e与级别\u003ccode\u003e3\u003c/code\u003e不同，其余的都相同。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e6\u003c/code\u003e \u0026ndash; 重启模式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e系统正常关闭并重启，默认运行级别不能设为\u003ccode\u003e5\u003c/code\u003e，否则系统将不能正常启动。\u003ccode\u003e/etc/rc6.d\u003c/code\u003e目录与此级别相连。在这一运行级别下，不会关闭电源，\u003ccode\u003e/etc/rc6.d\u003c/code\u003e目录下的连接与\u003ccode\u003erc0.d\u003c/code\u003e目录下的连接基本相同；不同之处在于，虽然它们都执行\u003ccode\u003ehalt\u003c/code\u003e（关闭）命令，但是给\u003ccode\u003ehalt\u003c/code\u003e传递的参数不同，所级别\u003ccode\u003e6\u003c/code\u003e会重新启动系统而\u003ccode\u003e0\u003c/code\u003e会关闭系统。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Linux学习（一）"},{"content":"Linux操作系统（二） 进程命令 ps aux 显示所有进程 ps aux | grep '' 筛选出相关进程 kill pid 杀死相关的pid进程 kill - 9 pid 强制杀死进程 jobs查看进程的工作号 fg %工作号后台程序调到前台运行 硬盘分区 fdisk -l /dev/磁盘名查看对应磁盘名的详细信息 文件系统 磁盘分区完毕后还需要进行格式化（format），之后操作系统才能够使用这个文件系统。 为什么需要进行“格式化”呢？这是因为每种操作系统所设置的文件属性/权限并不相同， 为了存放这些文件所需的数据，因此就需要将分区进行格式化，以成为操作系统能够利用的“文件系统格式（filesystem）”。\n由此我们也能够知道，每种操作系统能够使用的文件系统并不相同。 举例来说，windows 98 以前的微软操作系统主要利用的文件系统是 FAT （或 FAT16），windows 2000 以后的版本有所谓的 NTFS 文件系统，至于 Linux 的正统文件系统则为 Ext2 （Linux second extended file system, ext2fs）这一个。此外，在默认的情况下，windows 操作系统是不会认识 Linux 的 Ext2 的。\n传统的磁盘与文件系统之应用中，一个分区就是只能够被格式化成为一个文件系统，所以我们可以说一个 filesystem 就是一个 partition。但是由于新技术的利用，例如我们常听到的LVM与软件磁盘阵列（software raid）， 这些技术可以将一个分区格式化为多个文件系统（例如LVM），也能够将多个分区合成一个文件系统（LVM, RAID）！ 所以说，目前我们在格式化时已经不再说成针对 partition 来格式化了， 通常我们可以称呼一个可被挂载的数据为一个文件系统而不是一个分区喔！\n那么文件系统是如何运行的呢？这与操作系统的文件数据有关。较新的操作系统的文件数据除了文件实际内容外， 通常含有非常多的属性，例如 Linux 操作系统的文件权限（rwx）与文件属性（拥有者、群组、时间参数等）。 文件系统通常会将这两部份的数据分别存放在不同的区块，权限与属性放置到 inode 中，至于实际数据则放置到 data block 区块中。 另外，还有一个超级区块 （superblock） 会记录整个文件系统的整体信息，包括 inode 与 block 的总量、使用量、剩余量等。\n每个 inode 与 block 都有编号，至于这三个数据的意义可以简略说明如下：\nsuperblock：记录此 filesystem 的整体信息，包括inode/block的总量、使用量、剩余量， 以及文件系统的格式与相关信息等； inode：记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的 block 号码； block：实际记录文件的内容，若文件太大时，会占用多个 block 。 由于每个 inode 与 block 都有编号，而每个文件都会占用一个 inode ，inode 内则有文件数据放置的 block 号码。 因此，我们可以知道的是，如果能够找到文件的 inode 的话，那么自然就会知道这个文件所放置数据的 block 号码， 当然也就能够读出该文件的实际数据了。这是个比较有效率的作法，因为如此一来我们的磁盘就能够在短时间内读取出全部的数据， 读写的性能比较好啰。\n我们将 inode 与 block 区块用图解来说明一下，如下图所示，文件系统先格式化出 inode 与 block 的区块，假设某一个文件的属性与权限数据是放置到 inode 4 号（下图较小方格内），而这个 inode 记录了文件数据的实际放置点为 2, 7, 13, 15 这四个 block 号码，此时我们的操作系统就能够据此来排列磁盘的读取顺序，可以一口气将四个 block 内容读出来！ 那么数据的读取就如同下图中的箭头所指定的模样了。\n图7.1.1、inode/block 数据存取示意图\n这种数据存取的方法我们称为索引式文件系统（indexed allocation）。那有没有其他的惯用文件系统可以比较一下啊？ 有的，那就是我们惯用的U盘（闪存），U盘使用的文件系统一般为 FAT 格式。FAT 这种格式的文件系统并没有 inode 存在，所以 FAT 没有办法将这个文件的所有 block 在一开始就读取出来。每个 block 号码都记录在前一个 block 当中， 他的读取方式有点像下面这样：\n图7.1.2、FAT文件系统数据存取示意图\n​\t上图中我们假设文件的数据依序写入1-\u0026gt;7-\u0026gt;4-\u0026gt;15号这四个 block 号码中， 但这个文件系统没有办法一口气就知道四个 block 的号码，他得要一个一个的将 block 读出后，才会知道下一个 block 在何处。 如果同一个文件数据写入的 block 分散的太过厉害时，则我们的磁头将无法在磁盘转一圈就读到所有的数据， 因此磁盘就会多转好几圈才能完整的读取到这个文件的内容！\n常常会听到所谓的“磁盘重组”吧？ 需要磁盘重组的原因就是文件写入的 block 太过于离散了，此时文件读取的性能将会变的很差所致。 这个时候可以通过磁盘重组将同一个文件所属的 blocks 汇整在一起，这样数据的读取会比较容易啊！ 想当然尔，FAT 的文件系统需要三不五时的磁盘重组一下，那么 Ext2 是否需要磁盘重整呢？\n由于 Ext2 是索引式文件系统，基本上不太需要常常进行磁盘重组的。但是如果文件系统使用太久， 常常删除/编辑/新增文件时，那么还是可能会造成文件数据太过于离散的问题，此时或许会需要进行重整一下的。 不过，老实说，鸟哥倒是没有在 Linux 操作系统上面进行过 Ext2/Ext3 文件系统的磁盘重组.\n每个 filesystem 都有独立的inode / block / superblock等信息，这个文件系统要能够链接到目录树才能被我们使用。 将文件系统与目录树结合的动作我们称为“挂载”。 重点是：挂载点一定是目录，该目录为进入该文件系统的入口。 因此并不是你有任何文件系统都能使用，必须要“挂载”到目录树的某个目录后，才能够使用该文件系统的。 关于硬盘空间满 1.指硬盘存储空间满\n2.inode节点数满了\n查看inode命令ll -i 文件名 硬链接和软链接 软链接\nln -s 源路径 目标路径 类似windows操作系统的快捷方式 删除链接文件，源文件不影响 删除源文件，链接文件失效 修改源文件/链接文件，内容都变 软链接可以跨分区 硬链接\nln 源路径 目标路径\n删除链接文件，源文件无影响 删除源文件，链接文件无影响 修改源文件/链接文件，内容都变 硬链接不可以跨分区 软件包管理 rpm:readhat package manage rpm -ivh 软件包名 安装 rpm -qa查看安装的软件包 rpm -e 软件包名卸载软件包 .tar.gz这种软件包需要编译安装 1.解压 tar xvf 压缩包名 运行configure指定参数，例如：--prefix:安装路径 2.编译（gcc glibc） make make install yum软件包管理（Centos） yum install 软件包名\n本地的yum仓库路径/etc/yum.repos.d/\n指定yum仓库的加载顺序\n安装完yum-priorities插件后需要设置/etc/yum.repos.d/ 目录下的.repo相关文件（如CentOS-Base.repo），在这些文件中插入顺序指令：priority=N （N为1到99的正整数，数值越小越优先） 一般配置[base], [addons], [updates], [extras] 的priority=1，[CentOSplus], [contrib] 的priority=2，其他第三的软件源为：priority=N （推荐N\u0026gt;10） 以CentOS-Base.repo 为例： [base] name=CentOS-$releasever - Base #mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026amp;arch=$basearch\u0026amp;repo=os baseurl=http://ftp.sjtu.edu.cn/centos/$releasever/os/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5 priority=1\n","permalink":"https://luenci.com/en/posts/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/","summary":"\u003ch1 id=\"linux操作系统二\"\u003eLinux操作系统（二）\u003c/h1\u003e\n\u003ch2 id=\"进程命令\"\u003e进程命令\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eps aux\u003c/code\u003e  显示所有进程\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eps aux | grep ''\u003c/code\u003e 筛选出相关进程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204505096.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ekill  pid\u003c/code\u003e 杀死相关的pid进程\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekill - 9 pid\u003c/code\u003e 强制杀死进程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502204832777.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ejobs\u003c/code\u003e查看进程的工作号\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efg %工作号\u003c/code\u003e后台程序调到前台运行\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"硬盘分区\"\u003e硬盘分区\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efdisk -l /dev/磁盘名\u003c/code\u003e查看对应磁盘名的详细信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200502212407780.png\" alt=\"\"  /\u003e\n\u003c/p\u003e","title":"Linux学习（二）"},{"content":"Linux管理文件和目录的命令 命令 功能 命令 功能 pwd 显示当前目录 ls 查看目录下的内容 cd 改变所在目录 cat 显示文件的内容 grep 在文件中查找某字符 cp 复制文件 touch 创建文件 mv 移动文件 rm 删除文件 rmdir 删除目录 pwd命令\n该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。\ncd命令\ncd命令用来改变所在目录。\n1 2 3 4 cd / 转到根目录中 cd ~ 转到/home/user用户目录下 cd /usr 转到根目录下的usr目录中-------------绝对路径 cd test 转到当前目录下的test子目录中-------相对路径 ls命令\n​\tls命令用来查看目录的内容。\n选项 含义 -a 列举目录中的全部文件，包括隐藏文件 -l 列举目录中的细节，包括权限、所有者、组群、大小、创建日期、文件是否是链接等 -f 列举的文件显示文件类型 -r 逆向，从后向前地列举目录中内容 -R 递归，该选项递归地列举当前目录下所有子目录内的内容 -s 大小，按文件大小排序 -h 以人类可读的方式显示文件的大小，如用K、M、G作单位 ls -l examples.doc 列举文件examples.doc的所有信息 cat命令 1 2 3 cat命令可以用来合并文件，也可以用来在屏幕上显示整个文件的内容。 cat snow.txt 该命令显示文件snow.txt的内容，ctrl+D退出cat。 grep命令 1 2 3 4 5 6 grep命令的最大功能是在一堆文件中查找一个特定的字符串。 grep money test.txt 以上命令在test.txt中查找money这个字符串，grep查找是区分大小写的 touch命令​ 1 2 3 4 touch命令用来创建新文件，他可以创建一个空白的文件，可以在其中添加文本和数据。 touch newfile 该命令创建一个名为newfile的空白文件。 cp命令 ​\tcp命令用来拷贝文件，要复制文件，输入命令：\n1 2 cp \u0026lt;source filename\u0026gt; \u0026lt;target filename\u0026gt; cp t.txt Document/t 该命令将把文件t.txt复制到Document目录下，并命名为t。 选项 含义 -i 互动：如果文件将覆盖目标中的文件，他会提示确认 -r 递归：这个选项会复制整个目录树、子目录以及其他 -v 详细：显示文件的复制进度 mv命令 ​\tmv命令用来移动文件。\n选项 说明 -i 互动：如果选择的文件会覆盖目标中的文件，他会提示确认 -f 强制：它会超越互动模式，不提示地移动文件，属于很危险的选项 -v 详细：显示文件的移动进度 ​\tmv t.txt Document 把文件t.txt 移动到目录Document中。\nrm命令 ​\trm命令用来删除文件。\n选项 说明 -i 互动：提示确认删除 -f 强制：代替互动模式，不提示确认删除 -v 详细：显示文件的删除进度 -r 递归：将删除某个目录以及其中所有的文件和子目录 ​\trm t.txt 该命令删除文件t.txt\nrmdir命令\n​\trmdir命令用来删除目录。\nmkdir 命令\n1 2 3 4 5 6 7 #单个文件夹创建 mkdir 文件夹名称 #例如：mkdir wenjianjia #多个文件夹创建 mkdirs 文件夹1/文件夹2...... \\#例如：mkdirs wenjianjia1/wenjianjia2 chmod命令详解 作用：\n改变一个或多个文件的存取模式(mode)\n格式：\nchmod [options] mode files\n只能文件属主或特权用户才能使用该功能来改变文件存取模式。\nmode： 可以是数字形式或以who opcode permission形式表示。who是可选的，默认是a(所有用户)。只能选择一个opcode(操作码)。可指定多个mode，以逗号分开。\n综上，包含options、who、opcode、permission等选项，下面分别进行介绍\noptions：\n标识 含义 -c，–changes 只输出被改变文件的信息 -f，–silent，–quiet 当chmod不能改变文件模式时，不通知文件的用户 –help 输出帮助信息。 -R，–recursive 可递归遍历子目录，把修改应到目录下所有文件和子目录 –reference=filename 参照filename的权限来设置权限 -v，–verbose 无论修改是否成功，输出每个文件的信息 –version 输出版本信息 who\n标识 含义 u 用户 g 组 o 其它 a 所有用户(默认) opcode\n标识 含义 + 增加权限 - 删除权限 = 重新分配权限 permission\n标识 含义 r 读 w 写 x 执行 s 设置用户(或组)的ID号 t 设置粘着位(sticky bit)，防止文件或目录被非属主删除 作为选择，我们多数用三位八进制数字的形式来表示权限，第一位指定属主的权限，第二位指定组权限，第三位指定其他用户的权限，每位通过4(读)、2(写)、1(执行)三种数值的和来确定权限。如6(4+2)代表有读写权，7(4+2+1)有读、写和执行的权限。\n还可设置第四位，它位于三位权限序列的前面，第四位数字取值是4，2，1，代表意思如下：\n4，执行时设置用户ID，用于授权给基于文件属主的进程，而不是给创建此进程的用户。 2，执行时设置用户组ID，用于授权给基于文件所在组的进程，而不是基于创建此进程的用户。 1，设置粘着位。\n实例：\n1 2 3 4 5 6 7 8 $ chmod u+x file 给file的属主增加执行权限 $ chmod 751 file 给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限 $ chmod u=rwx,g=rx,o=x file 上例的另一种形式 $ chmod =r file 为所有用户分配读权限 $ chmod 444 file 同上例 $ chmod a-wx,a+r file 同上例 $ chmod -R u+r directory 递归地给directory目录下所有文件和子目录的属主分配读的权限 $ chmod 4755 设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。 linux下链接 ln –s 源文件 目标文件\n","permalink":"https://luenci.com/en/posts/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","summary":"\u003ch2 id=\"linux管理文件和目录的命令\"\u003eLinux管理文件和目录的命令\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e命令\u003c/th\u003e\n          \u003cth\u003e功能\u003c/th\u003e\n          \u003cth\u003e命令\u003c/th\u003e\n          \u003cth\u003e功能\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003epwd\u003c/td\u003e\n          \u003ctd\u003e显示当前目录\u003c/td\u003e\n          \u003ctd\u003els\u003c/td\u003e\n          \u003ctd\u003e查看目录下的内容\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ecd\u003c/td\u003e\n          \u003ctd\u003e改变所在目录\u003c/td\u003e\n          \u003ctd\u003ecat\u003c/td\u003e\n          \u003ctd\u003e显示文件的内容\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003egrep\u003c/td\u003e\n          \u003ctd\u003e在文件中查找某字符\u003c/td\u003e\n          \u003ctd\u003ecp\u003c/td\u003e\n          \u003ctd\u003e复制文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003etouch\u003c/td\u003e\n          \u003ctd\u003e创建文件\u003c/td\u003e\n          \u003ctd\u003emv\u003c/td\u003e\n          \u003ctd\u003e移动文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003erm\u003c/td\u003e\n          \u003ctd\u003e删除文件\u003c/td\u003e\n          \u003ctd\u003ermdir\u003c/td\u003e\n          \u003ctd\u003e删除目录\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003epwd命令\u003c/p\u003e\n\u003cp\u003e该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecd命令\u003c/p\u003e\n\u003cp\u003ecd命令用来改变所在目录。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Linux常用命令"},{"content":"list, tuple, dictionary, set的底层细节 列表实现细节 python中的列表的英文名是list，因此很容易和其它语言(C++, Java等)标准库中常见的链表混淆。事实上CPython的列表根本不是列表（可能换成英文理解起来容易些：python中的list不是list）。在CPython中，列表被实现为长度可变的数组。可参考《Python高级编程（第2版）》\n从细节上看，Python中的列表是由对其它对象的引用组成的连续数组。指向这个数组的指针及其长度被保存在一个列表头结构中。\n这意味着，每次添加或删除一个元素时，由引用组成的数组需要该标大小（重新分配）。幸运的是，Python在创建这些数组时采用了指数分配，所以并不是每次操作都需要改变数组的大小。但是，也因为这个原因添加或取出元素的平摊复杂度较低。不幸的是，在普通链表上“代价很小”的其它一些操作在Python中计算复杂度相对过高。\n利用 list.insert(i,item) 方法在任意位置插入一个元素——复杂度O(N) 利用 list.pop(i) 或 list.remove(value) 删除一个元素——复杂度O(N)\n操作 复杂度 复制 O(N) 添加元素(在尾部添加) O(1) 插入元素(在指定位置插入) O(N) 获取元素 O(1) 修改元素 O(1) 删除元素 O(N) 遍历 O(N) 获取长度为k的切片 O(k) 删除切片 O(N) 列表扩展 O(k) 测试是否在列表中 O(N) min()/max() O(n) 获取列表长度 O(1) 字典实现细节 CPython使用伪随机探测(pseudo-random probing)的散列表(hash table)作为字典的底层数据结构。由于这个实现细节，只有可哈希的对象才能作为字典的键。\nPython中所有不可变的内置类型都是可哈希的。可变类型（如列表，字典和集合）就是不可哈希的，因此不能作为字典的键。\n字典的三个基本操作（添加元素，获取元素和删除元素）的平均事件复杂度为O(1)，但是他们的平摊最坏情况复杂度要高得多，为O(N).\n字典的三个基本操作（添加元素，获取元素和删除元素）的平均事件复杂度为O(1)，但是他们的平摊最坏情况复杂度要高得多，为O(N).\n操作 平均复杂度 平摊最坏情况复杂度 获取元素 O(1) O(n) 修改元素 O(1) O(n) 删除元素 O(1) O(n) 复制 O(n) O(n) 遍历 O(n) O(n) 还有一点很重要，在复制和遍历字典的操作中，最坏的复杂度中的n是字典曾经达到的最大元素数目，而不是当前的元素数目。换句话说，如果一个字典曾经元素个数很多，后来又大大减小了，那么遍历这个字典可能会花费相当长的事件。因此在某些情况下，如果需要频繁的遍历某个词典，那么最好创建一个新的字典对象，而不是仅在旧字典中删除元素。\n集合实现细节 集合是一种鲁棒性很好的数据结构，当元素顺序的重要性不如元素的唯一性和测试元素是否包含在集合中的效率时，大部分情况下这种数据结构极其有用。\npython的内置集合类型有两种：\nset(): 一种可变的、无序的、有限的集合，其元素是唯一的、不可变的（可哈希的）对象。\nfrozenset(): 一种不可变的、可哈希的、无序的集合，其元素是唯一的，不可变的哈希对象。\nCPython中集合和字典非常相似。事实上，集合被实现为带有空值的字典，只有键才是实际的集合元素。此外，集合还利用这种没有值的映射做了其它的优化。\n由于这一点，可以快速的向集合中添加元素、删除元素、检查元素是否存在。平均时间复杂度为O(1),最坏的事件复杂度是O(n)。\n哈希函数 哈希函数就是一个映射，因此哈希函数的设定很灵活，只要使得任何关键字由此所得的哈希函数值都落在表长允许的范围之内即可； 并不是所有的输入都只对应唯一一个输出，也就是哈希函数不可能做成一个一对一的映射关系，其本质是一个多对一的映射，这也就引出了下面一个概念–冲突。 只要不是一对一的映射关系，冲突就必然会发生\n冲突解决方法（python所使用的）开放地址 线性探测再散列 例如 哈希函数为： H（key） = key %11,key 为关键字，采用开放地址法中的线性探测再散列解决冲突，依次输入\n9 个关键字，19，01，23，14，55，68，11，82，36，构造哈希表（表长=11）\n散列地址 0 1 2 3 4 5 6 7 8 9 10 关键字 55 01 23 14 68 11 82 36 19 探测次数 1 1 2 1 3 6 2 5 1 如上表，例如 14%11=3，将14放入3号位置，11%11 = 0，将11放入0号位置，而此时3号位已经有元素。\n就顺着表往后放，直到5号没有元素，11放入5号。\n二次探测再散列 例如 哈希函数为： H（key） = key %11,key 为关键字，采用开放地址法中的二次探测再散列解决冲突，依次输入\n9 个关键字，19，01，23，14，55，68，11，82，36，构造哈希表（表长=11）\n散列地址 0 1 2 3 4 5 6 7 8 9 10 关键字 55 01 23 14 36 82 68 19 11 探测次数 1 1 2 1 2 1 4 1 3 对于01%11=1，将01放入1号位置， 11%11=0，此时0号位置已经有元素，\n则查找 0 + 1^2 = 1,有元素\n查找 0 - 1^2 = -1 ,没有则放入，如果还有元素则查找0 + 2^2, 0-2^2\u0026hellip;. 0+k^2, 0 - k^2。\n扩展（哈希冲突解决方法） 开放地址 开放地址的意思是除了哈希函数得出的地址可用，当出现冲突的时候其他的地址也一样可用，常见的开放地址思想的方法有线性探测再散列，二次探测再散列，这些方法都是在第一选择被占用的情况下的解决方法。\n再哈希法 这个方法是按顺序规定多个哈希函数，每次查询的时候按顺序调用哈希函数，调用到第一个为空的时候返回不存在，调用到此键的时候返回其值。\n链地址法 将所有关键字哈希值相同的记录都存在同一线性链表中，这样不需要占用其他的哈希地址，相同的哈希值在一条链表上，按顺序遍历就可以找到。\n公共溢出区 其基本思想是：所有关键字和基本表中关键字为相同哈希值的记录，不管他们由哈希函数得到的哈希地址是什么，一旦发生冲突，都填入溢出表。\n装填因子α 一般情况下，处理冲突方法相同的哈希表，其平均查找长度依赖于哈希表的装填因子。哈希表的装填因子定义为表中填入的记录数和哈希表长度的壁纸，也就是标志着哈希表的装满程度。直观看来，α越小，发生冲突的可能性就越小，反之越大。一般0.75比较合适，涉及数学推导。\n","permalink":"https://luenci.com/en/posts/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/","summary":"\u003ch1 id=\"list-tuple-dictionary-set的底层细节\"\u003elist, tuple, dictionary, set的底层细节\u003c/h1\u003e\n\u003ch2 id=\"列表实现细节\"\u003e列表实现细节\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003epython中的列表的英文名是list，因此很容易和其它语言(C++, Java等)标准库中常见的链表混淆。事实上CPython的列表根本不是列表（可能换成英文理解起来容易些：python中的list不是list）。在CPython中，列表被实现为长度可变的数组。\u003cstrong\u003e可参考《Python高级编程（第2版）》\u003c/strong\u003e\u003c/p\u003e","title":"list, tuple, dictionary, set的底层细节（python）"},{"content":"MySQL数据库函数 MySQL函数是数据库提供的内置函数，可以帮助用户更加方便地处理表中的数据。MySQL的内置函数，不但可以在SELECT查询语句中使用，同样可以在INSERT、UPDATE、DELETE等语句中使用。 1.数学函数： MySQL中内置的数学函数见下表：\n函数 作用 ABS(x) 返回x的绝对值 CEIL9x),CEILIN(x) 返回不小于x的最小整数值 FLOOR(x) 返回不大于x的最大整数值 RAND() 返回0~1的随机数 RAND(x) 返回0~1的随机数，x值相同时返回的随机数相同 SIGN(x) 返回参数作为-1、0、1的符号，该符号取决于x值的负、零、正 PI() 返回圆周率的值，默认是7位，内部使用完全双精度值 TRUNCATE(x,y) 返回数值x保留到小数点y位的值 ROUND(x) 返回离x最近的整数 ROUND(x,y) 保留x小数点后y位的值，但截断时要进行四舍五入 POW(x,y),POWER(x,y) 返回x的y乘方的结果值 SQRT(x) 返回非负数x的二次方根 EXP(x) 返回e的x乘方后的值（自然对数的底） MOD(x,y) 返回x除以y后的余数 LOG(x) 返回x的基数为2的对数 LOG10(x) 返回x的基数为10的对数 RADIANS(x) 将角度转换为弧度 DEGREES(x) 将弧度转化为角度 SIN(x) 返回x的正弦，其中x使用弧度 ASIN(x,y) 返回x的反正弦，若x不在-1到1范围内则返回NULL COS(x) 返回x的余弦，其中x为弧度 ACOS(x,y) 返回x的反余弦，若x不在-1到1范围内则返回NULL TAN(x,y) 返回x的正切，其中x为弧度 ATAN(x),ATAN2(x) 返回x的反正切，y确定结果所在象限 COT(x,y) 返回x的余切 2.字符串函数： 字符串函数是MySQL中最常用的的一类函数，主要用于处理表中的字符串。见下表：\n函数 作用 CHAR_LENGTH(s) 返回字符串s的字符数 LENGTH(s) 返回字符串的字节长度，一个多字节字符算作多字节 CONCAT(s) 返回结果为连接参数产生的字符串。为了避免将数字参数转化为二进制字符串使用SELECT CONCAT(CAST(int_col AS CHAR),char_col) CONCAT_WS(x,s1,s2,\u0026hellip;) 同CONCAT()函数，但每个字符串都要加上x INSERT(s1,x,len,s2) 将字符串s2替换为s1的x位置开始长度为len的字符串 UPPER(s),UCASE(s) 将字符串s的所有字母都变成大写字母 LOWER(s),LCASE(s) 将字符串s的所有字母都变成小写字母 LEFT(s,n) 返回从字符串s开始的最左边n个字符 RIGHT(s,n) 返回从字符串s开始的最右边n个字符 LPAD(s1,len,s2) 返回字符串s1，其左边由字符串s2填补到len字符长度 RPAD(s1,len,s2) 返回字符串s1，其右边被字符串s2填补至len字符长度 LTRIM(s) 返回字符串s，其引导空格字符被删除 RTRIM(s) 返回字符串s，结尾空格字符被删去 TRIM(s) 去掉字符串s开始和结尾处的空格 TRIM(s1 FROM s) 去掉字符串s中开始处和结尾处的字符串s1 REPEAT(s,n) 将字符串s重复n次 SPACE(n) 返回n个空格 REPLACE(s,s1,s2) 用字符串s2替代字符串s中的字符串s1 STRCMP(s1,s2) 比较字符串s1和s2 SUBSTRING(s,n,len) 获取从字符串s第n个位置开始长度为len的字符串 MID(s,n,len) 同SUBSTRING() LOCATE(s1,s) POSITION(s1 IN s) 从字符串s中获取s1的开始位置 INSTR(s,s1) 从字符串s中获取s1的开始位置 REVERSE(s) 将字符串s的顺序反过来 ELT(n,s1,s2) 返回第n个字符串 EXPORT_SET(bits,on,off[, separator[,number_of_bits]]) 返回一个字符串，生成规则为：针对bits的二进制格式，如果位为1则返回一个on值，如果为0则返回一个off值。每个字符串用separator分隔，默认逗号；number_of_bits指定bits的可用位数，默认64位。示例 selectEXPORT_SET(182,\u0026lsquo;Y\u0026rsquo;,\u0026lsquo;N\u0026rsquo;,\u0026rsquo;@\u0026rsquo;,6); FIELD(s,s1,s2) 返回第一个与字符串s匹配的字符串的位置 FIND_IN_SET(s,s2) 返回在字符串s2中与s1匹配的字符串的位置 MAKE_SET(x,s1,s2,\u0026hellip;) 按x的二进制数从s1,s2,\u0026hellip;,sn中选取字符串 3.日期和时间函数： 日期和时间函数主要用于对表中的日期和时间数据的处理。见下表：\n函数 作用 CURDATE(),CURRENT_DATE() 返回当前日期 CURTIME(),CURRENT_TIME() 返回当前时间 NOW(),CURRENT_TIMESTAMP(), LOCALTIME(),SYSDATE(),LOCALTIMESTAMP() 返回当前日期时间 UNIX_TIMESTAMP() 以UNIX时间戳的形式返回当前时间 UNIX_TIMESTAMP(d) 将时间d以UNIX时间戳的形式返回 FROM_UNIXTIME(d) 把UNIX时间戳的时间转换为普通格式的时间 UTC_DATE() 返回UTC（Universal Coordinated Time，国际协调时间）日期 UTC_TIME() 返回UTC时间 MONTH(d) 返回日期d中的月份值，范围1~12 MONTHNAME(d) 返回日期d中的月份名称，如January DAYNAME(d) 返回日期d是星期几，如Monday DAYOFWEEK(d) 返回日期d是星期几，范围1~7，1表示星期日 WEEKDAY(d) 返回日期d是星期几，范围0~6，0表示星期一 WEEK(d) 计算日期d是本年的第几个星期，范围0~53 WEEKOFYEAR(d) 计算日期d是本年的第几个星期，范围1~54 DAYOFYEAR(d) 计算日期d是本年的第几天 DAYOFMONTH(d) 计算日期d是本月的第几天 YEAR(d) 返回日期d中的年份值 QUARTER(d) 返回日期d是第几季度，范围1~4 HOUR(t) 返回时间t中的小时数 MINUTE(t) 返回时间t中的分钟数 SECOND(t) 返回时间t中的秒数 EXTRACT(type FROM d) 从日期d中获取指定值，type指定返回的值，如YERR HOUR等 TIME_TO_SEC(t) 将时间t转换为秒 SEC_TO_TIME(t) 将以秒为单位的时间s转换为时分秒的格式 TO_DAYS(d) 计算日期d~0000年1月1日的天数 FROM_DAYS(d) 计算从0000年1月1日开始n天后的日期 DATEDIFF(d1,d2) 计算日期d1~d2之间间隔的天数 ADDDATE(d,n) 计算起始日期d加上n天的日期 ADDDATE(d,INTERVAL expr type) 计算起始日期d加上一个时段后的日期 DATE_ADD(d,INTERVAL expr type) 同ADDDATE(d,INTERVAL expr type) SUBDATE(d,n) 计算起始日期d减去n天后的日期 SUBDATE(d,INTERVAL expr type) 计算起始日期d减去一个时段后的日期 ADDTIME(t,n) 计算起始时间t加上n秒的时间 SUBTIME(t,n) 计算起始时间t减去n秒的时间 DATE_FROMAT(d,f) 按照表达式f的要求显示日期d TIME_FROMAT(t,f) 按照表达式f的要求显示时间t GET_FORMAT(type,s) 根据字符串s获取type类型数据的显示格式 4.条件判断函数： 条件函数用来在SQL语句中进行条件判断，根据不同的条件执行不同的SQL语句。见下表：\n函数 作用 IF(expr,v1,v2) 如果表达式expr成立，则执行v1；否则执行v2 IFNULL(v1,v2) 如果v1不为空，则显示v1的值；否则显示v2的值 CASE WHEN expr1 THEN v1 [WHEN expr2 THEN v2\u0026hellip;][ELSE vn] END case表示函数开始，end表示函数结束。如果表达式expr1成立，则返回v1的值；如果表达式expr2成立，则返回v2的值。依次类推，最后遇到else时，返回vn的值。 CASE expr WHEN e1 THEN v1 [WHEN e2 THEN v2\u0026hellip;][ELSE vn] END case表示函数开始，end表示函数结束。如果表达式expr取值为e1，则返回v1的值；如果表达式expr取值为e2，则返回v2的值。依次类推，最后遇到else，返回vn的值。 示例：select id,grade, CASE WHEN grade\u0026gt;1000000 THEN \u0026lsquo;Very Good\u0026rsquo; WHEN grade\u0026lt;1000000 and grade\u0026gt;=100000 THEN \u0026lsquo;Popularly\u0026rsquo; ELSE \u0026lsquo;Not Good\u0026rsquo; END level from tb_bccd;\n5.系统信息函数： 系统信息函数用来查询MySQL数据库的系统信息。见下表：\n函数 作用 示例 VERSION() 获取数据库的版本号 select VERSION(); CONNECTION_ID() 获取数据库的连接数 select CONNECT_ID(); DATABASE(),SCHEMA() 获取当前数据库名 select DATABASE(); USER(),SYSTEM_USER(),SESSION_USER() 获取当前用户 select USER(); CURRENT_USER() 获取当前用户 select CURRENT-USER(); CHARSET(str) 获取字符串str的字符集 select CHARSET(\u0026lsquo;mrsoft\u0026rsquo;); COLLATION(str) 获取字符串str的字符排列方式 select COLLATION(\u0026lsquo;mrsoft\u0026rsquo;); LAST_INSERT_ID() 获取最近生成的AUTO_INCREMENT值 select LAST_INSERT_ID(); 6.加密函数： 数据库中有些敏感信息不希望被其他人看到，就可以用加密的方法使这些数据看似乱码。\n函数 作用 示例 PASSWORD(str) 对字符串str加密，不可逆加密 select PASSWORD(\u0026lsquo;mrsoft\u0026rsquo;); MD5(str) 对字符串str进行加密，用于普通数据 select MD5(\u0026lsquo;mrsoft\u0026rsquo;); ENCODE(str,pswd_str) 使用字符串pswd_str来加密字符串str，结果是二进制数，用BLOB类型保存 select ENCODE(\u0026lsquo;mrsoft\u0026rsquo;,\u0026lsquo;mr\u0026rsquo;); DECODE(crypt_str,pswd_str) 使用字符串pswd_str来解密字符串crypt_str，对ENCODE()解码 select DECODE (ENCODE(\u0026lsquo;mrsoft\u0026rsquo;,\u0026lsquo;mr\u0026rsquo;),\u0026lsquo;mr\u0026rsquo;); 7.统计函数： 函数 说明 Avg(字段名) 获取指定列的平均值 Count(字段名) 如指定一个记录，会统计该字段中非空记录数，如前面使用DISTINCT，则会统计不同值的记录，相同的值当作一条记录。 Min(字段名) 获取指定字段的最小值 Max(字段名) 获取指定字段的最大值 Std(字段名) 指定字段的标准背离值 Stdtev(字段名) 与Std相同 Sum(字段名) 指定字段所有记录的总和 8.其他函数： 函数 作用 FORMAT(x,n) 将数字x进行格式化，保留到小数点后n位，四舍五入 ASCII(x) 返回字符串s的第一个字符的ASCII码 BIN(x) 返回x的二进制编码 HEX(x) 返回x的十六进制编码 OCT(x) 返回x的八进制编码 CONV(x,f1,f2) 将x从f1进制数变成f2进制数 INET_ATON(IP) 将IP地址转换为数字表示 INET_NTOA(N) 将数字n转换成IP形式 GET_LOCT(name,time) 定义一个名称为name持续时长为time秒的锁。锁定成功返回1；如此尝试超时返回0；遇到错误返回NULL。 RELEASE_LOCK(name) 解除名称为name的锁。解锁成功返回1，尝试超时返回0，失败返回NULL。 IF_FREE_LOCK(name) 判断是否使用名为name的锁，成功返回0，否则返回1。 BENCHMARK(count,expr) 将表达式expr重复执行count次，然后返回执行时间 CONVERT(s USING cs) 将字符串s的字符集变成cs CAST(x AS type), CONVERT(x,type) 将x变成type类型。这两个函数只对BINARY、CHAR、DATE、DATETIME、TIME、SIGNED INTEGER、UNSIGNED INTEGER类型起作用。只是改变了输出值的数据类型，并没有改变表中字段的类型。 ","permalink":"https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BD%E6%95%B0/","summary":"\u003ch1 id=\"mysql数据库函数\"\u003eMySQL数据库函数\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMySQL函数是数据库提供的内置函数，可以帮助用户更加方便地处理表中的数据。MySQL的内置函数，不但可以在SELECT查询语句中使用，同样可以在INSERT、UPDATE、DELETE等语句中使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"1数学函数\"\u003e\u003cstrong\u003e1.数学函数：\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eMySQL中内置的数学函数见下表：\u003c/p\u003e","title":"MySQL数据库函数"},{"content":"数据库引擎介绍 前言 1、存储引擎其实就是对于数据库文件的一种存取机制，如何实现存储数据，如何为存储的数据建立索引以及如何更新，查询数据等技术实现的方法。 2、MySQL中的数据用各种不同的技术存储在文件（或内存）中，这些技术中的每一种技术都使用不同的存储机制，索引技巧，锁定水平并且最终提供广泛的不同功能和能力。在MySQL中将这些不同的技术及配套的相关功能称为存储引擎。 3、根据需求可以在表中设置不同的存储引擎。 查看mysql中的引擎 MySQL中常用的几种存储引擎 1．MyISAM存储引擎 存放的位置\nMySQL如果使用MyISAM存储引擎，数据库文件类型就包括.frm、.MYD、.MYI，默认存放位置是C:\\Documentsand Settings\\All Users\\Application Data\\MySQL\\MySQL Server 5.1\\data 存放的方式\nMyISAM 这种存储引擎不支持事务，不支持行级锁，只支持并发插入的表锁，主要用于高负载的select。 索引的方式\nMyISAM也是使用B+tree索引但是和Innodb的在具体实现上有些不同。 该引擎基于ISAM数据库引擎，除了提供ISAM里所没有的索引和字段管理等大量功能，MyISAM还使用一种表格锁定的机制来优化多个并发的读写操作，但是需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间，否则碎片也会随之增加，最终影响数据访问性能。MyISAM还有一些有用的扩展，例如用来修复数据库文件的MyISAMChk工具和用来恢复浪费空间的 MyISAMPack工具。MyISAM强调了快速读取操作，主要用于高负载的select，这可能也是MySQL深受Web开发的主要原因：在Web开发中进行的大量数据操作都是读取操作，所以大多数虚拟主机提供商和Internet平台提供商（Internet Presence Provider, IPP）只允许使用MyISAM格式。\nMyISAM类型的表支持三种不同的存储结构：静态型、动态型、压缩型。\n静态型：指定义的表列的大小是固定（即不含有：xblob、xtext、varchar等长度可变的数据类型），这样MySQL就会自动使用静态MyISAM格式。使用静态格式的表的性能比较高，因为在维护和访问以预定格式存储数据时需要的开销很低；但这种高性能是以空间为代价换来的，因为在定义的时候是固定的，所以不管列中的值有多大，都会以最大值为准，占据了整个空间。\n动态型：如果列（即使只有一列）定义为动态的（xblob, xtext, varchar等数据类型），这时MyISAM就自动使用动态型，虽然动态型的表占用了比静态型表较少的空间，但带来了性能的降低，因为如果某个字段的内容发生改变则其位置很可能需要移动，这样就会导致碎片的产生，随着数据变化的增多，碎片也随之增加，数据访问性能会随之降低。 对于因碎片增加而降低数据访问性这个问题，有两种解决办法：\na、尽可能使用静态数据类型； b、经常使用optimize table table_name语句整理表的碎片，恢复由于表数据的更新和删除导致的空间丢失。如果存储引擎不支持 optimize table table_name则可以转储并 重新加载数据，这样也可以减少碎片； 压缩型：如果在数据库中创建在整个生命周期内只读的表，则应该使用MyISAM的压缩型表来减少空间的占用。\n优缺点：MyISAM的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。\n2．innoDB存储引擎 存储位置\nMySQL如果使用InnoDB存储引擎，数据库文件类型就包括.frm、ibdata1、.ibd，存放位置有两个，.frm文件默认存放位置是C:\\Documents and Settings\\All Users\\ApplicationData\\MySQL\\MySQL Server 5.1\\data，ibdata1、.ibd文件默认存放位置是MySQL安装目录下的data文件夹。 innodb存储引擎的mysql表提供了事务，回滚以及系统崩溃修复能力和多版本迸发控制的事务的安全。\ninnodb支持自增长列（auto_increment）,自增长列的值不能为空，如果在使用的时候为空的话怎会进行自动存现有的值开始增值，如果有但是比现在的还大，则就保存这个值。\ninnodb存储引擎支持外键（foreign key） ,外键所在的表称为子表而所依赖的表称为父表。\ninnodb存储引擎最重要的是支持事务，以及事务相关联功能。\ninnodb存储引擎支持mvcc的行级锁。\ninnodb存储引擎索引使用的是B+Tree\n优缺点：InnoDB的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。\n3．MEMORY存储引擎 memory存储引擎相比前面的一些存储引擎，有点不一样，其使用存储在内从中的数据来创建表，而且所有的数据也都存储在内存中。\n每个基于memory存储引擎的表实际对应一个磁盘文件，该文件的文件名和表名是相同的，类型为.frm。该文件只存储表的结构，而其数据文件，都是存储在内存中，这样有利于对数据的快速处理，提高整个表的处理能力。\nmemory存储引擎默认使用哈希（HASH）索引，其速度比使用B-+ Tree型要快，如果读者希望使用B树型，则在创建的时候可以引用。\nmemory存储引擎文件数据都存储在内存中，如果mysqld进程发生异常，重启或关闭机器这些数据都会消失。所以memory存储引擎中的表的生命周期很短，一般只使用一次。\n4．ARCHIVE存储引擎 该存储引擎非常适合存储大量独立的、作为历史记录的数据。 区别于InnoDB和MyISAM这两种引擎，ARCHIVE提供了压缩功能，拥有高效的插入速度，但是这种引擎不支持索引，所以查询性能较差一些。 四种存储引擎比较 InnoDB：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。\nMyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。如果数据表主要用来插入和查询记录，则MyISAM引擎能提供较高的处理效率\nMEMORY：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的Memory引擎，MySQL中使用该引擎作为临时表，存放查询的中间结果\n如果只有INSERT和SELECT操作，可以选择Archive，Archive支持高并发的插入操作，但是本身不是事务安全的。\nArchive非常适合存储归档数据，如记录日志信息可以使用Archiv\n注意，同一个数据库也可以使用多种存储引擎的表。如果一个表要求比较高的事务处理，可以选择InnoDB。这个数据库中可以将查询要求比较高的表选择MyISAM存储。如果该数据库需要一个用于查询的临时表，可以选择MEMORY存储引擎。\n数据类型 数值类型 MySQL支持所有标准SQL数值数据类型。\n这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。\n关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。\nBIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。\n作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。\n类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 byte (-128，127) (0，255) 小整数值 SMALLINT 2 bytes (-32 768，32 767) (0，65 535) 大整数值 MEDIUMINT 3 bytes (-8 388 608，8 388 607) (0，16 777 215) 大整数值 INT或INTEGER 4 bytes (-2 147 483 648，2 147 483 647) (0，4 294 967 295) 大整数值 BIGINT 8 bytes (-9,223,372,036,854,775,808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) 极大整数值 FLOAT 4 bytes (-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) 单精度 浮点数值 DOUBLE 8 bytes (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 双精度 浮点数值 DECIMAL 对DECIMAL(M,D) ，如果M\u0026gt;D，为M+2否则为D+2 依赖于M和D的值 依赖于M和D的值 小数值 日期和时间类型 表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。\n每个时间类型有一个有效值范围和一个\u0026quot;零\u0026quot;值，当指定不合法的MySQL不能表示的值时使用\u0026quot;零\u0026quot;值。\nTIMESTAMP类型有专有的自动更新特性，将在后面描述。\n类型 大小 ( bytes) 范围 格式 用途 DATE 3 1000-01-01/9999-12-31 YYYY-MM-DD 日期值 TIME 3 \u0026lsquo;-838:59:59\u0026rsquo;/\u0026lsquo;838:59:59\u0026rsquo; HH:MM:SS 时间值或持续时间 YEAR 1 1901/2155 YYYY 年份值 DATETIME 8 1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值 TIMESTAMP 4 1970-01-01 00:00:00/2038结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 YYYYMMDD HHMMSS 混合日期和时间值，时间戳 字符串类型 字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。\n类型 大小 用途 CHAR 0-255 bytes 定长字符串 VARCHAR 0-65535 bytes 变长字符串 TINYBLOB 0-255 bytes 不超过 255 个字符的二进制字符串 TINYTEXT 0-255 bytes 短文本字符串 BLOB 0-65 535 bytes 二进制形式的长文本数据 TEXT 0-65 535 bytes 长文本数据 MEDIUMBLOB 0-16 777 215 bytes 二进制形式的中等长度文本数据 MEDIUMTEXT 0-16 777 215 bytes 中等长度文本数据 LONGBLOB 0-4 294 967 295 bytes 二进制形式的极大文本数据 LONGTEXT 0-4 294 967 295 bytes 极大文本数据 注意：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。\nCHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。\nBINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。\nBLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。\n有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。\n","permalink":"https://luenci.com/en/posts/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","summary":"\u003ch2 id=\"数据库引擎介绍\"\u003e\u003cstrong\u003e数据库引擎介绍\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e1、存储引擎其实就是对于数据库文件的一种存取机制，如何实现存储数据，如何为存储的数据建立索引以及如何更新，查询数据等技术实现的方法。\u003c/li\u003e\n\u003cli\u003e2、MySQL中的数据用各种不同的技术存储在文件（或内存）中，这些技术中的每一种技术都使用不同的存储机制，索引技巧，锁定水平并且最终提供广泛的不同功能和能力。在MySQL中将这些不同的技术及配套的相关功能称为存储引擎。\u003c/li\u003e\n\u003cli\u003e3、根据需求可以在表中设置不同的存储引擎。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"查看mysql中的引擎\"\u003e查看mysql中的引擎\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200605131656597.png\" alt=\"查看引擎\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"mysql中常用的几种存储引擎\"\u003eMySQL中常用的几种存储引擎\u003c/h3\u003e\n\u003ch3 id=\"1myisam存储引擎\"\u003e1．\u003ccode\u003eMyISAM\u003c/code\u003e存储引擎\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e存放的位置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMySQL如果使用\u003ccode\u003eMyISAM\u003c/code\u003e存储引擎，数据库文件类型就包括\u003ccode\u003e.frm\u003c/code\u003e、\u003ccode\u003e.MYD\u003c/code\u003e、\u003ccode\u003e.MYI\u003c/code\u003e，默认存放位置是\u003ccode\u003eC:\\Documentsand Settings\\All Users\\Application Data\\MySQL\\MySQL Server 5.1\\data\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e存放的方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMyISAM\u003c/code\u003e 这种存储引擎不支持事务，不支持行级锁，只支持并发插入的表锁，主要用于高负载的select。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e索引的方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMyISAM\u003c/code\u003e也是使用B+tree索引但是和\u003ccode\u003eInnodb\u003c/code\u003e的在具体实现上有些不同。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e该引擎基于\u003ccode\u003eISAM\u003c/code\u003e数据库引擎，除了提供\u003ccode\u003eISAM\u003c/code\u003e里所没有的索引和字段管理等大量功能，\u003ccode\u003eMyISAM\u003c/code\u003e还使用一种表格锁定的机制来优化多个并发的读写操作，但是需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间，否则碎片也会随之增加，最终影响数据访问性能。\u003ccode\u003eMyISAM\u003c/code\u003e还有一些有用的扩展，例如用来修复数据库文件的\u003ccode\u003eMyISAMChk\u003c/code\u003e工具和用来恢复浪费空间的 \u003ccode\u003eMyISAMPack\u003c/code\u003e工具。\u003ccode\u003eMyISAM\u003c/code\u003e强调了快速读取操作，主要用于高负载的select，这可能也是MySQL深受Web开发的主要原因：在Web开发中进行的大量数据操作都是读取操作，所以大多数虚拟主机提供商和Internet平台提供商（Internet Presence Provider, \u003ccode\u003eIPP\u003c/code\u003e）只允许使用\u003ccode\u003eMyISAM\u003c/code\u003e格式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eMyISAM\u003c/code\u003e类型的表支持三种不同的存储结构：静态型、动态型、压缩型。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e静态型：指定义的表列的大小是固定（即不含有：\u003ccode\u003exblob\u003c/code\u003e、\u003ccode\u003extext\u003c/code\u003e、\u003ccode\u003evarchar\u003c/code\u003e等长度可变的数据类型），这样MySQL就会自动使用静态\u003ccode\u003eMyISAM\u003c/code\u003e格式。使用静态格式的表的性能比较高，因为在维护和访问以预定格式存储数据时需要的开销很低；但这种高性能是以空间为代价换来的，因为在定义的时候是固定的，所以不管列中的值有多大，都会以最大值为准，占据了整个空间。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e动态型：如果列（即使只有一列）定义为动态的（\u003ccode\u003exblob\u003c/code\u003e, \u003ccode\u003extext\u003c/code\u003e, \u003ccode\u003evarchar\u003c/code\u003e等数据类型），这时\u003ccode\u003eMyISAM\u003c/code\u003e就自动使用动态型，虽然动态型的表占用了比静态型表较少的空间，但带来了性能的降低，因为如果某个字段的内容发生改变则其位置很可能需要移动，这样就会导致碎片的产生，随着数据变化的增多，碎片也随之增加，数据访问性能会随之降低。\n对于因碎片增加而降低数据访问性这个问题，有两种解决办法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea、尽可能使用静态数据类型；\u003c/li\u003e\n\u003cli\u003eb、经常使用\u003ccode\u003eoptimize table table_name\u003c/code\u003e语句整理表的碎片，恢复由于表数据的更新和删除导致的空间丢失。如果存储引擎不支持\u003ccode\u003e optimize table table_name\u003c/code\u003e则可以转储并 重新加载数据，这样也可以减少碎片；\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e压缩型：如果在数据库中创建在整个生命周期内只读的表，则应该使用\u003ccode\u003eMyISAM\u003c/code\u003e的压缩型表来减少空间的占用。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e优缺点：\u003ccode\u003eMyISAM\u003c/code\u003e的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"2innodb存储引擎\"\u003e2．\u003ccode\u003einnoDB\u003c/code\u003e存储引擎\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e存储位置\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMySQL如果使用\u003ccode\u003eInnoDB\u003c/code\u003e存储引擎，数据库文件类型就包括\u003ccode\u003e.frm\u003c/code\u003e、\u003ccode\u003eibdata1\u003c/code\u003e、\u003ccode\u003e.ibd\u003c/code\u003e，存放位置有两个，\u003ccode\u003e.frm\u003c/code\u003e文件默认存放位置是\u003ccode\u003eC:\\Documents and Settings\\All Users\\ApplicationData\\MySQL\\MySQL Server 5.1\\data\u003c/code\u003e，\u003ccode\u003eibdata1\u003c/code\u003e、\u003ccode\u003e.ibd\u003c/code\u003e文件默认存放位置是MySQL安装目录下的data文件夹。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einnodb\u003c/code\u003e存储引擎的mysql表提供了事务，回滚以及系统崩溃修复能力和多版本迸发控制的事务的安全。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einnodb\u003c/code\u003e支持自增长列（auto_increment）,自增长列的值不能为空，如果在使用的时候为空的话怎会进行自动存现有的值开始增值，如果有但是比现在的还大，则就保存这个值。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einnodb\u003c/code\u003e存储引擎支持外键（foreign key） ,外键所在的表称为子表而所依赖的表称为父表。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einnodb\u003c/code\u003e存储引擎最重要的是支持事务，以及事务相关联功能。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einnodb\u003c/code\u003e存储引擎支持\u003ccode\u003emvcc\u003c/code\u003e的行级锁。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einnodb\u003c/code\u003e存储引擎索引使用的是B+Tree\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e优缺点：\u003ccode\u003eInnoDB\u003c/code\u003e的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。\u003c/p\u003e\u003c/blockquote\u003e","title":"MySQL数据库引擎和数据类型"},{"content":"索引 索引特点：创建与维护索引会消耗很多时间与磁盘空间，但查询速度大大提高！\n在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。\n索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。\n例如，对于students表：\nid class_id name gender score 1 1 小明 M 90 2 1 小红 F 95 3 1 小军 M 88 如果要经常根据score列进行查询，就可以对score列创建索引：\n1 2 ALTER TABLE students ADD INDEX idx_score (score); 使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：\n1 2 ALTER TABLE students ADD INDEX idx_name_score (name, score); 索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如gender列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。\n可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。\n对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。\nMySQL索引的类型 1. 普通索引 这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 01 –直接创建索引 02 CREATE INDEX index_name ON table(column(length)) 03 –修改表结构的方式添加索引 04 ALTER TABLE table_name ADD INDEX index_name ON (column(length)) 05 –创建表的时候同时创建索引 06 CREATE TABLE `table` ( 07 `id` int(11) NOT NULL AUTO_INCREMENT , 08 `title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL , 09 `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL , 10 `time` int(10) NULL DEFAULT NULL , 11 PRIMARY KEY (`id`), 12 INDEX index_name (title(length)) 13 ) 14 –删除索引 15 DROP INDEX index_name ON table 2. 唯一索引 与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。 如果是组合索引，则列值的组合必须唯一，创建方法和普通索引类似。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 01 –创建唯一索引 02 CREATE UNIQUE INDEX indexName ON table(column(length)) 03 –修改表结构 04 ALTER TABLE table_name ADD UNIQUE indexName ON (column(length)) 05 –创建表的时候直接指定 06 CREATE TABLE `table` ( 07 `id` int(11) NOT NULL AUTO_INCREMENT , 08 `title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL , 09 `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL , 10 `time` int(10) NULL DEFAULT NULL , 11 PRIMARY KEY (`id`), 12 UNIQUE indexName (title(length)) 13 ); 3. 全文索引（FULLTEXT） MySQL从3.23.23版开始支持全文索引和全文检索，FULLTEXT索引仅可用于 MyISAM 表； 他们可以从CHAR、VARCHAR或TEXT列中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加。 对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引，其速度比把资料输入现有FULLTEXT索引的中速度更为快。 不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 01 –创建表的适合添加全文索引 02 CREATE TABLE `table` ( 03 `id` int(11) NOT NULL AUTO_INCREMENT , 04 `title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL , 05 `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL , 06 `time` int(10) NULL DEFAULT NULL , 07 PRIMARY KEY (`id`), 08 FULLTEXT (content) 09 ); 10 –修改表结构添加全文索引 11 ALTER TABLE article ADD FULLTEXT index_content(content) 12 –直接创建索引 13 CREATE FULLTEXT INDEX index_content ON article(content) 4. 单列索引、多列索引 多个单列索引与单个多列索引的查询效果不同，因为执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。 5. 组合索引（最左前缀） 平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。例如上表中针对title和time建立一个组合索引：ALTER TABLE article ADD INDEX index_titme_time (title(50),time(10))。 建立这样的组合索引，其实是相当于分别建立了下面两组组合索引： 1 2 –title,time –title 为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面的几个SQL所示：\n1 2 3 4 5 6 1 –使用到上面的索引 2 SELECT * FROM article WHREE title=\u0026#39;测试\u0026#39; AND time=1234567890; 3 SELECT * FROM article WHREE utitle=\u0026#39;测试\u0026#39;; 4 –不使用上面的索引 5 SELECT * FROM article WHREE time=1234567890; 小结 通过对数据库表创建索引，可以提高查询速度。\n通过创建唯一索引，可以保证某一列的值具有唯一性。\n数据库索引对于用户和应用程序来说都是透明的。\n有几个索引就有几组排序，索引越多占用空间越大，插入速度越慢查询的时候数据库自动分析然后挑一个最合适的索引\nMySQL 事务 事务指逻辑上的一组操作，组成这个操作的各个单元，要么都成功，要么都不成功\nMySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！\n在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。 事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。 事务用来管理 insert,update,delete 语句 一般来说，事务是必须满足4个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。\n**原子性：**一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 **一致性：**在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。 **隔离性：**数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。 **持久性：**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。 在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。\n事务控制语句 BEGIN 或 START TRANSACTION 显式地开启一个事务； COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的； ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改； SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT； RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常； ROLLBACK TO identifier 把事务回滚到标记点； SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。 MYSQL 事务处理方法 1、用 BEGIN, ROLLBACK, COMMIT来实现\nBEGIN 开始一个事务 ROLLBACK 事务回滚 COMMIT 事务确认 2、直接用 SET 来改变 MySQL 的自动提交模式:\nSET AUTOCOMMIT=0 禁止自动提交 SET AUTOCOMMIT=1 开启自动提交 ","permalink":"https://luenci.com/en/posts/%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/","summary":"\u003ch1 id=\"索引\"\u003e索引\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e索引特点：创建与维护索引会消耗很多时间与磁盘空间，但查询速度大大提高！\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如，对于\u003ccode\u003estudents\u003c/code\u003e表：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eid\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eclass_id\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003ename\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003egender\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003escore\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e小明\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eM\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e90\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e小红\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eF\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e95\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e小军\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eM\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e88\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e如果要经常根据\u003ccode\u003escore\u003c/code\u003e列进行查询，就可以对\u003ccode\u003escore\u003c/code\u003e列创建索引：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eALTER TABLE students\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eADD INDEX idx_score (score);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e使用\u003ccode\u003eADD INDEX idx_score (score)\u003c/code\u003e就创建了一个名称为\u003ccode\u003eidx_score\u003c/code\u003e，使用列\u003ccode\u003escore\u003c/code\u003e的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eALTER TABLE students\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eADD INDEX idx_name_score (name, score);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如\u003ccode\u003egender\u003c/code\u003e列，大约一半的记录值是\u003ccode\u003eM\u003c/code\u003e，另一半是\u003ccode\u003eF\u003c/code\u003e，因此，对该列创建索引就没有意义。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"mysql索引的类型\"\u003eMySQL索引的类型\u003c/h2\u003e\n\u003ch3 id=\"1-普通索引\"\u003e1. 普通索引\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，\u003ccode\u003eMyIASM\u003c/code\u003e中默认的\u003ccode\u003eBTREE\u003c/code\u003e类型的索引，也是我们大多数情况下用到的索引。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e01\u003c/span\u003e  –直接创建索引\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e02\u003c/span\u003e  CREATE INDEX index_name ON table\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003ecolumn\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003elength\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e03\u003c/span\u003e  –修改表结构的方式添加索引\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e04\u003c/span\u003e  ALTER TABLE table_name ADD INDEX index_name ON \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003ecolumn\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003elength\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e05\u003c/span\u003e  –创建表的时候同时创建索引\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e06\u003c/span\u003e  CREATE TABLE \u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003etable\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e07\u003c/span\u003e      \u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003eid\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003e int\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003e11\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e NOT NULL AUTO_INCREMENT ,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e08\u003c/span\u003e      \u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003etitle\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003e char\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003e255\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e09\u003c/span\u003e      \u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003econtent\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003e text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e      \u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003etime\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003e int\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003e10\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e NULL DEFAULT NULL ,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e       PRIMARY KEY \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003eid\u003cspan style=\"color:#a5d6ff\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e12\u003c/span\u003e       INDEX index_name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003etitle\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003elength\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e13\u003c/span\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e14\u003c/span\u003e  –删除索引\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e15\u003c/span\u003e  DROP INDEX index_name ON table\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"MySQL索引和事务"},{"content":"【python】Pandas中DataFrame基本函数整理 构造函数 DataFrame([data, index, columns, dtype, copy]) #构造数据框1 属性和数据 DataFrame.axes #index: 行标签；columns: 列标签 DataFrame.as_matrix([columns]) #转换为矩阵 DataFrame.dtypes #返回数据的类型 DataFrame.ftypes #返回每一列的 数据类型float64:dense DataFrame.get_dtype_counts() #返回数据框数据类型的个数 DataFrame.get_ftype_counts() #返回数据框数据类型float64:dense的个数 DataFrame.select_dtypes([include, include]) #根据数据类型选取子数据框 DataFrame.values #Numpy的展示方式 DataFrame.axes #返回横纵坐标的标签名 DataFrame.ndim #返回数据框的纬度 DataFrame.size #返回数据框元素的个数 DataFrame.shape #返回数据框的形状 DataFrame.memory_usage() #每一列的存储12345678910111213\n类型转换 1 2 3 4 DataFrame.astype(dtype[, copy, errors]) #转换数据类型 DataFrame.copy([deep]) #deep深度复制数据 DataFrame.isnull() #以布尔的方式返回空值 DataFrame.notnull() #以布尔的方式返回非空值1234 索引和迭代 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 DataFrame.head([n]) #返回前n行数据 DataFrame.at #快速标签常量访问器 DataFrame.iat #快速整型常量访问器 DataFrame.loc #标签定位，使用名称 DataFrame.iloc #整型定位，使用数字 DataFrame.insert(loc, column, value) #在特殊地点loc[数字]插入column[列名]某列数据 DataFrame.iter() #Iterate over infor axis DataFrame.iteritems() #返回列名和序列的迭代器 DataFrame.iterrows() #返回索引和序列的迭代器 DataFrame.itertuples([index, name]) #Iterate over DataFrame rows as namedtuples, with index value as first element of the tuple. DataFrame.lookup(row_labels, col_labels) #Label-based “fancy indexing” function for DataFrame. DataFrame.pop(item) #返回删除的项目 DataFrame.tail([n]) #返回最后n行 DataFrame.xs(key[, axis, level, drop_level]) #Returns a cross-section (row(s) or column(s)) from the Series/DataFrame. DataFrame.isin(values) #是否包含数据框中的元素 DataFrame.where(cond[, other, inplace, …]) #条件筛选 DataFrame.mask(cond[, other, inplace, …]) #Return an object of same shape as self and whose corresponding entries are from self where cond is False and otherwise are from other. DataFrame.query(expr[, inplace]) #Query the columns of a frame with a boolean expression.123456789101112131415161718 二元运算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 DataFrame.add(other[,axis,fill_value]) #加法，元素指向 DataFrame.sub(other[,axis,fill_value]) #减法，元素指向 DataFrame.mul(other[, axis,fill_value]) #乘法，元素指向 DataFrame.div(other[, axis,fill_value]) #小数除法，元素指向 DataFrame.truediv(other[, axis, level, …]) #真除法，元素指向 DataFrame.floordiv(other[, axis, level, …]) #向下取整除法，元素指向 DataFrame.mod(other[, axis,fill_value]) #模运算，元素指向 DataFrame.pow(other[, axis,fill_value]) #幂运算，元素指向 DataFrame.radd(other[, axis,fill_value]) #右侧加法，元素指向 DataFrame.rsub(other[, axis,fill_value]) #右侧减法，元素指向 DataFrame.rmul(other[, axis,fill_value]) #右侧乘法，元素指向 DataFrame.rdiv(other[, axis,fill_value]) #右侧小数除法，元素指向 DataFrame.rtruediv(other[, axis, …]) #右侧真除法，元素指向 DataFrame.rfloordiv(other[, axis, …]) #右侧向下取整除法，元素指向 DataFrame.rmod(other[, axis,fill_value]) #右侧模运算，元素指向 DataFrame.rpow(other[, axis,fill_value]) #右侧幂运算，元素指向 DataFrame.lt(other[, axis, level]) #类似Array.lt DataFrame.gt(other[, axis, level]) #类似Array.gt DataFrame.le(other[, axis, level]) #类似Array.le DataFrame.ge(other[, axis, level]) #类似Array.ge DataFrame.ne(other[, axis, level]) #类似Array.ne DataFrame.eq(other[, axis, level]) #类似Array.eq DataFrame.combine(other,func[,fill_value, …]) #Add two DataFrame objects and do not propagate NaN values, so if for a DataFrame.combine_first(other) #Combine two DataFrame objects and default to non-null values in frame calling the method.123456789101112131415161718192021222324 函数应用\u0026amp;分组\u0026amp;窗口 1 2 3 4 5 6 7 8 DataFrame.apply(func[, axis, broadcast, …]) #应用函数 DataFrame.applymap(func) #Apply a function to a DataFrame that is intended to operate elementwise, i.e. DataFrame.aggregate(func[, axis]) #Aggregate using callable, string, dict, or list of string/callables DataFrame.transform(func, *args, **kwargs) #Call function producing a like-indexed NDFrame DataFrame.groupby([by, axis, level, …]) #分组 DataFrame.rolling(window[, min_periods, …]) #滚动窗口 DataFrame.expanding([min_periods, freq, …]) #拓展窗口 DataFrame.ewm([com, span, halflife, …]) #指数权重窗口12345678 描述统计学 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 DataFrame.abs() #返回绝对值 DataFrame.all([axis, bool_only, skipna]) #Return whether all elements are True over requested axis DataFrame.any([axis, bool_only, skipna]) #Return whether any element is True over requested axis DataFrame.clip([lower, upper, axis]) #Trim values at input threshold(s). DataFrame.clip_lower(threshold[, axis]) #Return copy of the input with values below given value(s) truncated. DataFrame.clip_upper(threshold[, axis]) #Return copy of input with values above given value(s) truncated. DataFrame.corr([method, min_periods]) #返回本数据框成对列的相关性系数 DataFrame.corrwith(other[, axis, drop]) #返回不同数据框的相关性 DataFrame.count([axis, level, numeric_only]) #返回非空元素的个数 DataFrame.cov([min_periods]) #计算协方差 DataFrame.cummax([axis, skipna]) #Return cumulative max over requested axis. DataFrame.cummin([axis, skipna]) #Return cumulative minimum over requested axis. DataFrame.cumprod([axis, skipna]) #返回累积 DataFrame.cumsum([axis, skipna]) #返回累和 DataFrame.describe([percentiles,include, …]) #整体描述数据框 DataFrame.diff([periods, axis]) #1st discrete difference of object DataFrame.eval(expr[, inplace]) #Evaluate an expression in the context of the calling DataFrame instance. DataFrame.kurt([axis, skipna, level, …]) #返回无偏峰度Fisher’s (kurtosis of normal == 0.0). DataFrame.mad([axis, skipna, level]) #返回偏差 DataFrame.max([axis, skipna, level, …]) #返回最大值 DataFrame.mean([axis, skipna, level, …]) #返回均值 DataFrame.median([axis, skipna, level, …]) #返回中位数 DataFrame.min([axis, skipna, level, …]) #返回最小值 DataFrame.mode([axis, numeric_only]) #返回众数 DataFrame.pct_change([periods, fill_method]) #返回百分比变化 DataFrame.prod([axis, skipna, level, …]) #返回连乘积 DataFrame.quantile([q, axis, numeric_only]) #返回分位数 DataFrame.rank([axis, method, numeric_only]) #返回数字的排序 DataFrame.round([decimals]) #Round a DataFrame to a variable number of decimal places. DataFrame.sem([axis, skipna, level, ddof]) #返回无偏标准误 DataFrame.skew([axis, skipna, level, …]) #返回无偏偏度 DataFrame.sum([axis, skipna, level, …]) #求和 DataFrame.std([axis, skipna, level, ddof]) #返回标准误差 DataFrame.var([axis, skipna, level, ddof]) #返回无偏误差 12345678910111213141516171819202122232425262728293031323334 从新索引\u0026amp;选取\u0026amp;标签操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 DataFrame.add_prefix(prefix) #添加前缀 DataFrame.add_suffix(suffix) #添加后缀 DataFrame.align(other[, join, axis, level]) #Align two object on their axes with the DataFrame.drop(labels[, axis, level, …]) #返回删除的列 DataFrame.drop_duplicates([subset, keep, …]) #Return DataFrame with duplicate rows removed, optionally only DataFrame.duplicated([subset, keep]) #Return boolean Series denoting duplicate rows, optionally only DataFrame.equals(other) #两个数据框是否相同 DataFrame.filter([items, like, regex, axis]) #过滤特定的子数据框 DataFrame.first(offset) #Convenience method for subsetting initial periods of time series data based on a date offset. DataFrame.head([n]) #返回前n行 DataFrame.idxmax([axis, skipna]) #Return index of first occurrence of maximum over requested axis. DataFrame.idxmin([axis, skipna]) #Return index of first occurrence of minimum over requested axis. DataFrame.last(offset) #Convenience method for subsetting final periods of time series data based on a date offset. DataFrame.reindex([index, columns]) #Conform DataFrame to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index. DataFrame.reindex_axis(labels[, axis, …]) #Conform input object to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index. DataFrame.reindex_like(other[, method, …]) #Return an object with matching indices to myself. DataFrame.rename([index, columns]) #Alter axes input function or functions. DataFrame.rename_axis(mapper[, axis, copy]) #Alter index and / or columns using input function or functions. DataFrame.reset_index([level, drop, …]) #For DataFrame with multi-level index, return new DataFrame with labeling information in the columns under the index names, defaulting to ‘level_0’, ‘level_1’, etc. DataFrame.sample([n, frac, replace, …]) #返回随机抽样 DataFrame.select(crit[, axis]) #Return data corresponding to axis labels matching criteria DataFrame.set_index(keys[, drop, append ]) #Set the DataFrame index (row labels) using one or more existing columns. DataFrame.tail([n]) #返回最后几行 DataFrame.take(indices[, axis, convert]) #Analogous to ndarray.take DataFrame.truncate([before, after, axis ]) #Truncates a sorted NDFrame before and/or after some particular index value.12345678910111213141516171819202122232425 处理缺失值 1 2 3 DataFrame.dropna([axis, how, thresh, …]) #Return object with labels on given axis omitted where alternately any DataFrame.fillna([value, method, axis, …]) #填充空值 DataFrame.replace([to_replace, value, …]) #Replace values given in ‘to_replace’ with ‘value’.123 从新定型\u0026amp;排序\u0026amp;转变形态 1 2 3 4 5 6 7 8 9 10 11 12 13 14 DataFrame.pivot([index, columns, values]) #Reshape data (produce a “pivot” table) based on column values. DataFrame.reorder_levels(order[, axis]) #Rearrange index levels using input order. DataFrame.sort_values(by[, axis, ascending]) #Sort by the values along either axis DataFrame.sort_index([axis, level, …]) #Sort object by labels (along an axis) DataFrame.nlargest(n, columns[, keep]) #Get the rows of a DataFrame sorted by the n largest values of columns. DataFrame.nsmallest(n, columns[, keep]) #Get the rows of a DataFrame sorted by the n smallest values of columns. DataFrame.swaplevel([i, j, axis]) #Swap levels i and j in a MultiIndex on a particular axis DataFrame.stack([level, dropna]) #Pivot a level of the (possibly hierarchical) column labels, returning a DataFrame (or Series in the case of an object with a single level of column labels) having a hierarchical index with a new inner-most level of row labels. DataFrame.unstack([level, fill_value]) #Pivot a level of the (necessarily hierarchical) index labels, returning a DataFrame having a new level of column labels whose inner-most level consists of the pivoted index labels. DataFrame.melt([id_vars, value_vars, …]) #“Unpivots” a DataFrame from wide format to long format, optionally DataFrame.T #Transpose index and columns DataFrame.to_panel() #Transform long (stacked) format (DataFrame) into wide (3D, Panel) format. DataFrame.to_xarray() #Return an xarray object from the pandas object. DataFrame.transpose(*args, **kwargs) #Transpose index and columns1234567891011121314 Combining\u0026amp; joining\u0026amp;merging 1 2 3 4 5 DataFrame.append(other[, ignore_index, …]) #追加数据 DataFrame.assign(**kwargs) #Assign new columns to a DataFrame, returning a new object (a copy) with all the original columns in addition to the new ones. DataFrame.join(other[, on, how, lsuffix, …]) #Join columns with other DataFrame either on index or on a key column. DataFrame.merge(right[, how, on, left_on, …]) #Merge DataFrame objects by performing a database-style join operation by columns or indexes. DataFrame.update(other[, join, overwrite, …]) #Modify DataFrame in place using non-NA values from passed DataFrame.12345 时间序列 1 2 3 4 5 6 7 8 9 10 DataFrame.asfreq(freq[, method, how, …]) #将时间序列转换为特定的频次 DataFrame.asof(where[, subset]) #The last row without any NaN is taken (or the last row without DataFrame.shift([periods, freq, axis]) #Shift index by desired number of periods with an optional time freq DataFrame.first_valid_index() #Return label for first non-NA/null value DataFrame.last_valid_index() #Return label for last non-NA/null value DataFrame.resample(rule[, how, axis, …]) #Convenience method for frequency conversion and resampling of time series. DataFrame.to_period([freq, axis, copy]) #Convert DataFrame from DatetimeIndex to PeriodIndex with desired DataFrame.to_timestamp([freq, how, axis]) #Cast to DatetimeIndex of timestamps, at beginning of period DataFrame.tz_convert(tz[, axis, level, copy]) #Convert tz-aware axis to target time zone. DataFrame.tz_localize(tz[, axis, level, …]) #Localize tz-naive TimeSeries to target time zone.12345678910 作图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 DataFrame.plot([x, y, kind, ax, ….]) #DataFrame plotting accessor and method DataFrame.plot.area([x, y]) #面积图Area plot DataFrame.plot.bar([x, y]) #垂直条形图Vertical bar plot DataFrame.plot.barh([x, y]) #水平条形图Horizontal bar plot DataFrame.plot.box([by]) #箱图Boxplot DataFrame.plot.density(**kwds) #核密度Kernel Density Estimate plot DataFrame.plot.hexbin(x, y[, C, …]) #Hexbin plot DataFrame.plot.hist([by, bins]) #直方图Histogram DataFrame.plot.kde(**kwds) #核密度Kernel Density Estimate plot DataFrame.plot.line([x, y]) #线图Line plot DataFrame.plot.pie([y]) #饼图Pie chart DataFrame.plot.scatter(x, y[, s, c]) #散点图Scatter plot DataFrame.boxplot([column, by, ax, …]) #Make a box plot from DataFrame column optionally grouped by some columns or DataFrame.hist(data[, column, by, grid, …]) #Draw histogram of the DataFrame’s series using matplotlib / pylab.1234567891011121314 转换为其他格式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 DataFrame.from_csv(path[, header, sep, …]) #Read CSV file (DEPRECATED, please use pandas.read_csv() instead). DataFrame.from_dict(data[, orient, dtype]) #Construct DataFrame from dict of array-like or dicts DataFrame.from_items(items[,columns,orient]) #Convert (key, value) pairs to DataFrame. DataFrame.from_records(data[, index, …]) #Convert structured or record ndarray to DataFrame DataFrame.info([verbose, buf, max_cols, …]) #Concise summary of a DataFrame. DataFrame.to_pickle(path[, compression, …]) #Pickle (serialize) object to input file path. DataFrame.to_csv([path_or_buf, sep, na_rep]) #Write DataFrame to a comma-separated values (csv) file DataFrame.to_hdf(path_or_buf, key, **kwargs) #Write the contained data to an HDF5 file using HDFStore. DataFrame.to_sql(name, con[, flavor, …]) #Write records stored in a DataFrame to a SQL database. DataFrame.to_dict([orient, into]) #Convert DataFrame to dictionary. DataFrame.to_excel(excel_writer[, …]) #Write DataFrame to an excel sheet DataFrame.to_json([path_or_buf, orient, …]) #Convert the object to a JSON string. DataFrame.to_html([buf, columns, col_space]) #Render a DataFrame as an HTML table. DataFrame.to_feather(fname) #write out the binary feather-format for DataFrames DataFrame.to_latex([buf, columns, …]) #Render an object to a tabular environment table. DataFrame.to_stata(fname[, convert_dates, …]) #A class for writing Stata binary dta files from array-like objects DataFrame.to_msgpack([path_or_buf, encoding]) #msgpack (serialize) object to input file path DataFrame.to_sparse([fill_value, kind]) #Convert to SparseDataFrame DataFrame.to_dense() #Return dense representation of NDFrame (as opposed to sparse) DataFrame.to_string([buf, columns, …]) #Render a DataFrame to a console-friendly tabular output. DataFrame.to_clipboard([excel, sep]) #Attempt to write text representation of object to the system cli ","permalink":"https://luenci.com/en/posts/pandas%E5%87%BD%E6%95%B0/","summary":"\u003ch1 id=\"pythonpandas中dataframe基本函数整理\"\u003e【python】Pandas中DataFrame基本函数整理\u003c/h1\u003e\n\u003ch5 id=\"构造函数\"\u003e构造函数\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eDataFrame([data, index, columns, dtype, copy]) \t#构造数据框1\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"属性和数据\"\u003e属性和数据\u003c/h5\u003e\n\u003cp\u003eDataFrame.axes                                #index: 行标签；columns: 列标签\nDataFrame.as_matrix([columns])                #转换为矩阵\nDataFrame.dtypes                              #返回数据的类型\nDataFrame.ftypes                              #返回每一列的 数据类型float64:dense\nDataFrame.get_dtype_counts()                  #返回数据框数据类型的个数\nDataFrame.get_ftype_counts()                  #返回数据框数据类型float64:dense的个数\nDataFrame.select_dtypes([include, include])   #根据数据类型选取子数据框\nDataFrame.values                              #Numpy的展示方式\nDataFrame.axes                                #返回横纵坐标的标签名\nDataFrame.ndim                                #返回数据框的纬度\nDataFrame.size                                #返回数据框元素的个数\nDataFrame.shape                               #返回数据框的形状\nDataFrame.memory_usage()                      #每一列的存储12345678910111213\u003c/p\u003e","title":"Pandas函数"},{"content":" with 这个关键字，对于每一学习Python的人，都不会陌生。 操作文本对象的时候，我们用 with open ，这就是一个上下文管理的例子。\n1 2 with open(\u0026#39;test.txt\u0026#39;) as f: print f.readlines() 上下文管理器概念 基本语法\n1 2 with EXPR as VAR: BLOCK 几个概念\n1 2 3 1. 上下文表达式：with open(\u0026#39;test.txt\u0026#39;) as f: 2. 上下文管理器：open(\u0026#39;test.txt\u0026#39;)\t3. f不是上下文管理器，应该是资源对象。 实现下文管理器 要自己实现这样一个上下文管理，要先知道上下文管理协议。\n简单点说，就是在一个类里，实现了__enter__和__exit__的方法，这个类的实例就是一个上下文管理器。 例如这个示例：\n1 2 3 4 5 6 7 8 9 10 11 12 class Resource(): def __enter__(self): print(\u0026#39;===connect to resource===\u0026#39;) return self def __exit__(self, exc_type, exc_val, exc_tb): print(\u0026#39;===close resource connection===\u0026#39;) def operate(self): print(\u0026#39;===in operation===\u0026#39;) with Resource() as res: res.operate() 我们执行一下，通过日志的打印顺序。可以知道其执行过程。\n1 2 3 ===connect to resource=== ===in operation=== ===close resource connection=== 从这个示例可以很明显的看出，在编写代码时，可以将资源的连接或者获取放在__enter__中，而将资源的关闭写在__exit__ 中。 上下文管理器作用 可以以一种更加优雅的方式，操作（创建/获取/释放）资源，如文件操作、数据库连接； 可以以一种更加优雅的方式，处理异常； 第一种，我们上面已经以资源的连接为例介绍了。\n而第二种，会被大多数人所忽略。这里会重点讲一下。\n大家都知道，处理异常，通常都是使用 try...execept.. 来捕获处理的。这样做一个不好的地方是，在代码的主逻辑里，会有大量的异常处理代理，这会很大的影响我们的可读性。\n好一点的做法呢，可以使用 with 将异常的处理隐藏起来。\n仍然是以上面的代码为例，我们将I/O 这个一定会抛出异常的代码写在 operate 里\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Resource(): def __enter__(self): print(\u0026#39;===connect to resource===\u0026#39;) return self def __exit__(self, exc_type, exc_val, exc_tb): print(\u0026#39;===close resource connection===\u0026#39;) return True def operate(self): I/O with Resource() as res: res.operate() 运行一下，惊奇地发现，居然不会报错。\n这就是上下文管理协议的一个强大之处，异常可以在__exit__ 进行捕获并由你自己决定如何处理，是抛出呢还是在这里就解决了。在__exit__ 里返回 True（没有return 就默认为 return False），就相当于告诉 Python解释器，这个异常我们已经捕获了，不需要再往外抛了。\n在 写__exit__ 函数时，需要注意的事，它必须要有这三个参数：\nexc_type：异常类型 exc_val：异常值 exc_tb：异常的错误栈信息 当主逻辑代码没有报异常时，这三个参数将都为None。\n常见的异常 异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。 一般情况下，在Python无法正常处理程序时就会发生一个异常。 异常是Python对象，表示一个错误。 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。 python的标准异常可以在官网文档中查看,常用的如下: 异常名称 描述 SystemExit 解释器请求退出 KeyboardInterrupt 用户中断执行(通常是输入^C) Exception 常规错误的基类 SweightIteration 迭代器没有更多的值 GeneratorExit 生成器(generator)发生异常来通知退出 StandardError 所有的内建标准异常的基类 ArithmeticError 所有数值计算错误的基类 FloatingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDivisionError 除(或取模)零 (所有数据类型) AssertionError 断言语句失败 AttributeError 对象没有这个属性 EOFError 没有内建输入,到达EOF 标记 EnvironmentError 操作系统错误的基类 IOError 输入/输出操作失败 OSError 操作系统错误 WindowsError 系统调用失败 ImportError 导入模块/对象失败 LookupError 无效数据查询的基类 IndexError 序列中没有此索引(index) KeyError 映射中没有这个键 MemoryError 内存溢出错误(对于Python 解释器不是致命的) NameError 未声明/初始化对象 (没有属性) UnboundLocalError 访问未初始化的本地变量 ReferenceError 弱引用(Weak reference)试图访问已经垃圾回收了的对象 RuntimeError 一般的运行时错误 NotImplementedError 尚未实现的方法 SyntaxError Python 语法错误 IndentationError 缩进错误 TabError Tab 和空格混用 SystemError 一般的解释器系统错误 TypeError 对类型无效的操作 ValueError 传入无效的参数 UnicodeError Unicode 相关的错误 UnicodeDecodeError Unicode 解码时的错误 UnicodeEncodeError Unicode 编码时错误 UnicodeTranslateError Unicode 转换时错误 Warning 警告的基类 DeprecationWarning 关于被弃用警告 FutureWarning 关于构造将来语义会有改变的警告 OverflowWarning 旧的关于自动提升为长整型(long)的警告 PendingDeprecationWarning 关于特性将会被废弃的警告 RuntimeWarning 可疑的运行时行为(runtime behavior)的警告 SyntaxWarning 可疑的语法的警告 UserWarning 用户代码生成的警告 ","permalink":"https://luenci.com/en/posts/python-%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/","summary":"\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ewith\u003c/code\u003e 这个关键字，对于每一学习Python的人，都不会陌生。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e操作文本对象的时候，我们用 \u003ccode\u003ewith open\u003c/code\u003e ，这就是一个上下文管理的例子。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ewith\u003c/span\u003e open(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;test.txt\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print f\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereadlines()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"上下文管理器概念\"\u003e上下文管理器概念\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e基本语法\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003ewith\u003c/span\u003e EXPR \u003cspan style=\"color:#ff7b72\"\u003eas\u003c/span\u003e VAR:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BLOCK\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e几个概念\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1.\u003c/span\u003e 上下文表达式\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\u003cspan style=\"color:#ff7b72\"\u003ewith\u003c/span\u003e open(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;test.txt\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#ff7b72\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2.\u003c/span\u003e 上下文管理器\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003eopen(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;test.txt\u0026#39;\u003c/span\u003e)\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e3.\u003c/span\u003e f不是上下文管理器\u003cspan style=\"color:#f85149\"\u003e，\u003c/span\u003e应该是资源对象\u003cspan style=\"color:#f85149\"\u003e。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Python 中的上下文管理器"},{"content":"python编程之百度接口语音识别 首先在百度AI开放平台上创建语音识别应用，创建完毕应用后，得到系统分配给用户的AppID， API Key， secret Key，均为字符串，用于标识用户，为访问做签名验证。 得到验证后，开始编程 1.记录自己声音 2.将记录下来的音频文件上传至云端 3.解析返回后的结果 python实现 相关包 pyaudio，baidu-aip 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 from aip import AipSpeech import wave from pyaudio import PyAudio, paInt16 def save_wave_file(filename, data): \u0026#39;\u0026#39;\u0026#39;save the date to the wavfile\u0026#39;\u0026#39;\u0026#39; wf = wave.open(filename, \u0026#39;wb\u0026#39;) wf.setnchannels(channels) wf.setsampwidth(sampwidth) wf.setframerate(framerate) wf.writeframes(b\u0026#34;\u0026#34;.join(data)) wf.close() def my_record(): pa = PyAudio() stream = pa.open(format=paInt16, channels=1, rate=framerate, input=True, frames_per_buffer=NUM_SAMPLES) my_buf = [] count = 0 print(\u0026#39;录音开始\u0026#39;) while count \u0026lt; TIME*10: # 控制录音时间 string_audio_data = stream.read(NUM_SAMPLES) my_buf.append(string_audio_data) count += 1 print(\u0026#39;录音结束\u0026#39;) save_wave_file(\u0026#39;01.pcm\u0026#39;, my_buf) stream.close() if __name__ == \u0026#34;__main__\u0026#34;: framerate = 16000 NUM_SAMPLES = 2000 channels = 1 sampwidth = 2 TIME = 2 my_record() \u0026#34;\u0026#34;\u0026#34; 我的 APPID AK SK \u0026#34;\u0026#34;\u0026#34; APP_ID = \u0026#39;16795182 \u0026#39; API_KEY = \u0026#39;8io5s7uv8pjYPUrQp1i8PcIg\u0026#39; SECRET_KEY = \u0026#39;gK2MljvbcF3SKS4p0C2ieq1SCBNY48BD\u0026#39; client = AipSpeech(APP_ID, API_KEY, SECRET_KEY) # 读取文件 def get_file_content(filePath): with open(filePath, \u0026#39;rb\u0026#39;) as fp: return fp.read() # 识别本地文件 result = client.asr(get_file_content(\u0026#39;01.pcm\u0026#39;), \u0026#39;pcm\u0026#39;, 16000, { \u0026#39;dev_pid\u0026#39;: 1536, }) # print(type(result)) print(\u0026#34;语音识别结果：\u0026#34;, result[\u0026#39;result\u0026#39;]) ","permalink":"https://luenci.com/en/posts/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/","summary":"\u003ch1 id=\"python编程之百度接口语音识别\"\u003epython编程之百度接口语音识别\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e首先在百度AI开放平台上创建\u003ca href=\"https://ai.baidu.com/tech/speech/asr\"\u003e语音识别\u003c/a\u003e应用，创建完毕应用后，得到系统分配给用户的\u003ccode\u003eAppID\u003c/code\u003e， \u003ccode\u003eAPI Key\u003c/code\u003e，  \u003ccode\u003esecret Key\u003c/code\u003e，均为字符串，用于标识用户，为访问做签名验证。\u003c/li\u003e\n\u003cli\u003e得到验证后，开始编程\n\u003cul\u003e\n\u003cli\u003e1.记录自己声音\u003c/li\u003e\n\u003cli\u003e2.将记录下来的音频文件上传至云端\u003c/li\u003e\n\u003cli\u003e3.解析返回后的结果\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"python之百度接口语音识别"},{"content":"递归函数 递归特性\n1.必须有一个明确的结束条件 2.每次进入更深一层递归时，问题规模相比上次递归都应有所减少 3.递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出） 代码演练\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def send(student): if len(student) == 0: return \u0026#39;All student revice messges\u0026#39; one = student.pop() if one == \u0026#39;luenci\u0026#39;: print(\u0026#39;luenci get\u0026#39;) send(student) elif one == \u0026#39;jack\u0026#39;: print(\u0026#39;jack get\u0026#39;) send(student) else: print(\u0026#39;xiaoming get\u0026#39;) send(student) if __name__ == \u0026#34;__main__\u0026#34;: student_list = [\u0026#39;luenci\u0026#39;, \u0026#39;jack\u0026#39;, \u0026#39;xiaoming\u0026#39;] send(student_list) 函数作用域 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def foo(): name = \u0026#39;luenci\u0026#39; def bar(): name = \u0026#39;xiaoming\u0026#39; def tt(): print(name) return tt return bar print(foo) print(foo()) print(foo()()) # bar=foo() # tt=bar() # print(tt) # tt() foo()()() out\u0026gt;\u0026gt; \u0026lt;function foo at 0x0000020655A92E18\u0026gt; \u0026lt;function foo.\u0026lt;locals\u0026gt;.bar at 0x00000206577809D8\u0026gt; \u0026lt;function foo.\u0026lt;locals\u0026gt;.bar.\u0026lt;locals\u0026gt;.tt at 0x0000020657780A60\u0026gt; xiaoming 函数式编程 匿名函数 函数声明：lambda 参数:表达式返回值 1 2 3 4 5 6 7 8 9 10 11 def test(x): return x+1 print(test(10)) fun = lambda x:x+1 print(fun(10)) out: 11 11 初始版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 num_l = [1,2,3,4,5,6] def add(num): return num+1 def subtraction(num): return num-1 def square(num): return num**2 def opertion(func,args): ret = [] for i in args: res = func(i) ret.append(res) return ret 进阶版 1 2 3 4 5 6 7 8 def opertion(func,args): ret = [] for i in args: res = func(i) ret.append(res) return ret print(opertion(lambda x: x + 1, num_l)) map函数版 1 map(lambda x: x + 1, num_l) filter函数 用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列\n该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。\n1 filter(function, iterable) 参数 function \u0026ndash; 判断函数。 iterable \u0026ndash; 可迭代对象。 reduce()函数 1 reduce(function, iterable[, initializer]) 对参数序列中元素进行累积\n参数 function \u0026ndash; 函数，两个参数 iterable \u0026ndash; 可迭代对象 initializer \u0026ndash; 可选，初始参数 1 2 3 4 5 from functools import reduce num_l = [1,2,3,4,5] print(reduce(lambda x, y: x + y, num_l)) 一些内置函数 abs（）\n返回绝对值 eval（）\n解除引号的束缚\n1 2 3 \u0026gt;\u0026gt;\u0026gt; info = \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;LiHua\u0026#34;, \u0026#34;age\u0026#34;: 12}\u0026#39; \u0026gt;\u0026gt;\u0026gt; eval(info) {\u0026#39;name\u0026#39;: \u0026#39;LiHua\u0026#39;, \u0026#39;age\u0026#39;: 12} dir （）\n函数返回属性列表 id （）\n函数返回对象地址 isinstance（）\n判断对象的类型 type （）\n返回对象的类型 enumerate 函数\n返回元素的序号与对应值 1 2 3 4 5 6 7 8 9 In [3]: for i,elm in enumerate(seq): ...: print(i,elm) ...: 0 P 1 y 2 t 3 h 4 o 5 n ","permalink":"https://luenci.com/en/posts/python%E5%87%BD%E6%95%B0%E8%A1%A5%E5%85%85/","summary":"\u003ch1 id=\"递归函数\"\u003e递归函数\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e递归特性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1.必须有一个明确的结束条件\u003c/li\u003e\n\u003cli\u003e2.每次进入更深一层递归时，问题规模相比上次递归都应有所减少\u003c/li\u003e\n\u003cli\u003e3.递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e代码演练\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003esend\u003c/span\u003e(student):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e len(student) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;All student revice messges\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    one \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e student\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epop()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e one \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci get\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        send(student)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eelif\u003c/span\u003e one \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;jack\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;jack get\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        send(student)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;xiaoming get\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        send(student)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    student_list \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;jack\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;xiaoming\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    send(student_list)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"函数作用域\"\u003e函数作用域\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efoo\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ebar\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;xiaoming\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ett\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e tt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e bar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(foo)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(foo())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(foo()())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# bar=foo()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# tt=bar()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# print(tt)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# tt()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efoo()()()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003efunction foo at \u003cspan style=\"color:#a5d6ff\"\u003e0x0000020655A92E18\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003efunction foo\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u0026lt;\u003c/span\u003elocals\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;.\u003c/span\u003ebar at \u003cspan style=\"color:#a5d6ff\"\u003e0x00000206577809D8\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003efunction foo\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u0026lt;\u003c/span\u003elocals\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;.\u003c/span\u003ebar\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u0026lt;\u003c/span\u003elocals\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;.\u003c/span\u003ett at \u003cspan style=\"color:#a5d6ff\"\u003e0x0000020657780A60\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003exiaoming\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"函数式编程\"\u003e函数式编程\u003c/h1\u003e\n\u003ch2 id=\"匿名函数\"\u003e匿名函数\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e函数声明：\u003ccode\u003elambda 参数:表达式返回值\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etest\u003c/span\u003e(x):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(test(\u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efun \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003elambda\u003c/span\u003e x:x\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(fun(\u003cspan style=\"color:#a5d6ff\"\u003e10\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e11\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"python函数补充"},{"content":"Python后端架构演进 本文转自python社区：https://www.pythontab.com/html/2018/pythonweb_0725/1329.html\n架构 做了3年的后端开发, 经历一款SaaS产品从0到10(还没有到100, 哈哈哈)的过程, 3年间后端的架构逐步演变, 在微服务的实践过程中遇到的问题也越来越多, 在这里总结下.\n产品是一款服务于人力资源的SaaS在线服务, 面向HR有Web Android/iOS 小程序多个客户端, 后端采用RESTful风格API来提供服务. 主要使用Python语言, 方便快速迭代.\n架构的演进经历了4个大的阶段: 1. MVC 2. 服务拆分 3. 微服务架构 4. 领域驱动设计.\n1. MVC 项目刚开始的时候, 后端同事不超过5个, 这个阶段主要的工作是实现产品的原型, 没有太多的考虑架构, 使用Django来快速实现功能, DB的表结构设计好之后, 抽象出功能View, 由于产品设计也很不完善, 后端需要很多的预留设计, 避免产品逻辑的变更带来整个表结构的变动, 在这个阶段代码上最重要的是确定适合团队的代码规范, 代码检查规则.\n整体上架构如上图, Nginx负责负载均衡, 分发流量到多个Django服务, Django处理逻辑, 需要异步任务就交给Celery, 然后数据量比较大的地方使用Redis做缓存. 同时还有实时消息通知的需要使用了Nginx Push Module.\n问题与优化方式:\nDjango并发性能差 使用uWSGI Master+Worker 配合 gevent 携程支持高并发\nRedis连接数过多 使用redis-py自带的连接池来实现连接复用\nMySQL连接数过多 使用djorm-ext-pool连接池复用连接\nCelery配置gevent支持并发任务\n随着开发的功能越来越多, Django下的app也越来越多, 这就带了发布上的不方便, 每次发布版本都需要重启所有的Django服务, 如果发布遇到问题, 只能加班解决了. 而且单个Django工程下的代码量也越来越多, 不好维护.\n2. 服务拆分 随着后端团队的壮大, 分给每个同事的需求也越来越细, 如果继续在一个工程里面开发所有的代码, 维护起来的代价太高, 而我们的上一个架构中在Django里面已经按模块划分了一个个app, app内高类聚, app之间低耦合, 这就为服务的拆分带来了便利. 拆分的过程没有遇到太大的问题, 初期的拆分只是代码的分离, 把公用的代码抽离出来实现一个公用的Python库, 数据库, Redis还是共用, 随着负载的增加, 数据库也做了多实例.\n如上图, 服务之间尽量避免相互调用, 需要交互的地方采用http请求的方式, 内网的调用使用hosts指向内网地址.\n问题与优化方式:\nNginx Push Module由于长时间没有维护, 长连接最大数量不够, 使用Tornado + ZeroMQ实现了tormq服务来支撑消息通知\n服务之间的调用采用http的方式, 并且要求有依赖的服务主机配置hosts指向被调用的地址, 这样带来的维护上的不方便. 以及在调用链的过程中没有重试, 错误处理, 限流等等的策略, 导致服务可用性差. 随着业务拆分, 继续使用Nginx维护配置非常麻烦, 经常因为修改Nginx的配置引发调用错误. 每一个服务都有一个完整的认证过程, 认证又依赖于用户中心的数据库, 修改认证时需要重新发布多个服务.\n3. 微服务架构 首先是在接入层引入了基于OpenResty的Kong API Gateway, 定制实现了认证, 限流等插件. 在接入层承接并剥离了应用层公共的认证, 限流等功能. 在发布新的服务时, 发布脚本中调用Kong admin api注册服务地址到Kong, 并加载api需要使用插件.\n为了解决相互调用的问题, 维护了一个基于gevent+msgpack的RPC服务框架doge, 借助于etcd做服务治理, 并在rpc客户端实现了限流, 高可用, 负载均衡这些功能.\n在这个阶段最难的技术选型, 开源的API网关大多用Golang与OpenResty(lua)实现, 为了应对我们业务的需要还要做定制. 前期花了1个月时间学习OpenResty与Golang, 并使用OpenResty实现了一个短网址服务shorturl用在业务中. 最终选择Kong是基于Lua发布的便利性, Kong的开箱即用以及插件开发比较容易. 性能的考量倒不是最重要的, 为了支撑更多的并发, 还使用了云平台提供的LB服务分发流量到2台Kong服务器组成的集群. 集群之间自动同步配置.\n饿了么维护一个纯Python实现的thrift协议框架thriftpy, 并提供很多配套的工具, 如果团队足够大, 这一套RPC方案其实是合适的, 但是我们的团队人手不足, 水平参差不齐, 很难推广这一整套学习成本高昂的方案. 最终我们开发了类Duboo的RPC框架doge, 代码主要参考了weibo开源的motan.\n4. 领域驱动设计 在这一架构中我们尝试从应用服务中抽离出数据服务层, 每一个数据服务包含一个或多个界限上下文, 界限上下文类只有一个聚合根来暴露出RPC调用的方法. 数据服务不依赖于应用服务, 应用服务可以依赖多个数据服务. 有了数据服务层, 应用就解耦了相互之间的依赖, 高层服务只依赖于底层服务.\n在我离职时领域驱动设计还在学习设计阶段, 还没有落地, 但是我相信前公司的后端架构一定会往这个方向继续演进.\n总结 架构的设计, 技术的选型, 不能完全按照流行的技术走, 最终还是服务于产品, 服务于客户的需求. 设计过程中由于团队, 人员的结构问题, 有很多的妥协之处, 如何在妥协中找到最优解才是最大的挑战.\n","permalink":"https://luenci.com/en/posts/django%E5%90%8E%E7%AB%AF%E6%BC%94%E5%8C%96/","summary":"\u003ch1 id=\"python后端架构演进\"\u003ePython后端架构演进\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003e本文转自python社区：https://www.pythontab.com/html/2018/pythonweb_0725/1329.html\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"Python后端架构演进（转载）"},{"content":"多任务 同一个时间有多个任务在执行 python程序默认是单任务 线程 线程概念 线程，可简单理解为是程序执行的一条分支，也是程序执行流的最小单元。 线程是被系统独立调度和分底的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程为其它线程共享进程所拥有的全部资源。 主线程 当一个程序后动时，就有一个进程被操作系统（OS）创建，与此同时一个线程也立刻运行，该线程通常叫做程序的主线程，简而言之；程序后动就会创建一个主线程。\nCopy主线程的重要性有两方面：\n1）是产生其他子线程的线程；\n2）通常它必须最后完成执行比如执行各种关闭动作·\n子线程 可以看做是程序执行的一条分支，当子线程后动后会和主线程一起同时执行 主线程会等待所以子线程结束之后再结束 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import threading from time import * def loop0(): print(\u0026#39;start loop0 at:\u0026#39;, ctime()) sleep(4) print(\u0026#39;loop0 done at:\u0026#39;, ctime()) def loop1(): print(\u0026#39;start loop1 at:\u0026#39;, ctime())\tprint(\u0026#39;loop1 done at:\u0026#39;, ctime()) def main(): print(\u0026#39;starting at :\u0026#39;, ctime()) # 使用threading.Thread创建对象（子进程对象） # threading.Thread（target=函数名） thread_1 = threading.Thread(target=loop0) thread_2 = threading.Thread(target=loop1) thread_1.start() thread_2.start() print(\u0026#39;all done at:\u0026#39;, ctime()) if __name__ == \u0026#39;__main__\u0026#39;: main() out： starting at : Wed Nov 13 14:21:27 2019 start loop0 at: Wed Nov 13 14:21:27 2019 start loop1 at: Wed Nov 13 14:21:27 2019 loop1 done at: Wed Nov 13 14:21:27 2019 all done at: Wed Nov 13 14:21:27 2019 loop0 done at: Wed Nov 13 14:21:31 2019 线程数量 目标 能够如何查看正在活动的线程数量 1.查看线程数量 threading.enumerate（）获取当前所有活跃的线程对象列表。使用len()对列表求长度可以看到当前活跃的线程的个数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import threading from time import * def loop0(): print(\u0026#39;{}start loop0 at{}:\u0026#39;.format(threading.current_thread(), ctime())) sleep(4) print(\u0026#39;loop0 done at:\u0026#39;, ctime()) def loop1(): print(\u0026#39;{}start loop1 at{}:\u0026#39;.format(threading.current_thread(), ctime())) print(\u0026#39;loop1 done at:\u0026#39;, ctime()) def main(): print(\u0026#39;starting at :\u0026#39;, ctime()) # 使用threading.Thread创建对象（子进程对象） # threading.Thread（target=函数名） thread_1 = threading.Thread(target=loop0) thread_2 = threading.Thread(target=loop1) thread_1.start() thread_2.start() print(\u0026#39;all done at:\u0026#39;, ctime()) if __name__ == \u0026#39;__main__\u0026#39;: main() thread_list = threading.enumerate() print(\u0026#34;当前线程数量：%d\u0026#34; % len(thread_list)) out: starting at : Wed Nov 13 14:41:20 2019 \u0026lt;Thread(Thread-1, started 9916)\u0026gt;start loop0 atWed Nov 13 14:41:20 2019: \u0026lt;Thread(Thread-2, started 2868)\u0026gt;start loop1 atWed Nov 13 14:41:20 2019: loop1 done at: Wed Nov 13 14:41:20 2019 all done at: Wed Nov 13 14:41:20 2019 当前线程数量：2 loop0 done at: Wed Nov 13 14:41:24 2019 线程参数及顺序 线程中传递参数有三种方法 1.使用元组传递 threading.Thread(target=fun_name,args=(参数。。。)) thread_1 = threading.Thread(target=loop0, args=(10, 21, 22)) 2.使用字典传递 threading.Thread(target=fun_name,kwargs={\u0026quot;参数名\u0026quot;: \u0026quot;参数值\u0026quot;....}) thread_1 = threading.Thread(target=loop0, kwargs={\u0026quot;a\u0026quot;: 10, \u0026quot;b\u0026quot;: 21, \u0026quot;c\u0026quot;: 22}) 3.混合使用元组和字典传递 threading.Thread(target=fun_name,args=(10, 21, 22), kwargs={\u0026quot;参数名\u0026quot;: \u0026quot;参数值\u0026quot;....}) thread_1 = threading.Thread(target=loop0, args=(10, 21), kwargs={\u0026quot;c\u0026quot;: 22}) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import threading from time import * def loop0(a, b, c): print(\u0026#34;参数：\u0026#34;, a, b, c) print(\u0026#34;start loop0 at:\u0026#34;, ctime()) sleep(4) print(\u0026#34;loop0 done at:\u0026#34;, ctime()) def loop1(): print(\u0026#34;start loop1 at:\u0026#34;, ctime()) print(\u0026#34;loop1 done at:\u0026#34;, ctime()) def main(): print(\u0026#34;starting at :\u0026#34;, ctime()) # 线程中传递参数有三种方法 # 1.使用元组传递 threading.Thread(target=fun_name,args=(参数。。。)) # thread_1 = threading.Thread(target=loop0, args=(10, 21, 22)) # 2.使用字典传递 threading.Thread(target=fun_name,kwargs={\u0026#34;参数名\u0026#34;: \u0026#34;参数值\u0026#34;....}) # thread_1 = threading.Thread(target=loop0, kwargs={\u0026#34;a\u0026#34;: 10, \u0026#34;b\u0026#34;: 21, \u0026#34;c\u0026#34;: 22}) # 3.混合使用元组和字典传递 threading.Thread(target=fun_name,args=(10, 21, 22), kwargs={\u0026#34;参数名\u0026#34;: \u0026#34;参数值\u0026#34;....}) thread_1 = threading.Thread(target=loop0, args=(10, 21), kwargs={\u0026#34;c\u0026#34;: 22}) thread_2 = threading.Thread(target=loop1) thread_1.start() thread_2.start() print(\u0026#34;all done at:\u0026#34;, ctime()) if __name__ == \u0026#34;__main__\u0026#34;: main() out: starting at : Wed Nov 13 15:00:00 2019 参数： 10 21 22 start loop0 at: Wed Nov 13 15:00:00 2019 start loop1 at: Wed Nov 13 15:00:00 2019 loop1 done at: Wed Nov 13 15:00:00 2019 all done at: Wed Nov 13 15:00:00 2019 loop0 done at: Wed Nov 13 15:00:04 2019 守护线程 守护线程：如果在程序中将子线程设置为守护线程，则该子线程会在主线程结束时自动退出，设置方式为threaj.setDaemon（True），要在thread.start0之前设置，默认是false的，也就是主线程结束时，子线程依然在执行。 对于python应用我们都知道main方法是入口，它的运行代表着主线程开始工作了，我们都知道Python虚拟机里面有垃圾回收器的存在使得我们放心让main运行，然而这背后是垃圾回收线程作为守护着主线程的守护线程。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import threading import time def work1(): for i in range(10): print(\u0026#34;正在执行work1...\u0026#34;, i) time.sleep(0.5) if __name__ == \u0026#39;__main__\u0026#39;: # 创建子线程 thread_woek1 = threading.Thread(target=work1) # 将子线程设置为守护线程 thread_woek1.setDaemon(True) thread_woek1.start() # 睡眠 time.sleep(2) print(\u0026#34;game over\u0026#34;) # 让程序退出，主线程主动结束 exit() out: 正在执行work1... 0 正在执行work1... 1 正在执行work1... 2 正在执行work1... 3 game over 并行和并发 多任务的原理剖析 操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒…….这样反复执行下去。 表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。 并发：指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一超执行而已） 真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。 并发：任务数量大于CPU的核心数 并行：指的是任务数小于等于cpu核数，即任务真的是一起执行的 并行：任务数量小于或等于CPU的核心数 多线程——共享全局变量 当多个线程修改同一个资源的时候，会出现资源竞争，导致计算结果有误 调用join方法优先让某个线程先执行 缺点：将多线程变成了单线程，影响执行效率 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import threading import time g_num = 0 def work1(): # 声明g_num是一个全局变量 global g_num for i in range(10000000): g_num += 1 print(\u0026#34;work1-----------------\u0026#34;, g_num) def work2(): global g_num for i in range(10000000): g_num += 1 print(\u0026#34;work2-----------------\u0026#34;, g_num) if __name__ == \u0026#39;__main__\u0026#39;: work_1 = threading.Thread(target=work1) work_2 = threading.Thread(target=work2) work_1.start() # 优先让t1线程先执行， t1执行完毕后，t2才能执行 work_1.join() work_2.start() while len(threading.enumerate()) != 1: time.sleep(1) print(\u0026#34;main-----------\u0026#34;, g_num) 同步和异步 同步：多任务，多个任务之间执行的时候要求有先后顺序，必须一个先执行完成之后，另一个才能继续执行，只有一个主线。如：你说完，我再说（同一时间只能做一件事情） 异步，指的是：多个任务之间执行没有先后顺序，可以同时运行，执行的先后顺序不会有什么影响，存在的多条运行主线。如：发微信（可以不用等对方回复，继续发）、点外卖（点了外卖后，可以继续忙其他的事情，而不是坐等外卖，啥也不做） 线程锁 互斥锁 当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制线程同步能够保证多个线程安全访问竞争源，最简单的同步机制是引入互斥锁。 互斥锁为资源引入一个状态：锁定/非锁定 某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。 互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import threading import time g_num = 0 def work1(): # 声明g_num是一个全局变量 global g_num for i in range(10000000): # 上锁 lock1.acquire() g_num += 1 # 释放锁 lock1.release() print(\u0026#34;work1-----------------\u0026#34;, g_num) def work2(): global g_num for i in range(10000000): # 上锁 lock1.acquire() g_num += 1 # 解锁 lock1.release() print(\u0026#34;work2-----------------\u0026#34;, g_num) if __name__ == \u0026#39;__main__\u0026#39;: print(time.ctime()) # 创建一把互斥锁 lock1 = threading.Lock() work_1 = threading.Thread(target=work1) work_2 = threading.Thread(target=work2) work_1.start() work_2.start() while len(threading.enumerate()) != 1: time.sleep(1) print(\u0026#34;main-----------\u0026#34;, g_num) print(\u0026#34;总时间:\u0026#34;, time.ctime()) 死锁 在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。 注意：使用完毕及时释放 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import threading def get_value(index): data_list = [1, 3, 5, 7, 9] lock1.acquire() if index \u0026gt;= len(data_list): print(\u0026#34;下标越界\u0026#34;, index) # 若不释放就产生死锁 lock1.release() return print(data_list[index]) lock1.release() if __name__ == \u0026#39;__main__\u0026#39;: # 创建一把锁 lock1 = threading.Lock() for i in range(10): t1 = threading.Thread(target=get_value, args=(i, )) t1.start() ","permalink":"https://luenci.com/en/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","summary":"\u003ch1 id=\"多任务\"\u003e多任务\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e同一个时间有多个任务在执行\u003c/li\u003e\n\u003cli\u003epython程序默认是单任务\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"线程\"\u003e线程\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e线程概念\n\u003cul\u003e\n\u003cli\u003e线程，可简单理解为是程序执行的一条分支，也是程序执行流的最小单元。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e线程是被系统独立调度和分底的基本单位\u003c/strong\u003e，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程为其它线程共享进程所拥有的全部资源。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://i.postimg.cc/C1xWN60d/image-20191113140837489.png\" alt=\"image-20191113140837489\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"主线程\"\u003e主线程\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e当一个程序后动时，就有一个进程被操作系统（OS）创建，与此同时一个线程也立刻运行，该线程通常叫做程序的主线程，简而言之；程序后动就会创建一个主线程。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCopy主线程的重要性有两方面：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e1）是产生其他子线程的线程；\u003c/p\u003e\n\u003cp\u003e2）通常它必须最后完成执行比如执行各种关闭动作·\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"python多线程，并发和锁"},{"content":" 本文转载自:https://pythonav.com/wiki/detail/6/91/\n1.协程 协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：\n1 2 3 4 5 6 7 8 9 10 11 12 def func1(): print(1) ... print(2) def func2(): print(3) ... print(4) func1() func2() 上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：1、2、3、4。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：1、3、2、4 。\n在Python中有多种方式可以实现协程，例如：\ngreenlet，是一个第三方模块，用于实现协程代码（Gevent协程就是基于greenlet实现） yield，生成器，借助生成器的特点也可以实现协程代码。 asyncio，在Python3.4中引入的模块用于编写协程代码。 async \u0026amp; awiat，在Python3.5中引入的两个关键字，结合asyncio模块可以更方便的编写协程代码。 1.1 greenlet greentlet是一个第三方模块，需要提前安装 pip3 install greenlet才能使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from greenlet import greenlet def func1(): print(1) # 第1步：输出 1 gr2.switch() # 第3步：切换到 func2 函数 print(2) # 第6步：输出 2 gr2.switch() # 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行 def func2(): print(3) # 第4步：输出 3 gr1.switch() # 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行 print(4) # 第8步：输出 4 gr1 = greenlet(func1) gr2 = greenlet(func2) gr1.switch() # 第1步：去执行 func1 函数 注意：switch中也可以传递参数用于在切换执行时相互传递值。\n1.2 yield 基于Python的生成器的yield和yield form关键字实现协程代码。\n1 2 3 4 5 6 7 8 9 10 11 12 def func1(): yield 1 yield from func2() yield 2 def func2(): yield 3 yield 4 f1 = func1() for item in f1: print(item) 注意：yield form关键字是在Python3.3中引入的。\n1.3 asyncio 在Python3.4之前官方未提供协程的类库，一般大家都是使用greenlet等其他来实现。在Python3.4发布后官方正式支持协程，即：asyncio模块。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import asyncio @asyncio.coroutine def func1(): print(1) yield from asyncio.sleep(2) # 遇到IO耗时操作，自动化切换到tasks中的其他任务 print(2) @asyncio.coroutine def func2(): print(3) yield from asyncio.sleep(2) # 遇到IO耗时操作，自动化切换到tasks中的其他任务 print(4) tasks = [asyncio.ensure_future( func1() ), asyncio.ensure_future( func2() )] loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks)) 注意：基于asyncio模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能。\n1.4 async \u0026amp; awit async \u0026amp; awit 关键字在Python3.5版本中正式引入，基于他编写的协程代码其实就是 上一示例 的加强版，让代码可以更加简便。\nPython3.8之后 @asyncio.coroutine 装饰器就会被移除，推荐使用async \u0026amp; awit 关键字实现协程代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import asyncio async def func1(): print(1) await asyncio.sleep(2) print(2) async def func2(): print(3) await asyncio.sleep(2) print(4) tasks = [ asyncio.ensure_future(func1()), asyncio.ensure_future(func2())] loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks)) 1.5 小结 关于协程有多种实现方式，目前主流使用是Python官方推荐的asyncio模块和async\u0026amp;await关键字的方式，例如：在tonado、sanic、fastapi、django3 中均已支持。\n接下来，我们也会针对 asyncio模块 + async \u0026amp; await 关键字进行更加详细的讲解。\n2.协程的意义 通过学习，我们已经了解到协程可以通过一个线程在多个上下文中进行来回切换执行。\n但是，协程来回切换执行的意义何在呢？（网上看到很多文章舔协程，协程牛逼之处是哪里呢？）\n1 2 计算型的操作，利用协程来回切换执行，没有任何意义，来回切换并保存状态 反倒会降低性能。 IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO操作结束后再自动回调，那么就会大大节省资源并提供性能，从而实现异步编程（不等待任务结束就可以去执行其他代码）。 2.1 爬虫案例 例如：用代码实现下载 url_list 中的图片。\n方式一：同步编程实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026#34;\u0026#34;\u0026#34;下载图片使用第三方模块requests，请提前安装：pip3 install requests\u0026#34;\u0026#34;\u0026#34; import requests def download_image(url): print(\u0026#34;开始下载:\u0026#34;,url) # 发送网络请求，下载图片 response = requests.get(url) print(\u0026#34;下载完成\u0026#34;) # 图片保存到本地文件 file_name = url.rsplit(\u0026#39;_\u0026#39;)[-1] with open(file_name, mode=\u0026#39;wb\u0026#39;) as file_object: file_object.write(response.content) if __name__ == \u0026#39;__main__\u0026#39;: url_list = [ \u0026#39;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg\u0026#39;, \u0026#39;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg\u0026#39;, \u0026#39;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg\u0026#39; ] for item in url_list: download_image(item) 方式二：基于协程的异步编程实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026#34;\u0026#34;\u0026#34;下载图片使用第三方模块aiohttp，请提前安装：pip3 install aiohttp\u0026#34;\u0026#34;\u0026#34; #!/usr/bin/env python# -*- coding:utf-8 -*- import aiohttp import asyncio async def fetch(session, url): print(\u0026#34;发送请求：\u0026#34;, url) async with session.get(url, verify_ssl=False) as response: content = await response.content.read() file_name = url.rsplit(\u0026#39;_\u0026#39;)[-1] with open(file_name, mode=\u0026#39;wb\u0026#39;) as file_object: file_object.write(content)async def main(): async with aiohttp.ClientSession() as session: url_list = [ \u0026#39;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg\u0026#39;, \u0026#39;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg\u0026#39;, \u0026#39;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg\u0026#39; ] tasks = [asyncio.create_task(fetch(session, url)) for url in url_list] await asyncio.wait(tasks) if __name__ == \u0026#39;__main__\u0026#39;: asyncio.run(main()) 上述两种的执行对比之后会发现，基于协程的异步编程 要比 同步编程的效率高了很多。因为：\n同步编程，按照顺序逐一排队执行，如果图片下载时间为2分钟，那么全部执行完则需要6分钟。 异步编程，几乎同时发出了3个下载任务的请求（遇到IO请求自动切换去发送其他任务请求），如果图片下载时间为2分钟，那么全部执行完毕也大概需要2分钟左右就可以了。 2.2 小结 协程一般应用在有IO操作的程序中，因为协程可以利用IO等待的时间去执行一些其他的代码，从而提升代码执行效率。\n生活中不也是这样的么，假设 你是一家制造汽车的老板，员工点击设备的【开始】按钮之后，在设备前需等待30分钟，然后点击【结束】按钮，此时作为老板的你一定希望这个员工在等待的那30分钟的时间去做点其他的工作。\n3.异步编程 基于async \u0026amp; await关键字的协程可以实现异步编程，这也是目前python异步相关的主流技术。\n想要真正的了解Python中内置的异步编程，根据下文的顺序一点点来看。\n3.1 事件循环 事件循环，可以把他当做是一个while循环，这个while循环在周期性的运行并执行一些任务，在特定条件下终止循环。\n1 2 3 4 5 6 7 8 # 伪代码任务列表 = [ 任务1, 任务2, 任务3,... ] while True: 可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将\u0026#39;可执行\u0026#39;和\u0026#39;已完成\u0026#39;的任务返回 for 就绪任务 in 已准备就绪的任务列表: 执行已就绪的任务 for 已完成的任务 in 已完成的任务列表: 在任务列表中移除 已完成的任务 如果 任务列表 中的任务都已完成，则终止循环 在编写程序时候可以通过如下代码来获取和创建事件循环。\n1 import asyncioloop = asyncio.get_event_loop() 3.2 协程和异步编程 协程函数，定义形式为 async def 的函数。\n协程对象，调用 协程函数 所返回的对象。\n1 2 3 4 5 6 # 定义一个协程函数 async def func(): pass # 调用协程函数，返回一个协程对象\tresult = func() 注意：调用协程函数时，函数内部代码不会执行，只是会返回一个协程对象。\n3.2.1 基本应用 程序中，如果想要执行协程函数的内部代码，需要 事件循环 和 协程对象 配合才能实现，如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio async def func(): print(\u0026#34;协程内部代码\u0026#34;) # 调用协程函数，返回一个协程对象。 result = func() # 方式一 # loop = asyncio.get_event_loop() # 创建一个事件循环 # loop.run_until_complete(result) # 将协程当做任务提交到事件循环的任务列表中，协程执行完成之后终止。 # 方式二 # 本质上方式一是一样的，内部先 创建事件循环 然后执行 run_until_complete，一个简便的写法。 # asyncio.run 函数在 Python 3.7 中加入 asyncio 模块， asyncio.run(result) 这个过程可以简单理解为：将协程当做任务添加到 事件循环 的任务列表，然后事件循环检测列表中的协程是否 已准备就绪（默认可理解为就绪状态），如果准备就绪则执行其内部代码。\n3.2.2 await await是一个只能在协程函数中使用的关键字，用于遇到IO操作时挂起 当前协程（任务），当前协程（任务）挂起过程中 事件循环可以去执行其他的协程（任务），当前协程IO处理完成时，可以再次切换回来执行await之后的代码。代码如下：\n示例1：\n1 2 3 4 5 6 7 8 9 10 import asyncio async def func(): print(\u0026#34;执行协程函数内部代码\u0026#34;) # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。 # 当前协程挂起时，事件循环可以去执行其他协程（任务）。 response = await asyncio.sleep(2) print(\u0026#34;IO请求结束，结果为：\u0026#34;, response) result = func()asyncio.run(result) 示例2：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import asyncio async def others(): print(\u0026#34;start\u0026#34;) await asyncio.sleep(2) print(\u0026#39;end\u0026#39;) return \u0026#39;返回值\u0026#39; async def func(): print(\u0026#34;执行协程函数内部代码\u0026#34;) # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。 response = await others() print(\u0026#34;IO请求结束，结果为：\u0026#34;, response) asyncio.run( func() ) 示例3：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import asyncio async def others(): print(\u0026#34;start\u0026#34;) await asyncio.sleep(2) print(\u0026#39;end\u0026#39;) return \u0026#39;返回值\u0026#39; async def func(): print(\u0026#34;执行协程函数内部代码\u0026#34;) # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。 response1 = await others() print(\u0026#34;IO请求结束，结果为：\u0026#34;, response1) response2 = await others() print(\u0026#34;IO请求结束，结果为：\u0026#34;, response2) asyncio.run( func() ) 上述的所有示例都只是创建了一个任务，即：事件循环的任务列表中只有一个任务，所以在IO等待时无法演示切换到其他任务效果。\n在程序想要创建多个任务对象，需要使用Task对象来实现。\n3.2.3 Task对象 Tasks are used to schedule coroutines concurrently.\nWhen a coroutine is wrapped into a Task with functions like asyncio.create_task() the coroutine is automatically scheduled to run soon。\nTasks用于并发调度协程，通过asyncio.create_task(协程对象)的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 asyncio.create_task() 函数以外，还可以用低层级的 loop.create_task() 或 ensure_future() 函数。不建议手动实例化 Task 对象。\n本质上是将协程对象封装成task对象，并将协程立即加入事件循环，同时追踪协程的状态。\n注意：asyncio.create_task() 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 asyncio.ensure_future() 函数。\n示例1：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import asyncio async def func(): print(1) await asyncio.sleep(2) print(2) return \u0026#34;返回值\u0026#34; async def main(): print(\u0026#34;main开始\u0026#34;) # 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。 task1 = asyncio.create_task(func()) # 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。 task2 = asyncio.create_task(func()) print(\u0026#34;main结束\u0026#34;) # 当执行某协程遇到IO操作时，会自动化切换执行其他任务。 # 此处的await是等待相对应的协程全都执行完毕并获取结果 ret1 = await task1 ret2 = await task2 print(ret1, ret2) asyncio.run(main()) 示例2：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import asyncio async def func(): print(1) await asyncio.sleep(2) print(2) return \u0026#34;返回值\u0026#34; async def main(): print(\u0026#34;main开始\u0026#34;) # 创建协程，将协程封装到Task对象中并添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。 # 在调用 task_list = [ asyncio.create_task(func(), name=\u0026#34;n1\u0026#34;), asyncio.create_task(func(), name=\u0026#34;n2\u0026#34;)] print(\u0026#34;main结束\u0026#34;) # 当执行某协程遇到IO操作时，会自动化切换执行其他任务。 # 此处的await是等待所有协程执行完毕，并将所有协程的返回值保存到done # 如果设置了timeout值，则意味着此处最多等待的秒，完成的协程返回值写入到done中，未完成则写到pending中。 done, pending = await asyncio.wait(task_list, timeout=None) print(done, pending) asyncio.run(main()) 注意：asyncio.wait 源码内部会对列表中的每个协程执行ensure_future从而封装为Task对象，所以在和wait配合使用时task_list的值为[func(),func()] 也是可以的。\n示例3：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import asyncio async def func(): print(\u0026#34;执行协程函数内部代码\u0026#34;) # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。 response = await asyncio.sleep(2) print(\u0026#34;IO请求结束，结果为：\u0026#34;, response) coroutine_list = [func(), func()] # 错误：coroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ] # 此处不能直接 asyncio.create_task，因为将Task立即加入到事件循环的任务列表， # 但此时事件循环还未创建，所以会报错。 # 使用asyncio.wait将列表封装为一个协程，并调用asyncio.run实现执行两个协程 # asyncio.wait内部会对列表中的每个协程执行ensure_future，封装为Task对象。 done,pending = asyncio.run( asyncio.wait(coroutine_list) ) 3.2.4 asyncio.Future对象 A Futureis a special low-level awaitable object that represents an eventual result of an asynchronous operation.\nasyncio中的Future对象是一个相对更偏向底层的可对象，通常我们不会直接用到这个对象，而是直接使用Task对象来完成任务的并和状态的追踪。（ Task 是 Futrue的子类 ）\nFuture为我们提供了异步编程中的 最终结果 的处理（Task类也具备状态处理的功能）。\n示例1：\n1 2 3 4 5 6 7 8 async def main(): # 获取当前事件循环 loop = asyncio.get_running_loop() # # 创建一个任务（Future对象），这个任务什么都不干。 fut = loop.create_future() # 等待任务最终结果（Future对象），没有结果则会一直等下去。 await futasyncio.run(main()) 示例2：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import asyncio async def set_after(fut): await asyncio.sleep(2) fut.set_result(\u0026#34;666\u0026#34;) async def main(): # 获取当前事件循环 loop = asyncio.get_running_loop() # 创建一个任务（Future对象），没绑定任何行为，则这个任务永远不知道什么时候结束。 fut = loop.create_future() # 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值。 # 即手动设置future任务的最终结果，那么fut就可以结束了。 await loop.create_task(set_after(fut)) # 等待 Future对象获取 最终结果，否则一直等下去 data = await fut print(data) asyncio.run(main()) Future对象本身函数进行绑定，所以想要让事件循环获取Future的结果，则需要手动设置。而Task对象继承了Future对象，其实就对Future进行扩展，他可以实现在对应绑定的函数执行完成之后，自动执行set_result，从而实现自动结束。\n虽然，平时使用的是Task对象，但对于结果的处理本质是基于Future对象来实现的。\n扩展：支持 await 对象语 法的对象课成为可等待对象，所以 协程对象、Task对象、Future对象 都可以被成为可等待对象。\n3.2.5 futures.Future对象 在Python的concurrent.futures模块中也有一个Future对象，这个对象是基于线程池和进程池实现异步操作时使用的对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import time from concurrent.futures import Future from concurrent.futures.thread import ThreadPoolExecutor from concurrent.futures.process import ProcessPoolExecutor def func(value): time.sleep(1) print(value) pool = ThreadPoolExecutor(max_workers=5) # 或 pool = ProcessPoolExecutor(max_workers=5) for i in range(10): fut = pool.submit(func, i) print(fut) 两个Future对象是不同的，他们是为不同的应用场景而设计，例如：concurrent.futures.Future不支持await语法 等。\n官方提示两对象之间不同：\nunlike asyncio Futures, concurrent.futures.Future instances cannot be awaited. asyncio.Future.result() and asyncio.Future.exception() do not accept the timeout argument. asyncio.Future.result() and asyncio.Future.exception() raise an InvalidStateError exception when the Future is not done. Callbacks registered with asyncio.Future.add_done_callback() are not called immediately. They are scheduled with loop.call_soon() instead. asyncio Future is not compatible with the concurrent.futures.wait() and concurrent.futures.as_completed() functions. 在Python提供了一个将futures.Future 对象包装成asyncio.Future对象的函数 asynic.wrap_future。\n接下里你肯定问：为什么python会提供这种功能？\n其实，一般在程序开发中我们要么统一使用 asycio 的协程实现异步操作、要么都使用进程池和线程池实现异步操作。但如果 协程的异步和 进程池/线程池的异步 混搭时，那么就会用到此功能了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import time import asyncio import concurrent.futures def func1(): # 某个耗时操作 time.sleep(2) return \u0026#34;SB\u0026#34; async def main(): loop = asyncio.get_running_loop() # 1. Run in the default loop\u0026#39;s executor ( 默认ThreadPoolExecutor ) # 第一步：内部会先调用 ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行func1函数，并返回一个concurrent.futures.Future对象 # 第二步：调用asyncio.wrap_future将concurrent.futures.Future对象包装为asycio.Future对象。 # 因为concurrent.futures.Future对象不支持await语法，所以需要包装为 asycio.Future对象 才能使用。 fut = loop.run_in_executor(None, func1) result = await fut print(\u0026#39;default thread pool\u0026#39;, result) # 2. Run in a custom thread pool: # with concurrent.futures.ThreadPoolExecutor() as pool: # result = await loop.run_in_executor( # pool, func1) # print(\u0026#39;custom thread pool\u0026#39;, result) # 3. Run in a custom process pool: # with concurrent.futures.ProcessPoolExecutor() as pool: # result = await loop.run_in_executor( # pool, func1) # print(\u0026#39;custom process pool\u0026#39;, result) asyncio.run(main()) 应用场景：当项目以协程式的异步编程开发时，如果要使用一个第三方模块，而第三方模块不支持协程方式异步编程时，就需要用到这个功能，例如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import asyncio import requests async def download_image(url): # 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务） print(\u0026#34;开始下载:\u0026#34;, url) loop = asyncio.get_event_loop() # requests模块默认不支持异步操作，所以就使用线程池来配合实现了。 future = loop.run_in_executor(None, requests.get, url) response = await future print(\u0026#39;下载完成\u0026#39;) # 图片保存到本地文件 file_name = url.rsplit(\u0026#39;_\u0026#39;)[-1] with open(file_name, mode=\u0026#39;wb\u0026#39;) as file_object: file_object.write(response.content) if __name__ == \u0026#39;__main__\u0026#39;: url_list = [ \u0026#39;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg\u0026#39;, \u0026#39;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg\u0026#39;, \u0026#39;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg\u0026#39; ] tasks = [download_image(url) for url in url_list] loop = asyncio.get_event_loop() loop.run_until_complete( asyncio.wait(tasks) ) 3.2.6 异步迭代器 什么是异步迭代器\n实现了 __aiter__() 和 __anext__() 方法的对象。__anext__ 必须返回一个 awaitable 对象。async for 会处理异步迭代器的 __anext__() 方法所返回的可等待对象，直到其引发一个 SweightAsyncIteration 异常。由 PEP 492 引入。\n什么是异步可迭代对象？\n可在 async for 语句中被使用的对象。必须通过它的 __aiter__() 方法返回一个 asynchronous iterator。由 PEP 492 引入。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import asyncio class Reader(object): \u0026#34;\u0026#34;\u0026#34; 自定义异步迭代器（同时也是异步可迭代对象） \u0026#34;\u0026#34;\u0026#34; def __init__(self): self.count = 0 async def readline(self): # await asyncio.sleep(1) self.count += 1 if self.count == 100: return None return self.count def __aiter__(self): return self async def __anext__(self): val = await self.readline() if val == None: raise SweightAsyncIteration return val async def func(): # 创建异步可迭代对象 async_iter = Reader() # async for 必须要放在async def函数内，否则语法错误。 async for item in async_iter: print(item) asyncio.run(func()) 异步迭代器其实没什么太大的作用，只是支持了async for语法而已。\n3.2.6 异步上下文管理器 此种对象通过定义 __aenter__() 和 __aexit__() 方法来对 async with 语句中的环境进行控制。由 PEP 492 引入。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import asyncio class AsyncContextManager: def __init__(self): self.conn = None async def do_something(self): # 异步操作数据库 return 666 async def __aenter__(self): # 异步链接数据库 self.conn = await asyncio.sleep(1) return self async def __aexit__(self, exc_type, exc, tb): # 异步关闭数据库链接 await asyncio.sleep(1) async def func(): async with AsyncContextManager() as f: result = await f.do_something() print(result) asyncio.run(func()) 这个异步的上下文管理器还是比较有用的，平时在开发过程中 打开、处理、关闭 操作时，就可以用这种方式来处理。\n3.3 小结 在程序中只要看到async和await关键字，其内部就是基于协程实现的异步编程，这种异步编程是通过一个线程在IO等待时间去执行其他任务，从而实现并发。\n以上就是异步编程的常见操作，内容参考官方文档。\n中文版：https://docs.python.org/zh-cn/3.8/library/asyncio.html 英文本：https://docs.python.org/3.8/library/asyncio.html 4. uvloop Python标准库中提供了asyncio模块，用于支持基于协程的异步编程。\nuvloop是 asyncio 中的事件循环的替代方案，替换后可以使得asyncio性能提高。事实上，uvloop要比nodejs、gevent等其他python异步框架至少要快2倍，性能可以比肩Go语言。\n安装uvloop\n1 pip3 install uvloop 在项目中想要使用uvloop替换asyncio的事件循环也非常简单，只要在代码中这么做就行。\n1 2 3 4 5 6 7 8 import asyncio import uvloop asyncio.set_event_loop_policy(uvloop.EventLoopPolicy()) # 编写asyncio的代码，与之前写的代码一致。 # 内部的事件循环自动化会变为 uvloopasyncio.run(...) 注意：知名的asgi uvicorn内部就是使用的uvloop的事件循环。\n5.实战案例 为了更好理解，上述所有示例的IO情况都是以 asyncio.sleep 为例，而真实的项目开发中会用到很多IO的情况。\n5.1 异步Redis 当通过python去操作redis时，链接、设置值、获取值 这些都涉及网络IO请求，使用asycio异步的方式可以在IO等待时去做一些其他任务，从而提升性能。\n安装Python异步操作redis模块\n1 pip3 install aioredis 示例1：异步操作redis。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # -*- coding:utf-8 -*- import asyncio import aioredis async def execute(address, password): print(\u0026#34;开始执行\u0026#34;, address) # 网络IO操作：创建redis连接 redis = await aioredis.create_redis(address, password=password) # 网络IO操作：在redis中设置哈希值car，内部在设三个键值对，即： redis = { car:{key1:1,key2:2,key3:3}} await redis.hmset_dict(\u0026#39;car\u0026#39;, key1=1, key2=2, key3=3) # 网络IO操作：去redis中获取值 result = await redis.hgetall(\u0026#39;car\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) print(result) redis.close() # 网络IO操作：关闭redis连接 await redis.wait_closed() print(\u0026#34;结束\u0026#34;, address) asyncio.run(execute(\u0026#39;redis://47.93.4.198:6379\u0026#39;, \u0026#34;root!2345\u0026#34;)) 示例2：连接多个redis做操作（遇到IO会切换其他任务，提供了性能）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import asyncio import aioredis async def execute(address, password): print(\u0026#34;开始执行\u0026#34;, address) # 网络IO操作：先去连接 47.93.4.197:6379，遇到IO则自动切换任务，去连接47.93.4.198:6379 redis = await aioredis.create_redis_pool(address, password=password) # 网络IO操作：遇到IO会自动切换任务 await redis.hmset_dict(\u0026#39;car\u0026#39;, key1=1, key2=2, key3=3) # 网络IO操作：遇到IO会自动切换任务 result = await redis.hgetall(\u0026#39;car\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) print(result) redis.close() # 网络IO操作：遇到IO会自动切换任务 await redis.wait_closed() print(\u0026#34;结束\u0026#34;, address) task_list = [execute(\u0026#39;redis://47.93.4.197:6379\u0026#39;, \u0026#34;root!2345\u0026#34;),execute(\u0026#39;redis://47.93.4.198:6379\u0026#39;, \u0026#34;root!2345\u0026#34;)] asyncio.run(asyncio.wait(task_list)) 更多redis操作参考aioredis官网：https://aioredis.readthedocs.io/en/v1.3.0/start.html\n5.2 异步MySQL 当通过python去操作MySQL时，连接、执行SQL、关闭都涉及网络IO请求，使用asycio异步的方式可以在IO等待时去做一些其他任务，从而提升性能。\n安装Python异步操作redis模块\n1 pip3 install aiomysql 示例1：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import asyncio import aiomysql async def execute(): # 网络IO操作：连接MySQL conn = await aiomysql.connect(host=\u0026#39;127.0.0.1\u0026#39;, port=3306, user=\u0026#39;root\u0026#39;, password=\u0026#39;123\u0026#39;, db=\u0026#39;mysql\u0026#39;, ) # 网络IO操作：创建CURSOR cur = await conn.cursor() # 网络IO操作：执行SQL await cur.execute(\u0026#34;SELECT Host,User FROM user\u0026#34;) # 网络IO操作：获取SQL结果 result = await cur.fetchall() print(result) # 网络IO操作：关闭链接 await cur.close() conn.close() asyncio.run(execute()) 示例2：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # -*- coding:utf-8 -*- import asyncio import aiomysql async def execute(host, password): print(\u0026#34;开始\u0026#34;, host) # 网络IO操作：先去连接 47.93.40.197，遇到IO则自动切换任务，去连接47.93.40.198:6379 conn = await aiomysql.connect(host=host, port=3306, user=\u0026#39;root\u0026#39;, password=password, db=\u0026#39;mysql\u0026#39;) # 网络IO操作：遇到IO会自动切换任务 cur = await conn.cursor() # 网络IO操作：遇到IO会自动切换任务 await cur.execute(\u0026#34;SELECT Host,User FROM user\u0026#34;) # 网络IO操作：遇到IO会自动切换任务 result = await cur.fetchall() print(result) # 网络IO操作：遇到IO会自动切换任务 await cur.close() conn.close() print(\u0026#34;结束\u0026#34;, host) task_list = [execute(\u0026#39;47.93.40.197\u0026#39;, \u0026#34;root!2345\u0026#34;),execute(\u0026#39;47.93.40.197\u0026#39;, \u0026#34;root!2345\u0026#34;)] asyncio.run(asyncio.wait(task_list)) 5.3 FastAPI框架 FastAPI是一款用于构建API的高性能web框架，框架基于Python3.6+的 type hints搭建。\n接下里的异步示例以FastAPI和uvicorn来讲解（uvicorn是一个支持异步的asgi）。\n安装FastAPI web 框架，\n1 pip3 install fastapi 安装uvicorn，本质上为web提供socket server的支持的asgi（一般支持异步称asgi、不支持异步称wsgi）\n1 pip3 install uvicorn 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env python # -*- coding:utf-8 -*- import asyncio import uvicorn import aioredis from aioredis import Redis from fastapi import FastAPI app = FastAPI() REDIS_POOL = aioredis.ConnectionsPool(\u0026#39;redis://47.193.14.198:6379\u0026#39;, password=\u0026#34;root123\u0026#34;, minsize=1, maxsize=10) @app.get(\u0026#34;/\u0026#34;) def index(): \u0026#34;\u0026#34;\u0026#34; 普通操作接口 \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;message\u0026#34;: \u0026#34;Hello World\u0026#34;} @app.get(\u0026#34;/red\u0026#34;) async def red(): \u0026#34;\u0026#34;\u0026#34; 异步操作接口 \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;请求来了\u0026#34;) await asyncio.sleep(3) # 连接池获取一个连接 conn = await REDIS_POOL.acquire() redis = Redis(conn) # 设置值 await redis.hmset_dict(\u0026#39;car\u0026#39;, key1=1, key2=2, key3=3) # 读取值 result = await redis.hgetall(\u0026#39;car\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) print(result) # 连接归还连接池 REDIS_POOL.release(conn) return result if __name__ == \u0026#39;__main__\u0026#39;: uvicorn.run(\u0026#34;luffy:app\u0026#34;, host=\u0026#34;127.0.0.1\u0026#34;, port=5000, log_level=\u0026#34;info\u0026#34;) 在有多个用户并发请求的情况下，异步方式来编写的接口可以在IO等待过程中去处理其他的请求，提供性能。\n例如：同时有两个用户并发来向接口 http://127.0.0.1:5000/red 发送请求，服务端只有一个线程，同一时刻只有一个请求被处理。 异步处理可以提供并发是因为：当视图函数在处理第一个请求时，第二个请求此时是等待被处理的状态，当第一个请求遇到IO等待时，会自动切换去接收并处理第二个请求，当遇到IO时自动化切换至其他请求，一旦有请求IO执行完毕，则会再次回到指定请求向下继续执行其功能代码。\n基于上下文管理，来实现自动化管理的案例： 示例1：redis\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/env python # -*- coding:utf-8 -*- import asyncio import uvicorn import aioredis from aioredis import Redis from fastapi import FastAPI app = FastAPI() REDIS_POOL = aioredis.ConnectionsPool(\u0026#39;redis://47.193.14.198:6379\u0026#39;, password=\u0026#34;root123\u0026#34;, minsize=1, maxsize=10) @app.get(\u0026#34;/\u0026#34;) def index(): \u0026#34;\u0026#34;\u0026#34; 普通操作接口 \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;message\u0026#34;: \u0026#34;Hello World\u0026#34;} @app.get(\u0026#34;/red\u0026#34;) async def red(): \u0026#34;\u0026#34;\u0026#34; 异步操作接口 \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;请求来了\u0026#34;) async with REDIS_POOL.get() as conn: redis = Redis(conn) # 设置值 await redis.hmset_dict(\u0026#39;car\u0026#39;, key1=1, key2=2, key3=3) # 读取值 result = await redis.hgetall(\u0026#39;car\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) print(result) return result if __name__ == \u0026#39;__main__\u0026#39;: uvicorn.run(\u0026#34;fast3:app\u0026#34;, host=\u0026#34;127.0.0.1\u0026#34;, port=5000, log_level=\u0026#34;info\u0026#34;) 示例2：mysql\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python # -*- coding:utf-8 -*- import asyncio import uvicorn from fastapi import FastAPI import aiomysql app = FastAPI() # 创建数据库连接池 pool = aiomysql.Pool(host=\u0026#39;127.0.0.1\u0026#39;, port=3306, user=\u0026#39;root\u0026#39;, password=\u0026#39;123\u0026#39;, db=\u0026#39;mysql\u0026#39;, minsize=1, maxsize=10, echo=False, pool_recycle=-1, loop=asyncio.get_event_loop()) @app.get(\u0026#34;/red\u0026#34;) async def red(): \u0026#34;\u0026#34;\u0026#34; 异步操作接口 \u0026#34;\u0026#34;\u0026#34; # 去数据库连接池申请链接 async with pool.acquire() as conn: async with conn.cursor() as cur: # 网络IO操作：执行SQL await cur.execute(\u0026#34;SELECT Host,User FROM user\u0026#34;) # 网络IO操作：获取SQL结果 result = await cur.fetchall() print(result) # 网络IO操作：关闭链接 return {\u0026#34;result\u0026#34;: \u0026#34;ok\u0026#34;} if __name__ == \u0026#39;__main__\u0026#39;: uvicorn.run(\u0026#34;fast2:app\u0026#34;, host=\u0026#34;127.0.0.1\u0026#34;, port=5000, log_level=\u0026#34;info\u0026#34;) 5.4 爬虫 在编写爬虫应用时，需要通过网络IO去请求目标数据，这种情况适合使用异步编程来提升性能，接下来我们使用支持异步编程的aiohttp模块来实现。\n安装aiohttp模块\n1 pip3 install aiohttp 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import aiohttp import asyncio async def fetch(session, url): print(\u0026#34;发送请求：\u0026#34;, url) async with session.get(url, verify_ssl=False) as response: text = await response.text() print(\u0026#34;得到结果：\u0026#34;, url, len(text)) async def main(): async with aiohttp.ClientSession() as session: url_list = [\u0026#39;https://python.org\u0026#39;,\u0026#39;https://www.baidu.com\u0026#39;,\u0026#39;https://www.pythonav.com\u0026#39;] tasks = [asyncio.create_task(fetch(session, url)) for url in url_list] await asyncio.wait(tasks) if __name__ == \u0026#39;__main__\u0026#39;: asyncio.run(main()) 总结 为了提升性能越来越多的框架都在向异步编程靠拢，例如：sanic、tornado、django3.0、django channels组件 等，用更少资源可以做处理更多的事，何乐而不为呢。\n","permalink":"https://luenci.com/en/posts/python%E4%B9%8Basyncio%E5%8D%8F%E7%A8%8B/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文转载自:https://pythonav.com/wiki/detail/6/91/\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"1协程\"\u003e1.协程\u003c/h2\u003e\n\u003cp\u003e协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc1\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc2\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efunc1()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efunc2()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：\u003ccode\u003e1、2、3、4\u003c/code\u003e。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：\u003ccode\u003e1、3、2、4\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e在Python中有多种方式可以实现协程，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egreenlet\u003c/code\u003e，是一个第三方模块，用于实现协程代码（Gevent协程就是基于greenlet实现）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyield\u003c/code\u003e，生成器，借助生成器的特点也可以实现协程代码。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easyncio\u003c/code\u003e，在Python3.4中引入的模块用于编写协程代码。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easync \u0026amp; awiat\u003c/code\u003e，在Python3.5中引入的两个关键字，结合asyncio模块可以更方便的编写协程代码。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"11-greenlet\"\u003e1.1 greenlet\u003c/h3\u003e\n\u003cp\u003egreentlet是一个第三方模块，需要提前安装 \u003ccode\u003epip3 install greenlet\u003c/code\u003e才能使用。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003egreenlet\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e greenlet\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc1\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e)        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第1步：输出 1    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tgr2\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eswitch()    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第3步：切换到 func2 函数    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第6步：输出 2    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tgr2\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eswitch()    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc2\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e)        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第4步：输出 3    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tgr1\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eswitch()    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e)        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第8步：输出 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egr1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e greenlet(func1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egr2 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e greenlet(func2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egr1\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eswitch() \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 第1步：去执行 func1 函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：switch中也可以传递参数用于在切换执行时相互传递值。\u003c/p\u003e\n\u003ch3 id=\"12-yield\"\u003e1.2 yield\u003c/h3\u003e\n\u003cp\u003e基于Python的生成器的yield和yield form关键字实现协程代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc1\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield from\u003c/span\u003e func2()    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc2\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ef1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e func1()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e item \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e f1:    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(item)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：yield form关键字是在Python3.3中引入的。\u003c/p\u003e\n\u003ch3 id=\"13-asyncio\"\u003e1.3 asyncio\u003c/h3\u003e\n\u003cp\u003e在Python3.4之前官方未提供协程的类库，一般大家都是使用greenlet等其他来实现。在\u003ccode\u003ePython3.4\u003c/code\u003e发布后官方正式支持协程，即：asyncio模块。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003easyncio\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@asyncio.coroutine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc1\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield from\u003c/span\u003e asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)  \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 遇到IO耗时操作，自动化切换到tasks中的其他任务    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@asyncio.coroutine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc2\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eyield from\u003c/span\u003e asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e) \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 遇到IO耗时操作，自动化切换到tasks中的其他任务    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etasks \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eensure_future( func1() ),    asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eensure_future( func2() )]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloop \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget_event_loop()loop\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003erun_until_complete(asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ewait(tasks))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：基于asyncio模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能。\u003c/p\u003e\n\u003ch3 id=\"14-async--awit\"\u003e1.4 async \u0026amp; awit\u003c/h3\u003e\n\u003cp\u003easync \u0026amp; awit 关键字在Python3.5版本中正式引入，基于他编写的协程代码其实就是 上一示例 的加强版，让代码可以更加简便。\u003c/p\u003e\n\u003cp\u003ePython3.8之后 \u003ccode\u003e@asyncio.coroutine\u003c/code\u003e 装饰器就会被移除，推荐使用async \u0026amp; awit 关键字实现协程代码。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003easyncio\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc1\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eawait\u003c/span\u003e asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc2\u003c/span\u003e():    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#ff7b72\"\u003eawait\u003c/span\u003e asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tprint(\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etasks \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [ asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eensure_future(func1()),    asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eensure_future(func2())]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloop \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget_event_loop()loop\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003erun_until_complete(asyncio\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ewait(tasks))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"15-小结\"\u003e1.5 小结\u003c/h3\u003e\n\u003cp\u003e关于协程有多种实现方式，目前主流使用是Python官方推荐的asyncio模块和async\u0026amp;await关键字的方式，例如：在tonado、sanic、fastapi、django3 中均已支持。\u003c/p\u003e\n\u003cp\u003e接下来，我们也会针对 \u003ccode\u003easyncio模块\u003c/code\u003e + \u003ccode\u003easync \u0026amp; await\u003c/code\u003e 关键字进行更加详细的讲解。\u003c/p\u003e","title":"Python的asyncio(协程)"},{"content":"函数的传参 函数参数传递机制问题在本质上是调用函数（过程）和被调用函数（过程）在调用发生时进行通信的方法问题。基本的参数传递机制有两种：值传递和引用传递。\n值传递（pass-by-value）过程中，被调函数的形式参数作为被调函数的局部变量处理，即在堆栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。 引用传递(pass-by-reference)过程中，被调函数的形式参数虽然也作为局部变量在堆栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过堆栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 In [1]: from ctypes import * In [2]: import os.path In [3]: import sys \\# 传入不可变类型 In [4]: def test(x): ...: print(\u0026#34;test before\u0026#34;) ...: print(id(c)) ...: c+=2 ...: print(\u0026#34;test add\u0026#34;) ...: print(id(c)) ...: return c In [5]: a = 2 In [6]: id(2) Out[6]: 11496672 In [7]: n = test(a) test before 11496672 test add 11496736 \\# 传入可变类型 In [17]: def test2(x): ...: print(\u0026#34;test before\u0026#34;) ...: print(id(x)) ...: x[0] = 45 ...: print(\u0026#34;test after\u0026#34;) ...: print(id(x)) ...: return x ...: In [18]: e = [0,1,2,3] In [19]: id(e) Out[19]: 140323019352896 In [20]: g = test2(e) test before 140323019352896 test after 140323019352896 结论：python不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。\n如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。 如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值\u0026rsquo;来传递对象。 函数的返回值 与函数传参一样，返回的也是“对象引用”，如果返回的对象是可变对象，则将函数的返回值赋值给新变量之后，对新变量的修改会直接影响到源对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # 传入可变类型 In [4]: dic = {\u0026#34;luenci\u0026#34;:\u0026#39;a\u0026#39;} In [9]: def return_test(x): ...: print(id(x)) ...: return x ...: In [10]: new = return_test(dic) 140153653660544 In [11]: id(new) Out[11]: 140153653660544 In [12]: id(dic) Out[12]: 140153653660544 In [13]: new[\u0026#34;luenci\u0026#34;]=\u0026#39;b\u0026#39; In [14]: dic Out[14]: {\u0026#39;luenci\u0026#39;: \u0026#39;b\u0026#39;} \\# 传入不可变类型 In [15]: a = \u0026#39;luenci\u0026#39; In [18]: def return_test2(x): ...: print(id(x)) ...: return x ...: In [19]: b = return_test2(a) 140153665839728 In [20]: id(a) Out[20]: 140153665839728 In [21]: id(b) Out[21]: 140153665839728 ","permalink":"https://luenci.com/en/posts/python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E6%8E%A2%E7%A9%B6/","summary":"\u003ch2 id=\"函数的传参\"\u003e函数的传参\u003c/h2\u003e\n\u003cp\u003e　函数参数传递机制问题在本质上是调用函数（过程）和被调用函数（过程）在调用发生时进行通信的方法问题。基本的参数传递机制有两种：\u003ccode\u003e值传递\u003c/code\u003e和\u003ccode\u003e引用传递\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e值传递（pass-by-value）\u003c/code\u003e过程中，被调函数的形式参数作为被调函数的局部变量处理，即在堆栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e引用传递(pass-by-reference)\u003c/code\u003e过程中，被调函数的形式参数虽然也作为局部变量在堆栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过堆栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e70\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e71\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003ectypes\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eos.path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003esys\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\\\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 传入不可变类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e4\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etest\u003c/span\u003e(x):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test before\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(id(c))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   c\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test add\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(id(c))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e c\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e]: a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e]: id(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e6\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e11496672\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e7\u003c/span\u003e]: n \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e test(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest before\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e11496672\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest add\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e11496736\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\\\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 传入可变类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e17\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etest2\u003c/span\u003e(x):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test before\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(id(x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   x[\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e45\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test after\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   print(id(x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:   \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e x\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e]: e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e19\u003c/span\u003e]: id(e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e19\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e140323019352896\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e]: g \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e test2(e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest before\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e140323019352896\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest after\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a5d6ff\"\u003e140323019352896\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e结论：\u003cstrong\u003epython不允许程序员选择采用传值还是传引用\u003c/strong\u003e。Python参数传递采用的肯定是\u003ccode\u003e“传对象引用”\u003c/code\u003e的方式。\u003cstrong\u003e这种方式相当于传值和传引用的一种综合\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。\u003c/li\u003e\n\u003cli\u003e如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值\u0026rsquo;来传递对象。\u003c/li\u003e\n\u003c/ul\u003e","title":"python的值传递和引用传递"},{"content":"可迭代对象 可遍历对象就是可迭代对象 列表、元组、字典、字符串都是可迭代对象 100和自定义myclass 默认都是不可以迷代的 myclass 对象所属的类MyClass如果包含了__iter__（）方法，此时 myclass就是一个可送代对象 可送代对象的本质：对象所属的类中包含了__iter__（）方法 检测一个对象是否可以送代，用isinstance（）函数检测。 迭代器 我们发现选代器最核心的功能就是可以通过next0函数的调用来返回下一个数据值。如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间。 举个例子，比如，数学中有个著名的斐波拉契数列（Fibonacci），数列中第一个数为0，第二个数为1，其后的每一个数都可由前两个数相加得到： 特点 记录遍历的位置\n提供下一个元素的值（配合next（）函数）\n迭代器生成斐波那契数列\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Fibanacci(object): def __init__(self, num): # 实例化生成列属性 self.num = num self.a = 1 self.b = 1 self.current_index = 0 def __iter__(self): # 返回自己 return self def __next__(self): if self.current_index \u0026lt; self.num: # 生成斐波那契数列 # 定义变量保存a的值 data = self.a self.a, self.b = self.b, self.a + self.b self.current_index += 1 return data else: raise SweightIteration if __name__ == \u0026#39;__main__\u0026#39;: fib = Fibanacci(8) value = next(fib) for i in fib: print(i) out: 1 2 3 5 8 13 21 生成器 生成器是一类特殊的迭代器。 利用选代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。为了达到记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即生成器（generator)。 创建生成器方法1要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成（） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 列表推导式 data_list = [x*2 for x in range(5)] for i in data_list: print(i) # 生成器的创建 data_list1 = (x*2 for x in range(5)) # 通过next()获取下一个值 value = next(data_list1) print(\u0026#34;--------\u0026gt;\u0026#34;, value) for j in data_list1: print(j) out: 0 2 4 6 8 --------\u0026gt; 0 2 4 6 8 函数中使用yield关键字生成生成器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def test(): return 10 def test2(): yield 10 if __name__ == \u0026#39;__main__\u0026#39;: m = test() print(\u0026#34;m:\u0026#34;, m) n = test2() print(\u0026#34;n\u0026#34;, n) value = next(n) print(value) out： m: 10 n \u0026lt;generator object test2 at 0x000002A2C4C6D0F8\u0026gt; 10 生成器生成斐波那契数列 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def fibnacci(n): # 初始化a, b的值 a = 1 b = 1 # 纪录迭代位置 current_index = 0 print(\u0026#34;-----1------\u0026#34;) while current_index \u0026lt; n: # 保存a的值 data = a a, b = b, a+b current_index += 1 print(\u0026#34;-----2------\u0026#34;) yield data print(\u0026#34;-----3------\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: fib = fibnacci(6) print(next(fib)) print(next(fib)) print(next(fib)) out: -----1------ -----2------ 1 -----3------ -----2------ 1 -----3------ -----2------ 2 yield作用 充当return作用 保存程序的运行状态并且暂停程序执行 当next的时候，可以继续唤醒程序从yield位置继续向下执行 生成器中使用return问题 生成器客户以使用return关键字，语法上没有问题，但是如果执行到return语句以后，生成器会停止迭代，抛出停止迭代的异常 send作用 生成器.send(传递给生成器的值)\n传递\n1 a = fib.send(1) 接收\n1 xxx = yield data 协程 协程，又称微线程，纤程。英文名Coroutine。从技术的角度来说，“协程就是你可以暂停执行的函数”。如果你把它理解成“就像生成器一样”，那么你就想对了。 线程和进程的操作是由程序触发系统接口，最后的执行者是系统；协程的操作则是程序员。 协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时（保存状态，下次继续）。协程，则只使用一个线程（单线程），在一个线程中规定某个代码块执行顺序。 协程应用场景 协程的适用场景：当程序中存在大量不需要CPU的操作时（IO），适用于协程；通俗的理解：在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定 协程和线程差异 不开辟新的线程的基础上，实现多个任务\n在实现多任务时，线程切换从系统层面远不止保存和恢复CPU上下文这么简单。操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # ------------------ 携程的原始实现 -------------------- import time def work1(): while True: print(\u0026#34;work1正在工作....\u0026#34;) yield time.sleep(0.5) def work2(): while True: print(\u0026#34;work2正在工作.............\u0026#34;) yield time.sleep(0.5) if __name__ == \u0026#39;__main__\u0026#39;: t1 =work1() t2 = work2() print(t1) while True: next(t1) next(t2) greenlet库 greenlet 可以实现协程 Greenlet是python的一个C扩展，来源于Stackless python，旨在提供可自行调度的“微线程’，即协程。 generator实现的协程在yield value时只能将value返回给调用者（caller）。而在greenlet中，target.switch（value）可以切换到指定的协程（target），然后yield value。greenlet用switch来表示协程的切换，从一个协程切换到另一个协程需要显式指定。 GNI GREENLE T为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import time from greenlet import greenlet # work1生成器 def work1(): while True: print(\u0026#34;work1正在工作....\u0026#34;) time.sleep(2) # 切换到第二个任务 g2.switch() # work1生成器 def work2(): while True: print(\u0026#34;work2正在工作.............\u0026#34;) time.sleep(2) # 切换到第一个任务 g1.switch() if __name__ == \u0026#39;__main__\u0026#39;: g1 = greenlet(work1) g2 = greenlet(work2) #执行work1 g1.switch() gevent 库 自动调度协程，自动识别程序中的耗时操作\ngreenlet已经实现了协程，但是这个还的人工切换\npython还有一个比greenlet更强大的并且能够自动切换任务的第三方库 gevent其原理是当一个greenlet遇到IO（指的是input/ output 输入输出，比如网络、文件操作等）操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。\n由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待\n使用步骤\n导入模块\nIimport gevent\n指派任务\ng1= gevent.spawn（函数名，参数1，参数2，…） join（）让主线程等待协程执行完毕后再退出\ng1.join() 打猴子补丁补丁 给程序打补丁（猴子补丁）关于猴子补丁为啥叫猴子补丁，据说是这样子的：\n这个叫法起源于Zope框架，大家在修正Zope的Bug的时候经常在程序后面追加更新部分，这些被称作是“杂牌军补丁（guerilla patch）”，后来guerilla就渐渐的写成了gorlia（塑猩），再后来就写了monkey（猴子）：所以猴子补丁的叫法是这么莫名其妙的得来的。\n猴子补丁主要有以下几个用处：\n1.在运行时替换方法、属性等 2.在不修改第三方代码的情况下增加原来不支持的功能 3.在运行时为内存中的对象增加patch而不是在盏盘的源代码中增加 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # 打补丁 from gevent import monkey # 破解所有 monkey.patch_all() import time import gevent def work1(): while True: print(\u0026#34;work1正在工作....\u0026#34;) time.sleep(0.5) def work2(): while True: print(\u0026#34;work2正在工作.............\u0026#34;) # gevent.sleep(0.5) time.sleep(0.5) if __name__ == \u0026#39;__main__\u0026#39;: # 指派任务 g1 = gevent.spawn(work1) g2 = gevent.spawn(work2) # 让主线程等待协程执行完毕再运行 g1.join() g2.join() 小福利 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 # 妹子图爬虫多协程版 # coding=utf-8 from gevent import monkey monkey.patch_all() import gevent import requests from bs4 import BeautifulSoup import os import re all_url = \u0026#39;http://www.mzitu.com\u0026#39; # http请求头 Hostreferer = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;http://www.mzitu.com\u0026#39; } Picreferer = { \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;http://i.meizitu.net\u0026#39; } # 此请求头破解盗链 start_html = requests.get(all_url, headers=Hostreferer) # 保存地址 path = \u0026#34;E:\\\\mzitu\\\\\u0026#34; # 找寻最大页数 soup = BeautifulSoup(start_html.text, \u0026#34;html.parser\u0026#34;) page = soup.find_all(\u0026#39;a\u0026#39;, class_=\u0026#39;page-numbers\u0026#39;) max_page = page[-2].text same_url = \u0026#39;http://www.mzitu.com/all/\u0026#39; def download_img(pic_url): html = requests.get(pic_url, headers=Picreferer) file_name = pic_url.split(r\u0026#39;/\u0026#39;)[-1].replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#34;\u0026#34;) print(file_name) f = open(file_name, \u0026#39;wb\u0026#39;) f.write(html.content) f.close() for n in range(1, int(max_page) + 1): ul = same_url + str(n) start_html = requests.get(ul, headers=Hostreferer) soup = BeautifulSoup(start_html.text, \u0026#34;html.parser\u0026#34;) all_a = soup.find(\u0026#39;div\u0026#39;, class_=\u0026#39;all\u0026#39;).find_all(\u0026#39;a\u0026#39;, target=\u0026#39;_blank\u0026#39;) for a in all_a: # 提取文本 title = a.get_text() if title != \u0026#39;\u0026#39;: print(\u0026#34;准备扒取：\u0026#34; + title) # win不能创建带？的目录 if os.path.exists(path + title.strip().replace(\u0026#39;?\u0026#39;, \u0026#39;\u0026#39;)): # print(\u0026#39;目录已存在\u0026#39;) flag = 1 else: os.makedirs(path + title.strip().replace(\u0026#39;?\u0026#39;, \u0026#39;\u0026#39;)) flag = 0 os.chdir(path + title.strip().replace(\u0026#39;?\u0026#39;, \u0026#39;\u0026#39;)) href = a[\u0026#39;href\u0026#39;] html = requests.get(href, headers=Hostreferer) mess = BeautifulSoup(html.text, \u0026#34;html.parser\u0026#34;) pic_max = mess.find_all(\u0026#39;span\u0026#39;) try: # 最大页数 pic_max = pic_max[9].text if flag == 1 and len(os.listdir(path + title.strip().replace(\u0026#39;?\u0026#39;, \u0026#39;\u0026#39;))) \u0026gt;= int(pic_max): print(\u0026#39;已经保存完毕，跳过\u0026#39;) continue except Exception: pass pic_url = [] for num in range(1, int(pic_max) + 1): pic = href + \u0026#39;/\u0026#39; + str(num) html = requests.get(pic, headers=Hostreferer) mess = BeautifulSoup(html.text, \u0026#34;html.parser\u0026#34;) pic_url.append(mess.find(\u0026#39;img\u0026#39;, alt=title)) # print(\u0026#34;图片路径：\u0026#34;, pic_url[\u0026#39;src\u0026#39;]) pic_url = re.findall(r\u0026#34;[a-zA-z]+://[^\\s]*\u0026#34;, str(pic_url)) print(pic_url) # 将列表编程迭代器 a = pic_url.__iter__() # 开启多个协程 Coroutine = [] for i in range(len(pic_url)): Coroutine.append(gevent.spawn(download_img(next(a)))) gevent.joinall(Coroutine) print(\u0026#39;完成\u0026#39;) print(\u0026#39;第\u0026#39;, n, \u0026#39;页完成\u0026#39;) ","permalink":"https://luenci.com/en/posts/%E5%8D%8F%E7%A8%8B/","summary":"\u003ch1 id=\"可迭代对象\"\u003e可迭代对象\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e可遍历对象就是可迭代对象\u003c/li\u003e\n\u003cli\u003e列表、元组、字典、字符串都是可迭代对象\u003c/li\u003e\n\u003cli\u003e100和自定义\u003ccode\u003emyclass\u003c/code\u003e 默认都是不可以迷代的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emyclass \u003c/code\u003e对象所属的类\u003ccode\u003eMyClass\u003c/code\u003e如果包含了\u003ccode\u003e__iter__（）\u003c/code\u003e方法，此时\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emyclass\u003c/code\u003e就是一个可送代对象\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e可送代对象的本质：对象所属的类中包含了\u003ccode\u003e__iter__（）\u003c/code\u003e方法\u003c/li\u003e\n\u003cli\u003e检测一个对象是否可以送代，用\u003ccode\u003eisinstance（）\u003c/code\u003e函数检测。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"迭代器\"\u003e迭代器\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e我们发现选代器最核心的功能就是可以通过next0函数的调用来返回下一个数据值。如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间。\u003c/li\u003e\n\u003cli\u003e举个例子，比如，数学中有个著名的斐波拉契数列（Fibonacci），数列中第一个数为0，第二个数为1，其后的每一个数都可由前两个数相加得到：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"特点\"\u003e特点\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e记录遍历的位置\u003c/p\u003e","title":"python的协程"},{"content":"import导入模块路径问题 存在的问题：当我们把模块文件放到工程文件夹的外部的文件，发现无法正常引入模块\n原因：外部的文件夹的路径，没有放到环境变量中。\n查看环境变量\n1.导入sys模块 2.sys.path 查看环境变量返回值是列表 把自己写的模块的路径加入到环境变量中\n1 2 3 4 # 将模块路径追加到末尾 sys.path.append(r\u0026#34;模块的路径\u0026#34;) # 将模块路径追加到开头 sys.path.insert(0,r\u0026#34;模块的路径\u0026#34;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # import module # # module -- 模块名 # # name 模块 modele 中的变量 # print(module.name) import sys # 查看python解释器搜索的环境变量 # 将模块路径追加到末尾 # sys.path.append(r\u0026#34;C:\\Users\\Luenci\\Deskweight\u0026#34;) # 将模块路径追加到开头有 sys.path.insert(0, r\u0026#34;C:\\Users\\Luenci\\Deskweight\u0026#34;) for i in sys.path: print(i) import app print(app.name) import导入模块 import会防止重复导入 在同一个程序中多次import同一个模块，只会执行一次 重新导入模块 为什么需要重新导入模块?\n模块被导入后，import module不能重新导入模块，重新导入需用reload重新加载模块代码创建模块对象\n准备一个模块 reload_test 并定义一个函数 test 代码如下：\n1 2 def demo(): print(\u0026#34;---------- 111 -----------\u0026#34;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 在 ipython 的交互模式下 In [5]: import reload_test In [6]: reload_test.demo() ---------- 111 ----------- In [7]: reload_test.demo() ---------- 111 ----------- # 重新加载之后，改变的内容就可以显示 In [14]: from imp import reload In [15]: reload(reload_test) Out[15]: \u0026lt;module \u0026#39;reload_test\u0026#39; from \u0026#39;D:\\\\pythonStudy\\\\import笔记\\\\reload_test.py\u0026#39;\u0026gt; In [16]: reload_test.demo() ---------- 222 ----------- from XX import XX的私有化问题 1 2 3 4 5 6 7 8 9 # modele.py内容 name = \u0026#34;Luenci\u0026#34; # 类中定义私有属性 # self._name = XXX # 私有化处理 # 如果模块中的变量不希望以 from .. import .. 导入 _age = 12 1 2 3 4 5 6 7 8 9 10 11 # import module # # print(module.name) # 私有化有效 from module import * # 私有化无效 from module import _age print(_age) import 和from..…import的区别 import XXX 此种方式是直接引用 from XXX import xxx 此种方式是把XXX的内容复制一份到程序中，若修改不应用到原来的模块 可变参数的拆包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def func1(*args, **kwargs): print(\u0026#34;---- func1 ----\u0026#34;) print(\u0026#34;args:\u0026#34;, args) print(\u0026#34;kwargs:\u0026#34;, kwargs) def func2(*args, **kwargs): print(\u0026#34;args:\u0026#34;, args) print(\u0026#34;kwargs:\u0026#34;, kwargs) # 调用func1 # 此处没有进行拆包，导致参数传递不过去不符合要求 # func1(args, kwargs) # 此处进行了拆包，阐述传递正确 func1(*args, **kwargs) if __name__ == \u0026#39;__main__\u0026#39;: func2(10, 20, 30, a=10, b=20) out: args: (10, 20, 30) kwargs: {\u0026#39;a\u0026#39;: 10, \u0026#39;b\u0026#39;: 20} ---- func1 ---- args: (10, 20, 30) kwargs: {\u0026#39;a\u0026#39;: 10, \u0026#39;b\u0026#39;: 20} 新式类的属性和一些概念 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class People(object): \u0026#34;\u0026#34;\u0026#34; 我是一个新式类 \u0026#34;\u0026#34;\u0026#34; def __init__(self,name,sex,eat): self.name = name self.sex = sex self.eat = eat self.__date = [] def __test(self): print(\u0026#34;我是个私有方法\u0026#34;) def sleep(self): print(\u0026#34;%s正在睡觉\u0026#34;%self.name) p1 = People(\u0026#39;luenci\u0026#39;,\u0026#39;man\u0026#39;,\u0026#39;rice\u0026#39;) print(People.__doc__) print(People.__bases__) print(People.__mro__) # 打印类的数据属性字典 print(People.__dict__) # {\u0026#39;__module__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: \u0026#39;\\n 我是一个新式类\\n \u0026#39;, # \u0026#39;__init__\u0026#39;: \u0026lt;function People.__init__ at 0x0000017408AC1D90\u0026gt;, # \u0026#39;_People__test\u0026#39;: \u0026lt;function People.__test at 0x0000017408AC1A60\u0026gt;, # \u0026#39;sleep\u0026#39;: \u0026lt;function People.sleep at 0x0000017408AC1E18\u0026gt;, # \u0026#39;__dict__\u0026#39;: \u0026lt;attribute \u0026#39;__dict__\u0026#39; of \u0026#39;People\u0026#39; objects\u0026gt;, # \u0026#39;__weakref__\u0026#39;: \u0026lt;attribute \u0026#39;__weakref__\u0026#39; of \u0026#39;People\u0026#39; objects\u0026gt;} # 打印对象的数据属性字典 print(p1.__dict__) # {\u0026#39;name\u0026#39;: \u0026#39;luenci\u0026#39;, \u0026#39;sex\u0026#39;: \u0026#39;man\u0026#39;, \u0026#39;eat\u0026#39;: \u0026#39;rice\u0026#39;, \u0026#39;_People__date\u0026#39;: []} print(p1.__dir__()) \u0026#39;\u0026#39;\u0026#39;[\u0026#39;name\u0026#39;, \u0026#39;sex\u0026#39;, \u0026#39;eat\u0026#39;, \u0026#39;_People__date\u0026#39;, \u0026#39;__module__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;_People__test\u0026#39;, \u0026#39;__dict__\u0026#39;, \u0026#39;__weakref__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__class__\u0026#39;]\u0026#39;\u0026#39;\u0026#39; # 私有方法的访问 p1._People__test() # 私有变量的访问 print(p1._People__date) p1.sleep() 类属性的增加和修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Dog(object): \u0026#34;\u0026#34;\u0026#34; 我是一个Dog类 \u0026#34;\u0026#34;\u0026#34; master = \u0026#34;luenci\u0026#34; def __init__(self,name): self.name = name def action(self): print(\u0026#34;汪汪汪.\u0026#34;) dog = Dog(\u0026#39;小白\u0026#39;) # 增加类的属性 Dog.sex = \u0026#39;公\u0026#39; # 实例可以访问到 print(dog.sex) # 增加类方法 def run(self,name): print(\u0026#34;%s在奔跑\u0026#34;%self.name) Dog.run = run # 实例中可以访问 dog.run(\u0026#39;小白\u0026#39;) # 增加私有属性 Dog.__age = 2 print(Dog.__dict__) print(Dog.__age) out 公 小白在奔跑 {\u0026#39;__module__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: \u0026#39;\\n 我是一个Dog类\\n \u0026#39;, \u0026#39;master\u0026#39;: \u0026#39;luenci\u0026#39;, \u0026#39;__init__\u0026#39;: \u0026lt;function Dog.__init__ at 0x000001E16328D048\u0026gt;, \u0026#39;action\u0026#39;: \u0026lt;function Dog.action at 0x000001E16328D0D0\u0026gt;, \u0026#39;__dict__\u0026#39;: \u0026lt;attribute \u0026#39;__dict__\u0026#39; of \u0026#39;Dog\u0026#39; objects\u0026gt;, \u0026#39;__weakref__\u0026#39;: \u0026lt;attribute \u0026#39;__weakref__\u0026#39; of \u0026#39;Dog\u0026#39; objects\u0026gt;, \u0026#39;sex\u0026#39;: \u0026#39;公\u0026#39;, \u0026#39;run\u0026#39;: \u0026lt;function run at 0x000001E163271F28\u0026gt;, \u0026#39;__age\u0026#39;: 2} 2 单继承的super super（）使用的时候，传递参数的时候，self不用传递 super（）调用顺序，按照__mro__顺序来完成Grandson.mro是一个元组当在类中使用super在__mro__列表中找到当前类的下一个元素，调用该元素的方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Parent(object): def __init__(self, name): self.name = name print(\u0026#39;parent的init结束被调用\u0026#39;) class Son1(Parent): def __init__(self, name, age): self.age = age super().__init__(name) print(\u0026#39;Son1的init结束被调用\u0026#39;) class Grandson(Son1): def __init__(self, name, age, gender): self.gender = \u0026#34;男\u0026#34; # 单继承不能提供全部参数 super().__init__(name, age) print(\u0026#39;Grandson的init结束被调用\u0026#39;) gs=Grandson(\u0026#39;grandson\u0026#39;, 12, \u0026#34;男\u0026#34;) print(Grandson.__mro__) print(\u0026#39;姓名:\u0026#39;, gs.name) print(\u0026#39;年龄:\u0026#39;, gs.age) print(\u0026#39;性别:\u0026#39;, gs.gender) out: parent的init结束被调用 Son1的init结束被调用 Grandson的init结束被调用 (\u0026lt;class \u0026#39;__main__.Grandson\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Son1\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Parent\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;object\u0026#39;\u0026gt;) 姓名: grandson 年龄: 12 性别: 男 多继承和MRO顺序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # 定义父类 class Parent(object): def __init__(self, name): self.name = name print(\u0026#39;parent的init结束被调用\u0026#39;) # 定义子类--》继承父类的 name属性 class Son1(Parent): def __init__(self, name, age): # 定义age属性 self.age = age Parent.__init__(self, name) print(\u0026#39;Son1的init结束被调用\u0026#39;) # 定义子类--》继承父类的 name属性 class Son2(Parent): def __init__(self, name, gender): # 定义 gender 属性 self.gender = gender Parent.__init__(self, name) print(\u0026#39;Son2的init结束被调用\u0026#39;) class Grandson(Son1, Son2): def __init__(self, name, age, gender): # 调用父类的初始化方法 Son1.__init__(self, name, age) Son2.__init__(self, name, gender) print(\u0026#39;Grandson的init结束被调用\u0026#39;) gs = Grandson(\u0026#39;grandson\u0026#39;, 12, \u0026#34;男\u0026#34;) print(Grandson.__mro__) print(\u0026#39;姓名:\u0026#39;, gs.name) print(\u0026#39;年龄:\u0026#39;, gs.age) print(\u0026#39;性别:\u0026#39;, gs.gender) out: parent的init结束被调用 Son1的init结束被调用 parent的init结束被调用 Son2的init结束被调用 Grandson的init结束被调用 (\u0026lt;class \u0026#39;__main__.Grandson\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Son1\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Son2\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Parent\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;object\u0026#39;\u0026gt;) 姓名: grandson 年龄: 12 性别: 男 使用super()调用父类 MRO顺序 通过上述代码，我们发现由于多继承情况，parent类被的属性被构造了两次，如果在更加复杂的结构下可能更加严重。为了解决这个问题，Python官方采用了一个算法将复杂结构上所有的类全部都映射到一个线性顺序上，而搜索的顺序就是所谓的「方法解析顺序」（Method Resolution Order，或MRO),根据这个顺序就能够保证所有的类都会被构造一次。\nMRO查看 类名.mro()\n类名.__mro__\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # 定义父类 class Parent(object): def __init__(self, name, *args, **kwargs): self.name = name print(\u0026#39;parent的init结束被调用\u0026#39;) # 定义子类--》继承父类的 name属性 class Son1(Parent): def __init__(self, name, age, *args, **kwargs): # 定义age属性 self.age = age super().__init__(name, *args, **kwargs) print(\u0026#39;Son1的init结束被调用\u0026#39;) # 定义子类--》继承父类的 name属性 class Son2(Parent): def __init__(self, name, gender, *args, **kwargs): # 定义 gender 属性 self.gender = gender super().__init__(name, *args, **kwargs) print(\u0026#39;Son2的init结束被调用\u0026#39;) class Grandson(Son1, Son2): def __init__(self, name, age, gender): # 调用父类的初始化方法 super().__init__(name, age, gender) # Son1.__init__(self, name, age) # Son2.__init__(self, name, gender) print(\u0026#39;Grandson的init结束被调用\u0026#39;) gs = Grandson(\u0026#39;grandson\u0026#39;, 12, \u0026#34;男\u0026#34;) print(Grandson.__mro__) out: parent的init结束被调用 Son2的init结束被调用 Son1的init结束被调用 Grandson的init结束被调用 (\u0026lt;class \u0026#39;__main__.Grandson\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Son1\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Son2\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.Parent\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;object\u0026#39;\u0026gt;) 注意 当在类中使用super（）在 mro列表中找到当前类的下一个元素，调用该元素的方法\n多继承中，不建议使用类名直接调用父类的方法\n类的@classmethod、@staticmethod装饰方法 @classmethod 用来修饰方法。使用在实例化前与类进行交互，但不和其实例进行交互的函数方法上。 @staticmethod 用来修饰类的静态方法。使用在有些与类相关函数，但不使用该类或该类的实例。如更改环境变量、修改其他类的属性等。 两者最明显的区别，classmethod 必须使用类的对象作为第一个参数，而staticmethod则可以不传递任何参数\n1、@classmethod 类方法\n类方法，我们不用通过实例化类就能访问的方法。而且@classmethod 装饰的方法不能使用实例属性，只能是类属性。它主要使用在和类进行交互，但不和其实例进行交互的函数方法上。\n下面，我们要写一个只在类中运行而不在实例中运行的方法。\n简单示例，读取私有化类属性数据，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Circle(object): __pi = 3.14 def __init__(self, r): self.r = r @classmethod def pi(cls): return cls.__pi def area(self): \u0026#34;\u0026#34;\u0026#34; 圆的面积 \u0026#34;\u0026#34;\u0026#34; return self.r ** 2 * self.__pi print(Circle.pi()) # 没有实例化 能直接访问pi() 方法 circle1 = Circle(2) print(circle1.pi()) # 也可以通过实例访问pi()方法 Circle类下的pi()方法被 @classmethod 装饰后，我们能通过Circle.pi() 直接运行方法，不用实例化类。\n示例：重构构造__init__() 方法应用, 格式化创建时间实例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Date(object): day = 0 month = 0 year = 0 def __init__(self, year=0, month=0, day=0): self.day = day self.month = month self.year = year @classmethod def from_string(cls, date_as_string): year, month, day = date_as_string.split(\u0026#39;-\u0026#39;) date = cls(year, month, day) return date date1 = Date.from_string(\u0026#39;2017-10-17\u0026#39;) # 直接使用固定格式的字符串就能创建Date的实例 print(date1.year, date1.month, date1.day) from_string 返回的是Date类的实例，所以我们可以通过from_string 实例化类。 注意：from_string(cls, date_as_string)中cls表示的是类，它和self类实例有一定的差别。类方法中都是使用cls，实例方法中使用self。\n2、@staticmethod 静态方法\n@staticmethod 和@classmethod非常的相似，但是@staticmethod 不强制要求传递参数（它做的事与类方法或实例方法一样）。\n@staticmethod使用在有些和类相关函数，但不使用该类或者该类的实例。如更改环境变量、修改其他类的属性等。\n一句话@staticmethod 修饰的方法是放在类外的函数，我们为了方便将他移动到了类里面，它对类的运行无影响。\n示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Date(object): day = 0 month = 0 year = 0 def __init__(self, year=0, month=0, day=0): self.day = day self.month = month self.year = year @classmethod def from_string(cls, date_as_string): year, month, day = date_as_string.split(\u0026#39;-\u0026#39;) date = cls(year, month, day) return date @staticmethod def is_date_valid(date_as_string): \u0026#34;\u0026#34;\u0026#34; 用来校验日期的格式是否正确 \u0026#34;\u0026#34;\u0026#34; year, month, day = date_as_string.split(\u0026#39;-\u0026#39;) return int(year) \u0026lt;= 3999 and int(month) \u0026lt;= 12 and int(day) \u0026lt;= 31 date1 = Date.from_string(\u0026#39;2012-05-10\u0026#39;) print(date1.year, date1.month, date1.day) is_date = Date.is_date_valid(\u0026#39;2012-09-18\u0026#39;) # 格式正确 返回True is_date_valid(date_as_string) 只有一个参数，它的运行不会影响类的属性，\n注意：@staticmethod修饰方法 is_date_valid(date_as_string)中无实例化参数self或者cls；而@classmethod修饰的方法中有from_string(cls, date_as_string) 类参数cls。\n@property装饰方法 定义时，在实例方法的基础上添加@property 装饰器；\n并且仅有一个self参数 调用时，无需括号\n方法：foo_obj.func() property属性：foo_obj.prop\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Foo(object): # 初始化方法 def __init__(self, num): self.num = num # 获取值得方法 @property def prop(self): return self.num foo = Foo(100) # print(foo.prop()) # @property 像使用属性一样获取值 print(foo.prop) out: 100 property的其它功能 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Goods(object): def __init__(self): # 初始化原价 self.org_price = 1000 # 初始化折扣 self.discount = 0.7 # 获取价格的方法 @property def price(self): return self.org_price * self.discount # 设置价格的方法 @price.setter def price(self, val): if val \u0026gt; 0: self.org_price = val # 删除价格的方法 @price.deleter def price(self): print(\u0026#34;执行了 deleter 方法\u0026#34;) # 创建对象 goods = Goods() print(goods.price) goods.price = 500 print(goods.price) del goods.price out: 700.0 350.0 执行了 deleter 方法 property的另一种使用方法 1 BAR = property（get_price, set_price, del_price, \u0026#34;BAR是一个property对象\u0026#34;） property（第一个参数，第二个参数，第三个参数，第四个参数） 第一个参数，当我们foo.BAR自动调用第一个参数的方法 第二个参教，当我们foo.BAR=100，自动调用第二个参数的方法 第三个参数，当我们del foo.BAR，自动调用第三个参数的方法 第四个参数，当我们Foo.BAR.doc，自动获取第四个参数的内容 property实现延迟计算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # -- coding=utf-8 -- \u0026#34;\u0026#34;\u0026#34; @author:luenci @time:2020/6/2 12:12 \u0026#34;\u0026#34;\u0026#34; class Delay(object): def __init__(self, func): self.func = func def __get__(self, instance, owner): print(\u0026#34;触发__get__方法\u0026#34;) res = self.func(instance) setattr(instance, self.func.__name__, res) return res class Room(object): def __init__(self, name, length, width): self.name = name self.length = length self.width = width @Delay def area(self): return self.length * self.width r1 = Room(502, 10, 10) print(r1.area) print(r1.area) print(r1.area) out: 触发__get__方法 100 100 100 类的魔法属性和方法 魔术属性 __doc__ 描述类的信息和类方法的信息 获取类名 类名.__doc__ 获取对象 对象.方法名.__doc__ __model__ 获取所属的模块（对象名.__module__）直接运行该文件 获取main __class__ 获取对象所属的类 对象名.__class__ __dict__ 获取对象或类的信息 通过__dict__获取对象信息，对象.__dict__ 返回字典 通过__dict__ 获取类信息 类名.__dict__ 返回值是一个字典 魔术方法 __init__初始化方法 类名（）自动调用 __del__删除对象的时候， 会调用__del__方法 __call__() 使用对象名()会调用该方法 __str__() 打印对象的会调用print(obj) __str__方法一定要return，而且必须return字符串内容 用字典的书写格式操作对象的方法 __getitem__ 对象[\u0026lsquo;XX\u0026rsquo;] __setitem__ 对象[\u0026lsquo;XX\u0026rsquo;] = xx __delitem__ del 对象[\u0026lsquo;xx\u0026rsquo;] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class Goods(object): \u0026#34;\u0026#34;\u0026#34;这是一个商品的类\u0026#34;\u0026#34;\u0026#34; # 类属性 sell = True def __init__(self): self.price = 100 self.category = \u0026#34;吃的\u0026#34; def set_price(self): \u0026#34;\u0026#34;\u0026#34;设置价格方法\u0026#34;\u0026#34;\u0026#34; pass def __call__(self, *args, **kwargs): print(\u0026#34;__call__ 方法被调用\u0026#34;) def __str__(self): return \u0026#34;我是一个对象\u0026#34; def __getitem__(self, item): print(\u0026#34;key:\u0026#34;, item) def __setitem__(self, key, value): print(\u0026#34;key:%s, value:%s\u0026#34; % (key, value)) def __delitem__(self, key): print(\u0026#34;要删除key：\u0026#34;, key) def __del__(self): print(\u0026#34;__del__ 正在执行\u0026#34;) goods = Goods() # 对象名（） 会去调用对象的 __call__() 方法 goods() # print 打印对象的时候，默认输出 \u0026lt;__main__.Goods object at 0x000002356857E080\u0026gt; print(goods) # 通过dict获取对象信息，对象.__dict__ 返回字典 print(goods.__dict__) # 通过dict 获取类信息 类名.__dict__返回值是一个字典 print(Goods.__dict__) # dict1={} # dictI[\u0026#39;a\u0026#39;]=10 # goods[\u0026#39;a\u0026#39;]调用 __getitem__ 方法 goods[\u0026#39;a\u0026#39;] # goods[\u0026#39;a\u0026#39;]=10用 __setitem__ key，value goods[\u0026#39;a\u0026#39;] = 10 # del goods[\u0026#39;a\u0026#39;] 调用 __delitem__ key del goods[\u0026#39;a\u0026#39;] out： {\u0026#39;price\u0026#39;: 100, \u0026#39;category\u0026#39;: \u0026#39;吃的\u0026#39;} {\u0026#39;__module__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: \u0026#39;这是一个商品的类\u0026#39;, \u0026#39;sell\u0026#39;: True, \u0026#39;__init__\u0026#39;: \u0026lt;function Goods.__init__ at 0x00000238CE0F5598\u0026gt;, \u0026#39;set_price\u0026#39;: \u0026lt;function Goods.set_price at 0x00000238CE0F5620\u0026gt;, \u0026#39;__call__\u0026#39;: \u0026lt;function Goods.__call__ at 0x00000238CE0F56A8\u0026gt;, \u0026#39;__str__\u0026#39;: \u0026lt;function Goods.__str__ at 0x00000238CE0F5730\u0026gt;, \u0026#39;__getitem__\u0026#39;: \u0026lt;function Goods.__getitem__ at 0x00000238CE0F57B8\u0026gt;, \u0026#39;__setitem__\u0026#39;: \u0026lt;function Goods.__setitem__ at 0x00000238CE0F5840\u0026gt;, \u0026#39;__delitem__\u0026#39;: \u0026lt;function Goods.__delitem__ at 0x00000238CE0F58C8\u0026gt;, \u0026#39;__del__\u0026#39;: \u0026lt;function Goods.__del__ at 0x00000238CE0F5950\u0026gt;, \u0026#39;__dict__\u0026#39;: \u0026lt;attribute \u0026#39;__dict__\u0026#39; of \u0026#39;Goods\u0026#39; objects\u0026gt;, \u0026#39;__weakref__\u0026#39;: \u0026lt;attribute \u0026#39;__weakref__\u0026#39; of \u0026#39;Goods\u0026#39; objects\u0026gt;} key: a key:a, value:10 要删除key： a __del__ 正在执行\t","permalink":"https://luenci.com/en/posts/python%E7%9A%84%E6%A8%A1%E5%9D%97%E5%92%8C%E7%B1%BB/","summary":"\u003ch1 id=\"import导入模块路径问题\"\u003eimport导入模块路径问题\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e存在的问题：当我们把模块文件放到工程文件夹的外部的文件，发现无法正常引入模块\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e原因：外部的文件夹的路径，没有放到环境变量中。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e查看环境变量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1.导入\u003ccode\u003esys\u003c/code\u003e模块\u003c/li\u003e\n\u003cli\u003e2.\u003ccode\u003esys.path \u003c/code\u003e查看环境变量返回值是列表\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e把自己写的模块的路径加入到环境变量中\u003c/p\u003e","title":"Python的模块和类"},{"content":"概念 进程 ​ 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\n线程 ​ 线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\n协程 ​ 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n三者关系 应用场景 多进程：密集CPU任务，需要充分使用多核CPU资源（服务器，太量的并行计算）的时候，用多进程。\n缺陷：多个进程之间通信成本高，切换开销大。 多线程：密集I/O任务（网络I/O，磁盘以I/O，数据库I/O）使用多线程合适。\n缺陷：同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发。 协程：当程中存在太量不需要CPU的操作时（IO），适用于协程；\n多线程请求返回是无序的，那个线程有数据返回就处理那个线程，而协程返回的数据是有序的。\n缺陷：单线程执行，处理密集CPU和本地磁盘IO的时候，性能较低。处理网络I/O性能还是比较高。 ","permalink":"https://luenci.com/en/posts/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%AF%B9%E6%AF%94/","summary":"\u003ch2 id=\"概念\"\u003e概念\u003c/h2\u003e\n\u003ch3 id=\"进程\"\u003e进程\u003c/h3\u003e\n\u003cp\u003e​    进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。\u003c/p\u003e\n\u003ch3 id=\"线程\"\u003e线程\u003c/h3\u003e\n\u003cp\u003e​    线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。\u003c/p\u003e\n\u003ch3 id=\"协程\"\u003e协程\u003c/h3\u003e\n\u003cp\u003e​    协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\u003c/p\u003e\n\u003ch2 id=\"三者关系\"\u003e三者关系\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://i.postimg.cc/zG72gqFb/image-20191116114716551.png\" alt=\"image-20191116114716551\"  /\u003e\n\u003c/p\u003e","title":"python的进程，线程和协程对比"},{"content":"进程 进程概念 进程（Process）是资源分配的最小单位，是线程的容器。\n程序是固定不变的，而进程会根据运行需要，让操作系统动态分配各种资源的CPU的时间片轮转，在不同的时间段切换执行不同的进程，但是切换进程是比较耗时的；就引来了轻量级进程，也就是所谓的线程，一个进程中包括多个线程（代码流，其实也就是进程中同时跑的多个方法体）\n程序：例xxx.py这是程序，是一个静态的\n进程：一个程序运行起来后，代码+用到的资源称之为进程，它是操作系统分配资源的基本单元。\n进程状态 工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态\n进程状态\n就绪态：运行的条件都已经满足，正在等在cpu执行 执行态：cpu正在执行其功能 等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态 进程的创建 - multiprocessing multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情。\n·创建子进程跟创建线程十分类似，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start0方法后动\nProcess语法结构如下： Process([group [，target[，name，[args[，kwargs]]]）\ntarget：如果传递了函数的引用，这个子进程就执行这里（函数）的代码 args：给target指定的函数传递的参数，以元组的方式传递 kwargs：给target指定的函数传递命名参数 name：给进程设定一个名字，可以不设定 group：指定进程组，大多数情况下用不到 Process创建的实例对象的常用方法：\nstart()：后动子进程实例（创建子进程） is_alive：判断进程子进程是否还在活着 join([timeout]）：是否等待子进程执行结束，或等待多少秒o terminate：不管任务是否完成，立即终止子进程 Process创建的实例对象的常用属性：\nname：当前进程的别名，默认为Process-N，N为从1开始递增的整数 pid：当前进程的pid（进程号） linux系统可使用kill命令结束进程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import multiprocessing import os import time def work1(): for i in range(10): # 获取进程的父id print(\u0026#34;正在运行work1 第{}次..进程id{}，父进程id{}\u0026#34;.format(i, os.getpid(), os.getppid())) time.sleep(2) if __name__ == \u0026#39;__main__\u0026#39;: # 获取主进程名称 print(\u0026#34;主进程名称\u0026#34;, multiprocessing.current_process()) # 获取进程的编号 # 1.获取进程id multiprocessing.current_process().pid print(\u0026#34;主进程编号\u0026#34;, multiprocessing.current_process().pid) # 2. 模块os # print(os.getpid()) process_obj = multiprocessing.Process(target=work1, name=\u0026#34;进程一\u0026#34;) process_obj.start() print(\u0026#34;XXXX\u0026#34;) out: 主进程名称 \u0026lt;_MainProcess(MainProcess, started)\u0026gt; 主进程编号 31776 XXXX 正在运行work1 第0次..进程id43088，父进程id31776 正在运行work1 第1次..进程id43088，父进程id31776 正在运行work1 第2次..进程id43088，父进程id31776 正在运行work1 第3次..进程id43088，父进程id31776 正在运行work1 第4次..进程id43088，父进程id31776 正在运行work1 第5次..进程id43088，父进程id31776 正在运行work1 第6次..进程id43088，父进程id31776 正在运行work1 第7次..进程id43088，父进程id31776 正在运行work1 第8次..进程id43088，父进程id31776 正在运行work1 第9次..进程id43088，父进程id31776 进程参数，全局变量 进程间不能共享全局变量 子进程在运行时候，会将主进程的内容复制到自己进程中，修改只限自己进程有效。不影响其他进程和主进程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import multiprocessing # 定义全局变量 import time g_num = 10 def work1(): global g_num for i in range(10): g_num += 1 print(\u0026#34;work1---------\u0026#34;, g_num) def work2(): print(\u0026#34;work1---------\u0026#34;, g_num) if __name__ == \u0026#39;__main__\u0026#39;: p1 = multiprocessing.Process(target=work1) p2 = multiprocessing.Process(target=work2) p1.start() p2.start() time.sleep(3) print(\u0026#34;---------main-----------\u0026#34;, g_num) out: work1--------- 20 work1--------- 10 ---------main----------- 10 守护进程 p1.daemon=True设置子进程p1守护主进程，当主进程结束的时候，子进程也随之结束 p1.terminate（）终止进程执行，并非是守护进程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import multiprocessing import time def work1(): for i in range(10): print(\u0026#34;正在运行work1...{}\u0026#34;.format(time.ctime())) time.sleep(0.5) if __name__ == \u0026#39;__main__\u0026#39;: process_obj = multiprocessing.Process(target=work1) # 开启守护 # process_obj.daemon = True process_obj.start() print(\u0026#34;我睡两秒就结束\u0026#34;, time.ctime()) time.sleep(2) # 终止进程 process_obj.terminate() exit() out: 我睡两秒就结束 Thu Nov 14 16:04:29 2019 正在运行work1...Thu Nov 14 16:04:29 2019 正在运行work1...Thu Nov 14 16:04:30 2019 正在运行work1...Thu Nov 14 16:04:30 2019 正在运行work1...Thu Nov 14 16:04:31 2019 进程线程对比 功能 进程，能够完成多任务，比如在一台电脑上能够同时运行多个QQ 线程，能够完成多任务，比如一个QQ中的多个聊天窗口 使用区别 进程是系统进行资源分配和调度的一个独立单位。 线程是进程的一介实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源. 一个程序至少有一个进程，一个进程至少有一个线程. 线程的划分尺度小于进程（资源比进程少），使得多线程程序的并发性高。 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率 线程不能独立运行，必须依赖于线程 对比维度 多进程 多线程 总结 数据共享，同步 数据共享复杂，需要用IPC；数据是分开因为共享进程数据，数据共享简单 因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂 各有千秋 内存、CPU 占用内存多，切换复杂，CPU利用率低 占用内存少，切换简单，PU利用率高CPU 线程占优 创建销毁、切换 创建销毁、切换复杂，速度慢 创建销毁、切换简单，速度很快 线程占优 编程，调试 编程简单，调试简单 编程复杂，调试复杂 进程占优 可靠性 进程间不会互相影响 一个线程挂掉将导致整个进程挂掉 进程占优 分布式 适应于多核、多机分布式；如果一台机器不够，扩展到多台机器比较简单 应用于多核分布式 进程占优 进程线程取舍 需要频繁创建销毁的先使用线程；（如：Web服务器） 线程的切换速度快，所以在需要大量计算，切换频繁时用线程（如图像处理、算法处理） 因为对CPU系统的效率使用上线程更占优，所以可能要发展到多机分布的用进程，多核分布用线程； 需要更稳定安全时，适合选择进程；需要速度时，选择线程更好。 都满足需求的情况下，用你最熟悉、最拿手的方式 需要提醒的是：虽然有这么多的选择原则，但实际应用中基本上都是“进程+线程”的结合方式 在Python的原始解释器CPython中存在着GlL（Global Interpreter Lock，全局解释器锁），因此在解释执行python代码时，会产生互斥锁来限制线程对共享资源的访问，直到解释器遇到I/O操作或者操作次数达到一定数目时才会释放GlL。造成了即使在多核CPU中，多线程也只是做着分时切换而已 消息队列 可以使用multiprocessing模块的Queue实现多进程之间的数据传递 Queue本身是一个消息列队程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import multiprocessing # 创建队列(指定长度) queue = multiprocessing.Queue(5) # 向队列中放值 queue.put(\u0026#34;Luenci\u0026#34;) queue.put(1) queue.put([5, 2]) queue.put((9, 8, 7)) queue.put({\u0026#34;a\u0026#34;: 6, \u0026#34;b\u0026#34;: 8}) # 判断队列是否全满 isfull = queue.full() print(\u0026#34;队列为全满：\u0026#34;, isfull) # 长度为5，放入第6个数据后，队列就进行入了阻塞状态，默认会等待以列先取出值再放入新的值 # queue.put(22) # 不等待的放入 # queue.put_nowait(11) # 向队列中取值 # 当队列为空的时候，再取值的时候，程序会进行阻塞状态，等待队列中有值再取 value = queue.get() print(value) # 当队列为空的时候，再取值的时候，程序会直接报错 # value = queue.get_nowait() # 队列元素个数 num = queue.qsize() print(num) # 判断队列是否为空 empty = queue.empty() print(\u0026#34;队列为空？：\u0026#34;, empty) 进程池 进程池概述 当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。 初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会用之前的进程来执行新的任务。 进程池实现方式 同步方式：pool.apply() 异步方式pool.apply_async（copy_work） 核心方法 multiprocessing.Pool常用函数解析： apply（）：\u0026ndash;进程池中进程以同步方式执行任务 apply_async（func[，args[，kwds]]）：\u0026ndash;使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表 进程池中的进程通信 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 import multiprocessing import time def write_queue(queue): for i in range(10): if queue.full(): print(\u0026#34;队列已满\u0026#34;) break else: queue.put(i) print(\u0026#34;成功添加：\u0026#34;, i) time.sleep(0.5) def read_queue(queue): while True: if queue.qsize() == 0: print(\u0026#34;队列已空\u0026#34;) break value = queue.get() print(\u0026#34;已经读取\u0026#34;, value) if __name__ == \u0026#39;__main__\u0026#39;: # 创建进程池 pool = multiprocessing.Pool(3) # 创建进程池中的队列 queue = multiprocessing.Manager().Queue(10) # 同步的方式执行 # pool.apply(write_queue, args=(queue,)) # pool.apply(read_queue, args=(queue,)) # 异步的方式执行 # apply_async（）返回值ApplyResult对象，该对象有一个wait（）的方法 result = pool.apply_async(write_queue, args=(queue,)) result.wait() pool.apply_async(read_queue, args=(queue,)) # 不再接收新的任务 pool.close() pool.join() out: 成功添加： 0 成功添加： 1 成功添加： 2 成功添加： 3 成功添加： 4 成功添加： 5 成功添加： 6 成功添加： 7 成功添加： 8 成功添加： 9 已经读取 0 已经读取 1 已经读取 2 已经读取 3 已经读取 4 已经读取 5 已经读取 6 已经读取 7 已经读取 8 已经读取 9 队列已空 ","permalink":"https://luenci.com/en/posts/%E5%A4%9A%E8%BF%9B%E7%A8%8B/","summary":"\u003ch1 id=\"进程\"\u003e进程\u003c/h1\u003e\n\u003ch2 id=\"进程概念\"\u003e进程概念\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进程（Process）是资源分配的最小单位，是线程的容器。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e程序是固定不变的，而进程会根据运行需要，让操作系统动态分配各种资源的CPU的时间片轮转，在不同的时间段切换执行不同的进程，但是切换进程是比较耗时的；就引来了轻量级进程，也就是所谓的线程，一个进程中包括多个线程（代码流，其实也就是进程中同时跑的多个方法体）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e程序：例\u003ccode\u003exxx.py\u003c/code\u003e这是程序，是一个静态的\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e进程：一个程序运行起来后，代码+用到的资源称之为进程，它是操作系统分配资源的基本单元。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"进程状态\"\u003e进程状态\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e进程状态\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e就绪态：运行的条件都已经满足，正在等在cpu执行\u003c/li\u003e\n\u003cli\u003e执行态：cpu正在执行其功能\u003c/li\u003e\n\u003cli\u003e等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"进程的创建---multiprocessing\"\u003e进程的创建 - multiprocessing\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003emultiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e·创建子进程跟创建线程十分类似，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start0方法后动\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProcess语法结构如下：\n\u003ccode\u003eProcess([group [，target[，name，[args[，kwargs]]]）\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etarget：如果传递了函数的引用，这个子进程就执行这里（函数）的代码\u003c/li\u003e\n\u003cli\u003eargs：给target指定的函数传递的参数，以元组的方式传递\u003c/li\u003e\n\u003cli\u003ekwargs：给target指定的函数传递命名参数\u003c/li\u003e\n\u003cli\u003ename：给进程设定一个名字，可以不设定\u003c/li\u003e\n\u003cli\u003egroup：指定进程组，大多数情况下用不到\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProcess创建的实例对象的常用方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estart()：后动子进程实例（创建子进程）\u003c/li\u003e\n\u003cli\u003eis_alive：判断进程子进程是否还在活着\u003c/li\u003e\n\u003cli\u003ejoin([timeout]）：是否等待子进程执行结束，或等待多少秒o\u003c/li\u003e\n\u003cli\u003eterminate：不管任务是否完成，立即终止子进程\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProcess创建的实例对象的常用属性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ename：当前进程的别名，默认为Process-N，N为从1开始递增的整数\u003c/li\u003e\n\u003cli\u003epid：当前进程的pid（进程号）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elinux\u003c/code\u003e系统可使用\u003ccode\u003ekill\u003c/code\u003e命令结束进程\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"python的进程概念"},{"content":"闭包 引入 函数名是一个特殊的变量，保存了函教的地址和 自定义一个变量可以获取函数地址 自定义变量调用函数 \u0026ldquo;函数名（）\u0026rdquo; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def work(): print(\u0026#34;我是一个测试函数\u0026#34;) ret = work print(ret) print(\u0026#34;地址：%X\u0026#34; % id(ret)) print(\u0026#34;地址：%X\u0026#34; % id(work)) ret() work() out: \u0026lt;function work at 0x00000161E3091E18\u0026gt; 地址：161E3091E18 地址：161E3091E18 我是一个测试函数 我是一个测试函数 当我们定义函数test1后，函数名test1保存的是函数在内存的首地址函数名就是一个特殊的变量，函数名（）调用函数，执行函数体test1()和ret()都会调用函数，并执行函数体 和变量名一样的，函数名数名只是函数代码空间的引用，当函数名赋值给一个对象的时候就是引用传递。 闭包概念 在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包\n维基百科中关于闭包的概念：在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性。\n闭包构成条件 必须有一个内嵌函数（函数里定义的函数）\u0026ndash;这对应函数之间的嵌套 内嵌函数必须引用一个定义在闭合范围内（外部函数里）的变量\u0026ndash;内部函数引用外部变量 外部函数必须返回内嵌函数\u0026ndash;必须返回那个内部函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def function_out(num): print(\u0026#34;1.function_out num = \u0026#34;, num) def function_in(num_in): print(\u0026#34;2.---------- function_in -----------------num\u0026#34;, num) print(\u0026#34;3.---------- function_in -----------------num_in\u0026#34;, num_in) return function_in # function_out(10) # 调用function_out获取内层函数的地址，保存到ret ret = function_out(100) # 调用内层函数 ret(88) out: 1.function_out num = 100 2.---------- function_in -----------------num 100 3.---------- function_in -----------------num_in 88 通俗理解：\n存在函数的嵌套关系 内层函数引用了外层函数的临时变量 外层函数返回内层函数的引用 闭包中的变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def function_out(num): def function_in(): # 如果在内层定义了和外层变量同名的变量，但是要使用外层变量 # nonlocal 不使用内层函数的，而是使用外层的变量 nonlocal num print(\u0026#34;function_in num\u0026#34;, num) # 内部自定义的变量 num = 88 return function_in # 调用外部函数 ret = function_out(99) ret() out: function_in num 99 装饰器入门 装饰器作用：在不改变函数的代码前提下，给函数添加新的功能 装饰器的使用： 存在闭包 需要装饰的函数 写代码要道循开放封闭原则，虽然在这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说它规定已经实现的功能代码不允许被修改，但可以被扩展，即：\n封闭：已实现的勤能代码块 开放：对扩展开放 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def function_out(func): def function_in(): print(\u0026#34;开始验证\u0026#34;) func() return function_in @function_out # @function_out装饰了 login() 函数 # 底层实现 # login = function_out(login) def login(): print(\u0026#34;开始登陆！\u0026#34;) # 通过闭包调用外层函数 # login = function_out(login) login() out: 开始验证 开始登陆！ 通用版装饰器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def function_out(func): def function_in(*args, **kwargs): print(\u0026#34;开始验证\u0026#34;) print(\u0026#34;function_in user=\u0026#34;, args) print(\u0026#34;function_in password=\u0026#34;, kwargs) return func(*args, **kwargs) return function_in @function_out def login(*args, **kwargs): print(\u0026#34;开始登陆 user=\u0026#34;, args) print(\u0026#34;开始登陆 password=\u0026#34;, kwargs) return 10 # 装饰完 login == function_in result = login(20, a=18) print(result) out: 开始验证 function_in user= (20,) function_in password= {\u0026#39;a\u0026#39;: 18} 开始登陆 user= (20,) 开始登陆 password= {\u0026#39;a\u0026#39;: 18} 10 在原装饰器增加外部变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def test(path): print(path) def function_out(func): def function_in(): print(\u0026#34;开始验证\u0026#34;) func() return function_in # 返回装饰器的引用（装饰器工厂） return function_out @test(\u0026#34;login.py\u0026#34;) # @test（\u0026#34;login.py\u0026#34;）分解为2步 # 1）test（\u0026#34;login.py\u0026#34;）--\u0026gt;function out 引用(地址) # 2）@ 第一步的结果--\u0026gt;@function out def login(): print(\u0026#34;开始登陆\u0026#34;) @test(\u0026#34;register.py\u0026#34;) def register(): print(\u0026#34;开始注册\u0026#34;) login() register() out: login.py register.py 开始验证 开始登陆 开始验证 开始注册 多重装饰器 给一个函数进行多次装饰 装饰原则：就近原则（靠近待装饰函数的先装饰，随后一层一层装饰） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # \u0026lt;b\u0026gt;helloWord\u0026lt;/b\u0026gt; # 定义一个让文字加粗的装饰器 def makeBlod(func): def function_in(): return \u0026#39;\u0026lt;b\u0026gt;\u0026#39; + func() + \u0026#39;\u0026lt;/b\u0026gt;\u0026#39; return function_in # 定义一个让文字倾斜的装饰器 def makeItalic(func): def function_in(): return \u0026#39;\u0026lt;i\u0026gt;\u0026#39; + func() + \u0026#39;\u0026lt;/i\u0026gt;\u0026#39; return function_in @makeBlod def demo(): return \u0026#34;helloWord\u0026#34; @makeItalic def demo2(): return \u0026#34;Luenci\u0026#34; @makeBlod @makeItalic def demo3(): return \u0026#34;LYnn\u0026#34; print(demo()) print(demo2()) print(demo3()) out: \u0026lt;b\u0026gt;helloWord\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt;Luenci\u0026lt;/i\u0026gt; \u0026lt;b\u0026gt;\u0026lt;i\u0026gt;LYnn\u0026lt;/i\u0026gt;\u0026lt;/b\u0026gt; 类装饰器 装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象在Python中一般callable对象都是函数，但也有例外。只要某个对象重写了__call__（）方法，那么这个对象就是callable的。\n类的书写：\n必须有两个方法\n1）__init__ 方法，必须接收装饰器传递的参数func 2）__call__方法\n格式： @类名 待装饰的函数 对象名()调用对象的__call__（）方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # 装饰器类 class Demo(object): def __init__(self, func): print(\u0026#34;__init__方法\u0026#34;) print(\u0026#34;-- func --\u0026#34;, func) self.func = func def run(self): print(\u0026#34;正在奔跑\u0026#34;) def __call__(self, *args, **kwargs): print(\u0026#34;-- 开始验证 --\u0026#34;) # 调用原来login内容 self.func() @Demo # login = demo(login) def login(): print(\u0026#34;正在登陆\u0026#34;) login() out: __init__方法 -- func -- \u0026lt;function login at 0x0000024E64D857B8\u0026gt; -- 开始验证 -- 正在登陆 ","permalink":"https://luenci.com/en/posts/%E9%97%AD%E5%8C%85%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/","summary":"\u003ch1 id=\"闭包\"\u003e闭包\u003c/h1\u003e\n\u003ch2 id=\"引入\"\u003e引入\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e函数名是一个特殊的变量，保存了函教的地址和\u003c/li\u003e\n\u003cli\u003e自定义一个变量可以获取函数地址\u003c/li\u003e\n\u003cli\u003e自定义变量调用函数 \u0026ldquo;函数名（）\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ework\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;我是一个测试函数\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eret \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e work\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(ret)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;地址：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%X\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e id(ret))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;地址：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%X\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e id(work))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eret()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ework()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003efunction work at \u003cspan style=\"color:#a5d6ff\"\u003e0x00000161E3091E18\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    地址\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e161E3091\u003c/span\u003eE18\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    地址\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e161E3091\u003c/span\u003eE18\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    我是一个测试函数\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    我是一个测试函数\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e当我们定义函数\u003ccode\u003etest1\u003c/code\u003e后，函数名\u003ccode\u003etest1\u003c/code\u003e保存的是函数在内存的首地址函数名就是一个特殊的变量，\u003ccode\u003e函数名（）\u003c/code\u003e调用函数，执行函数体\u003ccode\u003etest1()\u003c/code\u003e和\u003ccode\u003eret()\u003c/code\u003e都会调用函数，并执行函数体\u003c/li\u003e\n\u003cli\u003e和变量名一样的，函数名数名只是函数代码空间的引用，当函数名赋值给一个对象的时候就是引用传递。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"闭包概念\"\u003e闭包概念\u003c/h2\u003e\n\u003cp\u003e在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包\u003c/p\u003e","title":"python的闭包和装饰器"},{"content":"Python中的类 原文转自：https://blog.csdn.net/sxingming/article/details/52875125\n默认情况下，Python中的成员函数和成员变量都是公开的(public),在python中没有类似public,private等关键词来修饰成员函数和成员变量。\n在python中定义私有变量只需要在变量名或函数名前加上 __两个下划线，那么这个函数或变量就是私有的了。\n在内部，python使用一种 name mangling 技术，将 __membername替换成 _classname__membername，也就是说，类的内部定义中,所有以双下划线开始的名字都被\u0026quot;翻译\u0026quot;成前面加上单下划线和类名的形式。\n例如：为了保证不能在class之外访问私有变量，Python会在类的内部自动的把我们定义的__spam私有变量的名字替换成为 _classname__spam(注意，classname前面是一个下划线，spam前是两个下划线)，因此，用户在外部访问__spam的时候就会提示找不到相应的变量。\npython中的私有变量和私有方法仍然是可以访问的\n访问方法如下： 私有变量:实例._类名__变量名 私有方法:实例._类名__方法名()\n其实，Python并没有真正的私有化支持，但可用下划线得到伪私有。 尽量避免定义以下划线开头的变量！\n（1）_xxx \u0026ldquo;单下划线 \u0026quot; 开始的成员变量叫做保护变量，意思是只有类实例和子类实例能访问到这些变量， 需通过类提供的接口进行访问；不能用\u0026rsquo;from module import *\u0026lsquo;导入 （2）__xxx 类中的私有变量/方法名 （Python的函数也是对象，所以成员方法称为成员变量也行得通。）, \u0026quot; 双下划线 \u0026quot; 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。 （3）__xxx__ 系统定义名字，前后均有一个“双下划线” 代表python里特殊方法专用的标识，如 __init__（）代表类的构造函数。 下面我们看几个例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class A(object): def __init__(self): #翻译成 self._A__data=[] self.__data=[] def add(self,item): #翻译成 self._A__data.append(item) self.__data.append(item) def printData(self): #翻译成 self._A__data print(self.__data) a=A() a.add(\u0026#39;hello\u0026#39;) a.add(\u0026#39;python\u0026#39;) a.printData() #外界不能访问私有变量 AttributeError: \u0026#39;A\u0026#39; object has no attribute \u0026#39;__data\u0026#39; #print a.__data #通过这种方式，在外面也能够访问“私有”变量；这一点在调试中是比较有用的！ print a._A__data out: [\u0026#39;hello\u0026#39;, \u0026#39;python\u0026#39;] [\u0026#39;hello\u0026#39;, \u0026#39;python\u0026#39;] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # 获取实例的所有属性 print a.__dict__ # 获取实例的所有属性和方法 print dir(a) class A(): def __init__(self): #私有变量，翻译成 self._A__name=\u0026#39;python\u0026#39; self.__name=\u0026#39;python\u0026#39; #私有方法,翻译成 def _A__say(self) def __say(self): #翻译成 self._A__name print(self.__name) a=A() #访问私有属性,报错!AttributeError: A instance has no attribute \u0026#39;__name\u0026#39; #print a.__name #查询出实例a的属性的集合 print(a.__dict__) #这样，就可以访问私有变量了 print(a._A__name) #调用私有方法，报错。AttributeError: A instance has no attribute \u0026#39;__say\u0026#39; #a.__say() #获取实例的所有属性和方法 print(dir(a)) #这样，就可以调用私有方法了 a._A__say() out: {\u0026#39;_A__name\u0026#39;: \u0026#39;python\u0026#39;} python [\u0026#39;_A__name\u0026#39;, \u0026#39;_A__say\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__module__\u0026#39;] python 从上面看来,python还是非常的灵活，它的oop没有做到真正的不能访问，只是一种约定让大家去遵守， 比如大家都用self来代表类里的当前对象，其实，我们也可以用其它的，只是大家习惯了用self 。\n小漏洞：派生类和基类取相同的名字就可以使用基类的私有变量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class A(): def __init__(self): self.__name=\u0026#39;python\u0026#39; #翻译成self._A__name=\u0026#39;python\u0026#39; class B(A): def func(self): #翻译成print self._B__name print(self.__name ) instance=B() #报错：AttributeError: B instance has no attribute \u0026#39;_B__name\u0026#39; #instance.func() print(instance.__dict__) print(instance._A__name) out: {\u0026#39;_A__name\u0026#39;: \u0026#39;python\u0026#39;} python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class A(): def __init__(self): #翻译成self._A__name=\u0026#39;python\u0026#39; self.__name=\u0026#39;python\u0026#39; class A(A): #派生类和基类取相同的名字就可以使用基类的私有变量。 def func(self): #翻译成print self._A__name print(self.__name) instance=A() instance.func() out: python ","permalink":"https://luenci.com/en/posts/python%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/","summary":"\u003ch1 id=\"python中的类\"\u003ePython中的类\u003c/h1\u003e\n\u003cp\u003e原文转自：https://blog.csdn.net/sxingming/article/details/52875125\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e默认情况下，Python中的成员函数和成员变量都是公开的(public),在python中没有类似public,private等关键词来修饰成员函数和成员变量。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在python中定义私有变量只需要在变量名或函数名前加上 \u003ccode\u003e__\u003c/code\u003e两个下划线，那么这个函数或变量就是私有的了。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在内部，python使用一种 name mangling 技术，将 \u003ccode\u003e__membername\u003c/code\u003e替换成\u003ccode\u003e _classname__membername\u003c/code\u003e，也就是说，类的内部定义中,所有以双下划线开始的名字都被\u0026quot;翻译\u0026quot;成前面加上单下划线和类名的形式。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e例如：为了保证不能在class之外访问私有变量，Python会在类的内部自动的把我们定义的\u003ccode\u003e__spam\u003c/code\u003e私有变量的名字替换成为\n\u003ccode\u003e_classname__spam\u003c/code\u003e(注意，\u003ccode\u003eclassname\u003c/code\u003e前面是一个下划线，\u003ccode\u003espam\u003c/code\u003e前是两个下划线)，因此，用户在外部访问\u003ccode\u003e__spam\u003c/code\u003e的时候就会提示找不到相应的变量。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003epython中的私有变量和私有方法仍然是可以访问的\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e访问方法如下：\n\u003ccode\u003e私有变量:实例._类名__变量名\u003c/code\u003e\n\u003ccode\u003e私有方法:实例._类名__方法名()\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e其实，Python并没有真正的私有化支持，但可用下划线得到伪私有。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e尽量避免定义以下划线开头的变量！\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e（1）\u003ccode\u003e_xxx \u003c/code\u003e   \u0026ldquo;单下划线 \u0026quot; 开始的成员变量叫做保护变量，意思是只有类实例和子类实例能访问到这些变量，\n需通过类提供的接口进行访问；不能用\u0026rsquo;from module import *\u0026lsquo;导入\u003c/li\u003e\n\u003cli\u003e（2）\u003ccode\u003e__xxx \u003c/code\u003e  类中的私有变量/方法名 （Python的函数也是对象，所以成员方法称为成员变量也行得通。）,\n\u0026quot; 双下划线 \u0026quot; 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。\u003c/li\u003e\n\u003cli\u003e（3）\u003ccode\u003e__xxx__ \u003c/code\u003e系统定义名字，前后均有一个“双下划线” 代表python里特殊方法专用的标识，如 \u003ccode\u003e__init__（）\u003c/code\u003e代表类的构造函数。\u003c/li\u003e\n\u003c/ul\u003e","title":"Python类中的 私有变量 和 私有方法"},{"content":"item系列 __getitem__ 以字典形式访问属性的时候触发 __setitem__ 以字典形式设置属性的时候触发 __delitem__ 以字典形式删除属性的时候触发 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Demo(object): def __getitem__(self, item): print(\u0026#34;触发__getitem__\u0026#34;) def __setitem__(self, key, value): print(\u0026#34;触发__setitem__\u0026#34;) self.__dict__[key] = value def __delitem__(self, key): print(\u0026#34;触发__delitem__\u0026#34;) self.__dict__.pop(key) f = Demo() # 以字典的方式来操作属性 print(f.__dict__) f[\u0026#39;name\u0026#39;] = \u0026#39;luenci\u0026#39; print(f.__dict__) print(f[\u0026#39;name\u0026#39;]) del f[\u0026#39;name\u0026#39;] print(f.__dict__) out: {} 触发__setitem__ {\u0026#39;name\u0026#39;: \u0026#39;luenci\u0026#39;} 触发__getitem__ None 触发__delitem__ {} __str__和__repr__控制输出 __str__会在print()打印时候调用，如果类中没重写则会调用默认的打印值，如果自定义了则会调用自定义的__str__方法 __repr__这个实在控制台的时候输出，若一个类中没定义__str__但是定义了__repr__方法，则会调用__repr__的返回值。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class bar(object): def __init__(self, name, age): self.name = name self.age = age # def __str__(self): # return \u0026#39;__str__自定义返回值\u0026#39; def __repr__(self): return \u0026#39;__repr__自定义返回值\u0026#39; f = bar(\u0026#39;luenci\u0026#39;, 18) # print() 函数触发__str__()函数 print(f) out: __repr__自定义返回值 __slots__属性 1.__slots__是什么？\n是一个类变量，变量值可以是列表，元祖，或者可迭代对象，也可以是一个字符串（意味看所有实例只有一个数据属性）\n2.引子：使用点来访问属性本质就是在访问类或者对象的dict属性字典（类的字典是共享的，而每个实例的是独立的）\n3.为何使用__slots__？\n字典会占用大量内存，如果你有一个属性很少的类，但是有很多实例，为了节省内存可以使用__slots__取代实例的dict当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一字典，这跟元组或列表很类似。在__slots__中列出的属性名在内部被映射到这个数组的指定小标上。使用__slots__一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在slots中定义的那些属性名。 注意事项：__slots__的很多特性都依赖于普通的基于字典的实现。另外，定义了__slots__后的类不再支持一些普通类特性了，比如多继承。大多数情况下，你应该只在那些经常被使用到的用作数据结构的类上定义__slots__比如在程序中需要创建某个类的几百万个实例对象。 关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的，但是这个并不是它的初衷。更多的是用来作为一个内存优化工具。\n1 2 3 4 5 6 7 8 9 10 class Demo(object): __slots__ = [\u0026#39;name\u0026#39;,\u0026#39;age\u0026#39;] f1 = Demo() f1.name = \u0026#39;luenci\u0026#39; # print(f1.__dict__) print(f1.__slots__) # print(Demo.__dict__) [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] 描述符 定义 一个描述符是一个有“绑定行为”的对象属性(object attribute)，它的访问控制会被描述器协议方法重写。 任何定义了 __get__, __set__ 或者 __delete__ 任一方法的类称为描述符类，其实例对象便是一个描述符，这些方法称为描述符协议。 当对一个实例属性进行访问时，Python 会按 obj.__dict__ → type(obj).__dict__ → type(obj)的父类.__dict__ 顺序进行查找，如果查找到目标属性并发现是一个描述符，Python 会调用描述符协议来改变默认的控制行为。 描述符是 @property``@classmethod``@staticmethod 和 super 的底层实现机制。 特性 同时定义了 __get__ 和 __set__ 的描述符称为 数据描述符(data descriptor)； 仅定义了 __get__ 的称为 非数据描述符(non-data descriptor) 。 两者区别在于：如果 obj.__dict__ 中有与描述符同名的属性，若描述符是数据描述符，则优先调用描述符，若是非数据描述符，则优先使用 obj.__dict__ 中属性。 描述符协议必须定义在类的层次上，否则无法被自动调用。 描述符协议 1 2 3 4 5 __get__(self, instance, owner) :param self: 描述符对象本身 :param instance: 使用描述符的对象的实例 :param owner: 使用描述符的对象拥有者 1 2 __set__(self, instance, value) :param value: 对描述符的赋值 1 __delete__(self, instance) 描述符的应用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Type(object): \u0026#34;\u0026#34;\u0026#34; 属性检查 \u0026#34;\u0026#34;\u0026#34; def __init__(self, key, types): self.key = key self.types = types def __get__(self, instance, owner): print(\u0026#34;__get__执行\u0026#34;) return instance.__dict__[self.key] def __set__(self, instance, value): print(\u0026#34;__set__执行\u0026#34;) if not isinstance(value, self.types): raise TypeError(\u0026#34;%s不是要求的%s类型\u0026#34; % (self.key, self.types)) instance.__dict__[self.key] = value def __delete__(self, instance): print(\u0026#34;__delete__执行\u0026#34;) instance.__dict__.pop(self.key) class Peopel(object): name = Type(\u0026#39;name\u0026#39;, str) age = Type(\u0026#39;age\u0026#39;, int) sex = Type(\u0026#39;sex\u0026#39;, str) def __init__(self, name, age, sex): self.name = name self.sex = sex self.age = age # p1 = Peopel(\u0026#39;luenci\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;男\u0026#39;) # p2 = Peopel(12, 11, \u0026#39;男\u0026#39;) p3 = Peopel(\u0026#39;luenci\u0026#39;, 11, \u0026#39;男\u0026#39;) 描述符总结 描述符是可以实现大部分python类特性中的底层魔法，包括@classmethod.@staticmethd.@property甚至是__slots__属性 描述符是很多高级库和框架的重要工具之一，描述符通常是使用到装饰器或者元类的大型框架中的一个组件。 元类 元类是类的类，是类的模板 元类是用来控制如何创建类的，正如类是创建对象的模板一样 元类的实例为类，正如类的实例为对象（f1对象是Foo类的一个实例，Foo类是type类的一个实例） type是python的一个内建元类，用来直接控制生成类，python中任何class定义的类其实都是type类实例化的对象 ","permalink":"https://luenci.com/en/posts/python%E7%B1%BB%E8%A1%A5%E5%85%85/","summary":"\u003ch2 id=\"item系列\"\u003e\u003ccode\u003eitem\u003c/code\u003e系列\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e__getitem__\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e以字典形式访问属性的时候触发\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e__setitem__\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e以字典形式设置属性的时候触发\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e__delitem__\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e以字典形式删除属性的时候触发\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eDemo\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __getitem__(self, item):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;触发__getitem__\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __setitem__(self, key, value):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;触发__setitem__\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__dict__[key] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __delitem__(self, key):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;触发__delitem__\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__dict__\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epop(key)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ef \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Demo()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 以字典的方式来操作属性\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(f\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__dict__)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ef[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(f\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__dict__)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(f[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edel\u003c/span\u003e f[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(f\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__dict__)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e触发__setitem__\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e触发__getitem__\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#79c0ff\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e触发__delitem__\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"__str__和__repr__控制输出\"\u003e\u003ccode\u003e__str__\u003c/code\u003e和\u003ccode\u003e__repr__\u003c/code\u003e控制输出\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e__str__\u003c/code\u003e会在\u003ccode\u003eprint()\u003c/code\u003e打印时候调用，如果类中没重写则会调用默认的打印值，如果自定义了则会调用自定义的\u003ccode\u003e__str__\u003c/code\u003e方法\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e__repr__\u003c/code\u003e这个实在控制台的时候输出，若一个类中没定义\u003ccode\u003e__str__\u003c/code\u003e但是定义了\u003ccode\u003e__repr__\u003c/code\u003e方法，则会调用\u003ccode\u003e__repr__\u003c/code\u003e的返回值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003ebar\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, name, age):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e age\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# def __str__(self):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#     return \u0026#39;__str__自定义返回值\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __repr__(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;__repr__自定义返回值\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ef \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e bar(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# print() 函数触发__str__()函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(f)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e__repr__自定义返回值\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"__slots__属性\"\u003e\u003ccode\u003e__slots__\u003c/code\u003e属性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e1.\u003ccode\u003e__slots__\u003c/code\u003e是什么？\u003c/p\u003e","title":"Python类补充"},{"content":"CPython 当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。 IPython IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。\nCPython用\u0026gt;\u0026gt;\u0026gt;作为提示符，而IPython用In [序号]:作为提示符。\nJpython Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。 PyPy PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术（just-in-time compiler 即时编译器，通俗解释就是边编译边执行），对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。\n绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。、\nIronPython IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。 ","permalink":"https://luenci.com/en/posts/python%E8%A7%A3%E9%87%8A%E5%99%A8%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"cpython\"\u003eCPython\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e当我们从\u003ca href=\"https://www.python.org/\"\u003ePython官方网站\u003c/a\u003e下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行\u003ccode\u003epython\u003c/code\u003e就是启动CPython解释器。\u003c/li\u003e\n\u003c/ul\u003e","title":"python解释器介绍"},{"content":"GlL锁定义 Gll锁：Global Interpreter Lock，又称：全局解释器锁\n任何Python线程执行前，必须先获得GlL锁，然后，每执行100条字节码，解释器就自动释放GL锁，让别的线程有机会执行。这个GlL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。\nGlL不是Python特性 GlL是Pythn解释器（Cpython）时引入的概念，在JPython、PyPy中没有GlL。GIL并不是Python的语言缺陷。是解释器层级的锁，跟Python语言特性无关\n言外之意，就是全局解释器就是为了锁定整个解释器内部的全局资源，每个线程想要运行首先获取GlL，而GlL本身又是一把互斥锁，造成所有线程只能一个一个one-by-one-并发-交替的执行。\nGlL存在的原因 早期计算机都是单核设计\nCPython在执行多线程的时候并不是线程安全的，所以为了程序的稳定性，加一把全局解释锁，能够确保任何时候都只有一个Python线程执行\nGlL产生的背景在CPython解释内部运行多个线程的时候，每个线程都需要解释器内部申请相应的全局资源，由于C语言本身比较底层造成CPython在管理所有全局资源的时候并不能应对所有线程同时的资源请求，因此为了防止资源竞争而发生错误，对所有线程申请全局资源增加了限制-全局解释器锁。\nGlL锁什么时候释放？ 在当前线程执行超时后会自动释放 在当前线程执行阻塞操作时会自动释放 当前执行完成时 Guido对GIL锁的看法：https://www.artima.com/forums/flat.jsp?forum=106\u0026amp;thread=214235\n关于GIL面试题 描述Python GL的概意，以及它对python多线程的影响？编写一个多线程抓取网页的程序，并阐明多线程抓取程序是否可比单线程性能有提升，并解释原因。\nPython语言和GlL没有半毛钱关系。仅仅是由于历史原因在Cpython虚拟机（解释器），难以移除GlL。\nGlIL：全局解释器锁。每个线程在执行的过程都需要先获取GlL，保证同一时刻只有一个线程可以执行代码。\n线程释放GL锁的情况：\n在IO操作等可能会引起阻塞的system call之前，可以暂时释放GIL，但在执行完毕后，必须重新获取GlL Python 3.x使用计时器（执行时间达到阔值后，当前线程释放GlL）或Python 2.x，tickets计数达到100 Python使用多进程是可以利用多核的CPU资源的。\n多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁\n严重问题：既然CPython解释存在GL是否意味每个线程在全局变量就不用加Lock互斥锁了呢？这是一个严重错误的想法，为什么用户操作全局数据还需要加Lock，因为GlL的释放时机我们无法控制-操作非常可能并没有完成，而不像Lock那样我们用完才释放（操作完整）\n举例\n线程1取出全局变量g_number==0一直加到20000，但是还没有来得及将20000写入g_number中，就超时了自动释放GIL 而线程2取出g_number==19999加到39999由于超时自动释放GlL此时线程2获取到GIL继续着未完成的事业将20000写入g_number….这就是之前的多线程案例没有加互斥锁的情况晨终结果是140w东右的盾因\nGIL锁解决方案 解决方案一（不推荐）： 我们换一个解释器执行程序就行了（jython：用JAVA写的python解释器） 解决方案二（推荐） 使用多进程替换多线程multiprocessing是一个多进程模块，开多个进程，每个进程都带一个GlL，就相当于多线程来用了。 解决方案三（推荐） 使用python语言的特性：胶水. 我们让子线程部分用c来写，就ok。（实质上也相当于那部分代码绕过了cython解释器）第一步，编写C语言文件： 测试代码，C语言写的死循环，文件名为test2.c： 1 2 3 4 5 6 void Loop(){ while(1) { ; } } 然后我们把将其编译成.so文件（share object）需要执行如下命令(Linux下)：\n1 gcc test.c -shared -o libtets.so -shared：将其编译成so文件\n-o：表示output，用来输出的文件名\n库文件是以lib开头\n编译过后，在当前的文件夹下就会生成一个.so文件\n第二步，编写python文件04-04_GIL锁解决方案.py：\n1 2 3 4 5 6 7 8 import ctypes import threading #加载动态库 my_lib=ctypes，cdll.LoadLibrary（\u0026#34;./libtest2.so\u0026#34;） #创建子线程 t=threading.Thread（target=my_lib.Loop） t.start（） #主线程 while True：pass 第三步，执行pvthon文件就可避开Cpython解释器的GIL锁\n总结 GIL锁称为：“全局解释器锁“，是CPytrton解释器中的锁机制，也是历史遗留问题 要提升多线程执行效率，解决方案： 更换解释器 改为进程替换多线程 子线程使用C语言实现（绕过GL锁） 必须要知道的是： CPU密集型不太适合多线程 I/O密集型适合多线程（Gil锁会释放） ","permalink":"https://luenci.com/en/posts/gil%E9%94%81/","summary":"\u003ch2 id=\"gll锁定义\"\u003eGlL锁定义\u003c/h2\u003e\n\u003cp\u003eGll锁：Global Interpreter Lock，又称：全局解释器锁\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e任何Python线程执行前，必须先获得GlL锁，然后，每执行100条字节码，解释器就自动释放GL锁，让别的线程有机会执行。这个GlL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。\u003c/p\u003e","title":"python解释器的GIL锁"},{"content":"类的定义 把一类事物的相同的特征和动作整合到一起就是类，类是一个抽象的概念 对象的定义 基于类而创建一个具体的事物，类的实例化 接口继承 继承的第二种含义非常重要。它又叫“接口继承”。 接口继承实质上是要求“做出一个良好的抽象，这个抽象规定了一个兼容接口，使得外部调用者无需关心具体细节，可一视同仁的处理实现了特定接口的所有对象”——这在程序设计上，叫做归一化。 归一化使得高层的外部使用者可以不加区分的处理所有接口兼容的对象集合——就好象linux的泛文件概念一样，所有东西都可以当文件处理，不必关心它是内存、磁盘、网络还是屏幕（当然，对底层设计者，当然也可以区分出“字符设备”和“块设备”，然后做出针对性的设计：细致到什么程度，视需求而定）。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # 导入抽象基类模块 import abc # 定义接口（基类） class File(metaclass=abc.ABCMeta): @abc.abstractmethod def read(self): pass @abc.abstractmethod def write(self): pass class disk(File): def read(self): print(\u0026#34;disk read\u0026#34;) def write(self): print(\u0026#34;disk wirte\u0026#34;) ds = disk() ds.read() 子类中调用父类的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Grandfather(object): def __init__(self, name, age): self.age = age self.name = name def grandfather(self): print(\u0026#34;grandfather method\u0026#34;) class Father(Grandfather): def __init__(self, name, age): super().__init__(name,age) def father_method(self): print(\u0026#34;father method\u0026#34;) class Son(Father): def __init__(self, name, age,sex): # 调用父类的构造方法 super().__init__(name,age) self.sex = sex # 子类中调用父类方法 def son_method(self): Father.father_method(self) def son_method1(self): super().grandfather() son1 = Son(\u0026#39;xiaoming\u0026#39;,18, \u0026#39;male\u0026#39;) son1.son_method1() 组合 1、组合指的是，在一个类中以另外一个类的对象作为数据属性，称为类的组合。 2、作用是可以将两个本来不相关的类联系起来。一般是两个类之间有显著的不同，很多时候还要附属关系(有相同的属性也有不同的属性)。比如人和头，手机和电池等等。 3、无纵向关系时用组合，有纵向关系时用继承。 4、组合就是一个类中使用到另一个类，从而把几个类拼到一起。组合的功能也是为了减少重复代码 多态 由不同的类实例化得到的对象，调用同一个方法，执行的逻辑不同 多态的概念指出了对象如何通过他们共同的属性和动作来操作及访问，而不需考虑他们具体类。 多态表明了动态（又名，运行时）绑定的存在，允计重载及运行时类型确定和验证。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class People(object): def __init__(self, name, age): self.name = name self.age = age def generation(self): if self.age \u0026lt; 18: print(\u0026#34;[%s]属于未成年人\u0026#34; % self.name) elif 18 \u0026lt; self.age \u0026lt; 30: print(\u0026#34;[%s]属于青年人\u0026#34; % self.name) else: print(\u0026#34;[%s]属于中老年人\u0026#34; % self.name) class minor(People): pass class young(People): pass class old(People): pass def func(obj): obj.generation() w1 = young(\u0026#39;luenci\u0026#39;,20) w2 = minor(\u0026#39;xiaoming\u0026#39;, 16) w3 = old(\u0026#39;jack\u0026#39;, 50) func(w1) func(w3) func(w3) out: [luenci]属于青年人 [jack]属于中老年人 [jack]属于中老年人 反射 getattr(object, name) 得到属性的值 hasattr(object, name) 说明：判断对象object是否包含名为name的特性（hasattr是通过调用getattr(ojbect, name)是否抛出异常来实现的 setattr(object, name, value) 这是相对应的getattr()。参数是一个对象,一个字符串和一个任意值。字符串可能会列出一个现有的属性或一个新的属性。这个函数将值赋给属性的。该对象允许它提供。例如,setattr(x,“foobar”,123)相当于x.foobar= 123 delattr(object, name) 与setattr()相关的一组函数。参数是由一个对象(记住python中一切皆是对象)和一个字符串组成的。string参数必须是对象属性名之一。该函数删除该obj的一个由string指定的属性。delattr(x, 'foobar')=del x.foobar 注：getattr,hasattr,setattr,delattr对模块的修改都在内存中进行，并不会影响文件中真实内容。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Demo(object): def __init__(self,name): self.name = name def method(self): print(\u0026#34;i am method\u0026#34;) d = Demo(\u0026#39;luenci\u0026#39;) # 如果d 对象中有属性name则打印self.name的值，否则打印not find print(getattr(d,\u0026#39;name\u0026#39;,\u0026#39;not find\u0026#39;)) print(getattr(d,\u0026#39;age\u0026#39;,\u0026#39;not find\u0026#39;)) #如果有方法method，否则打印其地址，否则打印not find print(getattr(d, \u0026#39;method\u0026#39;, \u0026#39;not find\u0026#39;)) print(getattr(d, \u0026#39;methods\u0026#39;, \u0026#39;not find\u0026#39;)) #如果有方法method，运行函数并打印None否则打印not find print(getattr(d, \u0026#39;method\u0026#39;, \u0026#39;not find\u0026#39;)()) # 说明：判断对象object是否包含名为name的特性（hasattr是通过调用getattr(ojbect, name)是否抛出异常来实现的） print(hasattr(d, \u0026#39;name\u0026#39;)) # 增加和修改参数 # d.age = 18 setattr(d,\u0026#39;age\u0026#39;, 18) setattr(d,\u0026#39;name\u0026#39;,\u0026#39;jack\u0026#39;) print(d.__dict__) # 删除 属性 不能删除属性对应的值， 但是可以使用setattr来修改 delattr(d,\u0026#39;age\u0026#39;) print(d.__dict__) out: luenci not find \u0026lt;bound method Demo.method of \u0026lt;__main__.Demo object at 0x000001710E9359B0\u0026gt;\u0026gt; not find i am method None True {\u0026#39;name\u0026#39;: \u0026#39;jack\u0026#39;, \u0026#39;age\u0026#39;: 18} {\u0026#39;name\u0026#39;: \u0026#39;jack\u0026#39;} 动态导入模块 问题：\n我们要导入一个模块,可以使用import.现在有这样的需求,我动态输入一个模块名，可以随时访问到导入模块中的方法或者变量，怎么做呢？ 1 2 3 \u0026#39;t.py\u0026#39; def test(): print(\u0026#34;i am test\u0026#34;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 model_name = input(\u0026#34;请输入您要导入的模块名称：\u0026#34;) imp = __import__(model_name) # 判断是否有test函数，有就执行test函数内容 if getattr(imp,\u0026#39;test\u0026#39;, \u0026#39;not find\u0026#39;): imp.test() else: print(imp) imp.test() out: 请输入您要导入的模块名称：t i am test \u0026lt;module \u0026#39;t\u0026#39; from \u0026#39;E:\\\\python进阶练习\\\\面向对象\\\\t.py\u0026#39;\u0026gt; i am test 包装 对一个已存在的对象进行包装，可以是对一个已存在的对象，增加，删除，或者修改功能。可以包装任何类型（type）作为一个类（class）的核心成员（如list,dict等），以使新对象的行为模仿你想要的数据类型中已存在的行为，并且去掉你不希望存在的行为。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class List(list): # 重写list的append方法,让其只能添加字符类型的数据 def append(self, p_object): if type(p_object) is str: # self.append(self, p_object) super().append(p_object) else: print(\u0026#34;只有字符类型才可以允许添加\u0026#34;) a = List(\u0026#39;hello Luenci\u0026#39;) a.append(123) a.append(\u0026#34;haha\u0026#34;) print(a) out: 只有字符类型才可以允许添加 [\u0026#39;h\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;haha\u0026#39;] 授权 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import time # 组合的方式完成授权 class FileHandle(object): def __init__(self, filename, mode=\u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;): self.file = open(filename,mode=mode,encoding=encoding) self.mode = mode self.encoding = encoding # 个性化定制write方法，比如不允许写，去除敏感词汇，给内容加上时间戳 def write(self,content): t = time.strftime(\u0026#39;%Y-%m-%d %X\u0026#39;) self.file.write(\u0026#39;%s %s\u0026#39;%(t,content)) def __getattr__(self, item): return getattr(self.file, item) f = FileHandle(\u0026#39;a.txt\u0026#39;, \u0026#39;w\u0026#39;) f.write(\u0026#39;Hello\\n\u0026#39;) f.write(\u0026#39;luenci\\n\u0026#39;) a.txt----\u0026gt; 2020-05-29 11:23:38 Hello 2020-05-29 11:23:38 luenci 函数补充 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Foo(object): pass class Too(object): pass class Bar(Foo): pass f1 = Foo() # 判断实例化对象是不是属于此类 结果是boolean print(isinstance(f1, Too)) print(isinstance(f1, Foo)) # 判断Bar类是不是Foo的子类 结果是boolean print(issubclass(Bar, Foo)) out: False True True ","permalink":"https://luenci.com/en/posts/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","summary":"\u003ch2 id=\"类的定义\"\u003e类的定义\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e把一类事物的相同的特征和动作整合到一起就是类，类是一个抽象的概念\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"对象的定义\"\u003e对象的定义\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e基于类而创建一个具体的事物，类的实例化\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"接口继承\"\u003e接口继承\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e继承的第二种含义非常重要。它又叫“接口继承”。\u003c/li\u003e\n\u003cli\u003e接口继承实质上是要求“做出一个良好的抽象，这个抽象规定了一个兼容接口，使得外部调用者无需关心具体细节，可一视同仁的处理实现了特定接口的所有对象”——这在程序设计上，叫做归一化。\u003c/li\u003e\n\u003cli\u003e归一化使得高层的外部使用者可以不加区分的处理所有接口兼容的对象集合——就好象\u003ccode\u003elinux\u003c/code\u003e的泛文件概念一样，所有东西都可以当文件处理，不必关心它是内存、磁盘、网络还是屏幕（当然，对底层设计者，当然也可以区分出“字符设备”和“块设备”，然后做出针对性的设计：细致到什么程度，视需求而定）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 导入抽象基类模块\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eabc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 定义接口（基类）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eFile\u003c/span\u003e(metaclass\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003eabc\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eABCMeta):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@abc.abstractmethod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eread\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@abc.abstractmethod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ewrite\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003edisk\u003c/span\u003e(File):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eread\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;disk read\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ewrite\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;disk wirte\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eds \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e disk()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eds\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"子类中调用父类的方法\"\u003e子类中调用父类的方法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eGrandfather\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, name, age):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e age\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003egrandfather\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;grandfather method\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eFather\u003c/span\u003e(Grandfather):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, name, age):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        super()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__init__(name,age)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efather_method\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;father method\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eSon\u003c/span\u003e(Father):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, name, age,sex):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 调用父类的构造方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        super()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__init__(name,age)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esex \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e sex\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 子类中调用父类方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eson_method\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Father\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efather_method(self)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eson_method1\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        super()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003egrandfather()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eson1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Son(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;xiaoming\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;male\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eson1\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eson_method1()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c!-- more --\u003e\n\u003ch2 id=\"组合\"\u003e组合\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e1、组合指的是，在一个类中以另外一个类的对象作为数据属性，称为类的组合。\u003c/li\u003e\n\u003cli\u003e2、作用是可以将两个本来不相关的类联系起来。一般是两个类之间有显著的不同，很多时候还要附属关系(有相同的属性也有不同的属性)。比如人和头，手机和电池等等。\u003c/li\u003e\n\u003cli\u003e3、无纵向关系时用组合，有纵向关系时用继承。\u003c/li\u003e\n\u003cli\u003e4、组合就是一个类中使用到另一个类，从而把几个类拼到一起。组合的功能也是为了减少重复代码\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"多态\"\u003e多态\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由不同的类实例化得到的对象，调用同一个方法，执行的逻辑不同\u003c/li\u003e\n\u003cli\u003e多态的概念指出了对象如何通过他们共同的属性和动作来操作及访问，而不需考虑他们具体类。\u003c/li\u003e\n\u003cli\u003e多态表明了动态（又名，运行时）绑定的存在，允计重载及运行时类型确定和验证。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003ePeople\u003c/span\u003e(object):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, name, age):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e age\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003egeneration\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;[\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e]属于未成年人\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eelif\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e30\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;[\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e]属于青年人\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;[\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e]属于中老年人\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eminor\u003c/span\u003e(People):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eyoung\u003c/span\u003e(People):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eold\u003c/span\u003e(People):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efunc\u003c/span\u003e(obj):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    obj\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003egeneration()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew1 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e young(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;luenci\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew2 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e minor(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;xiaoming\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e16\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew3 \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e old(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;jack\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e50\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efunc(w1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efunc(w3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efunc(w3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[luenci]属于青年人\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[jack]属于中老年人\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[jack]属于中老年人\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"反射\"\u003e反射\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egetattr(object, name)\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e得到属性的值\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehasattr(object, name)\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e说明：判断对象object是否包含名为name的特性（\u003ccode\u003ehasattr\u003c/code\u003e是通过调用\u003ccode\u003egetattr(ojbect, name)\u003c/code\u003e是否抛出异常来实现的\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetattr(object, name, value)\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e这是相对应的\u003ccode\u003egetattr()\u003c/code\u003e。参数是一个对象,一个字符串和一个任意值。字符串可能会列出一个现有的属性或一个新的属性。这个函数将值赋给属性的。该对象允许它提供。例如,\u003ccode\u003esetattr(x,“foobar”,123)\u003c/code\u003e相当于\u003ccode\u003ex.foobar= 123\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edelattr(object, name)\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e与\u003ccode\u003esetattr()\u003c/code\u003e相关的一组函数。参数是由一个对象(记住python中一切皆是对象)和一个字符串组成的。\u003ccode\u003estring\u003c/code\u003e参数必须是对象属性名之一。该函数删除该\u003ccode\u003eobj\u003c/code\u003e的一个由\u003ccode\u003estring\u003c/code\u003e指定的属性。\u003ccode\u003edelattr(x, 'foobar')=del x.foobar\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：\u003ccode\u003egetattr\u003c/code\u003e,\u003ccode\u003ehasattr\u003c/code\u003e,\u003ccode\u003esetattr\u003c/code\u003e,\u003ccode\u003edelattr\u003c/code\u003e对模块的修改都在内存中进行，并不会影响文件中真实内容。\u003c/p\u003e","title":"Python面向对象"},{"content":"asyncore模块 介绍 这个模块为异步socket的服务器客户端通信提供简单的接口。\n该模块提供了异步socket服务客户端和服务器的基础架构。\n相比python原生的socket api，asyncore具备有很大的优势，asyncore对原生的socket进行封装，提供非常简洁优秀的接口，利用asyncore覆写相关需要处理的接口方法，就可以完成一个socket的网络编程，从而需要处理复杂的socket网络状况以及多线程处理等等。\n实现流程 客户端 Socket 开发基本使用 1.定义类继承自asyncore.dispatcher\n2.实现类中的回调代码\n实现构造函数\n调用父类方法 创建 Socket对象 连接服务器 实现handle_connect回调函数\n当socket连接服务器成功时回调该函数\n实现writable回调函数\n描述是否有数据需要被发送到服务器。返回值为True表示可写，False表示不可写，如果不实现默认返回为True，当返回True时，回调函数handle_write将被触发\n实现handle_write 回调函数\n当有数据需要发送时（writable回调函数返回True时），该函数被触发，通常情况下在该函数中编写send方法发送数据\n实现readable回调函数\n描述是否有数据从服务端读取。返回True 表示有数据需要读取，False表示没有数据需要被读取，当不实现默认返回为True，当返回True 时，回调函数handle_read将被触发\n实现handle_read 回调函数\n当有数据需要读取时触发（readable回调函数返回True 时），该函数被触发，通常情况下在该函数中编写recv方法接收数据\n实现handle_error回调函数\n当程序运行过程发生异常时回调\n实现handle_close回调函数\n当连接被关闭时触发\n3.创建对象并且执行asyncore.loop进入运行循环\ntimeout表示一次循环所需要的时长 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 import asyncore import sys # 定义类继承自 asyncore.dispather class scoket_client(asyncore.dispatcher): # 实现类中的回调代码 def __init__(self, host, port): # 调用父类的方法 asyncore.dispatcher.__init__(self) # 创建 Scoket 服务器 self.create_socket() # 连接地址 address = (host, port) self.connect(address) pass # 实现handle_connect回调函数 def handle_connect(self): print(\u0026#34;连接成功\u0026#34;) # 实现writable函数 def writable(self): return False # 实现handle_write回调函数 def handle_write(self): # 内部实现对服务器发送数据代码 # 调用 send 方法发送数据，参数是字节数据 self.send(\u0026#34;hello world\u0026#34;.encode(\u0026#39;utf-8\u0026#39;)) # self.send(\u0026#34;hello world\u0026#34;) # 实现readable回调函数 def readable(self): return True # 实现handle_read回调函数 def handle_read(self): # 主动接收数据 result = self.recv(1024) print(result) # 实现handle_error回调函数 def handle_error(self): # 编写处理错误方法 t, e, trace = sys.exc_info() # 实现handle_close回调函数 def handle_close(self): print(\u0026#34;连接关闭\u0026#34;) self.close() # 创建对象并且执行asyncore.loop 进入循环 if __name__ == \u0026#39;__main__\u0026#39;: client = scoket_client(\u0026#39;127.0.0.1\u0026#39;, 9000) # 开始启动运行循环 asyncore.loop(timeout=5) 斗鱼弹幕实战 文档资料\n斗鱼弹幕服务器第三方接入协议V1.6.2.pdf 官方提供协议文档弹幕 客户端开发流程 连接初始化\n使用TCP连接服务器 IP地址：openbarrage.douyutv.com 端口：8601 客户端向弹幕服务器发送登录请弧，登录弹幕服务器 弹幕服务器收到客户端登录请求并完成登录后，返回登录成功消息给客户端 客户端收到登录成功消息后发送进入弹幕分组请求给弹幕服务器 弹幕服务器接受到客户端弹幕分组请求后将客户端添加到请求指定的弹幕分组中 服务过程\n客户端每隔45秒发送心跳给弹幕服务器，弹幕服务器回复心跳信息给客户端 弹幕服务器如有广播信息，则推送给客户端，服务器消息协议 断开连接\n客户端发送登出消息 客户端关闭TCP连接 数据发送和接收流程 数据包讲解 消息长度：4 字节小端整数，表示整条消息（包括自身）长度（字节数）消息长度出现两遍，二者相同 消息类型：2 字节小端整数，表示消息类型。 取值如下： 689 客户端发送给弹幕服务器的文本格式数据 690 弹幕服务器发送给客户端的文本格式数据。 加密字段：暂时未用，默认为 0。 保留字段：暂时未用，默认为 0。 数据部分：斗鱼独创序列化文本数据，结尾必须为‘\\0’。 详细序列化、反序列化算法见下节。（所有协议内容均为 UTF-8 编码） 数据包的封装 对数据包进行对象化封装，对数据的封装方便以后使用，实现对象和二进制数据之间的转换\n通过参数构建数据包对象 实现获取数据包长度的方法 实现获取二进制数据的方法 实现发送数据包 构建发送数据包的容器 实现回调函数，判断容器中有数据就发送没有数据不发送 实现登录函数 构建登录数据包 把数据包添加到发送数据包容器中 实现接收数据 构建接收数据包队列 读取回调函数中读取数据 读取长度 读取内容 构建数据包对象 把数据包放入接收数据包容器中 构建处理数据包线程 构建线程 实现回调函数处理数据 实现外部传入回调函散 通过外部指定回调函数实现自定义数据处理\n添加参数callback 构造函数中添加参数 外部传入自定义回调函数 在处理接收数据包的线程中调用回调函数 数据内容序列话与反序列化 1 键 key 和值 value 直接采用‘@=’分割 2 数组采用‘/’分割 3 如果 key 或者 value 中含有字符‘/’，则使用‘@S’转义 4 如果 key 或者 value 中含有字符‘@’ ，使用‘@A’转义 举例： 多个键值对数据：key1@=value1/key2@=value2/key3@=value3/ 数组数据：value1/value2/value3/ 不同消息有相同的协议头、序列化方式 加入弹幕分组 ​ 第三方平台建议选择-9999（即海量弹幕模式 )\n心跳机制 作用是让服务器解决假死连接问题，客户端必须每隔45秒发送一次请求，否则就会被主动断开。\n实现发送心跳函数 构建心跳数据包 把数据包添加到发送数据包容器队列中 构建心跳线程 构建心跳线程 添加触发机制 添加暂停机制 ","permalink":"https://luenci.com/en/posts/%E6%96%97%E9%B1%BC%E5%BC%B9%E5%B9%95%E6%8A%93%E5%8F%96/","summary":"\u003ch1 id=\"asyncore模块\"\u003easyncore模块\u003c/h1\u003e\n\u003ch2 id=\"介绍\"\u003e介绍\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个模块为异步socket的服务器客户端通信提供简单的接口。\u003c/p\u003e\n\u003cp\u003e该模块提供了异步socket服务客户端和服务器的基础架构。\u003c/p\u003e\n\u003cp\u003e相比python原生的socket api，asyncore具备有很大的优势，asyncore对原生的socket进行封装，提供非常简洁优秀的接口，利用asyncore覆写相关需要处理的接口方法，就可以完成一个socket的网络编程，从而需要处理复杂的socket网络状况以及多线程处理等等。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"实现流程\"\u003e实现流程\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://i.postimg.cc/VvCFY8Qg/image-20191029171333100.png\" alt=\"image-asynocre\"  /\u003e\n\u003c/p\u003e\n\u003ch1 id=\"客户端-socket-开发基本使用\"\u003e客户端 Socket 开发基本使用\u003c/h1\u003e\n\u003cp\u003e1.定义类继承自\u003ccode\u003easyncore.dispatcher\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e2.实现类中的回调代码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e实现构造函数\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用父类方法\u003c/li\u003e\n\u003cli\u003e创建 \u003ccode\u003eSocket\u003c/code\u003e对象\u003c/li\u003e\n\u003cli\u003e连接服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ehandle_connect\u003c/code\u003e回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当\u003ccode\u003esocket\u003c/code\u003e连接服务器成功时回调该函数\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ewritable\u003c/code\u003e回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e描述是否有数据需要被发送到服务器。返回值为\u003ccode\u003eTrue\u003c/code\u003e表示可写，\u003ccode\u003eFalse\u003c/code\u003e表示不可写，如果不实现默认返回为\u003ccode\u003eTrue\u003c/code\u003e，当返回\u003ccode\u003eTrue\u003c/code\u003e时，回调函数\u003ccode\u003ehandle_write\u003c/code\u003e将被触发\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ehandle_write\u003c/code\u003e 回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当有数据需要发送时（\u003ccode\u003ewritable\u003c/code\u003e回调函数返回\u003ccode\u003eTrue\u003c/code\u003e时），该函数被触发，通常情况下在该函数中编写\u003ccode\u003esend\u003c/code\u003e方法发送数据\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ereadable\u003c/code\u003e回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e描述是否有数据从服务端读取。返回\u003ccode\u003eTrue\u003c/code\u003e 表示有数据需要读取，\u003ccode\u003eFalse\u003c/code\u003e表示没有数据需要被读取，当不实现默认返回为\u003ccode\u003eTrue\u003c/code\u003e，当返回\u003ccode\u003eTrue\u003c/code\u003e 时，回调函数\u003ccode\u003ehandle_read\u003c/code\u003e将被触发\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ehandle_read \u003c/code\u003e回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当有数据需要读取时触发（\u003ccode\u003ereadable\u003c/code\u003e回调函数返回\u003ccode\u003eTrue\u003c/code\u003e\n时），该函数被触发，通常情况下在该函数中编写\u003ccode\u003erecv\u003c/code\u003e方法接收数据\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ehandle_error\u003c/code\u003e回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当程序运行过程发生异常时回调\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e实现\u003ccode\u003ehandle_close\u003c/code\u003e回调函数\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当连接被关闭时触发\u003c/p\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e3.创建对象并且执行\u003ccode\u003easyncore.loop\u003c/code\u003e进入运行循环\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etimeout\u003c/code\u003e表示一次循环所需要的时长\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e64\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003easyncore\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003esys\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 定义类继承自 asyncore.dispather\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003escoket_client\u003c/span\u003e(asyncore\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003edispatcher):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现类中的回调代码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e __init__(self, host, port):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 调用父类的方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        asyncore\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003edispatcher\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__init__(self)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 创建 Scoket 服务器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ecreate_socket()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 连接地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        address \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e (host, port)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003econnect(address)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现handle_connect回调函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehandle_connect\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;连接成功\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现writable函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ewritable\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eFalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现handle_write回调函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehandle_write\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 内部实现对服务器发送数据代码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 调用 send 方法发送数据，参数是字节数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esend(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eencode(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# self.send(\u0026#34;hello world\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现readable回调函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ereadable\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现handle_read回调函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehandle_read\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 主动接收数据\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        result \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003erecv(\u003cspan style=\"color:#a5d6ff\"\u003e1024\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现handle_error回调函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehandle_error\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 编写处理错误方法\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        t, e, trace \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e sys\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eexc_info()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 实现handle_close回调函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ehandle_close\u003c/span\u003e(self):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;连接关闭\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eclose()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 创建对象并且执行asyncore.loop 进入循环\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    client \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e scoket_client(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;127.0.0.1\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e9000\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 开始启动运行循环\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    asyncore\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eloop(timeout\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"socket网络编程实战-斗鱼弹幕获取"},{"content":"原文链接：https://blog.csdn.net/u010520146/article/details/81161762\n一.创建索引 1.要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引 2.1在经常需要进行检索的字段上创建索引，比如要按照表字段username进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。 2.2创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。 2.3一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。 二.避免在索引上使用计算 在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数 属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。 效率低： select * from user where salary*22 \u0026gt; 11000 (salary是索引列)\n效率高： select * from user where salary \u0026gt; 11000/22 (salary是索引列)\n三.使用预编译查询 程序中通常是根据用户的输入来动态执行SQL，这时应该尽量使用参数化SQL,这样不仅可以避免SQL注入漏洞 攻击，最重要数据库会对这些参数化SQL进行预编译，这样第一次执行的时候DBMS会为这个SQL语句进行查询优化并且执行预编译，这样以后再执行这个SQL的时候就直接使用预编译的结果，这样可以大大提高执行的速度。 四.调整Where字句中的连接顺序 DBMS一般采用自下而上的顺序解析where字句，根据这个原理表连接最好写在其他where条件之前，那些可以过滤掉最大数量记录。 五.尽量将多条SQL语句压缩到一句SQL中 每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程 是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行。 六.用where子句替换HAVING字句 避免使用HAVING字句，因为HAVING只会在检索出所有记录之后才对结果集进行过滤，而where则是在聚合前 刷选记录，如果能通过where字句限制记录的数目，那就能减少这方面的开销。HAVING中的条件一般用于聚合函数 的过滤，除此之外，应该将条件写在where字句中。 七.使用表的别名 当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减 少哪些友列名歧义引起的语法错误。 八.用union all替换union 当SQL语句需要union两个查询结果集合时，即使检索结果中不会有重复的记录，如果使用union这两个结果集同样会尝试进行合并，然后在输出最终结果前进行排序，因此如果可以判断检索结果中不会有重复的记录时候，应该用union all，这样效率就会因此得到提高。 九.考虑使用“临时表”暂存中间结果 简化SQL语句的重要方法就是采用临时表暂存中间结果，但是，临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。但是也得避免频繁创建和删除临时表，以减少系统表资源的消耗。 十.只在必要的情况下才使用事务begin translation SQL Server中一句SQL语句默认就是一个事务，在该语句执行完成后也是默认commit的。其实，这就是begin tran的一个最小化的形式，好比在每句语句开头隐含了一个begin tran，结束时隐含了一个commit。 有些情况下，我们需要显式声明begin tran，比如做“插、删、改”操作需要同时修改几个表，要求要么几个表都修改成功，要么都不成功。begin tran 可以起到这样的作用，它可以把若干SQL语句套在一起执行，最后再一起commit。 好处是保证了数据的一致性，但任何事情都不是完美无缺的。Begin tran付出的代价是在提交之前，所有SQL语句锁住的资源都不能释放，直到commit掉。 可见，如果Begin tran套住的SQL语句太多，那数据库的性能就糟糕了。在该大事务提交之前，必然会阻塞别的语句，造成block很多。 Begin tran使用的原则是，在保证数据一致性的前提下，begin tran 套住的SQL语句越少越好！有些情况下可以采用触发器同步数据，不一定要用begin tran。 十一.尽量避免使用游标 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 十二.用varchar/nvarchar 代替 char/nchar 尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。 十三.查询select语句优化 1.任何地方都不要使用 select * from T ，用具体的字段列表代替“*”，不要返回用不到的任何字段 2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描， 如： 1 select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null值， 然后这样查询： 1 2 select id from t where num=0 select id from t where num=10 or num=20 可以这样查询： 1 2 3 select id from t where num=10 union all select id from t where num=20 4.不能前置百分\n1 select id from t where name like ‘%abc%’ 若要提高效率，可以考虑全文检索。\nselect id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3 6.如果查询的两个表大小相当，那么用in和exists差别不大。 in： 例如：表A（小表），表B（大表）\n1 2 select * from A where cc in (select cc from B) 效率低，用到了A表上cc列的索引； select * from A where exists(select cc from B where cc=A.cc) 效率高，用到了B表上cc列的索引。 相反的\n1 2 select * from B where cc in (select cc from A) 效率高，用到了B表上cc列的索引； select * from B where exists(select cc from A where cc=B.cc) 效率低，用到了A表上cc列的索引。 十四.更新Update语句优化 1.如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志 十五. 删除Delete语句优化语句 1.最高效的删除重复记录方法 ( 因为使用了ROWID)例子：\n1 DELETE FROM EMP E WHERE E.ROWID \u0026gt; (SELECT MIN(X.ROWID) FROM EMP X WHERE X.EMP_NO = E.EMP_NO); 十六.插入Insert语句优化 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量log，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。 ","permalink":"https://luenci.com/en/posts/sql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003e原文链接：https://blog.csdn.net/u010520146/article/details/81161762\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003ch1 id=\"一创建索引\"\u003e一.创建索引\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e1.要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引\u003c/li\u003e\n\u003cli\u003e2.1在经常需要进行检索的字段上创建索引，比如要按照表字段\u003ccode\u003eusername\u003c/code\u003e进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。\u003c/li\u003e\n\u003cli\u003e2.2创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。\u003c/li\u003e\n\u003cli\u003e2.3一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"二避免在索引上使用计算\"\u003e二.避免在索引上使用计算\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数\n属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。\u003c/li\u003e\n\u003cli\u003e效率低：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e select * from user where salary*22 \u0026gt; 11000 (salary是索引列)\u003c/code\u003e\u003c/p\u003e","title":"SQL性能调优"},{"content":"Vue.js概念 Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App，Vue语法也是可以用于进行手机App开发的，需要借助于Weex） Vue.js 是前端的主流框架之一，和Angularjs、Reactjs一起，并成为前端三大主流框架！· Vue.js 是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发） 框架和库的区别 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。 后端中的MVC与前端中的MVVM之间的区别 MVC是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于视图层分离，也就是说：MVVM把前端的视图层，分为了三部分Model，View，VM ,ViewModel vue.js基本架构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!-- 导入Vue的包 --\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 将来new的实例，会控制这个元素中的所有内容 --\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ msg }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 创建一个vue的实例 // 当我们导入包之后，在浏览器的内存中，就多了一个vue构造函数 var vm = new Vue({ el: \u0026#39;#app\u0026#39;, //表示，当前我们new的这个vue实例，要控制页面上的哪个区域 data: { // data属性中存放的是 el 中要用到的内容 msg: \u0026#39;欢迎学习Vue\u0026#39; //通过vue提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 基本事件语法 \u0026lt;！--1.如何定义一个基本的vue代码结构--\u0026gt; \u0026lt;！--2.插值表达式和 v-text--\u0026gt; \u0026lt;!--3.v-cloak--\u0026gt; \u0026lt;!--4.v-html--\u0026gt; \u0026lt;！--5.v-bind vue提供的属性绑定机制缩写是 : --\u0026gt; \u0026lt;l--6.v-on vue提供的事件绑定机制缩写是 @ --\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; [v-cloak]{ display: none; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- v-cloak能够解决 插值表达式闪烁的问题 --\u0026gt; \u0026lt;p v-cloak\u0026gt;++++++ {{ msg }} ----------\u0026lt;/p\u0026gt; \u0026lt;!-- 默认v-text没有闪烁问题 --\u0026gt; \u0026lt;h1 v-text=\u0026#34;msg\u0026#34;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;!--v-text会覆盖元素中原本的内容，但是插值表达式只会替换自己的这个占位符，不会把整个元素的内容清空--\u0026gt;I \u0026lt;div\u0026gt; {{msg2}} \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p v-text=\u0026#34;msg2\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div v-html=\u0026#34;msg2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- v-bind: 是vue中，提供用于绑定属性的指令 --\u0026gt; \u0026lt;!-- v-bind 也可以简写为 :要绑定的属性 --\u0026gt; \u0026lt;!-- v-bind 中可以写合法的js表达式 --\u0026gt; \u0026lt;!-- Vue中提供了 v-on: 事件绑定机制 --\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;按钮\u0026#34; :title=\u0026#34;myTitle\u0026#34; v-on:click = \u0026#34;alter(\u0026#39;Hello\u0026#39;)\u0026#34;\u0026gt; --\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;按钮\u0026#34; @click=\u0026#34;show\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { msg: \u0026#39;123\u0026#39;, msg2: \u0026#39;\u0026lt;h2\u0026gt;Luenci\u0026lt;/h2\u0026gt;\u0026#39;, myTitle: \u0026#39;自定义标题\u0026#39; }, methods: { show: function(){ alert(\u0026#39;Hello\u0026#39;) } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vue指令之事件修饰符 事件修饰符\n.sweight 阻止冒泡 .prevent 阻止默认事件 .capture 添加事件侦听器时使用事件捕获模式 .self只当事件在该元素本身（比如不是子元素）触发时触发回调 .once事件只触发一次 Vue指令之v-model和双向数据绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .btn{ width:100%} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;{{ msg }}\u0026lt;/h4\u0026gt; \u0026lt;!--v-bind只能实现数据的单向绑定，从M自动绑定到V，无法实现数据的双向绑定--\u0026gt; \u0026lt;!--\u0026lt;input type=\u0026#34;text\u0026#34; v-bind:value=\u0026#34;msg\u0026#34; style=\u0026#34;width：100%；\u0026#34;\u0026gt;--\u0026gt; \u0026lt;!--使用v-mode1指令，可以实现表单元素和 Model 中数据的双向数据绑定--\u0026gt; \u0026lt;!--注意：v-mode1只能运用在表单元素中--\u0026gt; \u0026lt;!--input（radio，text，address，email....）select checkbox textarea--\u0026gt; \u0026lt;input class=\u0026#34;btn\u0026#34; type=\u0026#34;text\u0026#34; v-model=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el:\u0026#39;#app\u0026#39;, data: { msg:\u0026#39;hello Vue.js\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vue中使用样式 使用class样式 1.数组\n\u0026lt;h1 :class=\u0026quot;['red','thin']\u0026quot;\u0026gt;这是一个H1\u0026lt;/h1\u0026gt;\n2.数组中使用三元表达 \u0026lt;h1 :class=\u0026quot;['red','thin',is active?'active':'']\u0026quot;\u0026gt;这是一个H1\u0026lt;/h1\u0026gt;\n3.数组中嵌套对象 \u0026lt;h1 :class=\u0026quot;['red','thin', {'active':isactive}]\u0026quot;\u0026gt;这是一个H1\u0026lt;/h1\u0026gt;\n4.直接使用对象 \u0026lt;h1 :class=\u0026quot;{red:true, italic:true, active:true，thin:true}\u0026quot;\u0026gt;这是一个H1\u0026lt;/h1\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Luenci\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .red{ color: red; } .thin{ font-weight: 200; } .italic{ font-style: italic; } .active{ letter-spacing: 0.5em; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;h1 class=\u0026#34;red\u0026#34;\u0026gt;这是一个很大很大的H1\u0026lt;/h1\u0026gt; --\u0026gt; \u0026lt;!--第一种使用方式，直接传递一个数组，注意：这里的class需要使用 v-bind 做数据绑定--\u0026gt; \u0026lt;h1 :class=\u0026#34;[\u0026#39;thin\u0026#39;, \u0026#39;active\u0026#39;]\u0026#34;\u0026gt;这是一个很大很大的H1\u0026lt;/h1\u0026gt; \u0026lt;!-- 数组中使用三元表达式 --\u0026gt; \u0026lt;h1 :class=\u0026#34;[\u0026#39;thin\u0026#39;, \u0026#39;active\u0026#39;, falg ? \u0026#39;red\u0026#39;:\u0026#39;italic\u0026#39;]\u0026#34;\u0026gt;这是一个很大很大的H1\u0026lt;/h1\u0026gt; \u0026lt;!-- 数组中嵌套对象 --\u0026gt; \u0026lt;h1 :class=\u0026#34;[\u0026#39;thin\u0026#39;, \u0026#39;active\u0026#39;, {\u0026#39;red\u0026#39;:falg}]\u0026#34;\u0026gt;这是一个很大很大的H1\u0026lt;/h1\u0026gt; \u0026lt;!-- 直接使用对象 --\u0026gt; \u0026lt;h1 :class=\u0026#34;{\u0026#39;thin\u0026#39;: true, \u0026#39;active\u0026#39;: true, \u0026#39;italic\u0026#39;: false}\u0026#34;\u0026gt;这是一个很大很大的H1\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data:{ falg: true }, methods:{} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用内联样式 1.直接在元素上通过style的形式，书写样式对象\n\u0026lt;h1 :style=\u0026quot;{color:‘red'，'font-size'：'40px'}\u0026quot;\u0026gt;这是一个善良的H1\u0026lt;/hl\u0026gt; 2.将样式对象，定义到data中，并直接引用到:style中\n在data上定义样式：\n1 2 3 data:{ histyObj:{color:\u0026#39;red\u0026#39;，\u0026#39;font-size\u0026#39;：\u0026#39;40px\u0026#39;，\u0026#39;font-weight\u0026#39;：200\u0026#39; } 在元素中，通过属性绑定的形式，将样式对象应用到元素中： \u0026lt;h1 :style=\u0026quot;histyObj\u0026quot;\u0026gt;这是一个h1\u0026lt;/h1\u0026gt;\n3.在:style中通过数组，引用多个data上的样式对象\n在data上定义样式：\n1 2 3 data:{ histy0bj:{color:\u0026#39;red\u0026#39;，\u0026#39;font-size\u0026#39;：‘40px\u0026#39;，‘font-weight\u0026#34;：\u0026#39;200\u0026#39;},\thisty0bj2:{fontstyle:\u0026#39;italic\u0026#39;} 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n\u0026lt;h1 :style=\u0026quot;[histy0bj，histy0bj2]\u0026quot;\u0026gt;这是一个h1\u0026lt;/h1\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 直接在元素上通过`style`的形式，书写样式对象 --\u0026gt; \u0026lt;h1 :style=\u0026#34;{color:\u0026#39;red\u0026#39;, \u0026#39;font-weight\u0026#39;:200}\u0026#34;\u0026gt;我是一个标题\u0026lt;/h1\u0026gt; \u0026lt;!-- 2.将样式对象，定义到`data`中，并直接引用到`:style`中 --\u0026gt; \u0026lt;h1 :style=\u0026#34;styleObj\u0026#34;\u0026gt;我是一个标题\u0026lt;/h1\u0026gt; \u0026lt;!-- 3.在`:style`中通过数组，引用多个`data`上的样式对象 --\u0026gt; \u0026lt;h1 :style=\u0026#34;[styleObj, styleObj2]\u0026#34;\u0026gt;我是一个标题\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { styleObj: { color: \u0026#39;red\u0026#39;, \u0026#39;font-weight\u0026#39;: 200 }, styleObj2: { \u0026#39;font-style\u0026#39;: \u0026#39;italic\u0026#39; } }, methods: {} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\tVue指令之v-for和key属性 1.迭代数组 1 \u0026lt;1i v-for=\u0026#34;（item，i）in list\u0026#34;\u0026gt;索引：{{i}}---姓名：{{item.name}}---年龄：{{item.age}}\u0026lt;/li\u0026gt; 2.迭代对象中的属性 1 2 \u0026lt;4--循环遍历对象身上的属性--\u0026gt; \u0026lt;div v-for=\u0026#34;（val，key，i）in userInfo\u0026#34;\u0026gt;{{val}}---{{key}}---{{i]}\u0026lt;/div\u0026gt; 3.迭代数字 \u0026lt;p v-for=\u0026quot;ks in 8\u0026quot;\u0026gt;这是第（{i}}个P标签\u0026lt;/p\u0026gt;\n22.0+的版本里，当在细件中使用v-for时，key现在是必须的。\n当Vue.js 用v-for正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定素引下显示已被渲染过的每个元素。 为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一key 属性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 循环普通数组 --\u0026gt; \u0026lt;p v-for=\u0026#34;(item,i) in list\u0026#34;\u0026gt;索引值:{{i}}-----数值:{{item}}\u0026lt;/p\u0026gt; \u0026lt;!-- 循环对象数组 --\u0026gt; \u0026lt;p v-for=\u0026#34;(user,i) in list2\u0026#34;\u0026gt;{{user.id}}===={{user.name}}------{{i}}\u0026lt;/p\u0026gt; \u0026lt;!-- 循环对象 --\u0026gt; \u0026lt;p v-for=\u0026#34;(value, key, i) in list3\u0026#34;\u0026gt;{{i}}-------{{key}}----{{value}}\u0026lt;/p\u0026gt; \u0026lt;!-- 循环数字 --\u0026gt; \u0026lt;p v-for=\u0026#34;count in 6\u0026#34;\u0026gt;第{{count}}循环\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [1, 2, 3, 4], list2: [ { id: 1, name: \u0026#39;Luenci\u0026#39; }, { id: 2, name: \u0026#39;Lynn\u0026#39; }, { id: 3, name: \u0026#39;lucy\u0026#39; }, { id: 4, name: \u0026#39;ll\u0026#39; }, ], list3: { user: \u0026#39;Luenci\u0026#39;, age: 20, sex: \u0026#39;男\u0026#39;, } }, methods: {} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vue指令之v-if和v-show 一般来说，v-if 有更高的切换消精而 v-show 有更高的初始渲染消耗。 如果需要频繁切换v-show较好 如果元素可能永远也不会被显示出来被用户看到，则推荐使用v-if 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0,minimal-ui:ios\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;点击\u0026#34; @click=\u0026#34;flag=!flag\u0026#34;\u0026gt; \u0026lt;!-- v-if的特点：每次都会重新删除或创建元素 --\u0026gt; \u0026lt;!-- v-show的特点：每次不会重新进行DoM的删除和创建操作，只是切换了元素的 display:none 样式 --\u0026gt; \u0026lt;!-- v-if有较高的切换性能消耗 --\u0026gt; \u0026lt;!-- v-show 有较高的初始渲染消耗 --\u0026gt; \u0026lt;!-- 如果元素涉及到频繁的切换，最好不要使用v-if --\u0026gt; \u0026lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用v-if --\u0026gt; \u0026lt;h1 v-if=\u0026#34;flag\u0026#34;\u0026gt;这是v-if控制的元素\u0026lt;/h1\u0026gt; \u0026lt;h1 v-show=\u0026#34;flag\u0026#34;\u0026gt;这是v-show控制的元素\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { flag: true }, methods: {} }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 过滤器 概念：Vue.js允许你自定义过滤器，可被用作一些嚣见的文本格式化。 过滤器可以用在两个地方：mustache插值和v-bind 表达式。过滤器应该被添加在JavaScript表达式的尾部，由“管道”符指示 全局过滤器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Vue.filter(\u0026#39;time\u0026#39;, function (Ctime, pattern = \u0026#39;\u0026#39;) { var dt = new Date(Ctime) var y = dt.getFullYear() var m = dt.getMonth() + 1 var d = dt.getDate() // return y + \u0026#39;--\u0026#39; + m + \u0026#39;--\u0026#39; + d if (pattern.toLowerCase() === \u0026#39;yyyy-mm-dd\u0026#39;) { return `${y}-${m}-${d}` } else { var hh = dt.getHours() var mm = dt.getMinutes() var ss = dt.getSeconds() return `${y}-${m}-${d} ${hh}:${mm}:${ss}` } }); 局部过滤器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 var vm2 = new Vue({ el: \u0026#39;#app2\u0026#39;, data: [ dt = new Date(), ], methods: {}, filters: { // 定义私有过滤器过滤器有两个条件【过滤器名称和处理函数】 // 过滤器调用的时候，采用的是`就近原则`， //如果私有过滤器和全局过滤器名称一致了，这时候优先调用私有过滤器 deteFormat: function (dateStr, pattern = \u0026#39;\u0026#39;) { var dt = new Date(Ctime) var y = dt.getFullYear() var m = dt.getMonth() + 1 var d = dt.getDate() // return y + \u0026#39;--\u0026#39; + m + \u0026#39;--\u0026#39; + d if (pattern.toLowerCase() === \u0026#39;yyyy-mm-dd\u0026#39;) { return `${y}-${m}-${d}` } else { var hh = dt.getHours() var mm = dt.getMinutes() var ss = dt.getSeconds() return `${y}-${m}-${d} ${hh}:${mm}:${ss}` } } } }) ES6中的字符串新方法 String，prototype，padStart(maxlength，fillString=''）或 String，prototype，padEnd(maxlength，filString=''）来填充字符串；\nVue指令 钩子函数 指令提供了几个钩子函数\nbind：只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。 inserted：被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于document中）。 update：所在组件的VNode更新时调用，但是可能发生在其孩子的VNode更新之前。指令的值可能发生了改变也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新（详细的钩子函数参数见下）。 componentUpdated：所在组件的VNode 及其孩子的VNode全部更新时调用。 unbind：只调用一次，指令与元素解绑时调用。 接下来我们来看一下钩子函数的参数（包括el，binding，vnode，oldVnode） 钩子函数参数 指令钩子函数会被传入以下参数：\nel：指令所绑定的元素，可以用来直接操作 DOM 。 binding：一个对象，包含以下属性： name：指令名，不包括 v- 前缀。 value：指令的绑定值，例如：v-my-directive=\u0026quot;1 + 1\u0026quot; 中，绑定值为 2。 oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。 expression：字符串形式的指令表达式。例如 v-my-directive=\u0026quot;1 + 1\u0026quot; 中，表达式为 \u0026quot;1 + 1\u0026quot;。 arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \u0026quot;foo\u0026quot;。 modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。 vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。 oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。 除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。\nVue实例的生命周期 仕么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期\n生命周期钩子 = 生命周期函数 = 生命周期事件：就是生命周期事件的别名而已；\n主要的生命周期函数分类：\n创建期间的生命周期函数： beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好data和methods属性 created：实例已经在内存中创建OK，此时data和methods已经创建OK，此时还没有开始编译模板 beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中 mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示 运行期间的生命周期函数： beforeUpdate：状态更新之前执行此函数，此时data中的状态值是最新的，但是界面上显示的数据还是旧的，因为此时还没有开始重新渲染DOM节点 updated：实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！ 销般期间的生命周期函数： abeforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。 destroyed:Vue 实例销毁后调用。调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;../lib/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;{{ msg }}\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var vm = new Vue({ el: \u0026#39;#app\u0026#39;, data: { msg:\u0026#39;ok\u0026#39; }, methods: { show(){ console.log(\u0026#34;执行了show方法\u0026#34;) } }, beforeCreate() { // 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它 // console.log（this.msg） // this.show（） // 注意：在beforecreate生命周期函数执行的时候，data和methods中的数据都还没有没初始化 }, created() { //这是遇到的第二个生命周期函数 // console.log（this.msg） // this.show（） // 在created中，data和methdas都已经被初始化好了！ }, beforeMount() { //这是遇到的第3个生命周期函数，表示模板已经在内存中编辑完成了，但是尚未把模板渲染到页面中 //console.1og（document.getElementById（\u0026#39;h31）.innerText） //在beforeMount执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串 }, mounted() { //这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了 console.log(document.getElementById((\u0026#34;h3\u0026#34;).innerText)) //注意：mounted是实例创建期间的最后一个生命周期函数，当执行完mounted就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的躺在我们的内存中，一动不动 } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"https://luenci.com/en/posts/vue%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"vuejs概念\"\u003e\u003ccode\u003eVue.js\u003c/code\u003e概念\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVue.js \u003c/code\u003e是目前最火的一个前端框架，\u003ccode\u003eReact\u003c/code\u003e是最流行的一个前端框架（React除了开发网站，还可以开发手机\u003ccode\u003eApp\u003c/code\u003e，\u003ccode\u003eVue\u003c/code\u003e语法也是可以用于进行手机\u003ccode\u003eApp\u003c/code\u003e开发的，需要借助于\u003ccode\u003eWeex\u003c/code\u003e）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVue.js\u003c/code\u003e 是前端的主流框架之一，和\u003ccode\u003eAngularjs\u003c/code\u003e、\u003ccode\u003eReactjs\u003c/code\u003e一起，并成为前端三大主流框架！·\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVue.js\u003c/code\u003e 是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。（\u003ccode\u003eVue\u003c/code\u003e有配套的第三方类库，可以整合起来做大型项目的开发）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"框架和库的区别\"\u003e框架和库的区别\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。\u003c/li\u003e\n\u003cli\u003e库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"后端中的mvc与前端中的mvvm之间的区别\"\u003e后端中的\u003ccode\u003eMVC\u003c/code\u003e与前端中的\u003ccode\u003eMVVM\u003c/code\u003e之间的区别\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMVC\u003c/code\u003e是后端的分层开发概念；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMVVM\u003c/code\u003e是前端视图层的概念，主要关注于视图层分离，也就是说：\u003ccode\u003eMVVM\u003c/code\u003e把前端的视图层，分为了三部分\u003ccode\u003eModel\u003c/code\u003e，\u003ccode\u003eView\u003c/code\u003e，\u003ccode\u003eVM\u003c/code\u003e ,\u003ccode\u003eViewModel\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://upload.cc/i1/2019/12/25/XTm4Gf.png\" alt=\"image-20191225111448702\"  /\u003e\n\u003c/p\u003e","title":"Vue.js的基本知识"},{"content":" 原文链接：https://blog.csdn.net/flowerspring/article/details/104962002\n清除 git 的全局设置（针对已安装 git） 新安装 git 跳过。\n若之前对 git 设置过全局的 user.name 和 user.email。 类似 (用 git config \u0026ndash;global \u0026ndash;list 进行查看你是否设置)\n1 2 $ git config --global user.name \u0026#34;你的名字\u0026#34; $ git config --global user.email \u0026#34;你的邮箱\u0026#34; 必须删除该设置\n1 2 $ git config --global --unset user.name \u0026#34;你的名字\u0026#34; $ git config --global --unset user.email \u0026#34;你的邮箱\u0026#34; 生成新的 SSH keys 1）Gitee 密钥 跳转到keygen目录，git bash here。\n先键入第二行命令\n第四行 指定 id 文件名称为id_rsa_gitee\n第五、六行 设置无密码，直接回车两次。\n会在keygen目录下生成文件 id_rsa_gitee 和 id_rsa_gitee.pub。\nid_rsa_gitee.pub中存放的是公钥。\n把公钥保存到gitee网页密钥中。\n1 2 3 4 5 6 7 8 9 10 11 12 honey@honey MINGW64 /d/keygen $ ssh-keygen -t rsa -C yourmail@.com Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/honey/.ssh/id_rsa): id_rsa_gitee Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in id_rsa_gitee. Your public key has been saved in id_rsa_gitee.pub. The key fingerprint is: ... The key\u0026#39;s randomart image is: ... 也可指定文件路径，方便后面操作：~/.ssh/id_rsa.gitlab ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C \u0026quot;yourmail@.com\u0026quot;\n直接回车3下，什么也不要输入，就是默认没有密码。 注意 gitee 和 gitlab 的文件名是不同的。 2）GitLab 密钥 同上\n跳转到keygen目录，git bash here。\n先键入第二行命令\n第四行 指定 id 文件名称为id_rsa_gitlab\n第五、六行 设置无密码，直接回车两次。\n会在keygen目录下生成文件 id_rsa_gitlab 和 id_rsa_gitlab.pub。\nid_rsa_gitlab.pub中存放的是公钥。\n把公钥保存到gitlab网页密钥中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 honey@honey MINGW64 /d/keygen $ ssh-keygen -t rsa -f id_rsa_gitlab -C \u0026#34;yourmail@.com\u0026#34;` Generating public/private rsa key pair. id_rsa_gitlab already exists. Overwrite (y/n)? y Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in id_rsa_gitlab. Your public key has been saved in id_rsa_gitlab.pub. The key fingerprint is: ... The key\u0026#39;s randomart image is: ... ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitlab -C \u0026quot;yourmail@.com\u0026quot;\n3）GitHub 密钥 同上\nssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C \u0026quot;yourmail@.com\u0026quot;\n4)完成后会在~/.ssh目录下生成以下文件 id_rsa_github\nid_rsa_github.pub\nid_rsa_gitlab\nid_rsa_gitlab.pub\nid_rsa_gitee\nid_rsa_gitee.pub\nconfig文件 需要在.ssh文件夹下新建config文件，先新建config.txt，然后修改文件名去掉后缀。\nconfig文件内容如下：\n其中第二行和第三中 需要填写gitlab的仓库地址\ngitlab Host git.xxx.cn HostName git.xxx.cn PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_gitlab User git gitee Host gitee.com HostName gitee.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_gitee User git github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_github User git 测试 1）Gitee 测试\n$ ssh -T git@gitee.com 步骤如下：\n在gitee注册用户登录，创建仓库。https://gitee.com/XXXX/c_demo\n在.ssh目录 git bash here\nhoney@honey MINGW64 ~/.ssh $ ssh -T git@gitee.com Warning: Permanently added the ECDSA host key for IP address \u0026lsquo;180.97.125.228\u0026rsquo; to the list of known hosts. Hi fengmi! You\u0026rsquo;ve successfully authenticated, but GITEE.COM does not provide shell access. 显示successfully。\n2）GitLab 测试 git@git.XXX.cn 是gitlab的仓库地址\n$ ssh -T git@git.XXX.cn 步骤如下：\n跳转到.ssh目录，git bash here。\nhoney@honey MINGW64 ~/.ssh $ ssh -T git@git.XXX.cn The authenticity of host \u0026lsquo;git.XXX.cn (111.203.245.108)\u0026rsquo; can\u0026rsquo;t be established. ECDSA key fingerprint is \u0026hellip;. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026lsquo;git.emapgo.cn,111.203.245.108\u0026rsquo; (ECDSA) to the list of known hosts. Welcome to GitLab, @mygitlabhostname! 显示welcome to gitlab。\n3）Github 测试 同gitee\n4)~/.ssh / 目录下最终拥有如下文件 windows .ssh目录 是 C:\\Users\\honey.ssh 即C:\\Users\\windows登录名.ssh\nid_rsa_github id_rsa_github.pub id_rsa_gitlab id_rsa_gitlab.pub id_rsa_gitee id_rsa_gitee.pub config known_hosts\n查看电脑中自己的配置信息 $ cat config honey@honey MINGW64 ~/.ssh $ cat config 使用 1）Gitlab 在本地以后gitlab仓库，git pull ,git commit -m \u0026ldquo;XXX\u0026rdquo;,git push 会提示 tell me who you are\n此时需要填写local 用户名和邮箱，而不是 \u0026ndash;global\n$ ssh git config \u0026ndash;local user.name \u0026ldquo;你的名字\u0026rdquo; $ ssh git config \u0026ndash;local user.email \u0026ldquo;你的邮箱\u0026rdquo;\n2）Gitee 同上类似\n3）Github 同上类似\n配置文件和配置字段信息解释 Host 它涵盖了下面一个段的配置，我们可以通过他来替代将要连接的服务器地址。 这里可以使用任意字段或通配符。 当ssh的时候如果服务器地址能匹配上这里Host指定的值，则Host下面指定的HostName将被作为最终的服务器地址使用，并且将使用该Host字段下面配置的所有自定义配置来覆盖默认的/etc/ssh/ssh_config配置信息。\nPort 自定义的端口。默认为22，可不配置\nUser 自定义的用户名，默认为git，可不配置 ， User git #默认就是git，可以不写\nHostName 真正连接的服务器地址\nPreferredAuthentications 指定优先使用哪种方式验证，支持密码和秘钥验证方式\nIdentityFile 指定本次连接使用的密钥文件\n","permalink":"https://luenci.com/en/posts/windows-%E9%85%8D%E7%BD%AE%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8-gitlabgithubgitee%E7%A0%81%E4%BA%91-%E5%85%B1%E5%AD%98%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","summary":"\u003cblockquote\u003e\n\u003cp\u003e原文链接：https://blog.csdn.net/flowerspring/article/details/104962002\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"清除-git-的全局设置针对已安装-git\"\u003e清除 git 的全局设置（针对已安装 git）\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e新安装 git 跳过。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若之前对 git 设置过全局的 user.name 和 user.email。\n类似 (用 git config \u0026ndash;global \u0026ndash;list 进行查看你是否设置)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ git config --global user.name \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;你的名字\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ git config --global user.email  \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;你的邮箱\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e必须删除该设置\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ git config --global --unset user.name \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;你的名字\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ git config --global --unset user.email \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;你的邮箱\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"生成新的-ssh-keys\"\u003e生成新的 SSH keys\u003c/h1\u003e\n\u003ch2 id=\"1gitee-密钥\"\u003e1）Gitee 密钥\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e跳转到keygen目录，git bash here。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e先键入第二行命令\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e第四行 指定 id 文件名称为id_rsa_gitee\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e第五、六行 设置无密码，直接回车两次。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e会在keygen目录下生成文件  id_rsa_gitee 和 id_rsa_gitee.pub。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eid_rsa_gitee.pub中存放的是公钥。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e把公钥保存到gitee网页密钥中。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehoney@honey MINGW64 /d/keygen\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ssh-keygen -t rsa -C yourmail@.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGenerating public/private rsa key pair.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEnter file in which to save the key \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003e/c/Users/honey/.ssh/id_rsa\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e: id_rsa_gitee\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEnter passphrase \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e(\u003c/span\u003eempty \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e no passphrase\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e)\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEnter same passphrase again:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eYour identification has been saved in id_rsa_gitee.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eYour public key has been saved in id_rsa_gitee.pub.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe key fingerprint is:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe key\u003cspan style=\"color:#f85149\"\u003e\u0026#39;\u003c/span\u003es randomart image is:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e也可指定文件路径，方便后面操作：\u003ccode\u003e~/.ssh/id_rsa.gitlab \u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003essh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C \u0026quot;yourmail@.com\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e直接回车3下，什么也不要输入，就是默认没有密码。\u003c/li\u003e\n\u003cli\u003e注意 gitee 和 gitlab 的文件名是不同的。\u003c/li\u003e\n\u003c/ul\u003e","title":"windows 配置同时使用 Gitlab、Github、Gitee(码云) 共存的开发环境（转载）"},{"content":"sys模块 模块方法 解释说明 sys.argv 传递到Python脚本的命令行参数列表，第一个元素是程序本身路径 sys.executable 返回Python解释器在当前系统中的绝对路径 sys.exit(arg) 程序中间的退出，arg=0为正常退出 sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 sys.platform 返回操作系统平台名称，Linux是linux2，Windows是win32 sys.stdout.write(str) 输出的时候把换行符\\n去掉 val = sys.stdin.readline()[:-1] 拿到的值去掉\\n换行符 sys.version 获取Python解释程序的版本信息 os模块 方法 说明 os.mkdir() 创建目录 os.rmdir() 删除目录 os.rename() 重命名 os.remove() 删除文件 os.getcwd() 获取当前工作路径 os.walk() 遍历目录 os.path.join() 连接目录与文件名 os.path.split() 分割文件名与目录 os.path.abspath() 获取绝对路径 os.path.dirname() 获取路径 os.path.basename() 获取文件名或文件夹名 os.path.splitext() 分离文件名与扩展名 os.path.isfile() 判断给出的路径是否是一个文件 os.path.isdir() 判断给出的路径是否是一个目录 json模块 JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。\n数据格式可以简单地理解为键值对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。\n值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。\n1 import json Pyhton的json模块提供了把内存中的对象序列化的方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import json # 序列化数据 # f = open(\u0026#39;JsonDemo.txt\u0026#39;, \u0026#39;a\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) # dic = {\u0026#39;name\u0026#39;: \u0026#39;luenci\u0026#39;} # tmp = json.dumps(dic) # f.write(tmp) # f.close() # 反序列化数据 f = open(\u0026#39;JsonDemo.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) res = json.loads(f.read()) print(res) print(type(res)) # out # {\u0026#39;name\u0026#39;: \u0026#39;luenci\u0026#39;} # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; json.dumps dump的功能就是把Python对象encode为json对象，一个编码过程。注意json模块提供了json.dumps和json.dump方法，区别是dump直接到文件，而dumps到一个字符串，这里的s可以理解为string。\n1 2 3 4 5 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ] print \u0026#39;DATA:\u0026#39;, repr(data) data_string = json.dumps(data) print \u0026#39;JSON:\u0026#39;, data_string 1 2 DATA: [{\u0026#39;a\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;c\u0026#39;: 3.0, \u0026#39;b\u0026#39;: (2, 4)}] JSON: [{\u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;c\u0026#34;: 3.0, \u0026#34;b\u0026#34;: [2, 4]}] 查看其类型，发现是string对象。\n1 2 print type(data) print type(data_string) 1 2 \u0026lt;type \u0026#39;list\u0026#39;\u0026gt; \u0026lt;type \u0026#39;str\u0026#39;\u0026gt; json.dump 不仅可以把Python对象编码为string，还可以写入文件。因为我们不能把Python对象直接写入文件，这样会报错TypeError: expected a string or other character buffer object，我们需要将其序列化之后才可以。\n1 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ] 1 2 with open(\u0026#39;output.json\u0026#39;,\u0026#39;w\u0026#39;) as fp: json.dump(data,fp) 1 [{\u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;c\u0026#34;: 3.0, \u0026#34;b\u0026#34;: [2, 4]}] json.loads 从Python内置对象dump为json对象我们知道如何操作了，那如何从json对象decode解码为Python可以识别的对象呢？是的用json.loads方法，当然这个是基于string的，如果是文件，我们可以用json.load方法。\n1 decoded_json = json.loads(data_string) 1 2 # 和之前一样，还是list print type(decoded_json) 1 \u0026lt;type \u0026#39;list\u0026#39;\u0026gt; 1 2 # 像访问 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ]一样 print decoded_json[0][\u0026#39;a\u0026#39;] 1 A json.load 可以直接load文件。\n1 2 3 with open(\u0026#39;output.json\u0026#39;) as fp: print type(fp) loaded_json = json.load(fp) 1 \u0026lt;type \u0026#39;file\u0026#39;\u0026gt; 1 2 # 和之前一样，还是list print type(decoded_json) 1 \u0026lt;type \u0026#39;list\u0026#39;\u0026gt; 1 2 # 像访问 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ]一样 print decoded_json[0][\u0026#39;a\u0026#39;] 1 A 数据类型对应 json和Python对象转换过程中，数据类型不完全一致，有对应。\nPython Json dict object list,tuple array str, unicode string int,long,float number True true False false None null json.dumps常用参数 一些参数，可以让我们更好地控制输出。常见的比如sort_keys，indent，separators，skipkeys等。\nsort_keys名字就很清楚了，输出时字典的是按键值排序的，而不是随机的。\n1 2 3 4 5 6 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ] print \u0026#39;DATA:\u0026#39;, repr(data) unsorted = json.dumps(data) print \u0026#39;JSON:\u0026#39;, json.dumps(data) print \u0026#39;SORT:\u0026#39;, json.dumps(data, sort_keys=True) 1 2 3 DATA: [{\u0026#39;a\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;c\u0026#39;: 3.0, \u0026#39;b\u0026#39;: (2, 4)}] JSON: [{\u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;c\u0026#34;: 3.0, \u0026#34;b\u0026#34;: [2, 4]}] SORT: [{\u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;b\u0026#34;: [2, 4], \u0026#34;c\u0026#34;: 3.0}] indent就是更个缩进，让我们更好地看清结构。\n1 2 3 4 5 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ] print \u0026#39;DATA:\u0026#39;, repr(data) print \u0026#39;NORMAL:\u0026#39;, json.dumps(data, sort_keys=True) print \u0026#39;INDENT:\u0026#39;, json.dumps(data, sort_keys=True, indent=2) 1 2 3 4 5 6 7 8 9 10 11 12 DATA: [{\u0026#39;a\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;c\u0026#39;: 3.0, \u0026#39;b\u0026#39;: (2, 4)}] NORMAL: [{\u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;b\u0026#34;: [2, 4], \u0026#34;c\u0026#34;: 3.0}] INDENT: [ { \u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;b\u0026#34;: [ 2, 4 ], \u0026#34;c\u0026#34;: 3.0 } ] separators是提供分隔符，可以出去白空格，输出更紧凑，数据更小。默认的分隔符是(', ', ': ')，有白空格的。不同的dumps参数，对应文件大小一目了然。\n1 2 3 4 5 6 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0 } ] print \u0026#39;DATA:\u0026#39;, repr(data) print \u0026#39;repr(data) :\u0026#39;, len(repr(data)) print \u0026#39;dumps(data) :\u0026#39;, len(json.dumps(data)) print \u0026#39;dumps(data, indent=2) :\u0026#39;, len(json.dumps(data, indent=2)) print \u0026#39;dumps(data, separators):\u0026#39;, len(json.dumps(data, separators=(\u0026#39;,\u0026#39;,\u0026#39;:\u0026#39;))) 1 2 3 4 5 DATA: [{\u0026#39;a\u0026#39;: \u0026#39;A\u0026#39;, \u0026#39;c\u0026#39;: 3.0, \u0026#39;b\u0026#39;: (2, 4)}] repr(data) : 35 dumps(data) : 35 dumps(data, indent=2) : 76 dumps(data, separators): 29 json需要字典的的键是字符串，否则会抛出ValueError。\n1 2 3 4 5 6 7 8 9 10 11 data = [ { \u0026#39;a\u0026#39;:\u0026#39;A\u0026#39;, \u0026#39;b\u0026#39;:(2, 4), \u0026#39;c\u0026#39;:3.0, (\u0026#39;d\u0026#39;,):\u0026#39;D tuple\u0026#39; } ] print \u0026#39;First attempt\u0026#39; try: print json.dumps(data) except (TypeError, ValueError) as err: print \u0026#39;ERROR:\u0026#39;, err print print \u0026#39;Second attempt\u0026#39; print json.dumps(data, skipkeys=True) 1 2 3 4 5 First attempt ERROR: keys must be a string Second attempt [{\u0026#34;a\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;c\u0026#34;: 3.0, \u0026#34;b\u0026#34;: [2, 4]}] 转载自：作者：米乐乐果 链接：https://www.jianshu.com/p/e29611244810\npickle 模块 对于类和函数对象，json不能进行序列化，可以使用 pickle 模块来进行相应的操作 pickle 模块只能用于Python中，不同版本的Python可能彼此都不兼容，因此，只能用Pickle保存那些不重要的数据 pickle 写入方式：\n1 2 3 4 5 6 7 8 9 import pickle def foo(): print(\u0026#39;Hello World!\u0026#39;) data = pickle.dumps(foo) f = open(\u0026#39;test1\u0026#39;,\u0026#39;wb\u0026#39;) f.write(data) f.close() pickle 的读取方式与 json 模块一致，同为 dump ，dumps 函数 shelve 模块 shelve 模块是一个简单的数据存储方案，类似key-value数据库，可以很方便的保存python对象，其内部是通过pickle协议来实现数据序列化。 shelve 使用方式： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import shelve with shelve.open(\u0026#34;shelve_test\u0026#34;) as f: f[\u0026#34;name\u0026#34;] = \u0026#39;alex\u0026#39; f[\u0026#34;age\u0026#34;] = \u0026#39;25\u0026#39; # 这里直接保存到了文件中，生成了3个文件shelve_test.bak,shelve_test.dat,shelve_test.dir with shelve.open(\u0026#39;shelve_test\u0026#39;) as f: # 只使用shelvefile名字即可 print(f[\u0026#34;name\u0026#34;]) for key, value in f.items(): print(key, \u0026#39;: \u0026#39;, value) \u0026gt;\u0026gt;\u0026gt; alex age : 25 name : alex logging模块 logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等；相比print，具备如下优点：\n可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息； print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出 basicConfig 配置了 level 信息和 format 信息\nlevel 配置为 INFO 信息，即只输出 INFO 级别的信息\nfilename：即日志输出的文件名，如果指定了这个信息之后，实际上会启用 FileHandler，而不再是 StreamHandler，这样日志信息便会输出到文件中了。\nfilemode：这个是指定日志文件的写入方式，有两种形式，一种是 w，一种是 a，分别代表清除后写入和追加写入。\nformat=：指定了 format 格式的字符串，包括 asctime运行时间 name模块名称、levelname（日志级别）message （日志内容）\n1 2 3 4 5 6 7 8 9 10 11 12 13 %(levelno)s：打印日志级别的数值。 %(levelname)s：打印日志级别的名称。 %(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]。 %(filename)s：打印当前执行程序名。 %(funcName)s：打印日志的当前函数。 %(lineno)d：打印日志的当前行号。 %(asctime)s：打印日志的时间。 %(thread)d：打印线程ID。 %(threadName)s：打印线程名称。 %(process)d：打印进程ID。 %(processName)s：打印线程名称。 %(module)s：打印模块名称。 %(message)s：打印日志信息。 datefmt：指定时间的输出格式。\nlogging.setLevel :设定日志级别，只有大于或等于这个级别才输出\nDEBUG 级别0 INFO级别1\nWARNING级别2 ERROR级别3\nCRITICAL级别4\nstyle：如果 format 参数指定了，这个参数就可以指定格式化时的占位符风格，如 %、{、$ 等。\nlevel：指定日志输出的类别，程序会输出大于等于此级别的信息。\nstream：在没有指定 filename 的时候会默认使用 StreamHandler，这时 stream 可以指定初始化的文件流。指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略；\nhandlers：可以指定日志处理时所使用的 Handlers，必须是可迭代的。\nconfigparse模块 读取和写入类似字典操作\nread(filename) 直接读取文件内容\nget(section, option) 获取section 下具体某一配置项的值(返回的是字符串)\nsections() 得到所有的section，并以列表的形式返回\noptions(section) 得到该section的所有option\nitems(section) 键值对的形式 得到该section的所有option\n写入配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import configparser config = configparser.ConfigParser() config[\u0026#39;DEFAULT\u0026#39;] = {\u0026#39;serveraliveinterval\u0026#39; : \u0026#39;4\u0026#39;, \u0026#39;compression\u0026#39; : \u0026#39;yes\u0026#39;, \u0026#39;compressionlevel\u0026#39; : \u0026#39;9\u0026#39;} config[\u0026#39;bitbucket\u0026#39;] = {} config[\u0026#39;bitbucket\u0026#39;][\u0026#39;user\u0026#39;] = \u0026#39;luenci\u0026#39; config[\u0026#39;weightsecrect\u0026#39;] = {} weightsecrect = config[\u0026#39;weightsecrect\u0026#39;] weightsecrect[\u0026#39;port\u0026#39;] = \u0026#39;22\u0026#39; with open(\u0026#39;example.ini\u0026#39;, \u0026#39;w\u0026#39;) as f: config.write(f) 读取配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import configparser config = configparser.ConfigParser() # 读取配置文件 config.read(\u0026#39;example.ini\u0026#39;) print(config.sections()) print(config.options(\u0026#39;bitbucket\u0026#39;)) for key in config[\u0026#39;DEFAULT\u0026#39;].values(): print(\u0026#34;%s%s\u0026#34;%(key,type(key))) out： [\u0026#39;bitbucket\u0026#39;, \u0026#39;weightsecrect\u0026#39;] [\u0026#39;user\u0026#39;, \u0026#39;serveraliveinterval\u0026#39;, \u0026#39;compression\u0026#39;, \u0026#39;compressionlevel\u0026#39;] 4\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; yes\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 9\u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 操作函数 add_section(section) 添加一个新的section set(section, option, value) 对section中添加 option 和 value remove_section(section) 删除某个 section remove_option(section, option) 删除某个 section 下的 option write() 将设置的新的 section 和 option 写到文件中 configparse支持的数据类型 一般情况下，configpaser类是无法识别配置文件中的value的数据类型的，它总是以字符串的形式来存储这些类型，所以当涉及到int float等类型的时候就需要我们自己对它进行转换 configparser 为我们提供了getboolean() getint() getfloat()方法用来对读对应类型的配置 其中getboolean方法可以识别 'yes'/'no', 'on'/'off', 'true'/'false' and '1'/'0'等数据并转换为布尔值 hashlib模块 用于加密有关的操作，主要有SHA1，SHA224，SHA256，SHA384，SHA512，MD5算法。替代了在python3中已废弃了md5和sha模块。 md5加密 1 2 3 4 5 import hashlib p = hashlib.md5() p.update(\u0026#39;12345\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)) print(p.hexdigest()) sha1加密 1 2 3 p = hashlib.sha1() p.update(\u0026#39;12345\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)) print(p.hexdigest()) 以上加密算法虽然依然非常厉害，但时候存在缺陷，即：通过撞库可以反解。所以，有必要对加密算法中添加自定义key再来做加密。 1 2 3 4 5 6 import hashlib # 加盐 p = hashlib.md5(\u0026#39;password\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)) p.update(\u0026#39;12345\u0026#39;.encode(\u0026#39;utf-8\u0026#39;)) print(p.hexdigest()) ","permalink":"https://luenci.com/en/posts/python%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BB%8B%E7%BB%8D/","summary":"\u003ch2 id=\"sys模块\"\u003esys模块\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e模块方法\u003c/th\u003e\n          \u003cth\u003e解释说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.argv\u003c/td\u003e\n          \u003ctd\u003e传递到Python脚本的命令行参数列表，第一个元素是程序本身路径\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.executable\u003c/td\u003e\n          \u003ctd\u003e返回Python解释器在当前系统中的绝对路径\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.exit(arg)\u003c/td\u003e\n          \u003ctd\u003e程序中间的退出，arg=0为正常退出\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.path\u003c/td\u003e\n          \u003ctd\u003e返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.platform\u003c/td\u003e\n          \u003ctd\u003e返回操作系统平台名称，Linux是linux2，Windows是win32\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.stdout.write(str)\u003c/td\u003e\n          \u003ctd\u003e输出的时候把换行符\\n去掉\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eval = sys.stdin.readline()[:-1]\u003c/td\u003e\n          \u003ctd\u003e拿到的值去掉\\n换行符\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003esys.version\u003c/td\u003e\n          \u003ctd\u003e获取Python解释程序的版本信息\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"os模块\"\u003eos模块\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e方法\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.mkdir()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e创建目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.rmdir()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e删除目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.rename()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e重命名\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.remove()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e删除文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.getcwd()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e获取当前工作路径\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.walk()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e遍历目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.join()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e连接目录与文件名\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.split()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e分割文件名与目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.abspath()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e获取绝对路径\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.dirname()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e获取路径\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.basename()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e获取文件名或文件夹名\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.splitext()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e分离文件名与扩展名\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.isfile()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e判断给出的路径是否是一个文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eos.path.isdir()\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e判断给出的路径是否是一个目录\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"json模块\"\u003ejson模块\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。\u003c/p\u003e","title":"一些核心模块的介绍"},{"content":"完整代码见： https://github.com/Lucareful/JingDongSpider\n写在前面：\n折腾了很久的用python做爬虫项目到现在也该告一段落了，看视频学，遇到bug自己查找，代码思路不对重新写，环境不对自己配置\u0026hellip;.一路上跌跌撞撞，过程很艰苦，所幸结果为好。\n代码就像一面明镜，照见我自身的不足。继续加油\n需求 抓取首页的分类信息 大分类的url 中分类的url 小分类的url 抓取商品信息 商品名称 价格 评论信息 店铺 促销 选项 图片 开发环境和技术 技术选择： 由于全网爬虫，抓取页面非常多，为了提高抓的速度，选择使用scrapy框架+scrapy_redis分布式组件 由于京东全网的数据量达到了亿级，存储又是结构化数据， 数据库，选择使用MongoDB； 京东全网爬虫的实现步骤 采取广度优先策略，我们把类别和商品信息的抓取分开来做 优点，提高程序的稳定性\n总体设计 实现步骤 创建爬虫项目 根据需求，定义数据数据模型 实现分类起虫 保存分类信息 实现商品爬虫 保存商品信息 实现随机User-Agent和代理IP下载器中间件，解决IP反爬。 创建爬虫项目 scrapy startproject jingDong\n定义数据模型（要抓取的数据） 类别数据模型类 用于存储类别信息（Category）-字段：\nb.category_name：大类别名称。\nb_category_url：大类别URL。\nm_category_name：中分类名称。\nm_category_url：中分类URL。\ns_category_name：小分类名称\ns_category_url：小分类URL\n商品数据模型 商品数据模型类：用于存储商品信息（Product）字段： oproduct_category：商品类别 product_sku_id：商品ID product_name：商品名称 product_img_url：商品图片URL product_book_info：图书信息，作者，出版社 product_option：商品选项 product_shop：商品店铺 product_comments：商品评论数量 product_ad：商品促销 product_price：商品价格 商品的分类爬虫 创建爬虫 进入项目目录：cd mall_spider 创建爬虫：scrapy genslider category_spider jd.com 指定起始URL 修改起始URL: https://dc.3.cn/category/get 实现保存分类的pipeline类 open_spider 方法中，链接MongoDB数据库，获取要操作的集合 process_item 方法中，向MongoDB中插入类别数据 close_spider 方法中，关闭MongoDB的链接 实现商品爬虫 步骤\n分析，确定数据所在的URL 代码实现（核心） 商品爬虫实现分布式 分析，确定数据所在的URL\n解析列表页，提取商品sku_id，实现翻页，确定翻页的URL 获取商品的基本信息，通过手机抓包（APP），确定URL PC详情页面，确定商品的促销信息的URL PC详情页面，确定评论信息的URL PC详情页面，确定商品价格信息的URL 代码实现\n1.重写start_requests方法，根据分类信息构建列表页的请求\n2.解析列表页，提取商品的skuid，构建商品基本的信息请求；实现列表翻页\n1.确定商品基本的信息请求\n1.URL:https://cdnware.m.jd.com/c1/skuDetail/apple/7.3.0/32962088964.json 2.请求方法：GET 3.参数/数据：32962088964商品的skuid 2.解析列表页，提取商品的skuid 3.构建商品基本的信息请求 4.实现列表翻页\n解析促销信息，构建商品评价信息的请求\n1.解析促销信息\n1.produft_ad：商品促销\n2.构建商品评价信息的请求\n1.准备评价信息的请求 解析商品评价信息，构建价格信息的请求\n解析商品评价信息\n1.product_comments：商品评论数量 2.评价数量，好评数量，差拜数量，好评率 2.构建价格信息的请求 准备价格请求：\n1.URL:https://p.3.cn/prices/mgets?skulds=J_69334292. 2.请求方法：GET 3.参数：skulds=J_6933429，j后跟这个商品的sku_id 解析价格信息\n1.product_price：商品价格 2.把商品数据交给引擎 商品爬虫实现分布式 修改爬虫类 修改继承关系 指定redis_key 把重写start_requests改为重写make_request from data I 在settings文件中配置scrapy_redis 直接拷贝scrapy_redis配置信息，到settings.py中. 写一个程序用于把MongoDB中分类信息，放入到爬虫redis_key指定的列表中 保存商品数据 实现存储商品Pipeline类 在open_spider方法，建立MongoDB数据库连接，获取要操作的集合 在process_item方法，把数据插入到MongoDB中 在close_spider方法，关闭数据库连接 在settings.py中开启这个管道 实现下载器中间件 实现随机User-Agent的中间件\n在settings.py中开启上面的下载器中间 件\n","permalink":"https://luenci.com/en/posts/%E4%BA%AC%E4%B8%9C%E5%85%A8%E7%BD%91%E7%88%AC%E8%99%AB/","summary":"\u003cp\u003e完整代码见： \u003ca href=\"https://github.com/Lucareful/JingDongSpider\"\u003ehttps://github.com/Lucareful/JingDongSpider\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e写在前面：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e折腾了很久的用python做爬虫项目到现在也该告一段落了，看视频学，遇到bug自己查找，代码思路不对重新写，环境不对自己配置\u0026hellip;.一路上跌跌撞撞，过程很艰苦，所幸结果为好。\u003c/p\u003e","title":"京东全网爬虫"},{"content":" Sulv blog Sulv 大佬博客 ","permalink":"https://luenci.com/en/links/","summary":"links","title":"友链"},{"content":"环境：python3.6\nMongoDB\nflask\nrequests等第三方库\n完整代码见： https://github.com/Lucareful/IPProxyPool\n代理池概述 什么是代理池 代理池就是有代理IP组成的池子，它可以提供多个稳定可用的代理IP 为什么要实现代理池 我们在做爬虫的时候，最常见的一种反爬虫手段就是：IP反爬；也就是当同一个IP访问这个网站的次数过多，频率过高，就会限制这个IP的访问。就是需要经常换IP；\n使用IP代理池是其中一个比较常用的方案 免费代理都是非常不稳定的，有10%是可用就很不错了 一些收费代理稳定性也不好 目的：从一堆不稳定的代理IP中，抽取高可用代理IP，给爬虫使用\n代理池开发环境 python3开发语言\nrequests：发送请求，获取页面数据\nlxml：使用XPATH从页面提取我们想要的书籍\npymonge：把提取到代理IP存储到MongoDB数据库中和MongoDB数据库中读取代理IP，给爬虫使用\nFlask：用于提供WEB服务\n代理池工作流程 1.代理池工作渡程描述：\n代理IP采集模块-\u0026gt;采集代理IP-\u0026gt;检测代理IP-\u0026gt;如果不可用用，直接过滤掉，如果可用，指定默认分数-\u0026gt;存入数据库中 代理IP检测模块-\u0026gt;从数据库中获取所有代理IP-\u0026gt;检测代理IP-\u0026gt;如果代理IP不可用用，就把分数-1，如果分数为0从数据库中删除，否则更新数据库，如果代理IP可用，恢复为默认分值，更新数据库 代理API模块-\u0026gt;从数据库中高可用的代理IP给爬虫使用； 代理池的模块及其作用 五大核心模块\n爬虫模块 从代理IP网站上采集代理IP 进行校验（获取代理响应速度，协议类型，匿名类型） 把可用代理IP存储到数据库中 代理IP的校验模块：获取指定代理的响应速度，支持的协议以及匿名程度 原因：网站上所标注的响应速度，协议类型和匿名类型是不准确的 这里使用httpbin.org进行检测 数据库模块：实现对代理IP的增删改查操作 这里使用MongoDB来存储代理IP 检测模块：定时的对代理池中代理进行检测，保证代理池中代理的可用性. 从数据库读取所有的代理IP 对代理IP进行逐一检测，可用开启多个协程，以提高检测速度 如果该代理不可用，就让这个代理分数-1，当代理的分数到0了，就删除该代理；如果检测到代理可用就恢复为满分. 代理IP服务接口：提供高可用的代理IP给爬虫使用 根据协议类型和域名获取随机一个高质量代理IP 根据协议类型和域名获取多个高质量代理IP 根据代理IP不可用域名，告诉代理池这个代理IP在该域名下不可用，下次获取这个域名的代理IP时候，就不会再获取这个代理IP了，从而保证代理IP高可用性. 代理池的其它模块\n数据模型：domain.py 代理IP的数据模型，用于封装代理IP相关信息，比如ip，端口号，响应速度，协议类型，匿名类型，分数等 程序启动入口：main.py·代理池提供一个统一的启动入口 工具模块：、 日志模块：用于记录日志信息 http模块：用于获取随机User-Agent的请求头 配置文件：settings.py 用于默认代理的分数，配置日志格式，文件，启动的爬虫，检验的间隔时间等. 代理池的项目结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 --IPProxyPoo1 --core --db --__init__.py --mongo_pool.py --proxy_validate --__init__.py --httpbin_validator.py --proxy_spider --__init__.py --base_spider.py --proxy_kpiders.py --run_spiders.py --proxy_test.py --proxy_api.py --domain.py --utils --__init__.py --http.py --log.py --main.py --settings.py 定义代理IP的数据模型类 定义Proxy类，继承object 实现_init_方法，负责初始化，包含如下字段： ip：代理的IP地址 port：代理IP的端口号 protocol：代理IP支持的协议类型，http是0，https是1，https和http都支持是2 nick_type：代理IP的匿名程度，高匿：0，匿名：1，透明：2 speed：代理IP的响应速度，单位s area：代理IP所在地区 score：代理IP的评分，用于衡量代理的可用性；默认分值可以通过配置文件进行配置.在进行代理可用性检查的时候，每遇到一次请求失败就减1份，减到0的时候从池中删除.如果检查代理可用，就恢复默认分值 disable_domains：不可用域名列表，有些代理IP在某些域名下不可用，但是在其他域名下可用 在配置文件：settings.py中定义MAX_SCORE=50，表示代理IP的默认最高分数 提供_str方法，返回数据字符串 代理池的工具模块 日志模块\nhttp模块\n日志模块 能够方便的对程序进行调试\n能够方便记录程序的运行状态\n能够方便记录错误信息\n日志的实现\n目标：实现日志模块，用于记录日志 把日志相关配置信息放到配置文件中 修改日志代码，使用配置文件中的配置信息 Http模块 我在从代理IP网站上抓取代理IP和检验代理IP时候，为了不容易不服务器识别为是一个爬虫，我们最好提供随机的User-Agent请求头. 目标：获取随机User-Agent的请求头 步骤： 1.准备User-Agent的列表 2.实现一个方法，获取随机User-Agent的请求头 代理池的检验模块 目标：检查代理IP速度，匿名程度以及支持的协议类型.\n步骤：\n检查代理IP速度和匿名程度；\n代理IP速度：就是从发送请求到获取响应的时间间隔\n匿名程度检查：\n对http://httpbin.org/get 或https://httpbin.org/get 发送请求\n如果响应的origin中有 ***，***分割的两个IP就是透明代理IP\n如果响应的headers 中包含Proxy-Connection 说明是匿名代理IP\n否则就是高匿代理IP。\n检查代理IP协议类型\n如果http://httpbin.org/get 发送请求可以成功，说明支持http协议 如果https://httpbin.org/get 发送请求可以成功，说明支持https协议\n代理池的数据库模块 作用：用于对proxies集合进行数据库的相关操作 目标：实现对数据库增删改查相关操作、 步骤： 1.在init中，建立数据连接，获取要操作的集合，在del方法中关闭数据库连接 2.提供基础的增删改查功能 实现插入功能 实现修改该功能 实现删除代理：根据代理的IP删除代理 查询所有代理IP的功能 3.提供代理API模块使用的功能 实现查询功能：根据条件进行查询，可以指定查询数量，先分数降序，速度升序排，保证优质的代理IP在上面. 实现根据协议类型和要访问网站的域名，获取代理IP列表 实现根据协议类型和要访问完整的域名，随机获取一个代理IP 实现把指定域名添加到指定IP的disable_domain列表中. 实现代理池的爬虫模块 爬虫模块的需求 需求：抓取各个代理IP网站上的免费代理IP进行检测，如果可用存储到数据库中 需要抓取代理IP的页面如下： 西刺代理：https://www.xicidaili.com/nn/1 ip3366代理：http://www.ip3366.net/free/?stype=1\u0026amp;page=1 快代理：https://www.kuaidaili.com/free/inha/1/ oproxylistplus代理:https://list.proxylistplus.com/Fresh-HTTP-Proxy-List-1 66ip代理：http://www.66ip.cn/1.html 爬虫模块的设计 通用爬虫：通过指定URL列表，分组XPATH和组内XPATH，来提取不同网站的代理IP 原因代理IP网站的页面结构几乎都是Table，页面结构类似 具体爬虫：用于抓取具体代理IP网站 通过继承通用爬虫实现具体网站的抓取，一般只需要指定爬取的URL列表，分组的XPATH和组内XPATH就可以了. 如果该网站有特殊反爬手段，可以通过重写某些方法实现反爬 爬虫运行模块：启动爬虫，抓取代理IP进行检测，如果可用，就存储到数据库中； 通过配置文件来控制启动哪些爬虫，增加扩展性；如果将来我们遇到返回json格式的代理网站，单独写一个爬虫配置下就好了. 实现通用爬虫 目标：实现可以指定不同URL列表，分组的XPATH和详情的XPATH，从不同页面上提取代理的IP端口号和区域的通用爬虫；\n步骤： 1.在base_spider.py文件中，定义一个BaseSpider类，继承object 2.提供三个类成员变量：\nurls：代理IP网址的URL的列表\ngroup_xpath：分组XPATH，获取包含代理IP信息标签列表的XPATH\ndetail_xpath：组内XPATH，获取代理IP详情的信息XPATH，格式为：{\u0026ldquo;ip\u0026rsquo;:\u0026lsquo;xx\u0026rsquo;，\u0026lsquo;port\u0026rsquo;：\u0026lsquo;xx\u0026rsquo;，‘area\u0026rsquo;：\u0026lsquo;xx\u0026rsquo;}\n3.提供初始方法，传入爬虫URL列表，分组XPATH，详情（组内）XPATH 4.对外提供一个获取代理IP的方法\n遍历URL列表，获取URL 根据发送请求，获取页面数据 解析页面，提取数据，封装为Proxy对象 返回Proxy对象列表 实现具体爬虫 目标：通过继承通用爬虫，实现多个具体爬虫，分别从各个免费代理IP网站上抓取代理IP\n1.实现西刺代理爬虫：http://www.xicidaili.com/nn/1\n定义一个类，继承通用爬虫类（BasicSpider） 提供urls，group_xpath 和detail_xpath 2.实现ip3366代理爬虫：http://www.ip3366.net/free/？stype=1\u0026amp;page=1\n定义一个类，继承通用爬虫类（BasicSpider） 提供urls，group_xpath 和detail_xpath 3.实现快代理爬虫：https://www.kuaidaili.com/free/inha/1/\n定义一个类，继承通用爬虫类（BasicSpider） 提供urls，group_xpath和detail_xpath 4.实现 proxylistplus代理爬虫：https://list.proxylistplus.com/Fresh-HTTP-Proxy-List-1\n定义一个类，继承通用爬虫类（BasicSpider） 提供urls，group_xpath 和detail_xpath 5.实现66ip爬虫：http://www.66ip.cn/1.html\n定义一个类，继承通用爬虫类（BasicSpider） 提供urls，group_xpath和detail_xpath 由于66ip网页进行js+cookie反爬，需要重写父类的get_page_from_url 方法 PS：实现66ip爬虫：http://www.66ip.cn/1.html核心：\n通过加密的js，生成需要cookie信息 1.从响应页面中，提取：\n​\t1.执行生成真正js语句\n​\t2.生成真正js的函数.\n2.网页中，是通过eval执行真正js，加载页面；而我们要获取真正的js；我们就需要把eval语句，替换为return，把真正js返回.\n3.使用js2py，获取执行js的环境，使用js执行环境加载这个函数\n4.使用这个执行环境，执行调用调用，生成真正js，赋值给一个变量\n5.从真正的js代码中，提取我们需要cookie信息.\n实现爬虫的运行模块 目标：根据配置文件信息，加载爬虫，抓取代理IP，进行校验，如果可用，写入到数据库中 思路： 在run_spider.py中，创建RunSpider类 提供一个运行爬虫的run方法，作为运行爬虫的入口，实现核心的处理逻辑 根据配置文件信息，获取爬虫对象列表. 遍历爬虫对象列表，获取爬虫对象，遍历爬虫对象的get_proxies方法，获取代理IP 检测代理IP（代理IP检测模块） 如果可用，写入数据库（数据库模块） 处理异常，防止一个爬虫内部出错了，影响其他的爬虫. 使用异步来执行每一个爬虫任务，以提高抓取代理IP效率 在init 方法中创建协程池对象 把处理一个代理爬虫的代码抽到一个方法 使用异步执行这个方法 调用协程的join方法，让当前线程等待队列任务的完成. 使用schedule模块，实现每隔一定的时间，执行一次爬取任务 定义一个start的类方法 创建当前类的对象，调用run方法 使用schedule模块，每隔一定的时间，执行当前对象的run方法 实现代理池的检测模块 目的：检查代理IP可用性，保证代理池中代理IP基本可用\n思路\n1.在proxy_test.py中，创建Proxy Tester类\n2.提供一个run 方法，用于处理检测代理命核心逻辑\n从数据库中获取所有代理IP\n遍历代理IP列表\n检查代理可用性\n如果代理不可用，让代理分数-1，如果代理分数等于0就从数据库中删除该代理，否则更新该代理IP\n如果代理可用，就恢复该代理的分数，更新到数据库中\n3.为了提高检查的速度，使用异步来执行检测任务\n在init方法中，创建队列和协程池\n把要检测的代理IP，放到队列中 i.把检查一个代理可用性的代码，抽取到一个方法中；从队列中获取代理IP，进行检查；检查完毕，调度队列的task_done方法 ii.通过异步回调，使用死循环不断执行这个方法， iv.开启多个一个异步任务，来处理代理IP的检测；可以通过配置文件指定异步数量 调用队列的join方法，让当前线程等待队列任务完成 4.使用schedule模块，每隔一定的时间，执行一次检测任务\n定义类方法start，用于启动检测模块 在start方法中 i.创建本类对象 i.调用run方法 i.每间隔一定时间，执行一下，run方法 实现代理池的API模块 目标：\n为爬虫提供高可用代理IP的服务接口 步骤：\n实现根据协议类型和域名，提供随机的获取高可用代理IP的服务\n实现根据协议类型和域名，提供获取多个高可用代理IP的服务\n实现给指定的IP上追加不可用域名的服务\n实现\n在proxy_api.py中，创建ProxyApi类 实现初始方法s\n初始一个Flask的Web服务\n实现根据协议类型和域名，提供随机的获取高可用代理IP的服务\n可用通过protocol和domain参数对IP进行过滤\nprotocol：当前请求的协议类型\ndomain：当前请求域名\n实现根据协议类型和域名，提供获取多个高可用代理IP的服务·\n可用通过protocol和domain参数对IP进行过滤 实现给指定的IP上追加不可用域名的服务\n如果在获取IP的时候，有指定域名参数，将不在获取该IP从而进一步提高代理IP的可用性. 实现run方法，用于启动Flask的WEB服务\n实现start的类方法，用于通过类名，启动服务\n实现代理池的程序入口 目标：把启动爬虫，启动检测代理IP，启动WEB服务统一到一起 思路： 开启三个进程，分别用于启动爬虫，检测代理IP，WEB服务 步骤： 定义一个run方法用于启动动代理池 定义一个列表，用于存储要启动的进程 创建启动爬虫的进程，添加到列表中 创建启动检测的进程，添加到列表中 创建启动提供API服务的进程，添加到列表中 遍历进程列表，启动所有进程 遍历进程列表，让主进程等待子进程的完成 在if__name__=='__main__'：中调用run方法 ","permalink":"https://luenci.com/en/posts/ip%E4%BB%A3%E7%90%86%E6%B1%A0/","summary":"\u003cp\u003e环境：python3.6\u003c/p\u003e\n\u003cp\u003eMongoDB\u003c/p\u003e\n\u003cp\u003eflask\u003c/p\u003e\n\u003cp\u003erequests等第三方库\u003c/p\u003e\n\u003cp\u003e完整代码见： \u003ca href=\"https://github.com/Lucareful/IPProxyPool\"\u003ehttps://github.com/Lucareful/IPProxyPool\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"代理池概述\"\u003e代理池概述\u003c/h1\u003e\n\u003ch2 id=\"什么是代理池\"\u003e什么是代理池\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e代理池就是有代理IP组成的池子，它可以提供多个稳定可用的代理IP\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"为什么要实现代理池\"\u003e为什么要实现代理池\u003c/h2\u003e\n\u003cp\u003e我们在做爬虫的时候，最常见的一种反爬虫手段就是：IP反爬；也就是当同一个IP访问这个网站的次数过多，频率过高，就会限制这个IP的访问。就是需要经常换IP；\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用IP代理池是其中一个比较常用的方案\u003c/li\u003e\n\u003cli\u003e免费代理都是非常不稳定的，有10%是可用就很不错了\u003c/li\u003e\n\u003cli\u003e一些收费代理稳定性也不好\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e目的：从一堆不稳定的代理IP中，抽取高可用代理IP，给爬虫使用\u003c/p\u003e\n\u003ch1 id=\"代理池开发环境\"\u003e代理池开发环境\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003epython3开发语言\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003erequests：发送请求，获取页面数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003elxml：使用XPATH从页面提取我们想要的书籍\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003epymonge：把提取到代理IP存储到MongoDB数据库中和MongoDB数据库中读取代理IP，给爬虫使用\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFlask：用于提供WEB服务\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"代理池工作流程\"\u003e代理池工作流程\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://i.ibb.co/b7YyrM5/image-20191024195902163.png\" alt=\"image-20191024195902163\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e1.代理池工作渡程描述：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e代理IP采集模块-\u0026gt;采集代理IP-\u0026gt;检测代理IP-\u0026gt;如果不可用用，直接过滤掉，如果可用，指定默认分数-\u0026gt;存入数据库中\u003c/li\u003e\n\u003cli\u003e代理IP检测模块-\u0026gt;从数据库中获取所有代理IP-\u0026gt;检测代理IP-\u0026gt;如果代理IP不可用用，就把分数-1，如果分数为0从数据库中删除，否则更新数据库，如果代理IP可用，恢复为默认分值，更新数据库\u003c/li\u003e\n\u003cli\u003e代理API模块-\u0026gt;从数据库中高可用的代理IP给爬虫使用；\u003c/li\u003e\n\u003c/ul\u003e","title":"基于Python语言的IP代理池"},{"content":"Hadoop介绍 组成部分 Hadoop主要由3部分组成： Mapreduce编程模型 HDFS分布式文件存储 YARN 配置信息 管理员密码：admin123\nDNS1=202.103.24.68 DNS2=202.103.44.150\nexport HADOOP_HOME=/usr/local/hadoop-2.6.4 export PATH=$HADOOP_HOME/bin$PATH:/usr/java/jdk1.8.0_201-amd64/bin\nHadoop HDFS 简介 概念：\nnamenode：负责记录 数据块 的分布情况– 数据元数据信息 datanode:负责实际存储 数据块 block：是Hadoop最小存储数据单位 默认 128M secondarynamenode: 辅助namenode完成fsimage管理或者优化\nHDFS简单命令 hadoop version //查看版本\nhadoop fs //文件系统客户端\nhadoop jar //运行jar包\nhadoop classpath //查看类路径\nhadoop checknative //检查本地库并压缩\nhadoop distcp // 远程递归拷贝文件\nhadoop credential //认证\nhadoop trace //跟踪\n$ hdfs dfs -mkdir-p /user/ubuntu/ //在hdfs上建立文件夹\n$ hdfs dfs -puthdfs.cmd /user/ubuntu/ //将本地文件上传到HDFS\n$ hdfs dfs -get/user/ubuntu/hadoop.cmd a.cmd //将文件从HDFS取回本地\n$ hdfs dfs -rm -r -f /user/ubuntu/ //删除\n$ hdfs dfs -ls -R/ //递归展示HDFS文件系统\n一、hadoop所在目录 cd usr/local/hadoop 1\n二、启动hadoop bash ./starth.sh\n% 运行start-dfs.sh % 运行start-yarn.sh 1 2 3\n启动dfs，浏览器查看：\n172.16.31.17:50070 1\n启动脚本，浏览器查看：\n172.16.31.17:8088 1\n停止脚本：\nbash ./sweighth.sh 1 三、常用命令\n1.显示hadoop目录结构\nhdfs dfs -ls -R / 1\n2.在hadoop指定目录内创建新目录\nhdfs dfs -mkdir /winnie 1\n3.将本地文件夹存储至hadoop\nhdfs dfs -put [本地目录] [hadoop目录] 1\n4.将本地文件存储至hadoop\nhdfs dfs -put [本地地址] [hadoop目录] 1\n5.查看指定目录下内容\nhdfs dfs -ls [文件目录] 1\n6.打开某个已存在文件\nhdfs dfs -cat [file_path] 1\n7.在hadoop指定目录下新建一个空文件\nhdfs dfs -touchz /winnie/test03.txt 1\n8.将hadoop上某个文件重命名\nhdfs dfs -mv /winnie/test03.txt /winnie/test.txt 1\n9.将hadoop上某个文件down至本地已有目录下\nhdfs dfs -get [文件目录] [本地目录] 1\n10.将hadoop指定目录下所有内容保存为一个文件，同时down至本地\nhdfs dfs -getmerge /winnie/hadoop-file /home/spark/hadoop-file/test.txt 1\n11.删除hadoop上指定文件\nhdfs dfs -rm [文件地址] 1\n12.删除hadoop上指定文件夹（包含子目录等）\nhdfs dfs -rm -r [目录地址] hdfs dfs -rmr [目录地址] 1 2\n13.将正在运行的hadoop作业kill掉\nhadoop job -kill [job-id] 1 14.查看帮助\nhdfs dfs -help 1 四、安全模式 1.退出安全模式\nNameNode在启动时会自动进入安全模式，安全模式是NameNode的一种状态，在这个阶段，文件系统不允许有任何修改。\n系统显示Name node in safe mode，说明系统正处于安全模式，这时只需要等待几十秒即可，也可通过下面的命令退出安全模式：\n/usr/local/hadoop$bin/hadoop dfsadmin -safemode leave 1\n2.进入安全模式\n在必要情况下，可以通过以下命令吧HDFS置于安全模式：\n/usr/local/hadoop$bin/hadoop dfsadmin -safemode enter 1\n五、补充\n1.对hdfs操作的命令格式是hdfs dfs\n1.1 -ls 表示对hdfs下一级目录的查看 1.2 -lsr 表示对hdfs目录的递归查看 1.3 -mkdir 创建目录 1.4 -put 从Linux上传文件到hdfs 1.5 -get 从hdfs下载文件到linux 1.6 -text 查看文件内容 1.7 -rm 表示删除文件 1.7 -rmr 表示递归删除文件\n2.hdfs在对数据存储进行block划分时，如果文件大小超过block，那么按照block大小进行划分；不如block size的，划分为一个块，是实际数据大小。\n3.hadoop常用命令：\nhdfs dfs 查看Hadoop HDFS支持的所有命令\nhdfs dfs –ls 列出目录及文件信息\nhdfs dfs –lsr 循环列出目录、子目录及文件信息 hdfs dfs –tail /user/sunlightcs/test.txt 查看最后1KB的内容\nhdfs dfs –copyFromLocal test.txt /user/sunlightcs/test.txt 从本地文件系统复制文件到HDFS文件系统，等同于put命令\nhdfs dfs –copyToLocal /user/sunlightcs/test.txt test.txt 从HDFS文件系统复制文件到本地文件系统，等同于get命令\nhdfs dfs –chgrp [-R] /user/sunlightcs 修改HDFS系统中/user/sunlightcs目录所属群组，选项-R递归执行，跟linux命令一样\nhdfs dfs –chown [-R] /user/sunlightcs 修改HDFS系统中/user/sunlightcs目录拥有者，选项-R递归执行\nhdfs dfs –chmod [-R] MODE /user/sunlightcs 修改HDFS系统中/user/sunlightcs目录权限，MODE可以为相应权限的3位数或+/-{rwx}，选项-R递归执行\nhdfs dfs –count [-q] PATH 查看PATH目录下，子目录数、文件数、文件大小、文件名/目录名\nhdfs dfs –cp SRC [SRC …] DST 将文件从SRC复制到DST，如果指定了多个SRC，则DST必须为一个目录\nhdfs dfs –du PATH 显示该目录中每个文件或目录的大小\nhdfs dfs –dus PATH 类似于du，PATH为目录时，会显示该目录的总大小\nhdfs dfs –expunge 清空回收站，文件被删除时，它首先会移到临时目录.Trash/中，当超过延迟时间之后，文件才会被永久删除\nhdfs dfs –getmerge SRC [SRC …] LOCALDST [addnl] 获取由SRC指定的所有文件，将它们合并为单个文件，并写入本地文件系统中的LOCALDST，选项addnl将在每个文件的末尾处加上一个换行符\nhdfs dfs –test –[ezd] PATH 对PATH进行如下类型的检查：-e PATH是否存在，如果PATH存在，返回0，否则返回1；-z 文件是否为空，如果长度为0，返回0，否则返回1； -d 是否为目录，如果PATH为目录，返回0，否则返回1\nhdfs dfs –text PATH 显示文件的内容，当文件为文本文件时，等同于cat；文件为压缩格式（gzip以及hadoop的二进制序列文件格式）时，会先解压缩\nhdfs dfs –help ls 查看某个[ls]命令的帮助文档\nMapreduce解释 **mapper的角色:**hadoop将用户提交的mapper可执行程序或脚本作为一个单独的进程加载起来，这个进程我们称之为mapper进程，hadoop不断地将文件片段转换为行，传递到我们的mapper进程中，mapper进程通过标准输入的方式一行一行地获取这些数据，然后设法将其转换为键值对，再通过标准输出的形式将这些键值对按照一对儿一行的方式输出出去。\n虽然在我们的mapper函数中，我们自己能分得清key/value(比方说有可能在我们的代码中使用的是string key,int value)，但是当我们采用标准输出之后，key value是打印到一行作为结果输出的(比如sys.stdout.write(\u0026quot;%s\\t%s\\n\u0026quot;%(birthyear,gender)))，因此我们为了保证hadoop能从中鉴别出我们的键值对，键值对中一定要以分隔符\u0026rsquo;\\t\u0026rsquo;即Tab(也可自定义分隔符)字符分隔，这样才能保证hadoop正确地为我们进行partitoner、shuffle等等过程。\n**reducer的角色:**hadoop将用户提交的reducer可执行程序或脚本同样作为一个单独的进程加载起来，这个进程我们称之为reducer进程，hadoop不断地将键值对(按键排序)按照一对儿一行的方式传递到reducer进程中，reducer进程同样通过标准输入的方式按行获取这些键值对儿，进行自定义计算后将结果通过标准输出的形式输出出去。\n在reducer这个过程中需要注意的是：传递进reducer的键值对是按照键排过序的，这点是由MR框架的sort过程保证的，因此如果读到一个键与前一个键不同，我们就可以知道当前key对应的pairs已经结束了，接下来将是新的key对应的pairs。\n","permalink":"https://luenci.com/en/posts/hadoop%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"hadoop介绍\"\u003eHadoop介绍\u003c/h1\u003e\n\u003ch2 id=\"组成部分\"\u003e组成部分\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHadoop主要由3部分组成：\n\u003cul\u003e\n\u003cli\u003eMapreduce编程模型\u003c/li\u003e\n\u003cli\u003eHDFS分布式文件存储\u003c/li\u003e\n\u003cli\u003eYARN\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"大数据之Hadoop"},{"content":"python实现妹子图爬虫（爬取妹子网图片） 一个简单的小爬虫实现爬取妹子图网站上的图片。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #coding=utf-8 import requests from bs4 import BeautifulSoup import os all_url = \u0026#39;http://www.mzitu.com\u0026#39; #http请求头 Hostreferer = { \u0026#39;User-Agent\u0026#39;:\u0026#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\u0026#39;, \u0026#39;Referer\u0026#39;:\u0026#39;http://www.mzitu.com\u0026#39; } Picreferer = { \u0026#39;User-Agent\u0026#39;:\u0026#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\u0026#39;, \u0026#39;Referer\u0026#39;:\u0026#39;http://i.meizitu.net\u0026#39; } #此请求头破解盗链 start_html = requests.get(all_url,headers = Hostreferer) #保存地址 path = \u0026#34;D:\\\\mzitu\\\\\u0026#34; #找寻最大页数 soup = BeautifulSoup(start_html.text,\u0026#34;html.parser\u0026#34;) page = soup.find_all(\u0026#39;a\u0026#39;,class_=\u0026#39;page-numbers\u0026#39;) max_page = page[-2].text same_url = \u0026#39;http://www.mzitu.com/all/\u0026#39; for n in range(1,int(max_page)+1): ul = same_url+str(n) start_html = requests.get(ul, headers = Hostreferer) soup = BeautifulSoup(start_html.text,\u0026#34;html.parser\u0026#34;) all_a = soup.find(\u0026#39;div\u0026#39;,class_=\u0026#39;all\u0026#39;).find_all(\u0026#39;a\u0026#39;,target=\u0026#39;_blank\u0026#39;) for a in all_a: title = a.get_text() #提取文本 if(title != \u0026#39;\u0026#39;): print(\u0026#34;准备扒取：\u0026#34;+title) #win不能创建带？的目录 if(os.path.exists(path+title.strip().replace(\u0026#39;?\u0026#39;,\u0026#39;\u0026#39;))): #print(\u0026#39;目录已存在\u0026#39;) flag=1 else: os.makedirs(path+title.strip().replace(\u0026#39;?\u0026#39;,\u0026#39;\u0026#39;).replace(\u0026#39;:\u0026#39;, \u0026#39;\u0026#39;)) flag=0 os.chdir(path + title.strip().replace(\u0026#39;?\u0026#39;,\u0026#39;\u0026#39;).replace(\u0026#39;:\u0026#39;, \u0026#39;\u0026#39;)) href = a[\u0026#39;href\u0026#39;] html = requests.get(href,headers = Hostreferer) mess = BeautifulSoup(html.text,\u0026#34;html.parser\u0026#34;) pic_max = mess.find_all(\u0026#39;span\u0026#39;) try: pic_max = pic_max[9].text #最大页数 if(flag == 1 and len(os.listdir(path+title.strip().replace(\u0026#39;?\u0026#39;,\u0026#39;\u0026#39;))) \u0026gt;= int(pic_max)): print(\u0026#39;已经保存完毕，跳过\u0026#39;) continue for num in range(1, int(pic_max)+1): pic = href+\u0026#39;/\u0026#39;+str(num) html = requests.get(pic,headers = Hostreferer) mess = BeautifulSoup(html.text,\u0026#34;html.parser\u0026#34;) pic_url = mess.find(\u0026#39;img\u0026#39;,alt = title) print(pic_url[\u0026#39;src\u0026#39;]) #exit(0) html = requests.get(pic_url[\u0026#39;src\u0026#39;],headers = Picreferer) file_name = pic_url[\u0026#39;src\u0026#39;].split(r\u0026#39;/\u0026#39;)[-1] f = open(file_name,\u0026#39;wb\u0026#39;) f.write(html.content) f.close() except Exception: pass print(\u0026#39;完成 \u0026#39;) print(\u0026#39;第\u0026#39;,n,\u0026#39;页完成\u0026#39;) 原文参考：https://blog.csdn.net/baidu_35085676/article/details/68958267 ","permalink":"https://luenci.com/en/posts/python%E7%88%AC%E8%99%AB/","summary":"\u003ch1 id=\"python实现妹子图爬虫爬取妹子网图片\"\u003epython实现妹子图爬虫（爬取妹子网图片）\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e一个简单的小爬虫实现爬取妹子图网站上的图片。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e70\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e71\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e72\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e73\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e74\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e75\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e76\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#coding=utf-8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003erequests\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003ebs4\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e BeautifulSoup\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eall_url \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;http://www.mzitu.com\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#http请求头\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHostreferer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;User-Agent\u0026#39;\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Referer\u0026#39;\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;http://www.mzitu.com\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePicreferer \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;User-Agent\u0026#39;\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;Referer\u0026#39;\u003c/span\u003e:\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;http://i.meizitu.net\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#此请求头破解盗链\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estart_html \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(all_url,headers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Hostreferer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#保存地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epath \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;D:\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003emzitu\u003c/span\u003e\u003cspan style=\"color:#79c0ff\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#找寻最大页数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esoup \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e BeautifulSoup(start_html\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;html.parser\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epage \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e soup\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efind_all(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e,class_\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;page-numbers\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emax_page \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e page[\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e]\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esame_url \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;http://www.mzitu.com/all/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e n \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e,int(max_page)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ul \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e same_url\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003estr(n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    start_html \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(ul, headers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Hostreferer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    soup \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e BeautifulSoup(start_html\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;html.parser\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    all_a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e soup\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efind(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;div\u0026#39;\u003c/span\u003e,class_\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efind_all(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e,target\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;_blank\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e all_a:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        title \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e a\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget_text() \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#提取文本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e(title \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;准备扒取：\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003etitle)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#win不能创建带？的目录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e(os\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eexists(path\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003etitle\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003estrip()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;?\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e))):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#print(\u0026#39;目录已存在\u0026#39;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    flag\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                os\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003emakedirs(path\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003etitle\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003estrip()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;?\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;:\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                flag\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            os\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003echdir(path \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e title\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003estrip()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;?\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;:\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            href \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e a[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;href\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            html \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(href,headers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Hostreferer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            mess \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e BeautifulSoup(html\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;html.parser\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            pic_max \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e mess\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efind_all(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;span\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                pic_max \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e pic_max[\u003cspan style=\"color:#a5d6ff\"\u003e9\u003c/span\u003e]\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#最大页数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e(flag \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003eand\u003c/span\u003e len(os\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003elistdir(path\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003etitle\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003estrip()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;?\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e))) \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e\u0026gt;=\u003c/span\u003e int(pic_max)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;已经保存完毕，跳过\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#ff7b72\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e num \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e, int(pic_max)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    pic \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e href\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003estr(num)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    html \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(pic,headers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Hostreferer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    mess \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e BeautifulSoup(html\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etext,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;html.parser\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    pic_url \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e mess\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003efind(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;img\u0026#39;\u003c/span\u003e,alt \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e title)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    print(pic_url[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;src\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e#exit(0)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    html \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eget(pic_url[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;src\u0026#39;\u003c/span\u003e],headers \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e Picreferer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    file_name \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e pic_url[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;src\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#79c0ff\"\u003er\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    f \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e open(file_name,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;wb\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    f\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ewrite(html\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003econtent)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    f\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eclose()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eException\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#ff7b72\"\u003epass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;完成   \u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;第\u0026#39;\u003c/span\u003e,n,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;页完成\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e原文参考\u003cspan style=\"color:#f85149\"\u003e：\u003c/span\u003ehttps:\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e//\u003c/span\u003eblog\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003ecsdn\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003enet\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003ebaidu_35085676\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003earticle\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003edetails\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e68958267\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"妹子图爬虫（爬取妹子图图片）"},{"content":"匹配小数 1 [0-9]{1,}[.][0-9]* 匹配整数 1 [0-9] 中文的匹配 1 [\\u4e00-\\u9fa5] 特殊符号和字符： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 [A-Z0-9a-z]:\tA,1,a [abc]*:\taaa,abc,acc,匹配前面的正则0次或多次 a？:\ta,匹配前面的出现正则0次或一次 .：\t匹配任意字符\\n\\t1,2.3,4,5.a,c .*:\tacb,aaa,weaijdiajdw,desd .*?:\t非贪婪匹配 \\d:\t匹配任何数字 [0-9]*:002121,5498464 \\s:\t匹配任意空白符 \\n\\t\\v\\r\\f \\w:\t匹配任何数字，字母，字符 [A-Za-z0-9][u4e00-u9fa5] ：匹配中文 a|b a,b 1|2 1,2 {int}:指明正则出现的次数 +：匹配前面出现的正则一次或多次 ?：0次或一次 *：0次或多次 ^:匹配开头 $:匹配结尾 ^$:空 [^A-Z]: 除了A-Z都匹配 匹配双字节字符(包括汉字在内)： 1 [^\\x00-\\xff] 匹配空白行的正则表达式： 1 \\n\\s*\\r 匹配HTML标记的正则表达式： 1 \u0026lt;(\\s*?)[^\u0026gt;]*\u0026gt;.*?|\u0026lt;.*?\u0026gt; 匹配首尾空白字符的正则表达式： 1 ^\\s*|\\s*$ 匹配Email地址的正则表达式： 1 \\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* 匹配网址URL的正则表达式： 1 [a-zA-z]+://[^\\s]* 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： 1 ^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 匹配国内电话号码： 1 \\d{3}-\\d{8}|\\d{4}-\\d{7} 匹配腾讯QQ号： 1 [1-9][0-9]{4,} 匹配中国邮政编码： 1 2 [1-9]\\d{5}(?!\\d) 评注：中国邮政编码为6位数字 匹配身份证： 1 2 \\d{15}|\\d{18} 评注：中国的身份证为15位或18位 匹配ip地址： 1 2 \\d+\\.\\d+\\.\\d+\\.\\d+ 评注：提取ip地址时有用 匹配特定数字： 1 2 3 4 5 6 7 8 9 10 11 ^[1-9]\\d*$　//匹配正整数 ^-[1-9]\\d*$ //匹配负整数 ^-?[1-9]\\d*$　//匹配整数 ^[1-9]\\d*|0$　//匹配非负整数（正整数 + 0） ^-[1-9]\\d*|0$　//匹配非正整数（负整数 + 0） ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$　//匹配正浮点数 ^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$　//匹配负浮点数 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$　//匹配浮点数 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$　//匹配非负浮点数（正浮点数 + 0） ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$　//匹配非正浮点数（负浮点数 + 0） 评注：处理大量数据时有用，具体应用时注意修正 匹配特定字符串： 1 2 3 4 5 ^[A-Za-z]+$　//匹配由26个英文字母组成的字符串 ^[A-Z]+$　//匹配由26个英文字母的大写组成的字符串 ^[a-z]+$　//匹配由26个英文字母的小写组成的字符串 ^[A-Za-z0-9]+$　//匹配由数字和26个英文字母组成的字符串 ^\\w+$　//匹配由数字、26个英文字母或者下划线组成的字符串 ","permalink":"https://luenci.com/en/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","summary":"\u003ch2 id=\"匹配小数\"\u003e匹配小数\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[0-9]{1,}[.][0-9]*\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"匹配整数\"\u003e匹配整数\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[0-9]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"中文的匹配\"\u003e中文的匹配\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\\u4e00-\\u9fa5]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"常用的正则表达式"},{"content":"数据可视化概述 可视化的目的，是对数据进行可视化处理，以更明确地，有效的传递信息。 数据可视化意义 数据可视化是为了从数据中寻找三个方面的信息。 模式。指数据中的规律。 关系。指数据间的相关性。 数据间的比较 数据的构成 数据的分布或联系 异常。指有问题的数据。 数据可视化的作用 记录信息。用图形的方式描述各种具体或抽象的事物。 分析推理。有效的提升了信息认知的效率，从而有助于人们更快地分析和推理出有效信息。 信息传播和协同。 数据可视化的分类 科学可视化 信息可视化 可视分析学 数据可视化基础 数据类型\n根据数据模型，可将数据分为\n浮点数，整数，字符等 根据概念模型\n类别型数据，有序型数据，区间型数据和比值型数据\n类别型数据：用于区分物体\n有序型数据：用来表示对象间的顺序关系\n区间型数据：用于得到对象间的定量关系。\n用于比较数值间的比列关系，可以精确地定义比例\n数据预处理 数据的预处理的目的是提升数据质量 数据质量包含以下六方面 有效性：数据与实际情况对应时，是否违背约束条件 准确性：数据能否精确的反映现实。 完整性：采集数据集是否包含了数据源中 的所有数据点：且样本的属性都是完整的。 一致性：整个数据集中的数据的衡量标准要一致 时效性：数据适合当下时间区间内的分析任务 可行性：数据源中的数据是使用者可依赖的。 数据预处理步骤如下 数据清理：指修正数据中的错误，识别脏数据，更正不一致数据的过程。 数据集成：指把来自不同数据的同类数据进行合并，减少数据冲突，降低数据冗余程度等。 数据归约：指在保证数据挖掘结果准确性的前提下，最大限度地精简数据量，得到简化的数据集。 数据转换：指对数据进行规范化处理 数据组织与管理 大数据存储利用的是分布式存储与访问计数，它具有高效，容错性强等特点。 分布式文件系统 分布式文件系统是指文件在物理上可能被分散存储在不同地点的节点上，各节点通过计算机网络进行通信和数据传输，但仍然是一个完整的文件。常用的分布式系统有HDFS（hadoop分布式文件系统），GFS（Google分布式文件系统）等。 文档存储 文档存储支持对结构化数据的访问，一般以键值对的方式进行存储。 文档存储类型也支持数组和列值键 列式存储 列式存储是指以流的方式在列中存储所有的数据 键式存储 以Key-Value存储，简称KV存储 图形数据库 图形数据库是NOSQL数据库的一种，是一种非关系型的数据库，它应用图形理论存储实体间的关系信息。 关系型数据库 关系模型是最传统的数据存储模型，数据按行存储在有架构界定的表中。用户可使用基于关系代数演算的结构化查询语言提供相应的语法查找符合条件的记录。 内存数据库 内存数据库就是将数据放在内存中直接操作的数据库。特点速度快，能处理实时型业务 数据仓库 数据仓库是一种特殊的数据库，一般用于存储海量数据，并直接支持后续的分析和决策操作。 数据分析与数据挖掘 数据分析\n统计分析 是指对数据进行统计描述和统计推断的过程 探索性数据分析 是对调查，观测所得到的一些初步的杂乱无章的数据，在尽量少的先验假设下进行处理，通过作图，制表等形式和方程拟合，计算某些特征量等手段，探索数据的结构和规律的一种数据分析方法。 验证性数据分析 是指在已经有事先假设的关系模型等情况下，通过数据分析来验证已提出的假设 在线分析和处理 是一种交互式探索大规模多维数据集的方法。 数据挖掘\n数据挖掘一般是指从大量的数据中通过算法搜索隐藏于其中的信息的过程。 常见的数据挖掘分析方法有分类与预测，聚类分析，关联性分析和异常分析等。\n分类与预测\n聚类分析\n关联分析\n异常分析\n数据挖掘的步骤\n确定业务对象 数据准备 数据挖掘 结果分析 知识的同化 ","permalink":"https://luenci.com/en/posts/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0/","summary":"\u003ch1 id=\"数据可视化概述\"\u003e数据可视化概述\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e可视化的目的，是对数据进行可视化处理，以更明确地，有效的传递信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"数据可视化意义\"\u003e数据可视化意义\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e数据可视化是为了从数据中寻找三个方面的信息。\n\u003cul\u003e\n\u003cli\u003e模式。指数据中的规律。\u003c/li\u003e\n\u003cli\u003e关系。指数据间的相关性。\n\u003cul\u003e\n\u003cli\u003e数据间的比较\u003c/li\u003e\n\u003cli\u003e数据的构成\u003c/li\u003e\n\u003cli\u003e数据的分布或联系\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e异常。指有问题的数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"数据科学之数据可视化"},{"content":"统计学 中心倾向 均值（常用的额） 中位数 分位数：它表示少于数据中特定百分比的一个值 众数 离散度 极差\n方差\n统计中的方差（样本方差）是每个样本值与全体样本值的平均数之差的平方值的平均数\n概率论中方差用来度量随机变量)和其数学期望（即均值）之间的偏离程度\n计算公式\n$$ s^2 = \\frac{\\sum_{}(x-u)^2}{N} $$\n标准差\n中文环境中又常称均方差，是离均差平方的算术平均数的平方根，用σ表示。标准差是方差的算术平方根\n计算公式\n$$ σ = \\sqrt\\frac{\\sum_{}(x-u)^2}{N} $$\n相关性 协方差\n协方差（Covariance）在概率论和统计学中用于衡量两个变量的总体误差。而方差是协方差的一种特殊情况，即当两个变量是相同的情况。 计算公式 概率论 不独立和独立 如果事件E和事件F独立意味着两个事同时发生的概率等于它们分别发生的概率的乘积。\n$$ P（E, F） = P(E)*P(F) $$\n条件概率\n如果事件E与事件F独立，那么定义：\n$$ P（E, F） = P(E)*P(F) $$ 如果两者不一定独立（并且概率都不为0），那么概率公式为：（已知F发生，在此条件下E发生的概率） $$ P（E|F） = P（E, F）/P（F） $$\n","permalink":"https://luenci.com/en/posts/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%AC%94%E8%AE%B0/","summary":"\u003ch1 id=\"统计学\"\u003e统计学\u003c/h1\u003e\n\u003ch2 id=\"中心倾向\"\u003e中心倾向\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e均值（常用的额）\u003c/li\u003e\n\u003cli\u003e中位数\u003c/li\u003e\n\u003cli\u003e分位数：它表示少于数据中特定百分比的一个值\u003c/li\u003e\n\u003cli\u003e众数\u003c/li\u003e\n\u003c/ul\u003e","title":"数据科学之统计学习"},{"content":"使用mysql- uroot -p登录后\n执行命令: show processlist;\n查询当前数据库用户连接情况.\n如果是root帐号,你能看到所有用户的当前连接.\n如果是其它普通帐号,只能看到自己占用的连接.\n只列出前100条\nshow processlist; 如果想全列出请使用\nshow full processlist; 1 2 3 4 5 mysql\u0026gt; show processlist; 命令： show status; 命令：show status like ‘%下面变量%’; Aborted_clients\t由于客户没有正确关闭连接已经死掉,已经放弃的连接数量. Aborted_connects\t尝试已经失败的MySQL服务器的连接的次数. Connections\t试图连接MySQL服务器的次数. Created_tmp_tables\t当执行语句时,已经被创造了的隐含临时表的数量. Delayed_insert_threads\t正在使用的延迟插入处理器线程的数量. Delayed_writes\t用INSERT DELAYED写入的行数. Delayed_errors\t用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数. Flush_commands\t执行FLUSH命令的次数. Handler_delete\t请求从一张表中删除行的次数. Handler_read_first\t请求读入表中第一行的次数. Handler_read_key\t请求数字基于键读行. Handler_read_next\t请求读入基于一个键的一行的次数. Handler_read_rnd\t请求读入基于一个固定位置的一行的次数. Handler_update\t请求更新表中一行的次数. Handler_write\t请求向表中插入一行的次数. Key_blocks_used\t用于关键字缓存的块的数量. Key_read_requests\t请求从缓存读入一个键值的次数. Key_reads\t从磁盘物理读入一个键值的次数. Key_write_requests\t请求将一个关键字块写入缓存次数. Key_writes\t将一个键值块物理写入磁盘的次数. Max_used_connections\t同时使用的连接的最大数目. Not_flushed_key_blocks\t在键缓存中已经改变但是还没被清空到磁盘上的键块. Not_flushed_delayed_rows\t在INSERT DELAY队列中等待写入的行的数量. Open_tables\t打开表的数量. Open_files\t打开文件的数量. Open_streams\t打开流的数量(主要用于日志记载） Opened_tables\t已经打开的表的数量. Questions\t发往服务器的查询的数量. Slow_queries\t要花超过long_query_time时间的查询数量. Threads_connected\t当前打开的连接的数量. Threads_running\t不在睡眠的线程数量. Uptime 服务器工作了多少秒. ","permalink":"https://luenci.com/en/posts/%E6%9F%A5%E7%9C%8Bmysql%E8%BF%9E%E6%8E%A5%E6%83%85%E5%86%B5/","summary":"\u003cp\u003e使用\u003ca href=\"http://www.boke365.net/archives/tag/mysql\"\u003emysql\u003c/a\u003e- uroot -p登录后\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e执行命令: show processlist;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e查询当前数据库用户连接情况.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果是root帐号,你能看到所有用户的当前连接.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果是其它普通帐号,只能看到自己占用的连接.\u003c/p\u003e","title":"查看mysql连接状况"},{"content":"module模块和包的介绍 模块的介绍 python给我们提供了十分简单的方法去创建一个模块，我们只需要写一个python文件即可，也就是说写一个.py为后缀的文件。 包的介绍 简单来说，包就是多个模块的集合。当项目较大，模块较多时，我们就可以把模块放在包中，便于管理。 我们在包中一般带有__init__.py文件，随你建包的时候就默认生成。 迭代器和生成器 迭代器 迭代器只不过是一个实现迭代器协议的容器对象。它基于两个方法： next ：返回容器的下一个项目 在3.x的版本中为__next__或者next(可迭代对象) __iter__ : 返回迭代器本身 迭代器可以通过使用一个iter内建函数和一个序列来创建，示例如下。 1 2 3 4 5 6 7 8 In [21]: a = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] In [22]: a = iter(a) In [23]: next(a) Out[23]: \u0026#39;a\u0026#39; In [24]: a.__next__() Out[24]: \u0026#39;b\u0026#39; 生成器 生成器 从Python2.2起，生成器提供了一种出色的方法，使得需要返回一系列元素的函数所需的代码更加简单、高效。基于yield指令，可以暂停一个函数并返回中间结果。该函数将保存执行环境并且可以在必要时恢复。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 In [25]: def fibonanci(): ...: a, b = 0, 1 ...: while True: ...: yield b ...: a, b = b, a + b ...: In [26]: fib = fibonanci() In [28]: fib.__next__() Out[28]: 1 In [29]: fib.__next__() Out[29]: 1 In [30]: fib.__next__() Out[30]: 2 In [31]: fib.__next__() yield可以理解为return,每次调用next()就yield值,下次next()从上次的yield处开始运行 该函数将返回一个特殊的迭代器，也就是generator对象，它知道如何保存执行环境。对它的调用是不确定的，每次都将产生序列中的下一个元素。这种语法很简洁，算法的不确定特性并没有影响代码的可读性。不必提供使函数可停止的方法。实际上，这看上去像是用伪代码设计的序列一样。 高阶函数的定义 函数的接收参数是一个函数名 函数的返回值是一个函数名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def father(name): print(\u0026#34;I am father %s\u0026#34; %name) def son(): print(\u0026#34;i am son\u0026#34;) # print(locals()) return son father(\u0026#34;luenci\u0026#34;) father(\u0026#34;luenci\u0026#34;)() out: I am father luenci I am father luenci i am son 简单的装饰器 @语法糖:相当于执行下面timmer(test)() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import time def timmer(func): def wrapper(): start_time = time.time() func() sweight_time = time.time() print(\u0026#34;函数运行时间为: %s\u0026#34;%(sweight_time - start_time)) return wrapper @timmer # timmer(test)() @ 语法糖 def test(): time.sleep(3) print(\u0026#34;test函数运行完毕\u0026#34;) test() # timmer(test)() 带参数的装饰器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import time def timmer(func): def wrapper(*args, **kwargs): print(*args) # print(**kwargs) start_time = time.time() res = func(*args, **kwargs) sweight_time = time.time() print(\u0026#34;程序运行时间为：%s\u0026#34; % (sweight_time - start_time)) return res return wrapper @timmer def test(name, age, gender): time.sleep(2) print(\u0026#34;我是%s,今年%s,性别%s\u0026#34; % (name, age, gender)) return \u0026#34;sucess\u0026#34; res = test(\u0026#34;lusheng\u0026#34;, 18, gender=\u0026#34;男\u0026#34;) # print(res) 装饰器应用案例 登录验证 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 user_list = [ {\u0026#34;username\u0026#34;: \u0026#34;luenci\u0026#34;, \u0026#34;pswd\u0026#34;: \u0026#34;123\u0026#34;}, {\u0026#34;username\u0026#34;: \u0026#34;lynn\u0026#34;, \u0026#34;pswd\u0026#34;: \u0026#34;456\u0026#34;}, {\u0026#34;username\u0026#34;: \u0026#34;lu\u0026#34;, \u0026#34;pswd\u0026#34;: \u0026#34;789\u0026#34;}, ] current_dic = {\u0026#34;username\u0026#34;: None, \u0026#34;login\u0026#34;: False} def verify(func): def wrapper(*args, **kwargs): if current_dic[\u0026#39;username\u0026#39;] and current_dic[\u0026#39;login\u0026#39;]: res = func(*args, **kwargs) return res username = input(\u0026#34;请输入用户名:\u0026#34;).strip() pswd = input(\u0026#34;请输入密码:\u0026#34;).strip() for user in user_list: if user[\u0026#39;username\u0026#39;] == username and user[\u0026#39;pswd\u0026#39;] == pswd: current_dic[\u0026#39;username\u0026#39;] = username current_dic[\u0026#39;login\u0026#39;] = True res = func(*args, **kwargs) return res else: print(\u0026#39;用户名或密码错误\u0026#39;) return wrapper @verify def shop(): print(\u0026#39;我的购物车\u0026#39;) @verify def user(): print(\u0026#39;我的信息\u0026#39;) @verify def things(): print(\u0026#39;我的商品\u0026#39;) print(\u0026#39;登录前的状态:%s\u0026#39;%(current_dic)) user() print(\u0026#39;登录后的状态:%s\u0026#39;%(current_dic)) shop() things() 日志记录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import logging import traceback def get_logger(): logger = logging.getLogger(\u0026#34;Test\u0026#34;) # 设定日志级别，只有大于或等于这个级别才输出 logger.setLevel(level=logging.DEBUG) # 当前路径下创建test_log文件记录错误日志 fh = logging.FileHandler(\u0026#34;test_log\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) ch = logging.StreamHandler() fm = logging.Formatter(fmt=\u0026#39;%(asctime)s %(name)s %(pathname)s[%(lineno)d] %(message)s\u0026#39;, datefmt=\u0026#39;%Y/%m/%d %H:%M:%S\u0026#39;) fh.setFormatter(fm) ch.setFormatter(fm) logger.addHandler(fh) logger.addHandler(ch) return logger def decoratore(func): def log(*args,**kwargs): try: print(\u0026#34;当前运行方法\u0026#34;, func.__name__) return func(*args,**kwargs) except Exception as e: get_logger().error(f\u0026#34;{func.__name__} is error,here are details:{traceback.format_exc()}\u0026#34;) return log @decoratore def test(): print(1/0) test() ​\n","permalink":"https://luenci.com/en/posts/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/","summary":"\u003ch1 id=\"module模块和包的介绍\"\u003emodule模块和包的介绍\u003c/h1\u003e\n\u003ch2 id=\"模块的介绍\"\u003e模块的介绍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e给我们提供了十分简单的方法去创建一个模块，我们只需要写一个\u003ccode\u003epython\u003c/code\u003e文件即可，也就是说写一个\u003ccode\u003e.py\u003c/code\u003e为后缀的文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"包的介绍\"\u003e包的介绍\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e简单来说，包就是多个模块的集合。当项目较大，模块较多时，我们就可以把模块放在包中，便于管理。\u003c/li\u003e\n\u003cli\u003e我们在包中一般带有\u003ccode\u003e__init__.py\u003c/code\u003e文件，随你建包的时候就默认生成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"迭代器和生成器\"\u003e迭代器和生成器\u003c/h1\u003e\n\u003ch3 id=\"迭代器\"\u003e迭代器\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e迭代器只不过是一个实现迭代器协议的容器对象。它基于两个方法：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enext\u003c/code\u003e  ：返回容器的下一个项目\n\u003cul\u003e\n\u003cli\u003e在\u003ccode\u003e3.x\u003c/code\u003e的版本中为\u003ccode\u003e__next__\u003c/code\u003e或者\u003ccode\u003enext(可迭代对象)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e__iter__\u003c/code\u003e : 返回迭代器本身\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e迭代器可以通过使用一个\u003ccode\u003eiter\u003c/code\u003e内建函数和一个序列来创建，示例如下。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e21\u003c/span\u003e]: a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e22\u003c/span\u003e]: a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e iter(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e23\u003c/span\u003e]: next(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e23\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e24\u003c/span\u003e]: a\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__next__()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e24\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"生成器\"\u003e生成器\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e生成器\u003c/li\u003e\n\u003cli\u003e从\u003ccode\u003ePython2.2\u003c/code\u003e起，生成器提供了一种出色的方法，使得需要返回一系列元素的函数所需的代码更加简单、高效。基于yield指令，可以暂停一个函数并返回中间结果。该函数将保存执行环境并且可以在必要时恢复。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e25\u003c/span\u003e]: \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efibonanci\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     a, b \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:     \u003cspan style=\"color:#ff7b72\"\u003ewhile\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         \u003cspan style=\"color:#ff7b72\"\u003eyield\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:         a, b \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e b, a \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e+\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e...\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e26\u003c/span\u003e]: fib \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e fibonanci()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e28\u003c/span\u003e]: fib\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__next__()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e28\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e29\u003c/span\u003e]: fib\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__next__()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e29\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e30\u003c/span\u003e]: fib\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__next__()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOut[\u003cspan style=\"color:#a5d6ff\"\u003e30\u003c/span\u003e]: \u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn [\u003cspan style=\"color:#a5d6ff\"\u003e31\u003c/span\u003e]: fib\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__next__()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eyield\u003c/code\u003e可以理解为\u003ccode\u003ereturn\u003c/code\u003e,每次调用\u003ccode\u003enext()\u003c/code\u003e就\u003ccode\u003eyield\u003c/code\u003e值,下次\u003ccode\u003enext()\u003c/code\u003e从上次的yield处开始运行\u003c/li\u003e\n\u003cli\u003e该函数将返回一个特殊的迭代器，也就是generator对象，它知道如何保存执行环境。对它的调用是不确定的，每次都将产生序列中的下一个元素。这种语法很简洁，算法的不确定特性并没有影响代码的可读性。不必提供使函数可停止的方法。实际上，这看上去像是用伪代码设计的序列一样。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"高阶函数的定义\"\u003e高阶函数的定义\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e函数的接收参数是一个函数名\u003c/li\u003e\n\u003cli\u003e函数的返回值是一个函数名\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003efather\u003c/span\u003e(name):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;I am father \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003ename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eson\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;i am son\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# print(locals())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e son\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efather(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efather(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e)()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eout:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eI am father luenci\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eI am father luenci\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ei am son\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"简单的装饰器\"\u003e简单的装饰器\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@\u003c/code\u003e语法糖:相当于执行下面\u003ccode\u003etimmer(test)()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport time\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edef timmer(func):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    def wrapper():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        start_time = time.time()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        func()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sweight_time = time.time()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u0026#34;函数运行时间为: %s\u0026#34;%(sweight_time - start_time))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    return wrapper\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@timmer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# timmer(test)() @ 语法糖\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edef test():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    time.sleep(3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u0026#34;test函数运行完毕\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# timmer(test)()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"带参数的装饰器\"\u003e带参数的装饰器\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etimmer\u003c/span\u003e(func):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ewrapper\u003c/span\u003e(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# print(**kwargs)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        start_time \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e time\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etime()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e func(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sweight_time \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e time\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003etime()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;程序运行时间为：\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e (sweight_time \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e-\u003c/span\u003e start_time))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e res\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e wrapper\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@timmer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etest\u003c/span\u003e(name, age, gender):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    time\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#a5d6ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;我是\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e,今年\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e,性别\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e (name, age, gender))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;sucess\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eres \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e test(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;lusheng\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e18\u003c/span\u003e, gender\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;男\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# print(res)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"装饰器应用案例\"\u003e装饰器应用案例\u003c/h1\u003e\n\u003ch2 id=\"登录验证\"\u003e登录验证\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e46\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euser_list \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;luenci\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;pswd\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;123\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;lynn\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;pswd\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;456\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;lu\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;pswd\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;789\u0026#34;\u003c/span\u003e},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurrent_dic \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#79c0ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;login\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#79c0ff\"\u003eFalse\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003everify\u003c/span\u003e(func):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ewrapper\u003c/span\u003e(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e current_dic[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003eand\u003c/span\u003e current_dic[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;login\u0026#39;\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e func(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e res\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        username \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e input(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入用户名:\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        pswd \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e input(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;请输入密码:\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003efor\u003c/span\u003e user \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003ein\u003c/span\u003e user_list:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003eif\u003c/span\u003e user[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e username \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003eand\u003c/span\u003e user[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;pswd\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e==\u003c/span\u003e pswd:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                current_dic[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e username\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                current_dic[\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;login\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#79c0ff\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e func(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e res\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;用户名或密码错误\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e wrapper\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@verify\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eshop\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;我的购物车\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@verify\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003euser\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;我的信息\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@verify\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003ethings\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;我的商品\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;登录前的状态:\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e(current_dic))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euser()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;登录后的状态:\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e%\u003c/span\u003e(current_dic))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eshop()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ethings()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"日志记录\"\u003e日志记录\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#737679\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003elogging\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003etraceback\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003eget_logger\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    logger \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e logging\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003egetLogger(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;Test\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 设定日志级别，只有大于或等于这个级别才输出\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    logger\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esetLevel(level\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003elogging\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eDEBUG)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#8b949e;font-style:italic\"\u003e# 当前路径下创建test_log文件记录错误日志\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fh \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e logging\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eFileHandler(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;test_log\u0026#34;\u003c/span\u003e, encoding\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ch \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e logging\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eStreamHandler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fm \u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e logging\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eFormatter(fmt\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(asctime)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(name)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(pathname)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(lineno)d\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e] \u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%(message)s\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;\u003c/span\u003e, datefmt\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#39;%Y/%m/\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e %H:%M:%S\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fh\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esetFormatter(fm)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ch\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003esetFormatter(fm)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    logger\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eaddHandler(fh)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    logger\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eaddHandler(ch)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e logger\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003edecoratore\u003c/span\u003e(func):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs,\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;当前运行方法\u0026#34;\u003c/span\u003e, func\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__name__)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e func(\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e*\u003c/span\u003eargs,\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e**\u003c/span\u003ekwargs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#ff7b72\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#f0883e;font-weight:bold\"\u003eException\u003c/span\u003e \u003cspan style=\"color:#ff7b72\"\u003eas\u003c/span\u003e e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            get_logger()\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eerror(\u003cspan style=\"color:#79c0ff\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003efunc\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003e__name__\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e is error,here are details:\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e{\u003c/span\u003etraceback\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e.\u003c/span\u003eformat_exc()\u003cspan style=\"color:#a5d6ff\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff7b72\"\u003ereturn\u003c/span\u003e log\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003e@decoratore\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff7b72\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#d2a8ff;font-weight:bold\"\u003etest\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#a5d6ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#ff7b72;font-weight:bold\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#a5d6ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\u003c/p\u003e","title":"模块、迭代器，生成器和装饰器"},{"content":"消息队列介绍 概念 MQ（Message Queue，消息队列），是基础数据结构中“先进先出”的一种数据结构，是在消息的传输工程中保存消息的容器。多用于分布式系统之间进行通信等。 MQ优势 应用解耦 异步提速 削峰填谷 MQ的带来的问题 系统的可用性降低 系统引入的外部依赖越多，系统的稳定性就越差。如果MQ宕机，整个业务就会受到影响。如何保证MQ的高可用？ 系统的复杂度提高 MQ的加入大大增加了系统的复杂度，以前系统间是同步调用的，现在通过MQ进行一步调用。如何保证消息没有被重复消费？怎么处理消息地丢失情况？怎么保证消息传递的顺序性 一致性问题 A系统处理完业务，通过MQ给B、C、D三个系统发消息，如果B、C系统成功，D系统处理失败。如何保证消息数据的一致性？ 使用MQ的场景 生产者不需要从消费者处获得反馈。 引入消息队列之前的直接调用，其接口的返回值应该为空，即上层的请求不依赖下层返回的结果，这样也才能使异步成为可能 容许短暂的不一致性 收益性高 引入MQ后系统解耦、提速、削峰等方面的收益大于管理使用MQ的成本 RabbitMQ介绍 AMQP，即（Advanced Message Queuing Protocal）（高级消息队列），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端和消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。\nRabbitMQ基础架构和组件信息 Broker：标识消息队列服务器实体.\nVirtual Host：虚拟主机。标识一批交换机、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是 /。\nExchange：交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。\nQueue：消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。\nBanding：绑定，用于消息队列和交换机之间的关联。一个绑定就是基于路由键将交换机和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\nChannel：信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟链接，AMQP命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说，建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP连接。\nConnection：网络连接，比如一个TCP连接。\nPublisher：消息的生产者，也是一个向交换器发布消息的客户端应用程序。\nConsumer：消息的消费者，表示一个从一个消息队列中取得消息的客户端应用程序。\nMessage：消息，消息是不具名的，它是由消息头和消息体组成。消息体是不透明的，而消息头则是由一系列的可选属性组成，这些属性包括routing-key(路由键)、priority(优先级)、delivery-mode(消息可能需要持久性存储[消息的路由模式])等。\nRabbitMQ的工作模式 原文链接：https://www.cnblogs.com/Jeely/p/10784013.html\n1.1simple简单模式 消息产生着and将消息放入队列 消息的消费者(consumer) 监听(while) 消息队列,如果队列中有消息,就消费掉,消息被拿走后,自动从队列中删除(隐患 消息可能没有被消费者正确处理,已经从队列中消失了,造成消息的丢失)应用场景:聊天(中间有一个过度的服务器;p端,c端) 生产者代码样例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import pika auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() # 设置消息队列 channel.queue_declare(queue=\u0026#39;TEST01\u0026#39;) # 向消息队列中发消息 channel.basic_publish(exchange=\u0026#39;\u0026#39;, routing_key=\u0026#39;TEST01\u0026#39;, body=\u0026#39;Hello World I am Luenci\u0026#39;) print(\u0026#34; [x] Sent \u0026#39;Hello World!\u0026#39;\u0026#34;) connection.close() 消费者代码样例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import pika auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.queue_declare(queue=\u0026#39;TEST01\u0026#39;) def callback(ch, method, properties, body): print(\u0026#34; [x] Received %r\u0026#34; % body) channel.basic_consume(on_message_callback=callback, queue=\u0026#39;TEST01\u0026#39;, auto_ack=True) print(\u0026#39; [*] Waiting for messages. To exit press CTRL+C\u0026#39;) channel.start_consuming() 1.2 work工作模式(资源的竞争) **说明：**一对多模式，一个生产者，多个消费者，一个队列，每个消费者从队列中获取唯一的消息。\n有两种消息分发机制，轮询分发和公平分发：\n轮询分发的特点是将消息轮流发送给每个消费者，在实际情况中，多个消费者，难免有的处理得快，有的处理得慢，如果都要等到一个消费者处理完，才把消息发送给下一个消费者，效率就大大降低了。\n而公平分发的特点是，只要有消费者处理完，就会把消息发送给目前空闲的消费者，这样就提高消费效率了。\n消息产生者将消息放入队列消费者可以有多个,消费者1,消费者2,同时监听同一个队列,消息被消费? C1 C2共同争抢当前的消息队列内容,谁先拿到谁负责消费消息(隐患,高并发情况下,默认会产生某一个消息被多个消费者共同使用,可以设置一个开关(syncronize,与同步锁的性能不一样) 保证一条消息只能被一个消费者使用)\n应用场景:红包;大项目中的资源调度(任务分配系统不需知道哪一个任务执行系统在空闲,直接将任务扔到消息队列中,空闲的系统自动争抢)\n生产者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python import pika import sys auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.queue_declare(queue=\u0026#39;task_queue\u0026#39;, durable=True) message = \u0026#39; \u0026#39;.join(sys.argv[1:]) or \u0026#34;Hello World!\u0026#34; for i in range(1,10): channel.basic_publish( exchange=\u0026#39;\u0026#39;, routing_key=\u0026#39;task_queue\u0026#39;, body=message, properties=pika.BasicProperties( delivery_mode=2, # make message persistent )) print(\u0026#34; [x] Sent %r\u0026#34; % message) connection.close() 消费者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python import pika import time auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.queue_declare(queue=\u0026#39;task_queue\u0026#39;, durable=True) print(\u0026#39; [*] Waiting for messages. To exit press CTRL+C\u0026#39;) def callback(ch, method, properties, body): print(\u0026#34; [x] Received %r\u0026#34; % body) time.sleep(body.count(b\u0026#39;.\u0026#39;)) print(\u0026#34; [x] Done\u0026#34;) ch.basic_ack(delivery_tag=method.delivery_tag) # 公平分发 channel.basic_qos(prefetch_count=1) channel.basic_consume(queue=\u0026#39;task_queue\u0026#39;, on_message_callback=callback) channel.start_consuming() 1.3 publish/subscribe发布订阅(共享资源) X代表交换机rabbitMQ内部组件,erlang 消息产生者是代码完成,代码的执行效率不高,消息产生者将消息放入交换机,交换机发布订阅把消息发送到所有消息队列中,对应消息队列的消费者拿到消息进行消费 相关场景:邮件群发,群聊天,广播(广告) 生产者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python import pika import sys auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.exchange_declare(exchange=\u0026#39;logs\u0026#39;, exchange_type=\u0026#39;fanout\u0026#39;) message = \u0026#39; \u0026#39;.join(sys.argv[1:]) or \u0026#34;info: Hello World!\u0026#34; channel.basic_publish(exchange=\u0026#39;logs\u0026#39;, routing_key=\u0026#39;\u0026#39;, body=message) print(\u0026#34; [x] Sent %r\u0026#34; % message) connection.close() 消费者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python import pika auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.exchange_declare(exchange=\u0026#39;logs\u0026#39;, exchange_type=\u0026#39;fanout\u0026#39;) result = channel.queue_declare(queue=\u0026#39;\u0026#39;, exclusive=True) queue_name = result.method.queue channel.queue_bind(exchange=\u0026#39;logs\u0026#39;, queue=queue_name) print(\u0026#39; [*] Waiting for logs. To exit press CTRL+C\u0026#39;) def callback(ch, method, properties, body): print(\u0026#34; [x] %r\u0026#34; % body) channel.basic_consume( queue=queue_name, on_message_callback=callback, auto_ack=True) channel.start_consuming() 1.4 routing路由模式 消息生产者将消息发送给交换机按照路由判断,路由是字符串(info) 当前产生的消息携带路由字符(对象的方法),交换机根据路由的key,只能匹配上路由key对应的消息队列,对应的消费者才能消费消息; 根据业务功能定义路由字符串 从系统的代码逻辑中获取对应的功能字符串,将消息任务扔到对应的队列中业务场景:error 通知;EXCEPTION;错误通知的功能;传统意义的错误通知;客户通知;利用key路由,可以将程序中的错误封装成消息传入到消息队列中,开发者可以自定义消费者,实时接收错误; 生产者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python import pika import sys auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.exchange_declare(exchange=\u0026#39;direct_logs\u0026#39;, exchange_type=\u0026#39;direct\u0026#39;) severity = sys.argv[1] if len(sys.argv) \u0026gt; 1 else \u0026#39;info\u0026#39; message = \u0026#39; \u0026#39;.join(sys.argv[2:]) or \u0026#39;Hello World!\u0026#39; channel.basic_publish( exchange=\u0026#39;direct_logs\u0026#39;, routing_key=severity, body=message) print(\u0026#34; [x] Sent %r:%r\u0026#34; % (severity, message)) connection.close() 消费者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python import pika auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.exchange_declare(exchange=\u0026#39;logs\u0026#39;, exchange_type=\u0026#39;fanout\u0026#39;) result = channel.queue_declare(queue=\u0026#39;\u0026#39;, exclusive=True) queue_name = result.method.queue channel.queue_bind(exchange=\u0026#39;logs\u0026#39;, queue=queue_name) print(\u0026#39; [*] Waiting for logs. To exit press CTRL+C\u0026#39;) def callback(ch, method, properties, body): print(\u0026#34; [x] %r\u0026#34; % body) channel.basic_consume( queue=queue_name, on_message_callback=callback, auto_ack=True) channel.start_consuming() 1.5 weightic 主题模式(路由模式的一种) 星号井号代表通配符 星号代表多个单词,井号代表一个单词 路由功能添加模糊匹配 消息产生者产生消息,把消息交给交换机 交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费 生产者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python import pika import sys auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.exchange_declare(exchange=\u0026#39;weightic_logs\u0026#39;, exchange_type=\u0026#39;weightic\u0026#39;) routing_key = sys.argv[1] if len(sys.argv) \u0026gt; 2 else \u0026#39;anonymous.info\u0026#39; message = \u0026#39; \u0026#39;.join(sys.argv[2:]) or \u0026#39;Hello World!\u0026#39; channel.basic_publish( exchange=\u0026#39;weightic_logs\u0026#39;, routing_key=routing_key, body=message) print(\u0026#34; [x] Sent %r:%r\u0026#34; % (routing_key, message)) connection.close() 消费者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python import pika import sys auth = pika.PlainCredentials(\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;) connection = pika.BlockingConnection(pika.ConnectionParameters(\u0026#39;主机名\u0026#39;, \u0026#39;5672\u0026#39;, \u0026#39;/\u0026#39;, auth)) channel = connection.channel() channel.exchange_declare(exchange=\u0026#39;weightic_logs\u0026#39;, exchange_type=\u0026#39;weightic\u0026#39;) result = channel.queue_declare(\u0026#39;\u0026#39;, exclusive=True) queue_name = result.method.queue binding_keys = sys.argv[1:] if not binding_keys: sys.stderr.write(\u0026#34;Usage: %s [binding_key]...\\n\u0026#34; % sys.argv[0]) sys.exit(1) for binding_key in binding_keys: channel.queue_bind( exchange=\u0026#39;weightic_logs\u0026#39;, queue=queue_name, routing_key=binding_key) print(\u0026#39; [*] Waiting for logs. To exit press CTRL+C\u0026#39;) def callback(ch, method, properties, body): print(\u0026#34; [x] %r:%r\u0026#34; % (method.routing_key, body)) channel.basic_consume( queue=queue_name, on_message_callback=callback, auto_ack=True) channel.start_consuming() RabbitMQ速度提升 消息消费速度主要受到发送消息时间、消费者处理时间、消息Ack时间这几个时间的影响 https://www.cnblogs.com/bossma/p/practices-on-improving-the-speed-of-rabbitmq-consumption.html\n","permalink":"https://luenci.com/en/posts/mq%E7%AC%94%E8%AE%B0/","summary":"\u003ch1 id=\"消息队列介绍\"\u003e消息队列介绍\u003c/h1\u003e\n\u003ch2 id=\"概念\"\u003e概念\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMQ（Message Queue，消息队列），是基础数据结构中“先进先出”的一种数据结构，是在消息的传输工程中保存消息的容器。多用于分布式系统之间进行通信等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"mq优势\"\u003eMQ优势\u003c/h2\u003e\n\u003ch3 id=\"应用解耦\"\u003e应用解耦\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://gitee.com/luenci/RepoImg/raw/master/img/20201201225748.png\" alt=\"image-20201129132737572\"  /\u003e\n\u003c/p\u003e","title":"消息队列笔记"},{"content":"积善科技（快代理）Python实习生面试总结 第一面是电话面。简单问了几个问题\n1.生成八位字符串的随机验证码 ？ 我当时想的是：将字符串存放在字典中，然后用随机函数生成数字，最后通过数字索引来取到对应的字符生成字符串 2.Python中的None和NULL类型 None表示的是空对象，null表示的是空字符串 数据库的问题 条件查询，连表查询等（很久没有用mysql数据库，基本上忘得干干净净，看来以后关系型数据库不能丢啊！！！） 第二面是做了一套笔试题\n记录下几个我在意的问题 列表推导式和字典推导式，以及匿名函数 原文转自：https://blog.51cto.com/6226001001/2059536\n推导式comprehensions（又称解析式），是Python的一种独有特性。推导式是可以从一个数据序列构建另一个新的数据序列的结构体。共有三种推导式，在Python2和3中都有支持：\n列表(list)推导式 字典(dict)推导式 集合(set)推导式 1. 列表推导式 1.1 使用[]生成list 基本格式：\n1 variable = [out_exp_res for out_exp in input_list if out_exp == 2] out_exp_res：列表生成元素表达式，可以是有返回值的函数。 for out_exp in input_list：迭代input_list将out_exp传入out_exp_res表达式中。 if out_exp == 2：根据条件过滤哪些值可以。 实例：\n过滤掉长度小于3的字符串列表，并将剩下的转换成大写字母 1 2 3 4 5 names = [\u0026#39;Bob\u0026#39;,\u0026#39;Tom\u0026#39;,\u0026#39;alice\u0026#39;,\u0026#39;Jerry\u0026#39;,\u0026#39;Wendy\u0026#39;,\u0026#39;Smith\u0026#39;] [name.upper() for name in names if len(name) \u0026gt; 3] # [\u0026#39;ALICE\u0026#39;, \u0026#39;JERRY\u0026#39;, \u0026#39;WENDY\u0026#39;, \u0026#39;SMITH\u0026#39;]12345 生成间隔5分钟的时间列表序列 1 [\u0026#34;%02d:%02d\u0026#34;%(h,m) for h in range(0, 24) for m in range(0, 60, 5)]1 求(x, y)，其中x是0-5之间的偶数，y是0-5之间的奇数组成的元祖列表 1 2 3 [(x,y) for x in range(5) if x%2==0 for y in range(5) if y%2==1] # [(0, 1), (0, 3), (2, 1), (2, 3), (4, 1), (4, 3)]123 求M中3, 6, 9组成的列表 1 2 3 4 5 6 7 M = [[1,2,3], [4,5,6], [7,8,9]] [row[2] for row in M] # [3, 6, 9] # 或者用下面的方式 [M[row][2] for row in (0, 1, 2)] # [3, 6, 9]1234567 求M中斜线1, 5, 9组成的列表 1 2 3 4 5 M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [M[i][i] for i in range(len(M))] # 打印M[0][0], M[1][1], M[2][2] # [1, 5, 9]12345 求M, N中矩阵和元素的乘积 1 2 3 4 5 6 7 8 9 10 11 12 13 M = [[1,2,3],[4,5,6],[7,8,9]] N = [[2,2,2],[3,3,3],[4,4,4]] [M[row][col]*N[row][col] for row in range(3) for col in range(3)] # [2, 4, 6, 12, 15, 18, 28, 32, 36] [[M[row][col]*N[row][col] for col in range(3)] for row in range(3)] # [[2, 4, 6], [12, 15, 18], [28, 32, 36]] [[M[row][col]*N[row][col] for row in range(3)] for col in range(3)] # [[2, 12, 28], [4, 15, 32], [6, 18, 36]]12345678910111213 把字典中age键，按照条件赋新值 1 2 3 4 5 6 7 8 9 bob = {\u0026#39;pay\u0026#39;: 3000, \u0026#39;job\u0026#39;: \u0026#39;dev\u0026#39;, \u0026#39;age\u0026#39;: 42, \u0026#39;name\u0026#39;: \u0026#39;Bob Smith\u0026#39;} sue = {\u0026#39;pay\u0026#39;: 4000, \u0026#39;job\u0026#39;: \u0026#39;hdw\u0026#39;, \u0026#39;age\u0026#39;: 45, \u0026#39;name\u0026#39;: \u0026#39;Sue Jones\u0026#39;} people = [bob, sue] [rec[\u0026#39;age\u0026#39;]+100 if rec[\u0026#39;age\u0026#39;] \u0026gt;= 45 else rec[\u0026#39;age\u0026#39;] for rec in people] # 注意for位置 # [42, 145]123456789 列表推导式 1 2 3 4 5 6 7 8 9 10 11 multiples = [i for i in range(30) if i%3 == 0] print(multiples) # Output: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27] def squared(x): return x*x multiples = [squared(i) for i in range(30) if i%3 == 0] print(multiples) # Output: [0, 9, 36, 81, 144, 225, 324, 441, 576, 729]1234567891011 1.2 使用()生成generator 将上述两表推导式的[]改成()，即可得到生成器。\n1 2 3 4 multiples = (i for i in range(30) if i%3 == 0) print(type(multiples)) # Output: \u0026lt;type \u0026#39;generator\u0026#39;\u0026gt;1234 2. 字典推导式 字典推导和列表推导的使用类似，只不过中括号改成大括号。\n基本格式：{ key_expr: value_expr for value in collection if condition }\n举例说明：\n用字符串和其长度创建字典 1 2 3 4 5 6 strings = [\u0026#39;import\u0026#39;,\u0026#39;is\u0026#39;,\u0026#39;with\u0026#39;,\u0026#39;if\u0026#39;,\u0026#39;file\u0026#39;,\u0026#39;exception\u0026#39;] D = {key: val for val,key in enumerate(strings)} D # {\u0026#39;exception\u0026#39;: 5, \u0026#39;file\u0026#39;: 4, \u0026#39;if\u0026#39;: 3, \u0026#39;import\u0026#39;: 0, \u0026#39;is\u0026#39;: 1, \u0026#39;with\u0026#39;: 2}123456 大小写key合并 1 2 3 4 5 6 7 8 9 10 mcase = {\u0026#39;a\u0026#39;: 10, \u0026#39;b\u0026#39;: 34, \u0026#39;A\u0026#39;: 7, \u0026#39;Z\u0026#39;: 3} mcase_frequency = { k.lower(): mcase.get(k.lower(), 0) + mcase.get(k.upper(), 0) for k in mcase.keys() if k.lower() in [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;] } print(mcase_frequency) # Output: {\u0026#39;a\u0026#39;: 17, \u0026#39;b\u0026#39;: 34}12345678910 快速更换key和value 1 2 3 4 5 mcase = {\u0026#39;a\u0026#39;: 10, \u0026#39;b\u0026#39;: 34} mcase_frequency = {v: k for k, v in mcase.items()} print(mcase_frequency) # Output: {10: \u0026#39;a\u0026#39;, 34: \u0026#39;b\u0026#39;}12345 3. 集合推导式 集合推导式跟列表推导式也是类似的。 唯一的区别在于它使用大括号{ }。\n基本格式：{ expr for value in collection if condition }\n举例说明：\n集合推导式 1 2 3 4 squared = {x**2 for x in [1, 1, 2]} print(squared) # Output: set([1, 4])1234 用集合推导式，创建字符串长度的集合 1 2 3 4 5 strings = [\u0026#39;a\u0026#39;,\u0026#39;is\u0026#39;,\u0026#39;with\u0026#39;,\u0026#39;if\u0026#39;,\u0026#39;file\u0026#39;,\u0026#39;exception\u0026#39;] {len(s) for s in strings} # 有长度相同的会只留一个，这在实际上也非常有用 # {1, 2, 4, 9} 12345 一个由男人列表和女人列表组成的嵌套列表，取出姓名中带有两个以上含字母e的姓名，组成列表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 names = [[\u0026#39;Tom\u0026#39;,\u0026#39;Billy\u0026#39;,\u0026#39;Jefferson\u0026#39;,\u0026#39;Andrew\u0026#39;,\u0026#39;Wesley\u0026#39;,\u0026#39;Steven\u0026#39;,\u0026#39;Joe\u0026#39;], [\u0026#39;Alice\u0026#39;,\u0026#39;Jill\u0026#39;,\u0026#39;Ana\u0026#39;,\u0026#39;Wendy\u0026#39;,\u0026#39;Jennifer\u0026#39;,\u0026#39;Sherry\u0026#39;,\u0026#39;Eva\u0026#39;]] tmp = [] # 用for循环实现 for lst in names: for name in lst: if name.count(\u0026#39;e\u0026#39;) \u0026gt;= 2: tmp.append(name) print(tmp) # 用嵌套列表实现 [name for lst in names for name in lst if name.count(\u0026#39;e\u0026#39;)\u0026gt;=2] # 注意遍历顺序，这是实现的关键 # [\u0026#39;Jefferson\u0026#39;, \u0026#39;Wesley\u0026#39;, \u0026#39;Steven\u0026#39;, \u0026#39;Jennifer\u0026#39;] 匿名函数 当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。\n在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算f(x)=x2时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：\n1 2 \u0026gt;\u0026gt;\u0026gt; list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])) [1, 4, 9, 16, 25, 36, 49, 64, 81] 通过对比可以看出，匿名函数lambda x: x * x实际上就是：\n1 2 def f(x): return x * x 关键字lambda表示匿名函数，冒号前面的x表示函数参数。\n匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。\n用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：\n1 2 3 4 5 \u0026gt;\u0026gt;\u0026gt; f = lambda x: x * x \u0026gt;\u0026gt;\u0026gt; f \u0026lt;function \u0026lt;lambda\u0026gt; at 0x101c6ef28\u0026gt; \u0026gt;\u0026gt;\u0026gt; f(5) 25 同样，也可以把匿名函数作为返回值返回，比如：\n1 2 def build(x, y): return lambda: x * x + y * y .py与.pyc文件区别 我们把源代码放在.py文件中，在执行.py文件时，Python会把.py源文件编译成中间文件.pyc形式（byte-compiled），这样做是为了加快下次执行文件的速度。 在运行python源文件时，我们应该首先查看是否具有.pyc文件。如果有的话，且.py文件的修改时间和.pyc的修改时间一样，就会读取.pyc文件；否则，Python解释器就会读取原来的.py文件。 其实，并不是运行所有.py文件都会产生.pyc文件，只有在import相关.py文件时，才会生成相应.pyc文件。 最后：\n这次面试给了我很大的思考，基本上都是基础题目，不是很难，但是由于平时依赖代码提示器和Google去解决问题，导致自己很多东西知道怎么做，但是不查资料就无法写出来，或者是有Bug。python的学习应该更加深入，希望自己下次能做的更好。 ","permalink":"https://luenci.com/en/posts/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/","summary":"\u003ch1 id=\"积善科技快代理python实习生面试总结\"\u003e积善科技（快代理）Python实习生面试总结\u003c/h1\u003e\n\u003cp\u003e第一面是电话面。简单问了几个问题\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1.生成八位字符串的随机验证码 ？\u003c/li\u003e\n\u003cli\u003e我当时想的是：将字符串存放在字典中，然后用随机函数生成数字，最后通过数字索引来取到对应的字符生成字符串\u003c/li\u003e\n\u003cli\u003e2.Python中的None和NULL类型\u003c/li\u003e\n\u003cli\u003eNone表示的是空对象，null表示的是空字符串\u003c/li\u003e\n\u003cli\u003e数据库的问题\u003c/li\u003e\n\u003cli\u003e条件查询，连表查询等（很久没有用mysql数据库，基本上忘得干干净净，看来以后关系型数据库不能丢啊！！！）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第二面是做了一套笔试题\u003c/p\u003e","title":"积善科技（快代理）Python面试总结"},{"content":"渐进时间度表 O记法所代表的是渐进上界限，Ω记法代表的是渐进下界\nΘ代表的集合是上述符号的交集，Θ(g) = O(g)\n常见的渐进运行时间实例\n时间复杂度 相关名称 相关实例及说明 Θ（1） 常数级 哈希表的查询和修改 Θ（lg n） 对数级 二分搜索，其对数基数并不重要 Θ（n） 线性级 列表的遍历 Θ(nlgn) 线性对数级 任意值序列的最优化排序，其复杂度等同于Θ(lg n!) Θ(n^2) 平方级 拿n个对象进行互相比对 Θ(n^3) 立方级 Floyd-Warshall算法 O(n^k) 多项式级 基于n的k层嵌套循环（k为整数），且必须满足K \u0026gt; 0 Ω(K^n) 指数级 每n项产生一个子集（其中k = 2），且必须满足K \u0026gt; 1 Θ(n!) 阶乘级 对n个值执行全排列操作 冒泡排序 冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 冒泡排序算法的运作如下： 1、比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。 2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 3、针对所有的元素重复以上的步骤，除了最后一个。 4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 \u0026rsquo;'' 冒泡排序的时间复杂度为O(n^2)。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def store(x): \u0026#39;\u0026#39;\u0026#39;冒泡排序算法实现\u0026#39;\u0026#39;\u0026#39; f=0 while f \u0026lt; len(x): i=0 j=1 while j \u0026lt; len(x): if x[i] \u0026lt;= x[j]: i = i + 1 j = j + 1 elif x[i] \u0026gt; x[j]: var1 = x[i] var2 = x[j] x[j] = var1 x[i] = var2 i = i + 1 j = j + 1 f = f + 1 return x if __name__ == \u0026#34;__main__\u0026#34;: test = [2,4,6,5,9,7,12,15,13,19,20,1,3] print(store(test)) 归并排序 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表， 即把待排序序列分为若干个子序列，每个子序列是有序的。 然后再把有序子序列合并为整体有序序列。 空间复杂度为O(n)，时间复杂度为O(nlogn)。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def merge_extend(x): \u0026#39;\u0026#39;\u0026#39;归并排序算法\u0026#39;\u0026#39;\u0026#39; # 拆分列表 if len(x) \u0026lt;= 1: # 向下取整数 return x mid = len(x)//2 left = merge_extend(x[:mid]) right = merge_extend(x[mid:]) print(left,right) return merge_add(left, right) def merge_add(a, b): \u0026#39;\u0026#39;\u0026#39;和并列表\u0026#39;\u0026#39;\u0026#39; result = [] i = 0 j = 0 while i \u0026lt; len(a) and j \u0026lt; len(b): if a[i] \u0026lt; b[j]: result.append(a[i]) i += 1 else: result.append(b[j]) j += 1 #print(\u0026#34;a\u0026#34;,a[i:]) #print(\u0026#34;b\u0026#34;,b[j:]) result.extend(a[i:]) result.extend(b[j:]) return result if __name__ == \u0026#34;__main__\u0026#34;: test=[11,0,5,7,3,6,8,1,2] print(merge_extend(test)) 插入排序 插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列， 对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。 插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 简单插入排序的时间复杂度也是O(n^2) 1 2 3 4 5 6 7 8 9 10 11 12 def insert_sort(x): # 取列表的第一个元素为单独的一个，已经排好序的列表 for i in range(1, len(x)): # 要排序的的牌 for j in range(0, i): if x[i] \u0026lt; x[j]: x[i], x[j] = x[j], x[i] return x if __name__==\u0026#34;__main__\u0026#34;: test = [2,3,5,7,9,1,20,0,4,12,19,11,8,1] print(insert_sort(test)) 选择排序 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置， 然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 以此类推，直到所有元素均排序完毕。 选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。 选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上， 因此对n个元素的表进行排序总共进行至多n-1次交换。 在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。 选择排序的时间复杂度为O(n^2) 1 2 3 4 5 6 7 8 9 10 11 def select_sort(x): \u0026#39;\u0026#39;\u0026#39;选择排序\u0026#39;\u0026#39;\u0026#39; new = [] while x: new.append(min(x)) x.remove(min(x)) return new if __name__==\u0026#34;__main__\u0026#34;: test = [2,3,5,7,9,1,20,0,4,12,19,11,8,1] print(select_sort(test)) 快速排序 1.先从待排序的数组中找出一个数作为基准数（取第一个数即可）， 2.然后将原来的数组划分成两部分：小于基准数的左子数组和大于等于基准数的右子数组。 3.然后对这两个子数组再递归重复上述过程，直到两个子数组的所有数都分别有序。 4.最后返回“左子数组” + “基准数” + “右子数组”，即是最终排序好的数组。 快速排序是不稳定的，其时间平均时间复杂度是O(nlgn) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def quick_sort(x): \u0026#39;\u0026#39;\u0026#39;快速排序\u0026#39;\u0026#39;\u0026#39; if len(x) \u0026lt;= 1: return x base = x[0] left = [] right = [] for var in x: if var \u0026gt; base: right.append(var) elif var \u0026lt; base: left.append(var) return quick_sort(left) + [base] + quick_sort(right) if __name__ == \u0026#34;__main__\u0026#34;: # 存在重复值被覆盖 test = [2,6,7,8,12,56,36,89,45,3] ","permalink":"https://luenci.com/en/posts/%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E4%BA%94%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","summary":"\u003ch1 id=\"渐进时间度表\"\u003e渐进时间度表\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eO\u003c/code\u003e记法所代表的是渐进上界限，\u003ccode\u003eΩ\u003c/code\u003e记法代表的是渐进下界\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eΘ代表的集合是上述符号的交集，Θ(g) = O(g)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e常见的渐进运行时间实例\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e时间复杂度\u003c/th\u003e\n          \u003cth\u003e相关名称\u003c/th\u003e\n          \u003cth\u003e相关实例及说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ（1）\u003c/td\u003e\n          \u003ctd\u003e常数级\u003c/td\u003e\n          \u003ctd\u003e哈希表的查询和修改\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ（lg n）\u003c/td\u003e\n          \u003ctd\u003e对数级\u003c/td\u003e\n          \u003ctd\u003e二分搜索，其对数基数并不重要\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ（n）\u003c/td\u003e\n          \u003ctd\u003e线性级\u003c/td\u003e\n          \u003ctd\u003e列表的遍历\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ(nlgn)\u003c/td\u003e\n          \u003ctd\u003e线性对数级\u003c/td\u003e\n          \u003ctd\u003e任意值序列的最优化排序，其复杂度等同于Θ(lg n!)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ(n^2)\u003c/td\u003e\n          \u003ctd\u003e平方级\u003c/td\u003e\n          \u003ctd\u003e拿n个对象进行互相比对\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ(n^3)\u003c/td\u003e\n          \u003ctd\u003e立方级\u003c/td\u003e\n          \u003ctd\u003eFloyd-Warshall算法\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eO(n^k)\u003c/td\u003e\n          \u003ctd\u003e多项式级\u003c/td\u003e\n          \u003ctd\u003e基于n的k层嵌套循环（k为整数），且必须满足K \u0026gt; 0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΩ(K^n)\u003c/td\u003e\n          \u003ctd\u003e指数级\u003c/td\u003e\n          \u003ctd\u003e每n项产生一个子集（其中k = 2），且必须满足K \u0026gt; 1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eΘ(n!)\u003c/td\u003e\n          \u003ctd\u003e阶乘级\u003c/td\u003e\n          \u003ctd\u003e对n个值执行全排列操作\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"算法时间复杂度和五大经典排序算法"},{"content":"网站的组成 目前多数网站由域名，空间服务器，DNS域名解析，网站程序和数据库等组成 空间服务器（以下三种类型） 虚拟主机：指在网络服务器上划分一定的磁盘空间供用户放置站点和应用组件等，提供必要的站点功能，数据存放和传输功能。所谓虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的服务器划分成多个”虚拟“的服务器 独立服务器：指性能更强大，整体硬件完全独立的服务器，其cpu都在8核以上。 VPS（虚拟专用服务器）：将一个服务器分区成多个虚拟独立专享服务器的技术。 网站的程序:是建设与修改网站所使用的编程语言。\n网站的分类 资讯门户类网站 企业品牌网站 交易类网站 B2C（Business To Consumer）网站：商家——消费者，主要是购物网站，用于商家和消费者之间的买卖，如传统的百货商店和购物广场。 B2B（Business To Business）网站：商家——商家，主要是商务网站，用于商家之间的买卖，如传统的原材料市场和大型批发市场 C2C（Consumer To Consumer）网站：消费者——消费者，主要以拍卖网站为主，用于个人的物品的买卖，如传统的旧货市场，跳骚市场，废品收购站等。 办公及政府机构网站 企业办公事物类网站 政府办公类事物网站 互动游戏网站 功能性网站 这类网站的主要特征是将一个具有广泛需求的共能扩展开来，开发一套强大的功能体系，将功能的实现推向极致。如：百度，goolge 网站开发的常用术语 域名：用于标识一个或多个ip地址\nDNS：域名系统，用于跟踪计算机的域名及其在互联网上的相应的IP地址\n","permalink":"https://luenci.com/en/posts/%E7%BD%91%E7%AB%99%E6%A6%82%E5%BF%B5/","summary":"\u003ch1 id=\"网站的组成\"\u003e网站的组成\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e目前多数网站由域名，空间服务器，DNS域名解析，网站程序和数据库等组成\u003c/li\u003e\n\u003c/ul\u003e","title":"网站概念"},{"content":"计算机系统组成及工作原理简介 硬件系统 中央控制器 CPU 运算器 ALU\n又称算数逻辑部件，是计算机用来进行数据运算的部件\n算数运算\n加、减、乘、除四则运算 逻辑运算\n与、或、非、异或等逻辑操作，以及移位、比较和传送等操作，亦称算术逻辑部件（ALU） 控制器 Controller\n通过地址访问存储器，逐条取出选中单元的指令，分析指令，根据指令产生相应的控制信号，用于其他各个部件，控制其他部件完成指令要求的操作。 存储器 Memory：计算机中具有记忆能力的部件，用来存放程序或数据 内存储器\n内存，又称主存，是CPU能根据地址线直接寻址的存储空间，是计算机内部存放数据的硬件设备，是程序和数据存储的基本要素。 外存储器\n外存，又称辅存，作为一种辅助存储设备，主要用来存放一些暂时不用而又需长期保存的程序或数据。 输入设备 Input Device 用来输入程序和数据的部件：常用的输入设备有键盘，鼠标，传声器（麦克风），扫描仪，手写板，数码相机，摄像头等。 输出设备 Output Device 显示输出结果的部件 显示器，音响，打印机，绘图仪。 软件系统 系统软件 管理，监控，维护计算机正常工作和供用户操作使用的计算机软件。 应用软件 在某种具体应用，供最终用户使用的软件。 ","permalink":"https://luenci.com/en/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/","summary":"\u003ch1 id=\"计算机系统组成及工作原理简介\"\u003e计算机系统组成及工作原理简介\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/1563084893334.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"硬件系统\"\u003e硬件系统\u003c/h2\u003e\n\u003ch3 id=\"中央控制器-cpu\"\u003e中央控制器 CPU\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e运算器 ALU\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e又称算数逻辑部件，是计算机用来进行数据运算的部件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e算数运算\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e加、减、乘、除四则运算\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e逻辑运算\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e与、或、非、异或等逻辑操作，以及移位、比较和传送等操作，亦称算术逻辑部件（ALU）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e控制器  Controller\u003c/p\u003e","title":"计算机系统组成及工作原理简介"},{"content":"计算机网络概述 OSI七层协议 物理层 传输的数据类型：比特流 主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特 数据链路层 传输的数据类型：帧\n定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。\n网络层 传输的数据类型：数据报\n在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。 运输层 报文段/用户数据报\n定义了一些传输数据的协议和端口号（WWW端口80等），如：\nTCP（transmission control protocol –传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据） UDP（user datagram protocol–用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。 会话层 通过运输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名） 表示层 可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换码（EBCDIC），而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。 应用层 传输的数据类型：报文 五层协议 1 第五层——应用层(application layer) **应用层(application layer)：**是体系结构中的最高。直接为用户的应用进程（例如电子邮件、文件传输和终端仿真）提供服务。 在因特网中的应用层协议很多，如支持万维网应用的HTTP协议，支持电子邮件的SMTP协议，支持文件传送的FTP协议，DNS，POP3，SNMP，Telnet等等。 2. 第四层——运输层(transport layer) **运输层(transport layer)：**负责向两个主机中进程之间的通信提供服务。由于一个主机可同时运行多个进程，因此运输层有复用和分用的功能 复用，就是多个应用层进程可同时使用下面运输层的服务。 分用，就是把收到的信息分别交付给上面应用层中相应的进程。 运输层主要使用以下两种协议： **(1) 传输控制协议TCP(Transmission Control Protocol)：**面向连接的，数据传输的单位是报文段，能够提供可靠的交付。 **(2) 用户数据包协议UDP(User Datagram Protocol)：**无连接的，数据传输的单位是用户数据报，不保证提供可靠的交付，只能提供“尽最大努力交付”。 3. 第三层——网络层(network layer) 网络层(network layer)主要包括以下两个任务： (1) 负责为分组交换网上的不同主机提供通信服务。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫做IP数据报，或简称为数据报。 (2) 选中合适的路由，使源主机运输层所传下来的分组，能够通过网络中的路由器找到目的主机。 协议：IP,ICMP,IGMP,ARP,RARP 4. 第二层——数据链路层(data link layer) **数据链路层(data link layer)：**常简称为链路层，我们知道，两个主机之间的数据传输，总是在一段一段的链路上传送的，也就是说，在两个相邻结点之间传送数据是直接传送的(点对点)，这时就需要使用专门的链路层的协议。 在两个相邻结点之间传送数据时，数据链路层将网络层交下来的IP数据报组装成帧(framing)，在两个相邻结点之间的链路上“透明”地传送帧中的数据。 每一帧包括数据和必要的控制信息(如同步信息、地址信息、差错控制等)。典型的帧长是几百字节到一千多字节。 注：”透明”是一个很重要的术语。它表示，某一个实际存在的事物看起来却好像不存在一样。”在数据链路层透明传送数据”表示无力什么样的比特组合的数据都能够通过这个数据链路层。因此，对所传送的数据来说，这些数据就“看不见”数据链路层。或者说，数据链路层对这些数据来说是透明的。 (1)在接收数据时，控制信息使接收端能知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提取出数据部分，上交给网络层。 (2)控制信息还使接收端能检测到所收到的帧中有无差错。如发现有差错，数据链路层就简单地丢弃这个出了差错的帧，以免继续传送下去白白浪费网络资源。如需改正错误，就由运输层的TCP协议来完成。 5. 第一层——物理层(physical layer) **物理层(physical layer)：**在物理层上所传数据的单位是比特。物理层的任务就是透明地传送比特流。 ","permalink":"https://luenci.com/en/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch1 id=\"计算机网络概述\"\u003e计算机网络概述\u003c/h1\u003e\n\u003ch2 id=\"osi七层协议\"\u003eOSI七层协议\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/Lucareful/ImgRepo/master/img/hexo_img/image-20200501130320493.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"物理层\"\u003e物理层\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e传输的数据类型：比特流\u003c/li\u003e\n\u003cli\u003e主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据链路层\"\u003e数据链路层\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e传输的数据类型：帧\u003c/p\u003e","title":"计算机网络学习"},{"content":"高德无人机科技研发岗（测试工程师）面试总结 技术面 1.在51job上面投递的简历，本科院校“双非”，有一些项目经验。\n2.面试的时候是技术工程师来一面。问了我关于C++问题（本人主攻Python），有点把我问住了，\nquestion\nC11标准里，关于智能指针有什么新特性？ 回答链接：https://www.jianshu.com/p/4f58ebc43b82 4.我介绍了我的项目经验和实践能力。\n3.因为可能急需招人，面试官看了我的项目经验等，还是给了我机会。\n面人资 问我期望薪资多少？\n我说4k\n然后又问我最低能接受的薪资是多少？\n我说3.3K\n现在才明白这是个坑，真正谈的时候是按照你的最低接受薪资来谈的，千万不要说的很低很低。不然后面你就算再谈，也加不了多少钱。这个是我面试受益的第一点。\n还有就是，不要觉得自己的工作廉价，不敢往高的价格谈（我之前以为自己面试问题都没回答对，而且对C++不熟）不敢向高的要，后来觉得面试首先自己要看得起自己。不管怎么样，薪资不能太低。\n总结 ​\t这次短暂的面试让我受益了很多，从应届生小白里面跳出来。希望自己接受这个教训，不要急于求成。面试也应该诚实，懂就懂，不懂就不懂，最忌讳不懂装懂（自己心里要有数）。选择岗位应该长远考虑，不应该只看重面前的小利益。各方面应该考虑全面，多和家里的长辈等有经验的人沟通。\n","permalink":"https://luenci.com/en/posts/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/","summary":"\u003ch1 id=\"高德无人机科技研发岗测试工程师面试总结\"\u003e高德无人机科技研发岗（测试工程师）面试总结\u003c/h1\u003e\n\u003ch2 id=\"技术面\"\u003e技术面\u003c/h2\u003e\n\u003cp\u003e1.在\u003cstrong\u003e51job\u003c/strong\u003e上面投递的简历，本科院校“双非”，有一些项目经验。\u003c/p\u003e\n\u003cp\u003e2.面试的时候是技术工程师来一面。问了我关于C++问题（本人主攻Python），有点把我问住了，\u003c/p\u003e","title":"高德无人机科技研发岗（测试工程师）面试总结"}]